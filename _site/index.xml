<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>rostrum.blog</title>
<link>https://www.rostrum.blog/index.html</link>
<atom:link href="https://www.rostrum.blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Japes with R</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Fri, 31 Jan 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Dependency-free hex stickers with {hexbase}</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2025-01-31-hexbase/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2025-01-31-hexbase/resources/demo-hex.png" class="img-fluid figure-img" style="width:50.0%" alt="A bisque-coloured hexagon with a hotpink border. The R logo is above centre and tilted at a jaunty angle. The text 'example' writtenin Comic Sans and is copied and shifted to give the effect of a shadow, red on black. On the lower-right edge in blue papyrus font is the text 'visit https://rstats.lol ftw'."></p>
<figcaption class="figure-caption">Graphic design is my passion.</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I’ve made <a href="https://github.com/matt-dray/hexbase">{hexbase}</a>, a simple package to create hex stickers in R. The twist: it relies only on base R.</p>
<div class="tip">
<p> <b>Note</b></p>
<p>The package has been renamed to {gex} (loosely ‘grid’ + ‘hex’) and is now, ahem, ‘dependency-light’ to take advantage of other ‘gridverse’ packages (grid-graphics expansion packages made by Prof Murrell and others). The API for {gex} has also been updated relative to the version of {hexbase} shown in this post.</p>
</div>
</section>
<section id="stick-around" class="level2">
<h2 class="anchored" data-anchor-id="stick-around">Stick around</h2>
<p>Hex stickers are obviously popular in the R community <a href="http://hexb.in/">and beyond</a> for advertising your package or other projects<sup>1</sup>. So much so that there are packages to <a href="http://hexsession.liomys.mx/">organise your stickers</a>.</p>
<p>There’s some existing tools to help you make these:</p>
<ul>
<li><a href="https://github.com/GuangchuangYu/hexSticker">{hexSticker}</a> by Guangchuang Yu</li>
<li><a href="https://github.com/dmi3kno/bunny">{bunny}</a> by Dmytro Perepolkin, used in conjunction with {magick}</li>
<li>the <a href="https://github.com/ColinFay/hexmake">hexmake Shiny app</a><sup>2</sup> by Colin Fay</li>
</ul>
<p>Surprise, I’ve made another one: <a href="https://github.com/matt-dray/hexbase">{hexbase}</a>. Why? I wanted to learn about low-level plotting with <a href="https://www.stat.auckland.ac.nz/~paul/grid/grid.html">{grid}</a>, one of R’s built-in packages<sup>3</sup>. The constraint of using only {grid} in a simple, lightweight package seemed a good test (and a good wheeze).</p>
<p>It’s not perfect, but it does what I need and I learnt a lot.</p>
</section>
<section id="do-the-griddy" class="level2">
<h2 class="anchored" data-anchor-id="do-the-griddy">Do the griddy</h2>
<p>I reckon most R users make plots with <a href="https://ggplot2.tidyverse.org/">{ggplot2}</a> otherwise R’s native <code>plot()</code>ting system. I’ll bet {grid}<sup>4</sup> is used less often. It’s lower-level and you have to build everything up yourself, but it is extremely flexible.</p>
<p>To put it extremely simply, {grid} mostly works through a system of nested ‘viewports’ that you push and pop to add and arrange various graphics objects (grobs<sup>5</sup>) onto a graphics device.</p>
<p>This post isn’t a how-to for {grid} because there’s too much to cover, though I might write a separate post to explain how {hexbase} uses {grid}. I found <a href="https://www.stat.auckland.ac.nz/~paul/grid/grid.html">Prof Paul Murrell</a>’s writings really helpful, which is no surprise as Paul is {grid}’s author. See also <a href="https://bookdown.org/rdpeng/RProgDA/the-grid-package.html">Roger’s chapter</a> for an intro.</p>
<p>However, I did learn a few things I wanted to note to myself:</p>
<ul>
<li>the <code>grDevices::png()</code> function has a handy <code>bg</code> argument that you can set to <code>"transparent"</code></li>
<li>you can clip to a grob, which means you could clip out any text or image that falls outside the hexagon boundary</li>
<li>you can rotate a viewport but the x and y coordinates will be relative to the angle, so you need to put it inside another viewport that’s relative to the sticker’s coordinates</li>
<li>the hexagon is not as wide as it is tall, so the x-axis on the default ‘normalised parent coordinate’ system (where the axes are 0 to 1) has to be narrowed by setting the viewport’s <code>xscale</code> to hexagon limits, while the hexagon grob must have <code>default.units = "native"</code> so it’s placed relative to that <code>xscale</code></li>
<li>you can make the border by stacking a smaller hexagin on a bigger one, ensuring that the maximum extent of the sticker will fit inside a unit-1 square</li>
</ul>
</section>
<section id="cast-a-hex" class="level2">
<h2 class="anchored" data-anchor-id="cast-a-hex">Cast a hex</h2>
<p>If you want to give it a go, you can install {hexbase} <a href="https://github.com/matt-dray/hexbase">from GitHub</a> like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"remotes"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if not yet installed</span></span>
<span id="cb1-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matt-dray/hexbase"</span>)</span></code></pre></div>
</div>
<p>At time of writing, the package is at version 0.1.0. You can install that specific version by adding <code>@v0.1.0</code> to the end of the string in <code>install_github()</code>.</p>
<p>As mentioned, the package only imports {grid} and {grDevices} from base R. Otherwise it’s BYOIAF (‘bring your own images and fonts’) by importing with packages like {png} and by installing your fonts locally. Is that cheating? Nah, the <code>Imports</code> section in <a href="https://github.com/matt-dray/hexbase/blob/main/DESCRIPTION">the <code>DESCRIPTION</code> file</a> is clean as far as I’m concerned!</p>
<p>You can then build a sticker additively with a series of {hexbase} function calls:</p>
<ol type="1">
<li><code>open_device()</code> to set up a PNG graphics device with the dimensions of <a href="https://sticker.how/#type-hexagon">the Stickers Standard</a>.</li>
<li><code>add_hex()</code> to add the hexagon and border.</li>
<li><code>add_image()</code> to place an image (run multiple times for more images).</li>
<li><code>add_text()</code> to place and style text (run multiple times for more text).</li>
<li><code>close_device()</code> to close the PNG graphics device and save to file.</li>
</ol>
<p>You can set various text and image properties like position, size, colour and angle. Note that the coordinates are relative to a unit square<sup>6</sup> with axes of 0 to 1, a lower-left origin at [0, 0] and a centre at [0.5, 0.5]. Text and images will be clipped if they exceed the boundary of the hexagon. Check the help files for all the explanation.</p>
<p>Below is an extremely basic example to demonstrate a number of features. Note how you call each function independently (i.e.&nbsp;no pipes), much like writing base plots with successive calls to <code>plot()</code>, <code>points()</code>, <code>text()</code>, etc.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Somewhere to save it</span></span>
<span id="cb2-2">temp_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'Bring your own image', e.g. with {png}</span></span>
<span id="cb2-5">image_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"img"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rlogo.png"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"png"</span>)</span>
<span id="cb2-6">image_png <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> png<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readPNG</span>(image_path)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build up and write the sticker</span></span>
<span id="cb2-9">hexbase<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">open_device</span>(  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># open with sticker-standard dimensions</span></span>
<span id="cb2-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file_path =</span> temp_path</span>
<span id="cb2-11">)</span>
<span id="cb2-12">hexbase<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_hex</span>(</span>
<span id="cb2-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">border_width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.06</span>,</span>
<span id="cb2-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">border_col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hotpink3"</span>,</span>
<span id="cb2-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bg_col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bisque"</span></span>
<span id="cb2-16">)</span>
<span id="cb2-17">hexbase<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_image</span>(</span>
<span id="cb2-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">image_object =</span> image_png,</span>
<span id="cb2-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">image_y =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y = 0.5 is centre</span></span>
<span id="cb2-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">image_angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb2-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">image_width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i.e. half of the npc coord system</span></span>
<span id="cb2-22">)</span>
<span id="cb2-23">hexbase<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_text</span>(</span>
<span id="cb2-24">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_string =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example"</span>,</span>
<span id="cb2-25">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.495</span>,</span>
<span id="cb2-26">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_y =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.35</span>,</span>
<span id="cb2-27">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># named colour or hexadecimal</span></span>
<span id="cb2-28">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comic Sans MS"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># must be installed locally</span></span>
<span id="cb2-29">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or 'plain', 'italic', 'bold.italic'</span></span>
<span id="cb2-30">)</span>
<span id="cb2-31">hexbase<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_text</span>(  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add multiple text/images (in a loop?)</span></span>
<span id="cb2-32">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_string =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example"</span>,</span>
<span id="cb2-33">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.505</span>,</span>
<span id="cb2-34">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_y =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.34</span>,</span>
<span id="cb2-35">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>,</span>
<span id="cb2-36">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comic Sans MS"</span>,</span>
<span id="cb2-37">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span></span>
<span id="cb2-38">)</span>
<span id="cb2-39">hexbase<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_text</span>(</span>
<span id="cb2-40">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_string =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visit https://rstats.lol ftw"</span>,</span>
<span id="cb2-41">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.73</span>, </span>
<span id="cb2-42">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_y =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18</span>,</span>
<span id="cb2-43">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rotate to match lower-right edge</span></span>
<span id="cb2-44">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># point size</span></span>
<span id="cb2-45">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb2-46">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Papyrus"</span></span>
<span id="cb2-47">)</span>
<span id="cb2-48">hexbase<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">close_device</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># close viewports, write file</span></span></code></pre></div>
</div>
<p>You can then open the image for inspection. A quick way to do this from within R would be like <code>system(paste("open", temp_path))</code>. Note that you can’t rely on plot-window previews (they lie) when you’re developing your sticker. You must inspect the generated PNG file instead.</p>
<p>The (stunning) hex produced by this code can be found at the top of this post. Well done for being able to read this far after you burnt your eyes by looking at it.</p>
</section>
<section id="dont-get-too-hexcited" class="level2">
<h2 class="anchored" data-anchor-id="dont-get-too-hexcited">Don’t get too hexcited</h2>
<p>I might play around with this a bit more if I have time and if I want to delve deeper into {grid}. The {hexbase} package seems to work for my use-case, but it can undoubtedly be improved. <a href="https://github.com/matt-dray/hexbase/issues">Let me know</a> if there’s anything you can unstick. I’d be hexstatic, etc.</p>

</section>


<div id="quarto-appendix" class="default"><section id="environment" class="level3 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2025-02-22 18:00:11 GMT</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.4.2 (2024-10-31)
Platform: aarch64-apple-darwin20
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.4 compiler_4.4.2    fastmap_1.2.0     cli_3.6.3.9000   
 [5] tools_4.4.2       htmltools_0.5.8.1 rstudioapi_0.16.0 yaml_2.3.10      
 [9] rmarkdown_2.28    knitr_1.48        jsonlite_1.8.9    xfun_0.48        
[13] digest_0.6.37     rlang_1.1.4       fontawesome_0.5.2 evaluate_1.0.1   </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I’ve <a href="https://github.com/matt-dray/stickers">made a few</a> myself.↩︎</p></li>
<li id="fn2"><p>There seems to be <a href="https://github.com/ColinFay/hexmake/issues/22">a problem with accessing the app</a> at time of writing.↩︎</p></li>
<li id="fn3"><p><a href="https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/">Base slaps</a>, as they say.↩︎</p></li>
<li id="fn4"><p>Though {grid} actually underpins {ggplot2}, so {ggplot2} extension-writers will be familiar.↩︎</p></li>
<li id="fn5"><p>I swear this is the name of a <em>Magic: The Gathering</em> creature or something.↩︎</p></li>
<li id="fn6"><p>Well, the initial plotting area is a unit-1 square, but the width of the hexagon is less than 1 on this scale, so two slivers are removed from the left and right of the hexagon. You can get the vertex point locations of the hexagon with the unexported <code>hexbase:::.get_hex_coords(diameter = 1)</code> function.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>grid</category>
  <category>gex</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2025-01-31-hexbase/index.html</guid>
  <pubDate>Fri, 31 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2025-01-31-hexbase/resources/demo-hex.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>A roguelike sprite randomiser with Shiny</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-12-15-sprite-builder/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2024-12-15-sprite-builder/resources/sprites.gif" class="img-fluid figure-img" style="width:50.0%" alt="A web app titled 'roguelike sprite builder'. A 'reroll' button is pressed several times, which causes a 16-by-16 pixel character sprite to be regenerated with random hair, shirt, weapons, etc. There are additional buttons to download the image. The art is attributed to Kenney."></p>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I made <a href="https://matt-dray.github.io/roguelike-sprite-builder/">a quick Shiny app</a> that generates randomised characters for your next roguelike game, made with parts designed by <a href="https://www.kenney.nl/">Kenney</a>.</p>
</section>
<section id="standing-on-the-shoulders-of-kenney" class="level2">
<h2 class="anchored" data-anchor-id="standing-on-the-shoulders-of-kenney">Standing on the shoulders of Kenney</h2>
<p><a href="https://www.kenney.nl/">Kenney</a> makes free (<a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) assets for videogames, like <a href="https://www.kenney.nl/assets?search=tiny&amp;sort=update">the 16×16-pixel sprites</a> I used in <a href="https://www.rostrum.blog/posts/2024-07-14-tilebased/">a previous post</a>, where you could move a little character move around a procedural forest glade while being chased by a mouse.</p>
<p>Kenney also has <a href="https://kenney.nl/assets/roguelike-characters">a roguelike characters pack</a> where you can create your own characters by mixing and matching bodies, clothes and weapons. I’ve had a stab at making <a href="https://github.com/matt-dray/r.oguelike">a toy roguelike in R</a> before, but the ‘art’ and interface were purely composed of text.</p>
<p>With a long-term goal of creating a ‘real’ <a href="https://en.wikipedia.org/wiki/Roguelike">roguelike</a> game (<a href="https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/">maybe in R?</a>), I made a small app to combine sprite parts randomly to create new characters. It’s a pretty simple implementation for now, but I’m recording its current state in case I never come back to it.</p>
</section>
<section id="an-applike" class="level2">
<h2 class="anchored" data-anchor-id="an-applike">An ‘applike’</h2>
<p>The app is made with Shiny, deployed for the browser with <a href="https://posit-dev.github.io/r-shinylive/">{shinylive}</a> and served with GitHub Pages. The source for the app is <a href="https://github.com/matt-dray/roguelike-sprite-builder/">on GitHub</a>. I’ve embedded it below, but you can also visit it in <a href="https://matt-dray.github.io/roguelike-sprite-builder/">a standalone window</a>. It might take a moment to load.</p>
<iframe width="800" height="550" src="https://matt-dray.github.io/roguelike-sprite-builder/" title="roguelike-sprite-builder">
</iframe>
<p>Hit the reroll button to randomise the sprite parts. You can also download as PNG at 16×16 and 1024×1024 pixels or as an R-specific RDS file containing a nativeRaster representation of the sprite.</p>
</section>
<section id="going-rogue" class="level2">
<h2 class="anchored" data-anchor-id="going-rogue">Going rogue</h2>
<p>The basic approach was to:</p>
<ol type="1">
<li><a href="https://github.com/matt-dray/roguelike-sprite-builder/blob/main/data-raw/extract.R">‘Cut out’ and save each individual sprite part</a> from a single ‘spritesheet’.</li>
<li>Select sprite parts at random given some weighting (bodies are always selected, but weapons aren’t).</li>
<li>Store the part names in a <code>reactiveValues()</code> object so they can be called by the draw method (to display the sprite onscreen) and via the download options.</li>
<li>Use <code>image_mosaic()</code> from <a href="https://docs.ropensci.org/magick/articles/intro.html#layers">the {magick package}</a> to print sprite parts on top of each other and store this as a nativeRaster object.</li>
<li>Read the nativeRaster and use {grid} functions to draw it.</li>
</ol>
<p>Why not just draw the <code>image_mosaic()</code> object? Two reasons: I specifically want to download the nativeRaster version of the sprite (for later use in R) and because nativeRaster can then be used to produce an image at any size. The nativeRaster object is just a matrix of colour information, where each cell is a pixel of the image. That means you can re-plot it any size you want.</p>
<p>Of course, I could use <a href="https://coolbutuseless.github.io/package/nara/index.html">{nara} by Mike</a> (coolbutuseless) to ‘blit’ sprite parts to a single object, but I had some trouble using the package in a {shinylive} context as its not on CRAN and the GitHub repo <a href="https://github.com/matt-dray/roguelike-sprite-builder/issues/15">doesn’t have any releases with the necessary WebAssembly binaries</a> (yet?).</p>
<div class="tip">
<p> <b>Note</b></p>
<p>Mike points out that <a href="https://coolbutuseless.r-universe.dev/nara">{nara} is on R-universe</a>, which <a href="https://ropensci.org/blog/2023/11/17/runiverse-wasm/">builds WASM binaries for use by WebR applications</a> including {shinylive}. Totally forgot about this! Will give it a go.</p>
</div>
</section>
<section id="expanding-the-inventory" class="level2">
<h2 class="anchored" data-anchor-id="expanding-the-inventory">Expanding the inventory</h2>
<p>As ever, there were some learning points, like how:</p>
<ul>
<li>I used <code>ignoreNULL = FALSE</code> in <code>shiny::bindEvent()</code> on the step that chooses sprite parts, so that a sprite is created on startup without the need for the user to click the reroll button</li>
<li>there’s <a href="https://github.com/posit-dev/r-shinylive/tree/actions-v1/examples">a {shinylive} deployment GitHub Action</a> that can save the step of having to <code>shinylive::export()</code> your app whenever you make changes</li>
<li>the Chrome browser appears to have a problem downloading the files when the buttons are clicked, so there is a workaround at time of writing that’s used in <a href="https://shinylive.io/r/examples/#r-file-download">one of the examples</a> on the {shinylive} website</li>
</ul>
<p>Even something this simple can be a learning experience.</p>
</section>
<section id="permadeath" class="level2">
<h2 class="anchored" data-anchor-id="permadeath">Permadeath</h2>
<p>Obviously this app is more of a proof-of-concept (as ever on this blog). It’s not particularly special or all that useful outside of my needs.</p>
<p>Next steps might involve letting the user <a href="https://github.com/matt-dray/roguelike-sprite-builder/issues/1">select parts manually</a>, <a href="https://github.com/matt-dray/roguelike-sprite-builder/issues/5">styling and theming the app</a> and giving the sprites <a href="https://github.com/matt-dray/roguelike-sprite-builder/issues/9">a transparent background</a>.</p>
<p>You can add a pull request <a href="https://github.com/matt-dray/roguelike-sprite-builder">to the GitHub repo</a> if this interests you. But beware, adventurer, I can’t promise my code is less labyrinthine than a classic Rogue dungeon.</p>

</section>

<div id="quarto-appendix" class="default"><section id="environment" class="level3 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-12-24 08:57:34 GMT</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.4.2 (2024-10-31)
Platform: aarch64-apple-darwin20
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.4 compiler_4.4.2    fastmap_1.2.0     cli_3.6.3.9000   
 [5] tools_4.4.2       htmltools_0.5.8.1 rstudioapi_0.16.0 yaml_2.3.10      
 [9] rmarkdown_2.28    knitr_1.48        jsonlite_1.8.9    xfun_0.48        
[13] digest_0.6.37     rlang_1.1.4       fontawesome_0.5.2 evaluate_1.0.1   </code></pre>
</div>
</div>
</details>


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>kenney</category>
  <category>r</category>
  <category>shiny</category>
  <category>shinylive</category>
  <guid>https://www.rostrum.blog/posts/2024-12-15-sprite-builder/index.html</guid>
  <pubDate>Sun, 15 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-12-15-sprite-builder/resources/sprites.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Deploy a Shiny app to itch.io</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-11-16-itch/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2024-11-16-itch/resources/itch.png" class="img-fluid figure-img" style="width:100.0%" alt="The indie game distribution platform, itch.io, showing a pixel-editor tool made with R Shiny."></p>
<figcaption class="figure-caption">Graphic design is my passion.</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>As a test, I uploaded an R Shiny app to <a href="https://itch.io/">itch.io</a>, which is a platform for sharing indie games. <a href="https://mattdray.itch.io/little-pixel-fun-zone">It worked</a>.</p>
</section>
<section id="scratching-an-itch.io" class="level2">
<h2 class="anchored" data-anchor-id="scratching-an-itch.io">Scratching an itch.io</h2>
<p>Where can you host your Shiny app for free? Typical options are services like <a href="https://www.shinyapps.io/">shinyapps.io</a> or <a href="https://connect.posit.cloud/">Connect Cloud</a> by Posit.</p>
<p>I have another idea: <a href="https://itch.io/">itch.io</a> is a web-based platform known for hosting indie videogames, assets and other miscellaneous game-adjacent tools<sup>1</sup>. Developers can upload file bundles for users to download, or they can serve their HTML apps directly on the site.</p>
<p>Since <a href="http://localhost:6375/posts/2023-04-02-splendid-r-games/">R is a game engine</a><sup>2</sup>, why aren’t R users uploading their apps to itch.io?</p>
<p>Well, part of the problem is that you didn’t know this was possible. And also because it’s only recently that you can use <a href="https://shiny.posit.co/">{shinylive}</a> to convert your app to be served entirely in the browser with no need for a server<sup>3</sup>.</p>
<p><code>shinylive::export()</code> generates a folder containing your app and all the assets needed for deployment. You just need to zip it up and upload it to itch.io.</p>
<p>Which is <a href="https://mattdray.itch.io/little-pixel-fun-zone">exactly what I did</a> with <a href="https://github.com/matt-dray/little-pixel-fun-zone/">a toy pixel editor</a> that I made and <a href="https://www.rostrum.blog/posts/2024-09-15-shiny-pixel/">wrote about</a> recently.</p>
<p>This requires an itch.io account. When you upload the app you fill in a short pro forma, making sure to set the ‘kind of project’ to HTML and to tick a checkbox to say ‘this game will be played in the browser’. For my example, I also set the ‘classification’ to ‘tools’.</p>
<p>I can’t really think of a catch, but there are limitations around size and complexity: the upload must be under 1 GB and I think there’s a limit of 1000 files (this tripped me up when I tried once before).</p>
</section>
<section id="scratch-my-back" class="level2">
<h2 class="anchored" data-anchor-id="scratch-my-back">Scratch my back</h2>
<p>I did this for the lols, of course, but I do think itch.io is a viable option for certain types of app. It’s a platform for people to share their creativity and no-one cares what language was used if the outcome is fun or useful.</p>
<p>And if that wasn’t enough, you can also use itch.io as a payment platform. Users can leave you a little tip for your efforts.</p>
<p>So, what’s stopping you from becoming the first professional indie R game developer?</p>

</section>


<div id="quarto-appendix" class="default"><section id="environment" class="level3 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-11-16 20:28:05 GMT</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.4.0 (2024-04-24)
Platform: aarch64-apple-darwin20
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.3.9000   
 [5] tools_4.4.0       htmltools_0.5.8.1 rstudioapi_0.16.0 yaml_2.3.10      
 [9] rmarkdown_2.28    knitr_1.48        jsonlite_1.8.9    xfun_0.48        
[13] digest_0.6.37     rlang_1.1.4       evaluate_1.0.1   </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Kinda like <a href="https://store.steampowered.com/">Steam</a>, but with a greater focus on independent developers and the rest of us.↩︎</p></li>
<li id="fn2"><p>Are you sick of me saying this yet?↩︎</p></li>
<li id="fn3"><p>Which makes it possible to deploy apps for free via static-site services like <a href="https://pages.github.com/">GitHub Pages</a> or <a href="https://www.netlify.com/">Netlify</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>ich.io</category>
  <category>r</category>
  <category>shiny</category>
  <category>shinylive</category>
  <guid>https://www.rostrum.blog/posts/2024-11-16-itch/index.html</guid>
  <pubDate>Sat, 16 Nov 2024 00:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-11-16-itch/resources/itch.png" medium="image" type="image/png" height="90" width="144"/>
</item>
<item>
  <title>{sortable} card games in {shiny}</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-10-25-not-balatro/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2024-10-25-not-balatro/resources/cards.gif" class="img-fluid figure-img" style="width:100.0%" alt="Two rows of playing cards labelled 'pool' and 'hand'. Buttons are pressed to order the cards by suit and then by rank. Cards are dragged from the pool to the hand. An ace is dragged and the text updates from 'no hand' to 'high card'. Another ace and it changes to 'a pair'. A 'draw' button is pressed and two new cards are added to the pool. The pool is ordered again by rank. Then two queens are added to the hand and the text changes to 'two pair'."></p>
<figcaption class="figure-caption">You sunk my battleship!</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>Use <a href="https://rstudio.github.io/sortable/">{sortable}</a> in a <a href="https://shiny.posit.co/">{shiny}</a> app to build card games, maybe? I mocked up a demo and <a href="https://matt-dray.github.io/not-balatro/">made it available on the web</a> with <a href="https://posit-dev.github.io/r-shinylive/">{shinylive}</a>.</p>
</section>
<section id="balatro" class="level2">
<h2 class="anchored" data-anchor-id="balatro">Balatro</h2>
<p>LocalThunk<sup>1</sup>—the anonymous creator of <a href="https://en.wikipedia.org/wiki/Balatro_(video_game)"><em>Balatro</em></a>, the hit poker-inspired roguelike videogame<sup>2</sup>—revealed recently that 11,000 <em>years</em> of gameplay have been sunk into the game.</p>
<p>The average productivity of the universe has continued to drop now that the game is available on mobile. I am one of the suckers that made the purchase.</p>
<p>As a result, I wondered how viable a card game in R might be. Not just a simple blackjack simulator in the console, but a drag-and-droppable interface in the browser.</p>
<p>It must be possible, since <a href="https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/">R is a game engine (fight me)</a>.</p>
</section>
<section id="badlatro" class="level2">
<h2 class="anchored" data-anchor-id="badlatro">Badlatro</h2>
<p>And so I began experimenting.</p>
<p>I wanted to use {shiny} and existing R packages and to avoid writing much JavaScript and CSS. After all, it’s hard to fit in this frivolity after I’ve finished grinding all day at work and then grinding all night on <em>Balatro</em>.</p>
<p>Luckily, the <a href="https://rstudio.github.io/sortable/">{sortable}</a> package does most of the hard work. The package from Andrie, Barrett and Kent wraps the <a href="https://sortablejs.github.io/Sortable/">SortableJS</a> library and lets you drag list elements around, including into other lists.</p>
<p>Typically, you would use {sortable} to drag little boxes of text. The order can then be read to record preference or perhaps as part of a quiz<sup>3</sup>. But now I’ve hijacked it to show little images of cards that you can drag between a ‘pool’ (randomly drawn cards) and a ‘hand’ (cards selected by the user).</p>
</section>
<section id="app" class="level2">
<h2 class="anchored" data-anchor-id="app">App</h2>
<p>You can check out <a href="https://github.com/matt-dray/not-balatro">the source on GitHub</a> and <a href="https://matt-dray.github.io/not-balatro/">find the app deployed online</a>, thanks to {shinylive} and GitHub Pages. I’ve embedded it below as well<sup>4</sup> (it’ll take a moment to load). I recommend using this on desktop for now, rather than mobile.</p>
<iframe width="800" height="650" src="https://matt-dray.github.io/not-balatro/" title="not-balatro">
</iframe>
</section>
<section id="features" class="level2">
<h2 class="anchored" data-anchor-id="features">Features</h2>
<p>So far it doesn’t do much, but it does enough to prove the concept. Here’s some notes on a few of the technicals.</p>
<section id="counting-cards" class="level3">
<h3 class="anchored" data-anchor-id="counting-cards">Counting cards</h3>
<p>I iterated over all suits and ranks with <a href="https://docs.ropensci.org/magick/">{magick}</a> to apply text and symbols to a blank PNG image. I then read the 52 cards into a <code>shiny::tagList()</code> and passed that to the <code>label</code> argument of <code>sortable::list()</code>. From there, the images could be matched to sampled card names and displayed in the app. This is slightly off-label (ha) compared to ‘normal’ use of the package, which generally involves providing text rather than images.</p>
</section>
<section id="drag-til-you-drop" class="level3">
<h3 class="anchored" data-anchor-id="drag-til-you-drop">Drag ’til you drop</h3>
<p>{sortable} has a nice feature where you can drag list elements between lists within ‘buckets’. I opted instead to use two <code>rank_list()</code>s that shared a <code>group</code> name in their <code>options</code> argument. This meant I could restrict the list size (8 cards in the pool, 5 in hand), thanks to some JavaScript from Barrett in a response to <a href="https://forum.posit.co/t/shiny-sortable-how-to-limit-number-of-items-that-can-be-dropped/69233/2">a Posit community post</a>.</p>
</section>
<section id="a-bit-flushed" class="level3">
<h3 class="anchored" data-anchor-id="a-bit-flushed">A bit flushed</h3>
<p>Detecting poker hands is tricky because you want to recognise that two jacks and three kings is a full house, not a pair of jacks or a three-of-a-kind, for example. I also made things harder by wanting to evaluate poker hands on the fly rather than when the user submits the hand.</p>
<p>I read about lots of very clever algorithms to do this. But I basically just brute-forced it, lol. It’s basically <code>if</code> statements that evaluate and return strongest hands first. So the function will assess a royal flush (i.e.&nbsp;ace, king, queen, jack and 10 of the same suit) and confirm it before it checks for a more basic straight (consecutive ranks of any suit) or a flush (any suit of non-consecutive rank).</p>
</section>
<section id="hit-the-deck" class="level3">
<h3 class="anchored" data-anchor-id="hit-the-deck">Hit the deck</h3>
<p>The deck is stored in ‘dynamic memory’ as a <code>reactieValues()</code> element. When cards are drawn, they’re removed from the deck and can’t be redrawn. This meant I could add a ‘draw’ button that adds previously unseen cards into the pool’s empty slots. Of course, we can take the length of the deck and present this back to the user as well.</p>
</section>
</section>
<section id="improvements" class="level2">
<h2 class="anchored" data-anchor-id="improvements">Improvements</h2>
<p>There’s many features that would improve the demo app. Below are some examples: one seems like it’s not possible, one won’t add that much to what I’ve learnt so far, one is obvious and one is just… bad programming.</p>
<section id="stop-n-swop" class="level3">
<h3 class="anchored" data-anchor-id="stop-n-swop">Stop ‘n’ swop</h3>
<p>It’s satisfying to pick up a card, drag it to a new position and drop it between the cards at that location. This action feels how it would when sorting real cards in your real hand. I’d like the option to be able to directly <em>swap</em> two cards between the pool and hand, though. This would be useful if you change your mind about the hand you’re building as new cards are drawn. As far as I can tell, SortableJS allows <code>swap = TRUE</code> within each rank list and if they are part of the same <code>group</code> then you can swap between them. I haven’t yet found a way to allow swapping to happen <em>only</em> when moving cards between lists, however.</p>
</section>
<section id="diss-card" class="level3">
<h3 class="anchored" data-anchor-id="diss-card">Diss card</h3>
<p>The awkward thing about having a ‘pool’ and a ‘hand’ is that there’s no natural way to discard. I haven’t properly explored solutions for earmarking cards to toss; as it stands, you have to drag the card somewhere for an action to be performed on it. The answer might be to drag these cards to a third area, where they’re binned. Compare this to a game like <em>Balatro</em>, where you first select cards in your hand and then click a button to either play or discard them.</p>
</section>
<section id="u-and-i" class="level3">
<h3 class="anchored" data-anchor-id="u-and-i">U and I</h3>
<p>Of course, as a proof of concept, I haven’t paid much attention to the user interface and experience. You can imagine making prettier cards, a nice green baise to mimic a poker table and even some animations to show cards being dealt. For now, I think the janky plainness is a good indicator that it’s just a demo.</p>
</section>
<section id="card-trick" class="level3">
<h3 class="anchored" data-anchor-id="card-trick">Card trick</h3>
<p>Oh yeah, haha, sometimes the cards disappear. It can happen when you drag from the pool to the hand, then back again and hit the ‘rank’ or ‘suit’ sorting buttons. We know that the card returns correctly to the pool by checking <code>input$pool_list</code> in the app, but there’s some issue with displaying the image, maybe? This is the only true bug that needs fixing, but I’d rather just write this blog post and deal with it later<sup>5</sup>.</p>
</section>
</section>
<section id="a-gamble" class="level2">
<h2 class="anchored" data-anchor-id="a-gamble">A gamble</h2>
<p>Obviously this isn’t yet a ‘game’. There’s a few ways this could go:</p>
<ul>
<li>remake <em>Balatro</em> in R (absolutely no chance)</li>
<li>make a small simulator of something like <a href="https://en.wikipedia.org/wiki/Video_poker">video poker</a> (too basic?)</li>
<li>create a new, simple game to chase high scores with combos of poker hands, discards and chip ‘bets’, perhaps incorporating some <em>Balatro</em>-inspired joker-activated bonuses or wild cards <a href="https://en.wikipedia.org/wiki/Dungeons_%26_Degenerate_Gamblers">like in <em>Dungeons and Degenerate Gamblers</em></a> (might actually be fun)</li>
<li>do nothing (appealing option)</li>
</ul>
<p>Feel free to chip (HA HA HA) in <a href="https://github.com/matt-dray/not-balatro/issues">your ideas</a>.</p>

</section>


<div id="quarto-appendix" class="default"><section id="environment" class="level3 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-10-26 21:53:18 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.4.0 (2024-04-24)
Platform: aarch64-apple-darwin20
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.3.9000   
 [5] tools_4.4.0       htmltools_0.5.8.1 rstudioapi_0.16.0 yaml_2.3.10      
 [9] rmarkdown_2.28    knitr_1.48        jsonlite_1.8.9    xfun_0.48        
[13] digest_0.6.37     rlang_1.1.4       evaluate_1.0.1   </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Apparently LocalThunk’s name <a href="https://youtu.be/iaIu0PT8n_o?t=47">was inspired partly by R</a>.↩︎</p></li>
<li id="fn2"><p>If you’ve been here before, you know I’ve toyed around with roguelikes in R with the concept packages <a href="https://github.com/matt-dray/r.oguelike/">{r.oguelike}</a> and <a href="https://github.com/matt-dray/tilebased">{tilebased}</a>.↩︎</p></li>
<li id="fn3"><p>For example, Rasmus has done this recently in the <a href="https://www.sumsar.net/climate-impact-sorting-challenge/">climate impact sorting challenge</a>. I scored 1 on my first go, ha.↩︎</p></li>
<li id="fn4"><p>Psst, click the joker card at the bottom of the app to see ‘dev mode’ (you’ll have to scroll down in the embedded app to see it).↩︎</p></li>
<li id="fn5"><p>This is basically the entire modus operandi of this blog, lol.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>games</category>
  <category>r</category>
  <category>shiny</category>
  <category>shinylive</category>
  <category>sortable</category>
  <guid>https://www.rostrum.blog/posts/2024-10-25-not-balatro/index.html</guid>
  <pubDate>Thu, 24 Oct 2024 23:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-10-25-not-balatro/resources/cards.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Little pixel fun zone</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-09-15-shiny-pixel/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2024-09-15-shiny-pixel/resources/SANIC.png" class="img-fluid figure-img" style="width:50.0%" data-fig.alt="Screenshot of a web app called 'little pixel fun zone'. in the centre is a child's drawing of the fast blue hedgehog rendered in blocky square pixels. Under the image are some buttons to select a colour, undo, fill and downloade outputs."></p>
<figcaption class="figure-caption">Fast blue hedgehog man in Little Pixel Fun Zone, Act 1 (original art by the author).</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I made a <a href="https://matt-dray.github.io/little-pixel-fun-zone/">simple toy pixel-editor for the browser</a>, which helped me learn about reacting to user clicks and implementing undo/redo in {shiny}.</p>
</section>
<section id="just-browsing" class="level2">
<h2 class="anchored" data-anchor-id="just-browsing">Just browsing</h2>
<p>My <a href="https://github.com/matt-dray/pixeltrix">{pixeltrix} package</a> is a local pixel editor you can run from the R console<sup>1</sup>. It’s intentionally simple. You start a graphics device and click the squares (‘pixels’), cycling through your provided colour palette. You’re returned a little pixeltrix-class matrix as a memento, which you can re-edit later.</p>
<p>It might be nice to have a browser-based version, but I’ve never really had the time and figured it would be too fiddly. Well guess what, I had some time and it wasn’t that fiddly.</p>
<p>I’ve been learning a bit more <a href="https://shiny.posit.co/">{shiny}</a> of late. This mini project was a good way to learn a few things that might come in handy later. In particular, how to:</p>
<ol type="1">
<li>Read a clicked point on a plot and react to it.</li>
<li>Implement a basic undo/redo feature.</li>
</ol>
<p>This is a reminder to myself of how to do these things.</p>
</section>
<section id="app" class="level2">
<h2 class="anchored" data-anchor-id="app">App</h2>
<p>The app is available <a href="https://matt-dray.github.io/little-pixel-fun-zone/">via {shinylive} deployed via GitHub Pages</a> and <a href="https://github.com/matt-dray/little-pixel-fun-zone">the source is on GitHub</a> (v0.3.0 at time of writing).</p>
<p>There’s (intentionally) only a few features. You can:</p>
<ul>
<li>click a pixel to toggle it on/off</li>
<li>change the colour, thanks to <a href="https://daattali.com/shiny/colourInput/">Dean Attali’s {colourpicker}</a></li>
<li>undo/redo (with a very short ‘memory’)</li>
<li>flood fill</li>
<li>have an assistant ✨AI✨ draw a picture for you<sup>2</sup></li>
<li>download a matrix representation of your treasured art (pixeltrix-class, for my own needs) as an RDS file</li>
<li>download a png copy of your treasured art</li>
</ul>
<p>Wow!</p>
<p>Here’s an embedded version of the app (may take a moment to load):</p>
<iframe width="800" height="585" src="https://matt-dray.github.io/little-pixel-fun-zone/" title="roguelike-sprite-builder">
</iframe>
<div class="tip">
<p> <b>Note</b></p>
<p>To test the limits of {shinylive}, I also managed to <a href="https://mattdray.itch.io/little-pixel-fun-zone">deploy the app to itch.io</a>, the indie-game dispensation platform! You can read <a href="https://www.rostrum.blog/posts/2024-11-16-itch/">a separate blog post</a> about that.</p>
</div>
</section>
<section id="tricks" class="level2">
<h2 class="anchored" data-anchor-id="tricks">Tricks</h2>
<p>I mentioned there were two things I learnt in particular: handling click-reacts and undo/redo.</p>
<section id="click-react" class="level3">
<h3 class="anchored" data-anchor-id="click-react">Click-react</h3>
<p>Thanks to the <code>locator()</code> function (witchcraft), {pixeltrix} reads the coordinates of a user’s click on the plotting device. The returned values can be used to identify the nearest ‘pixel’ clicked.</p>
<p>With {shiny} we can generate a plot output and then capture an input from it when clicked<sup>3</sup> using the handy <code>click</code> argument to <code>plotOutput()</code>.</p>
<p>In the example but of UI code below, we output a plot with ID <code>pixel_grid</code> that was generated in the server. Then, a <code>click</code> on that plot in the app would be registered as the ID <code>clicked_point</code> for retrieval in the server. In my case, I took the x and y elements of that object and matched them to the nearest pixel (using self-plagiarised {pixeltrix} code).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plotOutput</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pixel_grid"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the plot of the pixel grid</span></span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">click =</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clickOpts</span>(</span>
<span id="cb1-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clicked_point"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to retrieve as input$clicked_point in server</span></span>
<span id="cb1-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">clip =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># restrict to plot bounds?</span></span>
<span id="cb1-6">  )</span>
<span id="cb1-7">)</span></code></pre></div>
</div>
<p>I also made the click trigger <code>observeEvent()</code> to refresh the plot given the user’s selection. So, the user clicks the plot and the nearest pixel is toggled.</p>
</section>
<section id="undoredo" class="level3">
<h3 class="anchored" data-anchor-id="undoredo">Undo/redo</h3>
<p>If you misclick a pixel in your picture you could correct it by changing the colour in the colourpicker and re-clicking the errant point. But that takes, ooh, perhaps a couple of seconds. Instead, it seems conceptually more fun to have an undo button. And imagine how exhilarating it would be if that button toggled to redo after it was clicked? I know, calm down.</p>
<p>So, there’s probably lots of ways to do this, but I settled on bookkeeping with ‘memory slots’ in a sort-of cyber-goldfish brain, using <code>reactiveValues()</code>.</p>
<p>The image is stored as a matrix object, with each cell representing the current state of the corresponding pixel when drawn. The current state of the matrix is stored in the first (of two) memory slots, while the second slot is the previous matrix state. Each time you update the drawing, slot 1 overwrites slot 2 and the new matrix takes its place in slot 1.</p>
<p>So, for example, the app starts up with a ‘blank’ grid:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">pixel_matrices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveValues</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slot1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.gen_grid</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E5E5E5"</span>))</span></code></pre></div>
</div>
<p>And then <code>observeEvent()</code> handles things when a click occurs. The click coordinates and currently-selected colour are used to toggle or adjust a pixel in the underlying matrix. The resulting, new, version of the matrix is added to slot 1 and the prior version slips into slot 2.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>clicked_point, {  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># trigger on click</span></span>
<span id="cb3-2">  </span>
<span id="cb3-3">  matrix_updated <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.gen_updated_pixel_matrix</span>(  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update current drawing</span></span>
<span id="cb3-4">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isolate</span>(pixel_matrices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slot1"</span>]]),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the current drawing</span></span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pixel_coords</span>(),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># location of clicked point to update</span></span>
<span id="cb3-6">    input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>selected_colour  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># current user-selected colour</span></span>
<span id="cb3-7">  )</span>
<span id="cb3-8">  </span>
<span id="cb3-9">  pixel_matrices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slot2"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pixel_matrices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slot1"</span>]]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># current is now old</span></span>
<span id="cb3-10">  pixel_matrices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slot1"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> matrix_updated  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># new is now current</span></span>
<span id="cb3-11">  </span>
<span id="cb3-12">})</span></code></pre></div>
</div>
<p>Could the so-called cyber-goldfish brain be larger, with more brain slots? No, because then it would be a cyber-elephant and I think that mental image is less funny. But yes, you could probably create slots on the fly and have the ability to undo much further back in history.</p>
<p>So, to perform a do-over, we just need to access the older slot with a button click. The icon for the button is stored in a <code>reactiveVal()</code> that starts as ‘undo’ arrow. When clicked, we flip the memory slots to put the older version in slot 1 and also update the icon to be a ‘redo’ arrow. Another click of the button and the situation will revert again<sup>4</sup>. Voila: time travel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">button_icon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveVal</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rotate-left"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># starting condition</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>button_undo, {  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># trigger on click</span></span>
<span id="cb4-4">    </span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Switch 'memory' slots</span></span>
<span id="cb4-6">    slot1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pixel_matrices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slot1"</span>]]</span>
<span id="cb4-7">    slot2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pixel_matrices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slot2"</span>]]</span>
<span id="cb4-8">    pixel_matrices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slot2"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> slot1</span>
<span id="cb4-9">    pixel_matrices[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slot1"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> slot2</span>
<span id="cb4-10">    </span>
<span id="cb4-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Invert undo/redo icon</span></span>
<span id="cb4-12">    </span>
<span id="cb4-13">    current_icon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">undo_button_icon</span>()</span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (current_icon <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rotate-left"</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">undo_button_icon</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rotate-right"</span>)</span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (current_icon <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rotate-right"</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">undo_button_icon</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rotate-left"</span>)</span>
<span id="cb4-16">    </span>
<span id="cb4-17">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateActionButton</span>(</span>
<span id="cb4-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"button_undo"</span>,</span>
<span id="cb4-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">icon</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">button_icon</span>())</span>
<span id="cb4-20">    )</span>
<span id="cb4-21">    </span>
<span id="cb4-22">  })</span></code></pre></div>
</div>
<p>Inelegant, perhaps, but manageable<sup>5</sup>.</p>
</section>
</section>
<section id="fiddly-is-money" class="level2">
<h2 class="anchored" data-anchor-id="fiddly-is-money">Fiddly is money</h2>
<p>There’s a number of features I could implement, like arbitrary pixel-grid sizes, uploading a matrix to continue editing it, or maybe even multi-select with click-and-drag (is this even possible?).</p>
<p>If only I could perceive that I have more time and that the fiddlyometer gauge was lower. Yes, this is current me goading future me.</p>
<p>Until then, drop bug reports and how to fix them in <a href="https://github.com/matt-dray/little-pixel-fun-zone/issues">the issues</a>.</p>
<p>Also use the app to draw a classic videogame action scene and send it to me, obviously (see inspiration at top of post).</p>

</section>


<div id="quarto-appendix" class="default"><section id="environment" class="level3 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2025-01-15 21:05:27 GMT</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.4.2 (2024-10-31)
Platform: aarch64-apple-darwin20
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.4 compiler_4.4.2    fastmap_1.2.0     cli_3.6.3.9000   
 [5] tools_4.4.2       htmltools_0.5.8.1 rstudioapi_0.16.0 yaml_2.3.10      
 [9] rmarkdown_2.28    knitr_1.48        jsonlite_1.8.9    xfun_0.48        
[13] digest_0.6.37     rlang_1.1.4       fontawesome_0.5.2 evaluate_1.0.1   </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>You can read about {pixeltrix} in <a href="https://www.rostrum.blog/index.html#category=pixeltrix">other posts</a>.↩︎</p></li>
<li id="fn2"><p>This most often <em>looks</em> like random noise, but I’m sure that’s because of the training set or something. Maybe squint? I’ve been told that robot self-portraits sometimes appear, but I’m sure that’s just a hallucination.↩︎</p></li>
<li id="fn3"><p>Note also that you can perform actions on <code>dblclick</code>, <code>hover</code> and <code>brush</code>, not just a single click.↩︎</p></li>
<li id="fn4"><p>If you undo and then make a new click, then the undo/redo button will continue to show the ‘redo’ icon. Subtle, but to avoid this, you must reset the <code>reactiveVal()</code> to show the ‘undo’ icon if you perform any other actions after undoing.↩︎</p></li>
<li id="fn5"><p>If we messed with time travel and things didn’t go a bit <a href="https://en.wikipedia.org/wiki/Primer_(film)"><em>Primer</em></a>, then I’d say we’ve done well.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>pixeltrix</category>
  <category>r</category>
  <category>shiny</category>
  <guid>https://www.rostrum.blog/posts/2024-09-15-shiny-pixel/index.html</guid>
  <pubDate>Sat, 14 Sep 2024 23:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-09-15-shiny-pixel/resources/SANIC.png" medium="image" type="image/png" height="202" width="144"/>
</item>
<item>
  <title>Tile-style sprite delight</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-07-14-tilebased/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2024-07-14-tilebased/resources/demo.gif" class="img-fluid figure-img" style="width:100.0%" data-fig.alt="A pixel-sprite human character is moving around on some grassy tiles in a clearing of a procedurally generated forest. A rat is chasing him down. This is happening in an R Graphics Device."></p>
<figcaption class="figure-caption">An enemy. Or a friend?</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p><a href="https://github.com/matt-dray/tilebased">An experiment</a> with <a href="https://coolbutuseless.github.io/package/nara/index.html">graphical advancements</a> in tile-based games made for R.</p>
</section>
<section id="based-tiles" class="level2">
<h2 class="anchored" data-anchor-id="based-tiles">Based tiles</h2>
<p>You know by now that <a href="https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/">R is unequivocally a game engine</a>.</p>
<p>In this vein, Mike Cheng (coolbutuseless) has been hard at work updating the <a href="https://coolbutuseless.github.io/package/nara/index.html">{nara}</a> package, which allows for <a href="https://github.com/coolbutuseless/narademos">fast rendering of pixel-based graphics</a><sup>1</sup>. This can make games easier to develop, especially in tandem with Mike’s <a href="https://coolbutuseless.github.io/package/eventloop/index.html">{eventloop}</a> package for reading continuous input from the player’s keyboard.</p>
<p>As a result, I’ve taken some of the ‘engine’ from <a href="https://github.com/matt-dray/r.oguelike">{r.oguelike}</a>—a toy dungeon-crawling game in an R package<sup>2</sup>—and made it draw graphics instead of just printing to the console<sup>3</sup>. The outcome from this test is the <a href="https://github.com/matt-dray/tilebased">demo {tilebased} package</a>.</p>
<p>It also borrows grass, tree, person and rat sprites from <a href="https://www.kenney.nl/">Kenney’s</a> free and excellent <a href="https://www.kenney.nl/assets?search=tiny&amp;sort=update">‘Tiny’ asset packs</a>. They’re 16×16 pixels, shown here at actual size:</p>
<p><img src="https://www.rostrum.blog/posts/2024-07-14-tilebased/resources/grass.png" class="img-fluid" data-fig.alt="A square of 16 by 16 pixels with a green grass pattern." width="16"> <img src="https://www.rostrum.blog/posts/2024-07-14-tilebased/resources/tree.png" class="img-fluid" data-fig.alt="A pixelated tree with a thick black outline that fits inside limits of 16 by 16 pixels." width="16"> <img src="https://www.rostrum.blog/posts/2024-07-14-tilebased/resources/player.png" class="img-fluid" data-fig.alt="A pixelated human player-character with a thick black outline that fits inside limits of 16 by 16 pixels." width="16"> <img src="https://www.rostrum.blog/posts/2024-07-14-tilebased/resources/rat.png" class="img-fluid" data-fig.alt="A pixelated grey rat enemy-character with a thick black outline that fits inside limits of 16 by 16 pixels." width="16"></p>
<p>Very cute.</p>
</section>
<section id="install" class="level2">
<h2 class="anchored" data-anchor-id="install">Install</h2>
<p>I put this experiment into an R package so it’s easier to develop and play around with.</p>
<p>But note that the package’s functionality is dependent on your operating system. It’ll work on macOS, but not Windows, due to the required graphics device.</p>
<p>You can install <a href="https://github.com/matt-dray/tilebased">from GitHub</a> like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matt-dray/tilebased"</span>)</span></code></pre></div>
</div>
<p>As well as {nara} and {eventloop}, it depends on my GitHub-only <a href="https://github.com/matt-dray/r.oguelike">{r.oguelike}</a> package.</p>
<p>You can then start a game, which opens a graphics device. Use your arrow keys to move around. This will look like the gif at the top of this page.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">tilebased<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">play</span>()</span></code></pre></div>
</div>
<p>As it stands, I haven’t built a proper game-over condition for this experiment. Collide with the enemy and the game will crash (consider this a feature, not a bug!).</p>
</section>
<section id="process" class="level2">
<h2 class="anchored" data-anchor-id="process">Process</h2>
<p>The user just sees graphics in a window. The basic process-loop underlying this is roughly:</p>
<ol type="1">
<li>Create a ‘board mesh’<sup>4</sup>, a matrix object that encodes the play-area layout and content.</li>
<li>Place the player (<code>@</code>) and enemy (<code>e</code>) actors randomly in a cell (<code>.</code>) of the board mesh, avoiding each other and cells that contain obstacles (<code>#</code>).</li>
<li>Generate a ‘navigation mesh’ that labels each cell with a distance value to the player (i.e.&nbsp;how many tiles away from the player).</li>
<li>Map the board mesh to pixels of the graphics device, where the board-mesh cell contents define the tiles to be selected for display. Draw the pixels to the device.</li>
<li>Accept realtime keypress input from the user and move the player, then consequently move the enemy down the distance gradient of the navmesh. Redraw.</li>
<li>Repeat step 5.</li>
</ol>
</section>
<section id="structures" class="level2">
<h2 class="anchored" data-anchor-id="structures">Structures</h2>
<p>I think it’s worth explaining a bit more about how the game board is represented, translated and drawn.</p>
<section id="board-mesh" class="level3">
<h3 class="anchored" data-anchor-id="board-mesh">Board mesh</h3>
<p>The board mesh is a matrix represenation of the board layout and contents.</p>
<p>As a simple example, you could have a 5×6 board-mesh matrix like below, where <code>#</code> is an impenetrable obstacle, <code>.</code> is a traversable floor tile, <code>@</code> is the player and <code>e</code> the enemy:</p>
<pre><code>     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] "#"  "#"  "#"  "#"  "#"  "#" 
[2,] "#"  "@"  "."  "."  "."  "#" 
[3,] "#"  "."  "#"  "#"  "."  "#" 
[4,] "#"  "."  "."  "e"  "."  "#" 
[5,] "#"  "#"  "#"  "#"  "#"  "#" </code></pre>
</section>
<section id="nav-mesh" class="level3">
<h3 class="anchored" data-anchor-id="nav-mesh">Nav mesh</h3>
<p>The navigation (nav) mesh places a value in each cell, which is the distance between that cell and the player’s cell.</p>
<p>The enemy character will travel from high to low distance values, so will travel left on the board mesh from index [4,4] to [4,3], which decreases the distance value from 4 to 3.</p>
<pre><code>     [,1] [,2] [,3] [,4] [,5] [,6]
[1,] Inf  Inf  Inf  Inf  Inf  Inf 
[2,] Inf  0    1    2    3    Inf 
[3,] Inf  1    Inf  Inf  4    Inf 
[4,] Inf  2    3    4    5    Inf 
[5,] Inf  Inf  Inf  Inf  Inf  Inf </code></pre>
</section>
<section id="board" class="level3">
<h3 class="anchored" data-anchor-id="board">Board</h3>
<p>The board the users actually see is a pixel-based translation of the underlying board mesh.</p>
<p>Each cell of the board mesh is drawn to the screen as tiles. If each tile is 16×16 pixels, then our example board is 80×96 pixels. The upper-left corner of the first tile will be placed at pixel position [1,1]. By extension, the enemy-rat tile in board-mesh cell [4,4] will, for example, occupy the square of pixels at 49 to 64 across and 49 to 64 down.</p>
<p><img src="https://www.rostrum.blog/posts/2024-07-14-tilebased/resources/mini-demo.png" class="img-fluid" data-fig.alt="A 5 by 6 tile map. Every tile slot has a grass tile. There's also a pixel-sprite human character at a position 2 tiles along and 2 tiles down and an enemy rat character at a position 4 tiles along and 4 down. There are tree sprites all the way around the edge and two more in the centre, creating a donut shape of grass that the player and enemy can move within."></p>
<p>The tiles themselves are stored as nativeRaster class, which is a matrix format with colour encoded in each cell as integer values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(tilebased<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>grass)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> 'nativeRaster' int [1:16, 1:16] -9845116 -9845116 -9845116 -9845116 -9845116 -9845116 -9845116 -9845116 -9845116 -9845116 ...
 - attr(*, "channels")= int 4</code></pre>
</div>
</div>
<p>These can be overplotted by {nara}, which means we can have grass tiles covering the whole board and partially-transparent tree, player and enemy sprites drawn on top.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(nara)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(tilebased<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>grass)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># place grass first</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(tilebased<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>player)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then player over the top</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.rostrum.blog/posts/2024-07-14-tilebased/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" alt="A pixelated human sprite is plotted over a pixelated green grass tile." width="192"></p>
</div>
</div>
<p>To extend this behvaiour for a more exciting adventure, {tilebased} uses the <code>r.oguelike::create_dungeon()</code> function to create a procedural map that’s randomised with each new game. Here’s a 20×32-tile example:</p>
<p><img src="https://www.rostrum.blog/posts/2024-07-14-tilebased/resources/demo.png" class="img-fluid" style="width:100.0%" data-fig.alt="Pixel-sprite human and rat characters are placed on some grassy tiles in a clearing of a procedurally generated forest. There is a forest around the edge of the map and some dotted within the interior. The human is hiding behind a tree."></p>
</section>
</section>
<section id="the-next-level" class="level2">
<h2 class="anchored" data-anchor-id="the-next-level">The next level</h2>
<p>For now, I’ve shown it’s possible to convert a board-mesh matrix into tile-based graphics with user control.</p>
<p>A lot of functionality is missing, which prevents this concept from having a true gameloop. I may work to improve this in future.</p>
<p>For example, {r.oguelike} has auto-battling and a basic inventory system to collect gold and food; you can imagine showing these in a graphical overlay. Perhaps there could be doorways to new areas of a larger map. It could also use a larger tileset and make use of ‘compound tiles’ that fit together to produce larger sprites. I could also make my own sprites with help from <a href="https://github.com/matt-dray/pixeltrix">my {pixeltrix} package</a>.</p>
<p>In addition, I note that Mike is looking at improved sound generation in R. A bangin’ chiptune would complement {tilebased} well, which makes me wonder if a tile-based rhythm game, like <a href="https://en.wikipedia.org/wiki/Crypt_of_the_NecroDancer">Crypt of the Necrodancer</a>, would be possible.</p>

</section>


<div id="quarto-appendix" class="default"><section id="environment" class="level3 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-07-14 13:49:17 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.4.0 (2024-04-24)
Platform: aarch64-apple-darwin20
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] nara_0.1.1.9016

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.3.9000   
 [5] tools_4.4.0       htmltools_0.5.8.1 yaml_2.3.8        tilebased_0.3.0  
 [9] rmarkdown_2.26    grid_4.4.0        knitr_1.46        jsonlite_1.8.8   
[13] xfun_0.43         digest_0.6.35     rlang_1.1.4.9000  evaluate_0.23    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>And has one of the best hex stickers around.↩︎</p></li>
<li id="fn2"><p>I’ve written <a href="https://www.rostrum.blog/index.html#category=r.oguelike">a few posts</a> about {r.oguelike} if you want to learn more.↩︎</p></li>
<li id="fn3"><p>I <a href="https://www.rostrum.blog/posts/2022-06-28-isometric-dungeon/">played around with this idea</a> once before, rendering a {r.oguelike} dungeon, player and enemy as isometric-view cubes—thanks to Mike’s <a href="https://github.com/coolbutuseless/isocubes">{isocubes}</a> package—that the user could move around with keypresses. But a cube only has so much character!↩︎</p></li>
<li id="fn4"><p>I’ve borrowed this term from game development but Im’ probably not using it quite right. The idea is that the board and nav meshes are theoretical surfaces that contain data to support the final visual output.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>eventloop</category>
  <category>kenney</category>
  <category>nara</category>
  <category>r</category>
  <category>r.oguelike</category>
  <category>tilebased</category>
  <guid>https://www.rostrum.blog/posts/2024-07-14-tilebased/index.html</guid>
  <pubDate>Sat, 13 Jul 2024 23:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-07-14-tilebased/resources/tilebased.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Expose CRAN deadlines and DOIs</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-06-12-cran-db/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2024-06-12-cran-db/resources/app.png" class="img-fluid figure-img" style="width:100.0%" data-fig.alt="Screenshot of webpage called 'CRAN Deadlines'. There are individual cards with the names of R packages in them. The header of each card says how many days remain for fixes to be made and is coloured according to the amount of time left (e.g. red for 0 days). The footer says e.g. 'issues need fixing before 2024-06-12' with a link to the CRAN page detailing the errors."></p>
<figcaption class="figure-caption">Red alert!</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>You can now programmatically access deadlines and DOIs for CRAN packages. I larked about with them to make <a href="https://matt-dray.github.io/cran-deadlines/">a Shiny app</a> and <a href="https://github.com/matt-dray/badgr">a README-badge-making function</a>.</p>
</section>
<section id="scan-cran" class="level2">
<h2 class="anchored" data-anchor-id="scan-cran">Scan CRAN</h2>
<p>If you didn’t know, base R has functions that return information about packages on CRAN<sup>1</sup>. The main one is probably <code>CRAN_package_db()</code>. Here’s a few columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">db <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CRAN_package_db</span>()</span>
<span id="cb1-2">db[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Version"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maintainer"</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        Package Version                                Maintainer
1            A3   1.0.0 Scott Fortmann-Roe &lt;scottfr@berkeley.edu&gt;
2 AalenJohansen     1.0     Martin Bladt &lt;martinbladt@math.ku.dk&gt;
3      AATtools   0.0.2 Sercan Kahveci &lt;sercan.kahveci@sbg.ac.at&gt;
4        ABACUS   1.0.0          Mintu Nath &lt;dr.m.nath@gmail.com&gt;
5   abasequence   0.1.0         Andrew Pilny &lt;andy.pilny@uky.edu&gt;</code></pre>
</div>
</div>
<p>This post is about two new columns that have appeared recently in that dataframe—<code>Deadline</code> and <code>DOI</code>—and a couple of little tools I’ve built around them.</p>
<section id="meet-the-deadline" class="level3">
<h3 class="anchored" data-anchor-id="meet-the-deadline">Meet the deadline</h3>
<p>If your package-builds fail on CRAN then you need to fix them. The CRAN database now contains the date by which fixes need to be made<sup>2</sup>. The simple way to access this information is:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">db_dead <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> db[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(db<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Deadline), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deadline"</span>)]</span>
<span id="cb3-2">db_dead <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort_by</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>Deadline) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          Package   Deadline
11555       MuMIn 2024-06-14
16242       rsolr 2024-06-14
16964      semEff 2024-06-14
6901  gghighlight 2024-06-17
9671         lme4 2024-06-17
11800 nestedLogit 2024-06-17</code></pre>
</div>
</div>
<p>You can get this information in an R terminal, sure, but it’s ripe for displaying in a web app that shows the latest data.</p>
<p>This seemed a good excuse for me to learn a couple of (newish-to-me) Shiny things: (a) <a href="https://rstudio.github.io/bslib/">{bslib}</a> as a Shiny framework and (b) a way to create an arbitrary number of UI elements, since the number of packages with deadlines will vary from day to day.</p>
<p>In short, I made a Shiny(live) app, which is embedded below (may take a moment to fully load).</p>
<iframe width="400" height="500" src="https://matt-dray.github.io/cran-deadlines/" title="CRAN deadlines">
</iframe>
<p><a href="https://matt-dray.github.io/cran-deadlines/">You can also visit directly on GitHub Pages</a> or <a href="https://github.com/matt-dray/cran-deadlines">find the source on GitHub</a>. The data refreshes with each visit so it stays up to date.</p>
<p>It’s pretty simple: there’s a card per deadlined package with a link to its CRAN-listing page and check details. For added spice, I calculated days remaining and coloured the card headers by threat level.</p>
<p>If you see a negative number of days remaining, it’s not because the data haven’t updated correctly. A package can have a deadline listed that has already passed, which will manifest as a negative value in the number of days remaining<sup>3</sup>. It also seems that packages can have a deadline listed in <code>CRAN_package_db()</code> even if they’ve been archived or reprieved, so they’ll continue to appear in the app regardless.</p>
<p>Re handling an arbitrary number of UI elements on the fly, I looped over the deadlined packages to build a <code>tagList</code> of <code>bslib::card()</code> elements. This object was then interpreted by <code>renderUI()</code> and the cards were spat out.</p>
<p>Some other new-to-me bits-and-bobs I used were <a href="https://twitter.com/LeaVerou/status/1241619866475474946">an emoji as a favicon</a><sup>4</sup>, {bslib}’s very simple <a href="https://rstudio.github.io/bslib/reference/input_dark_mode.html">dark-mode toggle</a>, and <a href="https://rstudio.github.io/htmltools/reference/tagAppendChild.html"><code>htmltools::tagAppendChild()</code></a> to splice breaks between cards in the <code>tagList</code><sup>5</sup>.</p>
<p>In the end, this was a good excuse to polish some of my Shiny knowledge, but there are simpler approaches to displaying this information. For example, I started with just a basic {reactable}. I see <a href="https://hadley.github.io/cran-deadlines/">Hadley has now done something similar to that</a><sup>6</sup>, in a table that allows you to click rows to expand a package’s check results as well. It’s a better tool and I recommend you bookmark that instead of this Shiny app<sup>7</sup>.</p>
<p>Ah well. By now you’ve come to expect overengineering from this blog, I suspect. At least I had fun.</p>
<div class="tip">
<p> <b>Note</b></p>
<p>The app was available on the web via shinyapps.io when I first published this blog. I actually wanted it to be <a href="https://posit-dev.github.io/r-shinylive/">a Shinylive app</a>, but <a href="https://github.com/matt-dray/cran-deadlines/issues/1">hit a snag</a>. Fortunately, the ever-helpful <a href="https://github.com/rpodcast">Eric Nantz</a> made <a href="https://github.com/matt-dray/cran-deadlines/pull/3">a pull request</a> that solved my problem. I think Shinylive is a good option for this app: it’s small, there’s little user interaction and it’s not worth a precious slot in my free shinyapps.io account. Thanks Eric.</p>
</div>
<br>
<div class="tip">
<p> <b>Note</b></p>
<p>I noticed that Dirk also calculated the number of potential ‘orphans’ that archival would cause. This is useful information to gauge relative ‘danger’ for a given package to fall off CRAN. Hadley has since added this feature to his table and I <a href="https://github.com/matt-dray/cran-deadlines/issues/2">might implement it too</a>.</p>
</div>
</section>
<section id="oi-doi" class="level3">
<h3 class="anchored" data-anchor-id="oi-doi">Oi! DOI!</h3>
<p>A <a href="https://www.doi.org/">DOI</a> is a ‘digital object identifier’. These are used extensively in publishing and can be useful for citation, tracking and gathering usage statistics. CRAN has been adding these to packages recently and the string has been added to the <code>CRAN_package_db()</code> dataframe in the <code>DOI</code> column<sup>8</sup>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">db[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(db<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>DOI), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DOI"</span>)][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        Package                                 DOI
1            A3            10.32614/CRAN.package.A3
2 AalenJohansen 10.32614/CRAN.package.AalenJohansen
3      AATtools      10.32614/CRAN.package.AATtools
4        ABACUS        10.32614/CRAN.package.ABACUS
5   abasequence   10.32614/CRAN.package.abasequence</code></pre>
</div>
</div>
<p><a href="https://fosstodon.org/@eddelbuettel@mastodon.social/112597923361268334">Dirk wondered aloud on Mastodon</a> about making a badge service for DOIs. I don’t know about a ‘service’ but I once wrote a package called <a href="https://github.com/matt-dray/badgr">{badgr}</a> to build customised <a href="https://shields.io/">shields.io</a> metadata badges within R. It’s a small leap to make a {badgr} function that builds CRAN DOI badges.</p>
<p>So, as of of {badgr} v0.2.0, you can use <code>get_cran_doi_badge()</code>. You can download the package from my R-universe:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"badgr"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://matt-dray.r-universe.dev"</span>)</span></code></pre></div>
</div>
<p>You pass it a CRAN package name. If you want, you can pass other arguments to <code>get_badge()</code> to change its colour, etc (but the default colour is the tasteful blue of the R logo, so you probably want to keep that). For purposes of this blog post, I’ve turned off the arguments that open a browser preview of the badge and copy it to your clipboard.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">badgr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_cran_doi_badge</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datapasta"</span>,</span>
<span id="cb8-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">browser_preview =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb8-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to_clipboard =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb8-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "[![](https://img.shields.io/badge/DOI-10.32614/CRAN.package.datapasta-1f57b6?style=flat&amp;link=https://doi.org/10.32614/CRAN.package.datapasta)](https://doi.org/10.32614/CRAN.package.datapasta)"</code></pre>
</div>
</div>
<p>The code outputs a Markdown string that you can paste into your repository’s README, for example. It looks like this when rendered:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://doi.org/10.32614/CRAN.package.datapasta"><img src="https://www.rostrum.blog/posts/2024-06-12-cran-db/https:/img.shields.io/badge/DOI-10.32614/CRAN.package.datapasta-1f57b6?style=flat&amp;link=https:/doi.org/10.32614/CRAN.package.datapasta" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>You can click it to be taken to the resource, which is the CRAN listing for the package. The whole process looks like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2024-06-12-cran-db/resources/doi-badge.gif" class="img-fluid figure-img" style="width:100.0%" data-fig.alt="A gif of the function get_cran_doi_badge running in RStudio with the package name 'datapasta' passed as the only argument. The console prints 'opening browser to display badge preview' and 'badge markdown added to clipboard' The markdown has also printed in the console. The badge opens in a browser window. It says 'DOI' on the left side and the DOIc ode on the right. Clicking it takes you to the CRAN page for hte package."></p>
<figcaption class="figure-caption"><a href="https://milesmcbain.github.io/datapasta/">{datapasta}</a> is great, even if you don’t pronounce it ‘dah-tah pars-tah’.</figcaption>
</figure>
</div>
<p>In retrospect, this function probably doesn’t need to use <code>CRAN_package_db()</code> because the DOIs look fairly standardised in structure (e.g.&nbsp;<code>10.32614/CRAN.package.&lt;package-name&gt;</code>). But at time of writing, not every package has a DOI yet; checking the database means an error can be raised if the DOI isn’t yet active.</p>
<p>Ah well. By now you’ve come to expect overengineering from this blog, I suspect. At least I had fun.</p>
<div class="tip">
<p> <b>Note</b></p>
<p>Dirk mentioned in <a href="https://mastodon.social/@eddelbuettel/112609970727005448">another Mastodon post</a> that he’s added a simple deadline fetcher to {littler} and also pointed out the simple form noted above for a Markdown badge.</p>
</div>
<br>
<div class="tip">
<p> <b>Note</b></p>
<p>Mike <a href="https://fosstodon.org/@coolbutuseless/112611459027946296">started a list</a> of CRAN-related dashboards/search tools and has asked for any that have been missed. Which implies we need a tool to search for such tools, lol?</p>
</div>
</section>

</section>


<div id="quarto-appendix" class="default"><section id="environment" class="level3 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-06-17 14:50:18 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.4.0 (2024-04-24)
Platform: aarch64-apple-darwin20
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] digest_0.6.35     base64enc_0.1-3   fastmap_1.2.0     xfun_0.43        
 [5] fontawesome_0.5.2 knitr_1.46        badgr_0.2         htmltools_0.5.8.1
 [9] rmarkdown_2.26    cli_3.6.2         compiler_4.4.0    rstudioapi_0.16.0
[13] tools_4.4.0       clipr_0.8.0       evaluate_0.23     yaml_2.3.8       
[17] rlang_1.1.4       jsonlite_1.8.8    htmlwidgets_1.6.4</code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The Comprehensive R Archive Network, not <a href="https://www.rostrum.blog/posts/2020-09-12-herring-units/">the unit of uncleaned herring</a>.↩︎</p></li>
<li id="fn2"><p>I think it was <a href="https://mastodon.social/@henrikbengtsson/112591630316235677">Henrik’s Mastodon post</a> that first tipped me off to this, thank you.↩︎</p></li>
<li id="fn3"><p>Lluis was kind enough to <a href="https://fosstodon.org/@Lluis_Revilla/112620123453580083">suggest why this might be</a>.↩︎</p></li>
<li id="fn4"><p>This appears when the Shiny app is opened locally in a browser, but does not carry through to the Shinylive version.↩︎</p></li>
<li id="fn5"><p>I’m not convinced my approach is the best one, but it works for now. Please leave an issue in the repo if you have a better idea.↩︎</p></li>
<li id="fn6"><p>The absolute cheek of using the same (completely obvious and utterly non-plagiarised) repository name, can you believe it.↩︎</p></li>
<li id="fn7"><p>Though I chose not to shame the package owners by putting their names in my app, lol.↩︎</p></li>
<li id="fn8"><p>I first noticed this thanks to <a href="https://fosstodon.org/@zeileis/112597049943483012">Achim’s post on Mastodon</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>badgr</category>
  <category>bslib</category>
  <category>cran</category>
  <category>r</category>
  <category>shiny</category>
  <category>shinylive</category>
  <guid>https://www.rostrum.blog/posts/2024-06-12-cran-db/index.html</guid>
  <pubDate>Tue, 11 Jun 2024 23:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-06-12-cran-db/resources/app.png" medium="image" type="image/png" height="69" width="144"/>
</item>
<item>
  <title>The Aesthetics Wiki: an R Addendum</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-05-08-aesthetic/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2024-05-08-aesthetic/resources/passion.png" class="img-fluid figure-img" style="width:100.0%" data-fig.alt="90s-style Word Art saying 'aesethics' in the middle, surrounded by the words 'base R', 'tidyverse' and 'tidy base question' in various egregious fonts and colours."></p>
<figcaption class="figure-caption">They’re doing the Lord’s work over at <a href="https://www.makewordart.com/">makewordart.com</a>.</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>Some people look at an R script and see code. But I <em>feel</em> something.</p>
</section>
<section id="a-philosophy" class="level2">
<h2 class="anchored" data-anchor-id="a-philosophy">A philosophy</h2>
<p>Have you experienced the <a href="https://aesthetics.fandom.com/wiki/Aesthetics_Wiki">Aesthetics Wiki</a>?</p>
<p>It’s missing R-related entries for some reason, which definitely fit <a href="https://aesthetics.fandom.com/wiki/Philosophy">the aesthetic philosophy</a> of having:</p>
<blockquote class="blockquote">
<p>perspectives on beauty and the human condition and a political, economic, or social statement</p>
</blockquote>
<p>Tell me you don’t look at an R script and get an immediate vibe.</p>
<p>I want to suggest two obvious aesthetics for submission to the wiki—<em>Basecore</em> and <em>Tidywave</em>—and to introduce the definitely-soon-to-be-mainstreamed <em>V4 Punk</em><sup>1</sup>.</p>
</section>
<section id="the-addendum" class="level2">
<h2 class="anchored" data-anchor-id="the-addendum">The addendum</h2>
<section id="basecore" class="level3">
<h3 class="anchored" data-anchor-id="basecore">Basecore</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2024-05-08-aesthetic/resources/chaotic-academia.png" class="img-fluid figure-img" style="width:100.0%" data-fig.alt="A set of different-sized books haphazardly placed ona bookshelf."></p>
<figcaption class="figure-caption">Adapted from <a href="https://static.wikia.nocookie.net/aesthetics/images/1/15/Chaotic_academia.jpg/revision/latest?cb=20200610213320">Aesthetics Wiki</a>.</figcaption>
</figure>
</div>
<section id="overview" class="level4">
<h4 class="anchored" data-anchor-id="overview">Overview</h4>
<ul>
<li>History: emerged as Base Academic in 1993, mainstreamed as Base Core from 2000 to date.</li>
<li>Visuals: <code>[</code> (square-bracket selector), <code>$</code> (dollar selector), <code>~</code> (formula-form tilde).</li>
<li>Media: <a href="https://cran.r-project.org/doc/manuals/R-exts.html"><em>Writing R Extensions</em></a>, the <a href="https://stat.ethz.ch/mailman/listinfo/r-help">R-help mailing list</a>, that textfile with a <a href="https://fosstodon.org/@mattdray/111125184484188641">Y2K warning</a> that came bundled with R v1.0.</li>
<li>Fashion: cardigans, a wired mouse with a ball in it, the old-school IDE you get when you click ‘R.app’ instead of ‘RStudio.app’.</li>
<li>Palette: <span style="background-color:lightgrey;">grey</span>.</li>
<li>Nearest aesthetic: <a href="https://aesthetics.fandom.com/wiki/Chaotic_Academia">Chaotic Academia</a>, which ‘acknowledges the pretentiousness of classic academia, subtly mocking it at times’.</li>
</ul>
</section>
<section id="sample" class="level4">
<h4 class="anchored" data-anchor-id="sample">Sample</h4>
<p>Classic stuff. Typical base-R code uses a lot of intermediate assignment to create temporary objects for further manipulation. Many actions make use of square bracket notation to indicate some action over rows and columns of a data.frame. Data.frame columns have to be called within the context of the data.frame they belong to, using dollar or square-bracket notation. The tilde is used for formula notation (‘this given that’).</p>
<details>
<summary>
Set up demo data
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressPackageStartupMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr))</span>
<span id="cb1-2">sw_a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> starwars[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span>)]</span>
<span id="cb1-3">sw_b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> starwars[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"homeworld"</span>)]</span></code></pre></div>
</div>
</details>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sw_a[sw_a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(sw_a) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>]</span>
<span id="cb2-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(x, sw_b, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>)</span>
<span id="cb2-3">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb2-4">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>homeworld <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(</span>
<span id="cb2-5">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>homeworld <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tatooine"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Naboo"</span>),</span>
<span id="cb2-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other"</span>,</span>
<span id="cb2-7">  x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>homeworld</span>
<span id="cb2-8">)</span>
<span id="cb2-9">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aggregate</span>(x, height <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> homeworld, mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-10">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height), ]</span>
<span id="cb2-11">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  homeworld   height
3  Tatooine 1.792500
2     Other 1.776471
1     Naboo 1.772000</code></pre>
</div>
</div>
</section>
</section>
<section id="tidywave" class="level3">
<h3 class="anchored" data-anchor-id="tidywave">Tidywave</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2024-05-08-aesthetic/resources/corporate-memphis.png" class="img-fluid figure-img" style="width:100.0%" data-fig.alt="Colourful stylised cartoon of faceless humans with small heads and large limbs and hands."></p>
<figcaption class="figure-caption">Adapted from <a href="https://static.wikia.nocookie.net/aesthetics/images/6/62/Blob-web-exercise.webp/revision/latest?cb=20210410215136">Aesthetics Wiki</a>.</figcaption>
</figure>
</div>
<section id="overview-1" class="level4">
<h4 class="anchored" data-anchor-id="overview-1">Overview</h4>
<ul>
<li>History: humble academic origins in 2008, later popularised with the creation of the {tidyverse} in 2016.</li>
<li>Visuals: <code>%&gt;%</code> ({magrittr} pipe), <code>.</code> (data placeholder), <code>~</code> (lambda function).</li>
<li>Media: <a href="https://r4ds.hadley.nz/"><em>R for Data Science</em></a>, conflict warnings in the console when you do <code>library(tidyverse)</code>, that one gif of Hadley tapping merrily on an invisible keyboard (‘just typing R code!’).</li>
<li>Fashion: RStudio, hex stickers, rapid deprecation.</li>
<li>Palette: Posit <span style="background-color:#1a162d;color:white;">blue</span>, <span style="background-color:#fdeba4;">yellow</span>, and <span style="background-color:#767381;color:white;">grey</span>.</li>
<li>Nearest aesthetic: <a href="https://aesthetics.fandom.com/wiki/Corporate_Memphis">Corporate Memphis</a> because I’ve literally seen it in Posit marketing.</li>
</ul>
</section>
<section id="sample-1" class="level4">
<h4 class="anchored" data-anchor-id="sample-1">Sample</h4>
<p>The script reads from left-to-right and top-to-bottom, recipe style, using pipes: ‘take dataset, then do a thing, then do a thing’, etc. Each function is verb that indicates its action. Non-standard evaluation is rampant. A tilde replaces the tedious typing of <kbd>f</kbd><kbd>u</kbd><kbd>n</kbd><kbd>c</kbd><kbd>t</kbd><kbd>i</kbd><kbd>o</kbd><kbd>n</kbd><kbd>(</kbd><kbd>)</kbd>. A titchy inconspicuous <code>.</code> acts as a data placeholder on the right-hand side of a pipe.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">sw_a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(sw_b, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> height <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb4-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">homeworld =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(</span>
<span id="cb4-8">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>homeworld <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tatooine"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Naboo"</span>),</span>
<span id="cb4-9">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other"</span>,</span>
<span id="cb4-10">      homeworld</span>
<span id="cb4-11">    )</span>
<span id="cb4-12">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb4-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(height, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb4-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> homeworld</span>
<span id="cb4-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(height))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  homeworld height
  &lt;chr&gt;      &lt;dbl&gt;
1 Tatooine    1.79
2 Other       1.78
3 Naboo       1.77</code></pre>
</div>
</div>
</section>
<section id="v4-punk" class="level4">
<h4 class="anchored" data-anchor-id="v4-punk">V4 Punk</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2024-05-08-aesthetic/resources/vacation-dadcore.png" class="img-fluid figure-img" style="width:100.0%" data-fig.alt="Tom Sellick in a Hawaiian shirt at the beach, leaning against a palm tree. He is smiling."></p>
<figcaption class="figure-caption">Adapted from <a href="https://static.wikia.nocookie.net/aesthetics/images/d/d1/Magnum-pi-hawaiian-shirt.jpg/revision/latest?cb=20200507215616">Aesthetics Wiki</a>.</figcaption>
</figure>
</div>
</section>
<section id="overview-2" class="level4">
<h4 class="anchored" data-anchor-id="overview-2">Overview</h4>
<ul>
<li>History: incremental emergence following R version 4.0 in 2020, boosted greatly in 2022 with the release of the base pipe. The future of R.</li>
<li>Visuals: <code>|&gt;</code> (base pipe), <code>_</code> (data placeholder), <code>\()</code> (lambda function).</li>
<li>Media: meme blogs, cheeky Fosstodon posts.</li>
<li>Fashion: hubris, evil moustaches, troll-face emojis.</li>
<li>Palette: <span style="background-color:#ff0000;">r</span><span style="background-color:#ff00ff;">a</span><span style="background-color:#00ffff;">i</span><span style="background-color:#00ff00;">n</span><span style="background-color:#0000ff;color:white;">b</span><span style="background-color:#4b0082;color:white;">o</span><span style="background-color:#ee82ee;">w</span>?</li>
<li>Nearest aesthetic: <a href="https://aesthetics.fandom.com/wiki/Vacation_Dadcore">Vacation Dadcore</a>, so you can ‘escape to a simpler time without sacrificing any of the fun’.</li>
</ul>
</section>
<section id="sample-2" class="level4">
<h4 class="anchored" data-anchor-id="sample-2">Sample</h4>
<p>Hear me out: what if tidyverse, but made entirely of base R functions<sup>2</sup>? This is now possible with the base pipe and by using obscure functions that help you avoid square brackets<sup>3</sup>. It’s also sketchy as heck; just see the help files for <code>subset()</code> (‘unanticipated consequences’) and <code>transform()</code> (‘you deserve whatever you get!’). The death of Basecore and Tidywave, for sure.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">sw_a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(</span>
<span id="cb6-3">    species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human"</span>,</span>
<span id="cb6-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">select =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>species</span>
<span id="cb6-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(sw_b, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transform</span>(</span>
<span id="cb6-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> height <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb6-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">homeworld =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(</span>
<span id="cb6-10">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>homeworld <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tatooine"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Naboo"</span>),</span>
<span id="cb6-11">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other"</span>,</span>
<span id="cb6-12">      homeworld</span>
<span id="cb6-13">    )</span>
<span id="cb6-14">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aggregate</span>(</span>
<span id="cb6-16">    height <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> homeworld, </span>
<span id="cb6-17">    \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb6-18">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort_by</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> height, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decreasing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hot off the v4.4 press</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  homeworld   height
3  Tatooine 1.792500
2     Other 1.776471
1     Naboo 1.772000</code></pre>
</div>
</div>
<p>Can’t wait to see this roll out into production code.</p>
</section>
</section>

</section>


<div id="quarto-appendix" class="default"><section id="environment" class="level3 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-05-09 09:04:29 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.4.0 (2024-04-24)
Platform: aarch64-apple-darwin20
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] dplyr_1.1.4

loaded via a namespace (and not attached):
 [1] digest_0.6.35     utf8_1.2.4        R6_2.5.1          fastmap_1.1.1    
 [5] tidyselect_1.2.1  xfun_0.43         magrittr_2.0.3    glue_1.7.0       
 [9] tibble_3.2.1      knitr_1.46        pkgconfig_2.0.3   htmltools_0.5.8.1
[13] rmarkdown_2.26    generics_0.1.3    lifecycle_1.0.4   cli_3.6.2        
[17] fansi_1.0.6       vctrs_0.6.5       withr_3.0.0       compiler_4.4.0   
[21] rstudioapi_0.16.0 tools_4.4.0       pillar_1.9.0      evaluate_0.23    
[25] yaml_2.3.8        rlang_1.1.3       jsonlite_1.8.8   </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>These <a href="https://aesthetics.fandom.com/wiki/Suffix_Meaning">suffixes are meaningful</a>: core ‘implies a system, a set of rules’, wave ‘a significant shift within a genre’ and punk ‘reject[s] social norms’.↩︎</p></li>
<li id="fn2"><p>I called this ‘The Modern Base Aesthetic’ in <a href="https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/">my talk, ‘Base Slaps!’</a>, at the NHS-R conference 2023. But now I realise the aesthetics run deeper.↩︎</p></li>
<li id="fn3"><p>If you truly want something that looks like {dplyr} code but depends only on base R, then check out <a href="https://nathaneastwood.github.io/poorman/">the {poorman} package</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>base</category>
  <category>r</category>
  <category>tidyverse</category>
  <guid>https://www.rostrum.blog/posts/2024-05-08-aesthetic/index.html</guid>
  <pubDate>Tue, 07 May 2024 23:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-05-08-aesthetic/resources/passion.png" medium="image" type="image/png" height="66" width="144"/>
</item>
<item>
  <title>Stop Jenny committing arson</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-04-01-perpetual-restart/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2024-04-01-perpetual-restart/resources/arson.png" class="img-fluid figure-img" style="width:100.0%" data-fig.alt="Posit employee Jenny Bryan on stage at a lectern. Her eyes are emoji flames. In red Comic Sans around her are the words 'fire', 'computer' and 'burn', as well as the R code 'rm(list=ls())'. There is a flame effect along the bottom of the image."></p>
<figcaption class="figure-caption">This image has been edited. With apologies.</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>Make RStudio restart itself. Perpetually.</p>
<div class="tip">
<p> <b>Note</b></p>
<p>This post contains April Fools’ Day content.</p>
</div>
</section>
<section id="passing-the-torch" class="level2">
<h2 class="anchored" data-anchor-id="passing-the-torch">Passing the torch</h2>
<p><a href="https://www.tidyverse.org/blog/2017/12/workflow-vs-script/">Jenny Bryan once said</a>:</p>
<blockquote class="blockquote">
<p>If the first line of your R script is <code>rm(list = ls())</code> I will come into your office and SET YOUR COMPUTER ON FIRE 🔥.</p>
</blockquote>
<p>The objects in your R environment are wicked little imps whose only motivation is to deceive you. They must be destroyed. Frequently.</p>
<p>But <code>rm(list = ls())</code> isn’t enough to start a new session with a completely clean slate. It doesn’t detach packages, for example. Reproducibility is at stake here, folks!</p>
<p>The only salvation is to completely restart R. All the time.</p>
<p>I don’t think you heard me. Come closer. I said <em>all the time</em>.</p>
</section>
<section id="an-extinguisher" class="level2">
<h2 class="anchored" data-anchor-id="an-extinguisher">An extinguisher</h2>
<p>I’ve been <a href="https://www.rostrum.blog/posts/2020-04-17-r-self-shame/index.html#env">woke to this thought technology</a> for a while. You’re right, it’s time I gave back to the community.</p>
<p>I can’t trust you to restart R voluntarily, so I must help you to help yourself.</p>
<p>So, I have for you a gift. A precious snippet of R code that came to me in a fever dream.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setHook</span>(</span>
<span id="cb1-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rstudio.sessionInit"</span>,</span>
<span id="cb1-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb1-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"⏳ Restarting in 30 seconds..."</span>)</span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-6">    rstudioapi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">executeCommand</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restartR"</span>)</span>
<span id="cb1-7">  }</span>
<span id="cb1-8">)</span></code></pre></div>
</div>
<p>Simply open your <code>.Rprofile</code><sup>1</sup> (<a href="https://support.posit.co/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf">a special file</a> that’s executed at start up) with <code>usethis::edit_r_profile()</code><sup>2</sup>, paste in the code<sup>3</sup> and then restart R for it to take effect<sup>4</sup>.</p>
<p>What does it do? It waits for RStudio to start up<sup>5</sup> and then restarts R<sup>6</sup> after 30 seconds<sup>7</sup>.</p>
<p>…Which prompts another restart after 30 more seconds.</p>
<p>…And another.</p>
<p>…Forever<sup>8</sup>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2024-04-01-perpetual-restart/resources/restart.png" class="img-fluid figure-img" style="width:100.0%" data-fig.alt="The R console in RStudio. Repeated several times is the message 'restarting in 30 seconds...' then 'restarting R session'."></p>
<figcaption class="figure-caption">trapped in a loop help I’m</figcaption>
</figure>
</div>
<p>I know what you’re thinking: doesn’t this block the console? Kind of. You can still type stuff and it’ll be executed before the next restart. Only to disappear immediately.</p>
<p>Complete panic. Just like Jenny wanted! I think?</p>
</section>
<section id="rise-from-the-ashes" class="level2">
<h2 class="anchored" data-anchor-id="rise-from-the-ashes">Rise from the ashes</h2>
<p>How can you thank me for this? I am humble (extremely), but you’re welcome to <a href="https://github.com/scrogster/rickrollR/">support my Patreon</a>.</p>
<p>Happy March 32nd, colleagues.</p>

</section>


<div id="quarto-appendix" class="default"><section id="environment" class="level3 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-04-03 08:14:51 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.2        
 [5] tools_4.3.1       htmltools_0.5.8   rstudioapi_0.16.0 yaml_2.3.8       
 [9] rmarkdown_2.26    knitr_1.45        jsonlite_1.8.8    xfun_0.43        
[13] digest_0.6.35     rlang_1.1.3       fontawesome_0.5.2 evaluate_0.23    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Don’t.↩︎</p></li>
<li id="fn2"><p>Don’t.↩︎</p></li>
<li id="fn3"><p>Don’t.↩︎</p></li>
<li id="fn4"><p>Fine, <a href="https://www.youtube.com/watch?v=lCscYsICvoA">dew it</a>.↩︎</p></li>
<li id="fn5"><p>The code depends on the {rstudioapi} package, but it needs to load before it can be used. This seems to happen <em>after</em> the .Rprofile has been read. This is why we have to use <code>setHook()</code> with <code>rstudio.sessionInit</code> so the restart command can be executed once RStudio has initiated.↩︎</p></li>
<li id="fn6"><p>I also tried <code>rsudioapi::restartSession()</code> and <code>.rs.restartR()</code> here, but they didn’t work quite as I expected. Let me know any non-RStudio ways to do this, of course.↩︎</p></li>
<li id="fn7"><p>If you’re feeling extra spicy, maybe randomise the wait period!↩︎</p></li>
<li id="fn8"><p>Maybe you’ll have to force quit RStudio? Use <kbd>Cmd</kbd>+<kbd>Option</kbd>+<kbd>Esc</kbd> on a Macintosh or <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Delete</kbd> on Michaelsoft Binbows. I assume Linux users know what they’re doing.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>r</category>
  <category>reproducibility</category>
  <guid>https://www.rostrum.blog/posts/2024-04-01-perpetual-restart/index.html</guid>
  <pubDate>Sun, 31 Mar 2024 23:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-04-01-perpetual-restart/resources/arson.png" medium="image" type="image/png" height="66" width="144"/>
</item>
<item>
  <title>Assign abstracts to sifters</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-03-26-assign-abstracts/index.html</link>
  <description><![CDATA[ 




<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>A quick and dirty R function to assign abstracts to sifters.</p>
</section>
<section id="assign-me-up" class="level2">
<h2 class="anchored" data-anchor-id="assign-me-up">Assign me up</h2>
<p>I hacked together a function to assign submitted conference abstracts to sifters for assessment. At its simplest you give it two dataframes: one with a row per abstract, one with a row per sifter. You receive back a list, one element per sifter, with the abstracts they’ve been assigned.</p>
<p>There were several criteria that complicated things. The function:</p>
<ul>
<li>tries to make assignment counts equal between sifters where possible</li>
<li>results in each abstract being assigned <em>n</em> times, to assure fairness in assessment</li>
<li>ensures each sifter receives a unique set of abstracts</li>
<li>prevents the sifter seeing their own abstracts, if they submitted any</li>
<li>prevents the sifter seeing abstracts by authors with the same affiliation as the sifter, if relevant</li>
<li>respects a maximum assignment ‘cap’, if the sifter has one</li>
<li>allows the user to set a maximum number of iterations to prevent infinite looping (may be possible under certain conditions)</li>
</ul>
<section id="process" class="level3">
<h3 class="anchored" data-anchor-id="process">Process</h3>
<p>The function itself is split into three main parts:</p>
<ol type="1">
<li>Setup of variables and counters to be used in the iterations.</li>
<li>A <code>repeat</code> loop that will keep assigning abstracts to the set of sifters until the total abstract pool is exhausted and the various criteria are met.</li>
<li>Within the <code>repeat</code> loop, a <code>for</code> loop that iterates over each sifter to assign them an abstract from their pool of viable abstracts.</li>
</ol>
<p>Within the <code>for</code> loop are three main steps:</p>
<ol type="1">
<li>Find the pool of abstracts available to the sifter given various criteria (if any).</li>
<li>Select randomly an abstract from the pool and assign it to the sifter.</li>
<li>Increment the assignment counter for the selected abstract.</li>
</ol>
<p>The <code>for</code> loop will go to the <code>next</code> sifter if the pool of abstracts for the current sifter is zero. The <code>repeat</code> loop will <code>break</code> if all of the abstracts have been assigned <em>n</em> number of times, according to the <code>assignment_cap</code> argument. It will also <code>break</code> if the number of iterations given by <code>max_iterations</code> has been met.</p>
</section>
<section id="definition" class="level3">
<h3 class="anchored" data-anchor-id="definition">Definition</h3>
<p>The function was developed quickly, is not optimised, is not fully tested and has no defensive programming. But it fulfilled the requirements for the task. I’m recording it here for posterity.</p>
<p>I’ve added some comments and tried to make variable names informative. The <code>abstracts_df</code> and <code>sifters_df</code> inputs are dataframes that have columns for the <code>name</code> and <code>affiliation</code>, along with a maximum-assignment <code>cap</code> column in the <code>sifters_df</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">assign_abstracts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(</span>
<span id="cb1-2">    abstracts_df,</span>
<span id="cb1-3">    sifters_df,</span>
<span id="cb1-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">assignment_cap =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb1-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb1-6">) {</span>
<span id="cb1-7">  </span>
<span id="cb1-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up named vectors</span></span>
<span id="cb1-9">  abstracts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(abstracts_df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(affiliation, name))</span>
<span id="cb1-10">  sifters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(sifters_df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(affiliation, name))</span>
<span id="cb1-11">  sifter_caps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(sifters_df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(cap, name))</span>
<span id="cb1-12">  sifter_caps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sifter_caps[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(sifter_caps)]</span>
<span id="cb1-13">  </span>
<span id="cb1-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up starting variables</span></span>
<span id="cb1-15">  n_abstracts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(abstracts)</span>
<span id="cb1-16">  seq_abstracts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n_abstracts)</span>
<span id="cb1-17">  sifter_assignments <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(sifters)), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(sifters))</span>
<span id="cb1-18">  assignment_counts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_abstracts)</span>
<span id="cb1-19">  iter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-20">  </span>
<span id="cb1-21">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">repeat</span> {</span>
<span id="cb1-22">    </span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(sifter_assignments)) {</span>
<span id="cb1-24">      </span>
<span id="cb1-25">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Find the pool of abstracts available to this sifter (if any)</span></span>
<span id="cb1-26">      </span>
<span id="cb1-27">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a. Check if sifter cap has been met</span></span>
<span id="cb1-28">      sifter_has_cap <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(sifter_caps)</span>
<span id="cb1-29">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (sifter_has_cap) {</span>
<span id="cb1-30">        sifter_cap <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sifter_caps[[name]]</span>
<span id="cb1-31">        sifter_assignment_count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(sifter_assignments[[name]])</span>
<span id="cb1-32">      }</span>
<span id="cb1-33">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (sifter_has_cap <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> sifter_assignment_count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sifter_cap) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb1-34">      </span>
<span id="cb1-35">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># b. Add abstracts to pool if they have &lt;n assignments</span></span>
<span id="cb1-36">      abstracts_under_cap <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(assignment_counts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> assignment_cap)</span>
<span id="cb1-37">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(abstracts_under_cap) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb1-38">      </span>
<span id="cb1-39">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># c. Remove abstracts that are already assigned to this sifter</span></span>
<span id="cb1-40">      already_assigned_to_sifter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sifter_assignments[[name]]</span>
<span id="cb1-41">      abstracts_available <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb1-42">        abstracts_under_cap[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>abstracts_under_cap <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> already_assigned_to_sifter]</span>
<span id="cb1-43">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(abstracts_available) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb1-44">      </span>
<span id="cb1-45">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># d. Remove abstracts by the named sifter</span></span>
<span id="cb1-46">      abstracts_by_sifter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(abstracts[abstracts_available]))</span>
<span id="cb1-47">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(abstracts_by_sifter) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-48">        abstracts_available <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> abstracts_available[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>abstracts_by_sifter]</span>
<span id="cb1-49">      }</span>
<span id="cb1-50">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(abstracts_available) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb1-51">      </span>
<span id="cb1-52">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># e. Remove abstracts with the same affiliation as the sifter</span></span>
<span id="cb1-53">      sifter_affiliation <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(sifters[name])</span>
<span id="cb1-54">      abstracts_by_same_affiliation <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb1-55">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(sifter_affiliation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(abstracts[abstracts_available]))</span>
<span id="cb1-56">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(abstracts_by_same_affiliation) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-57">        abstracts_available <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb1-58">          abstracts_available[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>abstracts_by_same_affiliation]</span>
<span id="cb1-59">      }</span>
<span id="cb1-60">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(abstracts_available) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb1-61">      </span>
<span id="cb1-62">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Select randomly from pool and assign to sifter</span></span>
<span id="cb1-63">      abstract_selected <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.resample</span>(abstracts_available, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-64">      sifter_assignments[[name]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb1-65">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(sifter_assignments[[name]], abstract_selected)</span>
<span id="cb1-66">      </span>
<span id="cb1-67">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Increment count for sampled abstract</span></span>
<span id="cb1-68">      assignment_counts[abstract_selected] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb1-69">        assignment_counts[abstract_selected] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-70">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(assignment_counts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> assignment_cap)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb1-71">      </span>
<span id="cb1-72">    }</span>
<span id="cb1-73">    </span>
<span id="cb1-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reorder so sifter with fewest assignments gets next assignment first</span></span>
<span id="cb1-75">    sifter_assignments <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sifter_assignments[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lengths</span>(sifter_assignments))]</span>
<span id="cb1-76">    </span>
<span id="cb1-77">    iter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-78">    </span>
<span id="cb1-79">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(assignment_counts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> assignment_cap)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb1-80">    </span>
<span id="cb1-81">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (iter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> max_iterations) {</span>
<span id="cb1-82">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_iterations reached"</span>)</span>
<span id="cb1-83">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb1-84">    }</span>
<span id="cb1-85">    </span>
<span id="cb1-86">  }</span>
<span id="cb1-87">  </span>
<span id="cb1-88">  sifter_assignments <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(sifter_assignments, sort)</span>
<span id="cb1-89">  sifter_assignments[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(sifter_assignments))]</span>
<span id="cb1-90">  </span>
<span id="cb1-91">}</span>
<span id="cb1-92"></span>
<span id="cb1-93">.resample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample.int</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), ...)]</span></code></pre></div>
</div>
<p>Of course, it’s too big and should be broken into smaller functions, particularly each of the steps in the <code>for</code> loop. Also, you feed in dataframes, but these are converted immediately to named vectors for processing. In part this reflects the ease of handling named vectors, but is also a legacy of when the requirements were far simpler. The requirements grew more complicated over time, so it became a Frankenfunction</p>
<p>Note also the bespoke <code>.resample()</code> function because <code>sample()</code> operates differently depending on whether you give it a vector or a single value<sup>1</sup>. If only one abstract is left in the pool, e.g.&nbsp;abstract number 13, then <code>sample(13)</code> won’t output 13, it will actually output a value from 1 to 13.</p>
</section>
</section>
<section id="example" class="level2">
<h2 class="anchored" data-anchor-id="example">Example</h2>
<section id="demo-data" class="level3">
<h3 class="anchored" data-anchor-id="demo-data">Demo data</h3>
<p>Let’s create some fake data using <a href="https://docs.ropensci.org/charlatan/">the {charlatan} package</a>. Let’s imagine we have some sifters and their affiliations. One sifter only has time to do 10 assessments, so they have an assignment <code>cap</code> value.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3">n_sifters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-4">sifter_companies <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> charlatan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ch_company</span>(n_sifters)</span>
<span id="cb2-5">sifter_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> charlatan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ch_name</span>(n_sifters)</span>
<span id="cb2-6"></span>
<span id="cb2-7">(sifters_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> sifter_names,</span>
<span id="cb2-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">affiliation =</span> sifter_companies,</span>
<span id="cb2-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cap =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>, n_sifters <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-11">))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              name                        affiliation cap
1 Justen Powlowski                         Paucek Inc  10
2 Jon Blick-Erdman                    Ziemann-Ziemann  NA
3   Cannon Hegmann                        Wyman-Wyman  NA
4  Nichelle Schoen Daugherty, Daugherty and Daugherty  NA
5   Earley Monahan                        Walsh-Walsh  NA</code></pre>
</div>
</div>
<p>Now let’s create some fake abstracts, again with names and affiliations. The abstract titles here are just random species names, so let’s pretend we’re at a taxonomists’ conference or something. Let’s make it so the sifters have each submitted an abstract of their own and that there’s at least one other submission from their organisation.</p>
<p>Of course, your abstract dataset is likely to contain additional information, like the actual text of the abstract and other details like the author’s geographic location and talk-type preference (poster, plenary, etc). If you’ve used an online survey service then you can usually download a CSV of the results or connect to their API to get the data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">total_abstracts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">abstracts_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(sifter_names, charlatan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ch_name</span>(total_abstracts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_sifters)),</span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">affiliation =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(sifter_companies, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb4-7">    charlatan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ch_company</span>(total_abstracts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_sifters))</span>
<span id="cb4-8">  ),</span>
<span id="cb4-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> charlatan<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ch_taxonomic_species</span>(total_abstracts)</span>
<span id="cb4-10">)</span>
<span id="cb4-11"></span>
<span id="cb4-12">abstracts_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> abstracts_df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(abstracts_df)), ]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shuffle</span></span>
<span id="cb4-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row.names</span>(abstracts_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(abstracts_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  name                        affiliation                 title
1     Jon Blick-Erdman                    Ziemann-Ziemann   Coniogramme euantha
2       Tavaris Reilly                        Wyman-Wyman       Tristemon egena
3 Shavonne Ziemann PhD            Satterfield-Satterfield  Pichleria majungense
4      Nichelle Schoen Daugherty, Daugherty and Daugherty      Zelkova vigilans
5        Durrell Mertz                Jaskolski-Jaskolski Papuechites denutatum
6      Mikayla Rau DDS                        Stark-Stark   Oldfieldia mohriana</code></pre>
</div>
</div>
</section>
<section id="run" class="level3">
<h3 class="anchored" data-anchor-id="run">Run</h3>
<p>Let’s provide the <code>abstracts_df</code> and <code>sifters_df</code> dataframes to the function, along with the number of times each abstract will need to be assessed.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-2"></span>
<span id="cb6-3">assignments <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign_abstracts</span>(</span>
<span id="cb6-4">  abstracts_df,</span>
<span id="cb6-5">  sifters_df,</span>
<span id="cb6-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">assignment_cap =</span> n</span>
<span id="cb6-7">)</span></code></pre></div>
</div>
<p>Here’s what the output looks like. It’s a named list with one element per sifter. The values are the index of that abstract in the vector provided to the <code>abstracts_df</code> argument.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">assignments</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$`Cannon Hegmann`
 [1]  1  4  6  8 10 12 16 19 20 26 28 29

$`Earley Monahan`
 [1]  1  4  5  7 10 12 13 17 22 25 27 28

$`Jon Blick-Erdman`
 [1]  7  8 11 14 15 16 17 18 21 22 23 24 30

$`Justen Powlowski`
 [1]  2  3  5  9 14 18 20 23 26 29

$`Nichelle Schoen`
 [1]  2  3  6  9 11 13 15 19 21 24 25 27 30</code></pre>
</div>
</div>
<p>These indices can be matched back to the original dataset. Here’s an example for the first sifter.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">assignment_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> abstracts_df[assignments[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], ]</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(assignment_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                             name                        affiliation
1                Jon Blick-Erdman                    Ziemann-Ziemann
4                 Nichelle Schoen Daugherty, Daugherty and Daugherty
6                 Mikayla Rau DDS                        Stark-Stark
8                  Earley Monahan                        Walsh-Walsh
10               Heriberto Feeney                    Ziemann-Ziemann
12 Muhammad Stoltenberg-Hermiston                        Tillman LLC
                     title
1      Coniogramme euantha
4         Zelkova vigilans
6      Oldfieldia mohriana
8      Isoetella flaccidum
10     Tylophora serrulata
12 Microtropis turubalense</code></pre>
</div>
</div>
<p>You could wrangle this into an anonymised dataframe with columns for the sifter to provide their assessment.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">anon_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> assignment_df[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>, drop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>]</span>
<span id="cb11-2">anon_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span></span>
<span id="cb11-3">anon_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>comments <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span></span>
<span id="cb11-4">anon_df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                         title score comments
1          Coniogramme euantha    NA     &lt;NA&gt;
4             Zelkova vigilans    NA     &lt;NA&gt;
6          Oldfieldia mohriana    NA     &lt;NA&gt;
8          Isoetella flaccidum    NA     &lt;NA&gt;
10         Tylophora serrulata    NA     &lt;NA&gt;
12     Microtropis turubalense    NA     &lt;NA&gt;
16         Coussapoa anatuyana    NA     &lt;NA&gt;
19 Chiloglottis brideliifolius    NA     &lt;NA&gt;
20            Crocus candollei    NA     &lt;NA&gt;
26         Pistacia weinmannii    NA     &lt;NA&gt;
28         Baillaudea dodsonii    NA     &lt;NA&gt;
29         Syngonium tangutica    NA     &lt;NA&gt;</code></pre>
</div>
</div>
<p>And then you can return this back to the sifter. The low-tech mechanism would be to put this into a spreadsheet output with {openxlsx}, for example. Much better would be to create a simple Shiny app hosted on Posit Connect or something, allowing each sifter to see their assigned abstracts and submit their assessments.</p>
</section>
<section id="check" class="level3">
<h3 class="anchored" data-anchor-id="check">Check</h3>
<p>Great, but the output actually meet the initial requirements for the system? Let’s take a look.</p>
<p>Was each abstract assigned the number of times specified by <code>assignment_cap</code>?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(assignments)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> n)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Here you can see that sifters received a near-equal number of abstracts, apart from the sifter who had a specified maximum-assignment cap.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lengths</span>(assignments)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Cannon Hegmann   Earley Monahan Jon Blick-Erdman Justen Powlowski 
              12               12               13               10 
 Nichelle Schoen 
              13 </code></pre>
</div>
</div>
<p>Was each sifter assigned a unique set of abstracts?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lengths</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(assignments, unique)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lengths</span>(assignments))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Did anyone receive their own abstract?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">sifter_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sifters_df[sifters_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(assignments), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>]</span>
<span id="cb19-2"></span>
<span id="cb19-3">has_own_abstract <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(sifter_names)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(sifter_names)</span>
<span id="cb19-5"></span>
<span id="cb19-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(sifter_names)) {</span>
<span id="cb19-7">  sifter_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sifter_names[i]</span>
<span id="cb19-8">  abstract_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> abstracts_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name[assignments[[i]]]</span>
<span id="cb19-9">  has_own_abstract[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(sifter_name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> abstract_names)</span>
<span id="cb19-10">}</span>
<span id="cb19-11"></span>
<span id="cb19-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(has_own_abstract)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Justen Powlowski Jon Blick-Erdman   Cannon Hegmann  Nichelle Schoen 
           FALSE            FALSE            FALSE            FALSE 
  Earley Monahan 
           FALSE </code></pre>
</div>
</div>
<p>Did any of the sifters get assigned abstracts from their own affiliation?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">affiliations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb21-2">  sifters_df[sifters_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(assignments), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"affiliation"</span>]</span>
<span id="cb21-3"></span>
<span id="cb21-4">has_affiliate_abstract <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(assignments)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(affiliations)</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(affiliations)) {</span>
<span id="cb21-8">  sifter_affiliation <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> affiliations[i]</span>
<span id="cb21-9">  abstract_affiliations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> abstracts_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>affiliation[assignments[[i]]]</span>
<span id="cb21-10">  has_affiliate_abstract[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(sifter_affiliation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> abstract_affiliations)</span>
<span id="cb21-11">}</span>
<span id="cb21-12"></span>
<span id="cb21-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(has_affiliate_abstract)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                        Paucek Inc                    Ziemann-Ziemann 
                             FALSE                              FALSE 
                       Wyman-Wyman Daugherty, Daugherty and Daugherty 
                             FALSE                              FALSE 
                       Walsh-Walsh 
                             FALSE </code></pre>
</div>
</div>
<p>Okey-doke.</p>
</section>
</section>
<section id="what-now" class="level2">
<h2 class="anchored" data-anchor-id="what-now">What now?</h2>
<p>This could definitely be better.</p>
<p>As mentioned, there’s a lot of refactoring that could be done, recognising that it was developed rapidly with changing requirements. I’m reflecting on it now that it’s solved the problem, but eventually it may be refactored or rewritten from scratch.</p>
<p>This would make sense if we (or you) want to use it in other scenarios or as part of a more generic package in future.</p>
<p>Or, as usual, this functionality probably exists in some package already and you can tell me all about it.</p>

</section>


<div id="quarto-appendix" class="default"><section id="environment" class="level3 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-03-27 15:42:32 GMT</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] digest_0.6.33     utf8_1.2.4        R6_2.5.1          fastmap_1.1.1    
 [5] xfun_0.41         magrittr_2.0.3    glue_1.7.0        tibble_3.2.1     
 [9] knitr_1.45        pkgconfig_2.0.3   htmltools_0.5.6.1 rmarkdown_2.25   
[13] lifecycle_1.0.4   cli_3.6.2         fansi_1.0.6       vctrs_0.6.5      
[17] compiler_4.3.1    rstudioapi_0.15.0 tools_4.3.1       whisker_0.4.1    
[21] pillar_1.9.0      evaluate_0.23     charlatan_0.5.1   yaml_2.3.8       
[25] rlang_1.1.3       jsonlite_1.8.7    htmlwidgets_1.6.2</code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The ‘single sample switch’ as Patrick Burns puts it <a href="https://www.burns-stat.com/pages/Tutor/R_inferno.pdf">in The R Inferno</a> (section 8.2.33).↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>charlatan</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2024-03-26-assign-abstracts/index.html</guid>
  <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Sh*tty R help from sh*tty AI</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-03-15-ai-garbage/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2024-03-15-ai-garbage/resources/beckhams.png" class="img-fluid" style="width:50.0%" data-fig.alt="Beckhams meme. Panels with Victoria then David. She says 'I wrote an R help website' and he responds 'be honest'. She says 'I am being honest' and he says 'really?'. She says 'well, I used AI to write an R help website and am shamelessly making money from innocent suckers as a result' and he says 'thank you'."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>The rise of R ‘help’ websites written by AI is predatory and shameless. Things will only get worse.</p>
</section>
<section id="chatbottom-of-the-barrel" class="level2">
<h2 class="anchored" data-anchor-id="chatbottom-of-the-barrel">Chatbottom of the barrel</h2>
<p>Regular readers know this for sure: I’m not an R expert. I don’t just ‘know’ stuff. I’m DuckGoGoing ‘how to do x in r’ every 10 minutes.</p>
<p>In doing this, I’ve noticed a trend that I want to complain about: I’ve found a few suspicious ‘help websites’ for R appearing high up the search rankings.</p>
<p>Why ‘suspicious’? They’re clearly written with an AI tool. And they’re garbage. In content and ethics.</p>
<p>I’m absolutely not going to name websites here because I do not want to send any traffic there.</p>
</section>
<section id="taking-you-for-a-sucker" class="level2">
<h2 class="anchored" data-anchor-id="taking-you-for-a-sucker">Taking you for a sucker</h2>
<p>Here’s where they excel. They:</p>
<ul>
<li>use your gullibility to make money</li>
<li>are brazen</li>
<li>have excellent SEO (<a href="https://en.wikipedia.org/wiki/Search_engine_optimization">search-engine optimisation</a>)</li>
</ul>
<section id="gullibility" class="level3">
<h3 class="anchored" data-anchor-id="gullibility">Gullibility</h3>
<p>You might be thinking ‘okay, but maybe this is an efficient way of helping people’. To which the obvious retort is ‘okay, no, this is an efficient way to make money by exploiting the clicks of vulnerable learners with low-quality, harmful content’.</p>
<p>How? At least one of these sites suggests it has ‘partners’, which are clearly just affiliate links. They will make a commission if their visitors sign up for a course at the affiliate link.</p>
<p>Reputable companies know they need good product to help drive sales. But the KPI for these fake sites is purely conversions, not ‘people helped’.</p>
</section>
<section id="brazenness" class="level3">
<h3 class="anchored" data-anchor-id="brazenness">Brazenness</h3>
<p>These sites seem to have tens (hundreds?) of help pages published on the same day without any attribution to a particular human. Either they have some very efficient staff or they assume no-one will check.</p>
<p>One website includes a ‘package guide’ for every package on CRAN. Wow! But you guessed it: these pages exist only to pad out the site. In this case, each of the 20,000 ‘guides’ was the same AI-generated content, but with the name of the package changed each time. Of course, there are affiliate links at the bottom of each one.</p>
<p>Perhaps most brazen is the poor attention to detail. At least one of these sites retains the sentence:</p>
<blockquote class="blockquote">
<p>Certainly! Here are the two sections for adding <affiliate> and <affiliate> to your webpage:</affiliate></affiliate></p>
</blockquote>
<p>Clearly someone has asked a chatbot for some text and it has obliged. And then they forgot to delete this telltale line from the output before pasting it into their website, lol.</p>
</section>
<section id="seo" class="level3">
<h3 class="anchored" data-anchor-id="seo">SEO</h3>
<p>In some cases I found links to these sites as the top search result for fairly generic R queries. Naturally, people will just click the top search results willy-nilly. These must be the best sites if they’re top of the rankings, right?</p>
<p>But no. Google is, of course, gameable as heck and you can be manipulated for clicks with <a href="https://en.wikipedia.org/wiki/Search_engine_optimization">search-engine optimisation</a> (SEO) hacks.</p>
<p>These sites haven’t ‘earned’ their ranking by producing high-quality advice. They’re not there because other people are linking to them as a mark of endorsement.</p>
</section>
</section>
<section id="why-this-sucks" class="level2">
<h2 class="anchored" data-anchor-id="why-this-sucks">Why this sucks</h2>
<p>Feels obvious that this garbage is harmful, but for the benefit of the doubt, my concerns are as follows:</p>
<ol type="1">
<li>Who are they stealing from?</li>
<li>How much of the code is hallucinatory?</li>
<li>Is this ruining learners’ understanding?</li>
</ol>
<p>It’s pretty common knowledge that many AIs are trained on data without the consent of original creators. How much content on these pages is stolen from people without their consent? Maybe it slurped up some of <em>your</em> material against your will.</p>
<p>These sites also have code where the examples literally cannot be run; the syntax cannot be evaluated if copy-pasted into an R terminal. At least one of these sites was offering advice for {ggplot2} without ever showing an example plot.</p>
<p>I’ve been searching the internet for R-related stuff<sup>1</sup> for many years and can separate the wheat from the chaff, I reckon. But not everyone can. How can a beginner user know what’s wrong if they copy and paste trash from a shameless website like this?</p>
</section>
<section id="suck-it-up" class="level2">
<h2 class="anchored" data-anchor-id="suck-it-up">Suck it up</h2>
<p>Bottom line: this is scummy.</p>
<p>I’m asking that you take two seconds to think ‘could this be a fake website?’ Consider the telltale signs:</p>
<ul>
<li>suspicious wording and accidentally-undeleted verbiage copied from the output of an LLM (large language model) query</li>
<li>obvious links to affiliate sites</li>
<li>code that doesn’t run when you copy it to your machine</li>
<li>examples of code, but no output</li>
<li>crappy AI-generated images that fill space (probably <a href="https://en.wikipedia.org/wiki/Corporate_Memphis">Corporate-Memphis-style</a> abominations showing a generic 30-something white guy at a computer who is probably called Matt<sup>2</sup>)</li>
</ul>
<p>Maybe I don’t need to warn you about this. It’s 2024. I grew up in a slower-paced learning environment of floppies and CD ROMs. Times have changed. You’re smart.</p>
<p>Don’t patronise these sites by clicking affiliate links; patronise them with condescension. It’s all we can do.</p>
<div class="tip">
<p> <b>Note</b></p>
<p>There’s a more proactive step you can take to avoid irritant sites: <a href="https://mstdn.ca/@Jason2357/112123727753434112">Jason suggested on Mastodon</a> to create a custom search of R-related domains that you trust.</p>
</div>
<div class="tip">
<p> <b>Note</b></p>
<p>James (<a href="https://quarto-webr.thecoatlessprofessor.com/">of quarto-webr fame</a>) has created <a href="https://r-pkg.thecoatlessprofessor.com/searcher/">a package called {searcher}</a> that lets you submit queries from the R console to a variety of search engines. It includes <code>search_rseek()</code> so you can search R-specific sites via <a href="https://rseek.org/">rseek.org</a>.</p>
</div>

</section>


<div id="quarto-appendix" class="default"><section id="environment" class="level3 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-03-27 16:46:50 GMT</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.2        
 [5] tools_4.3.1       htmltools_0.5.6.1 rstudioapi_0.15.0 yaml_2.3.8       
 [9] rmarkdown_2.25    knitr_1.45        jsonlite_1.8.7    xfun_0.41        
[13] digest_0.6.33     rlang_1.1.3       fontawesome_0.5.2 evaluate_0.23    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Although putting ‘r’ in your search terms often ends up with links to subreddits. Do try to avoid being sucked down an r/ProgrammerHumor black hole.↩︎</p></li>
<li id="fn2"><p>I can say this because it’s my exact description.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>ai</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2024-03-15-ai-garbage/index.html</guid>
  <pubDate>Fri, 15 Mar 2024 00:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-03-15-ai-garbage/resources/beckhams.png" medium="image" type="image/png" height="178" width="144"/>
</item>
<item>
  <title>Ellipses, eclipses and bulletses</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-03-12-eclipse/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2024-03-12-eclipse/resources/cli-eclipse.png" class="img-fluid" data-fig.alt="An R function called add_one is run in an RStudio console with a string passed as the only argument. The output reads 'Error in add_one, x must be of class numeric, you provided x with class character.' The output is coloured and there are symbols at the start of certain lines, like an exclamation point and red cross. It ends with backtrace to see the error was from add_one in the global environment. Also there's a creeppy emoji sun that's not-quite obscured by a creepy emoji moon."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>You can use <a href="https://cli.r-lib.org/">{cli}</a> and <a href="https://rlang.r-lib.org/">{rlang}</a> to help create a helpful error-handling function that can prevent an eclipse.</p>
</section>
<section id="check-one-two" class="level2">
<h2 class="anchored" data-anchor-id="check-one-two">Check one two</h2>
<p>I’ve been building an ‘error helper’ function<sup>1</sup> called <code>check_class()</code>. You put it inside another function to check if the user has supplied arguments of the expected class. Surprise.</p>
<p>I did this to provide richer, more informative error output compared to a simple <code>if () stop()</code>. But it has a few features I wanted to record here for my own reference.</p>
<p>In particular, <code>check_class()</code>:</p>
<ul>
<li>uses {rlang} to handle multiple inputs to the dots (<code>...</code>) argument</li>
<li>uses {rlang} to avoid an ‘error-handling eclipse’</li>
<li>uses {cli} for pretty error messaging</li>
<li>can handle multiple errors and build bulleted {cli} lists from them</li>
</ul>
<p>Maybe you’ll find something useful here too.</p>
</section>
<section id="a-classy-check" class="level2">
<h2 class="anchored" data-anchor-id="a-classy-check">A classy check</h2>
<section id="examples" class="level3">
<h3 class="anchored" data-anchor-id="examples">Examples</h3>
<p>Here are some simple examples of inserting <code>check_class()</code> inside another function. The simple function <code>add_one()</code> expects a numeric value. What happens if you supply a string?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">add_one <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_class</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.expected_class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>)</span>
<span id="cb1-3">  x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-4">}</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_one</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in `add_one()`:
! `x` must be of class &lt;numeric&gt;
✖ You provided:
• `x` with class &lt;character&gt;</code></pre>
</div>
</div>
<p>You get a user-friendly output that tells you the problem and where you went wrong. It doesn’t render in this blog post, but in supported consoles the output will be coloured and you’ll get a backtrace to say where the error occurred. See the image at the top of the post for an example.</p>
<p>You can provide an arbitrary number of values to <code>check_class()</code> for assessment. The example below takes three arguments that should all be numeric. What happens if we supply three objects of the wrong type?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">multiply_and_raise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y, z) {</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_class</span>(x, y, z, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.expected_class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>)</span>
<span id="cb3-3">  x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> z</span>
<span id="cb3-4">}</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">multiply_and_raise</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>())</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in `multiply_and_raise()`:
! `x`, `y`, and `z` must be of class &lt;numeric&gt;
✖ You provided:
• `x` with class &lt;list&gt;
• `y` with class &lt;data.frame&gt;
• `z` with class &lt;c("matrix", "array")&gt;</code></pre>
</div>
</div>
<p>The output now shows each failure as separate bullet points so it’s clear where we made the error and what the problem was.</p>
</section>
</section>
<section id="function" class="level2">
<h2 class="anchored" data-anchor-id="function">Function</h2>
<p>Below is what the <code>check_class()</code> function actually looks like. I’ve added some comments to explain what’s happening at each step. For demo purposes, the function is equipped to check for numeric and character classes only, but you could expand the <code>switch()</code> statement for other classes too.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Check Class of Argument Inputs</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param ... Objects to be checked for class.</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param .expected_class Character. The name of the class against which objects</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'     should be checked.</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param .call The environment in which this function is to be called.</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @noRd</span></span>
<span id="cb5-7">check_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(</span>
<span id="cb5-8">    ...,</span>
<span id="cb5-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.expected_class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>),</span>
<span id="cb5-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.call =</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()</span>
<span id="cb5-11">) {</span>
<span id="cb5-12">  </span>
<span id="cb5-13">  .expected_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match.arg</span>(.expected_class)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ensures 'numeric'/'character'</span></span>
<span id="cb5-14">  </span>
<span id="cb5-15">  args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dots_list</span>(..., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.named =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># collect dots values</span></span>
<span id="cb5-16">  </span>
<span id="cb5-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check each value against expected class</span></span>
<span id="cb5-18">  args_are_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(</span>
<span id="cb5-19">    args,</span>
<span id="cb5-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(arg) {</span>
<span id="cb5-21">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span>(</span>
<span id="cb5-22">        .expected_class,</span>
<span id="cb5-23">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">numeric   =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(arg),</span>
<span id="cb5-24">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">character =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(arg),</span>
<span id="cb5-25">      )</span>
<span id="cb5-26">    }</span>
<span id="cb5-27">  )</span>
<span id="cb5-28">  </span>
<span id="cb5-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Isolate values that have wrong class</span></span>
<span id="cb5-30">  fails_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Filter</span>(isFALSE, args_are_class))</span>
<span id="cb5-31">  </span>
<span id="cb5-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(fails_names) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb5-33">    </span>
<span id="cb5-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare variables with failure information</span></span>
<span id="cb5-35">    fails <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> args[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(args) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> fails_names]</span>
<span id="cb5-36">    fails_classes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(fails, class)</span>
<span id="cb5-37">    </span>
<span id="cb5-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build a bulleted {cli}-styled vector of the failures</span></span>
<span id="cb5-39">    fails_bullets <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(</span>
<span id="cb5-40">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb5-41">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.var "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(fails_classes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"} with class {.cls "</span>,</span>
<span id="cb5-42">        fails_classes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"}"</span></span>
<span id="cb5-43">      ),</span>
<span id="cb5-44">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(fails_classes))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name with bullet point symbol</span></span>
<span id="cb5-45">    )</span>
<span id="cb5-46">    </span>
<span id="cb5-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Raise the error, printed nicely in {cli} style</span></span>
<span id="cb5-48">    cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_abort</span>(</span>
<span id="cb5-49">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb5-50">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.var {fails_names}} must be of class {.cls {(.expected_class)}}"</span>,</span>
<span id="cb5-51">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You provided:"</span>, fails_bullets</span>
<span id="cb5-52">      ),</span>
<span id="cb5-53">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call =</span> .call  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># environment of parent function, not check_class() itself</span></span>
<span id="cb5-54">    )</span>
<span id="cb5-55">  }</span>
<span id="cb5-56">  </span>
<span id="cb5-57">}</span></code></pre></div>
</div>
<p>And now to explain in a bit more depth those features I mentioned.</p>
</section>
<section id="features" class="level2">
<h2 class="anchored" data-anchor-id="features">Features</h2>
<section id="ellipses" class="level3">
<h3 class="anchored" data-anchor-id="ellipses">Ellipses</h3>
<p>When a function has a dots (<code>...</code>) argument, it means you can pass an arbitrary number of objects to be captured. Consider <code>paste("You", "smell")</code> (two values), <code>paste("You", "smell", "wonderful")</code> (three), etc, or how you can provide an arbitrary number of column names to <code>dplyr::select()</code>.</p>
<p>The first argument to <code>check_class()</code> is <code>...</code>. You pass to it as many values as you need to assess for an expected class. So the function <code>add_one(x)</code> would contain within it a call to <code>check_class(x, .expected_class = "numeric")</code> (one argument to check), while <code>multiply(x, y)</code> would accept <code>check_class(x, y, .expected_class = "numeric")</code> (two)<sup>2</sup>.</p>
<p>I’ve used the {rlang} package’s <code>dots_list()</code> function to collect the dots elements into a list. The <code>.named = TRUE</code> argument names each element, so we can pinpoint the errors and report them to the user.</p>
<p>I have collaborators, so readability of the code is important. I think <code>rlang::dots_list()</code> is more readable than the base approach, which is something like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(...)</span>
<span id="cb6-2">arg_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">...</span>()))</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(args) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> arg_names</span></code></pre></div>
</div>
</section>
<section id="eclipses" class="level3">
<h3 class="anchored" data-anchor-id="eclipses">Eclipses</h3>
<p>So: you put <code>check_class()</code> inside another function. This causes a problem: errors will be reported to the user as having been raised by <code>check_class()</code>, but it’s an internal function that they’ll never see. It would be better to report the error has having originated from the parent function instead.</p>
<p>This obfuscation, this ‘code smell’, has been nicknamed an ‘error-handling eclipse’ by Nick Tierney, whose <a href="https://www.njtierney.com/post/2023/12/06/long-errors-smell/">blog post</a> was extremely well-timed for when I was writing <code>check_class()</code>.</p>
<p>In short, you can record with <code>rlang::caller_env()</code> the environment in which the <code>check_class()</code> function was used. You can hand that to the <code>call</code> function of <code>cli::cli_abort()</code>, which <code>check_class()</code> uses to build and report error messages. This means the error is reported from the function enclosing <code>check_class()</code>, not from <code>check_class()</code> itself.</p>
<p>For example, here’s an example <code>report_env()</code> function, which prints the environment in which it’s called. Since this is being run in the global environment, the global environment will be printed.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>())  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clear the global environment</span></span>
<span id="cb7-2">report_env <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_print</span>(env)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">report_env</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;environment: global&gt;
Parent: &lt;environment: package:stats&gt;
Bindings:
• report_env: &lt;fn&gt;
• .main: &lt;fn&gt;</code></pre>
</div>
</div>
<p>If we nest <code>report_env()</code> inside another function then the reported environment is of that enclosing function (expressed here as its bytecode), which itself is nested in its parent (global) environment.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">report_env_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">report_env</span>()</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">report_env_2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;environment: 0x10b25d0a0&gt;
Parent: &lt;environment: global&gt;</code></pre>
</div>
</div>
<p>See the image at the top of this post, which shows the backtrace as having originated from the enclosing <code>add_one()</code> function rather than the <code>check_class()</code> call within it.</p>
</section>
<section id="bulletses" class="level3">
<h3 class="anchored" data-anchor-id="bulletses">Bulletses</h3>
<p><a href="https://github.com/r-lib/cli">The {cli} package</a> lets you build rich user interfaces for your functions<sup>3</sup>. This is great for composing informative warning and error messages for the user.</p>
<p>Let’s focus on a simplified example of <code>cli::cli_abort()</code>, which is like the {cli} equivalent of <code>stop()</code>. Let’s pretend we passed a character vector when it should have been numeric.</p>
<p>To the <code>message</code> argument you provide a named vector, where the name will be printed as a symbol in the output. This will be a yellow exclamation point for <code>cli_abort()</code> by default, which draws attention to the exact error. The name ‘x’ prints as a red cross to indicate what the user did wrong.</p>
<p>You can also use {glue} syntax in {cli} to evaluate variables. But {cli} goes one further: it has special syntax to provide consistent mark-up to bits of text. For example, <code>"{.var x}"</code> will print with surrounding backticks and <code>"{.cls numeric}"</code> will print in blue with surrounding less/greater than symbols.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">fail_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span> </span>
<span id="cb11-2">cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_abort</span>(</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb11-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.var x} must be of class {.cls numeric}"</span>,</span>
<span id="cb11-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You provided class {.cls {fail_class}}"</span></span>
<span id="cb11-6">  )</span>
<span id="cb11-7">)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error:
! `x` must be of class &lt;numeric&gt;
✖ You provided class &lt;character&gt;</code></pre>
</div>
</div>
<p>Again, see an example in the image at the top of the post.</p>
<p>Since <code>check_class()</code> can take multiple values via the dots, we can construct an individual report for each failing element. {cli} will automatically turn each of these constructed lines into a bullet point in the printed output if we name them with an asterisk, which is pretty neat.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">expected_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span></span>
<span id="cb13-2">fails <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>)</span>
<span id="cb13-3">fails_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(fails)</span>
<span id="cb13-4"></span>
<span id="cb13-5">fails_bullets <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(</span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.var "</span>, fails_names, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"} with class {.cls "</span>, fails, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"}"</span>),</span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(fails))</span>
<span id="cb13-8">)</span>
<span id="cb13-9"></span>
<span id="cb13-10">cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cli_abort</span>(</span>
<span id="cb13-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb13-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{.var {fails_names}} must be of class {.cls {expected_class}}"</span>,</span>
<span id="cb13-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You provided:"</span>, fails_bullets</span>
<span id="cb13-14">  )</span>
<span id="cb13-15">)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error:
! `x` and `y` must be of class &lt;numeric&gt;
✖ You provided:
• `x` with class &lt;character&gt;
• `y` with class &lt;list&gt;</code></pre>
</div>
</div>
<p>Pew pew pew.</p>
<section id="test" class="level4">
<h4 class="anchored" data-anchor-id="test">Test</h4>
<p>Here’s a cheeky bonus if you’re wondering how to test for {cli} messages: you can use <code>cli::test_that_cli()</code> to test the output against <a href="https://testthat.r-lib.org/articles/snapshotting.html">an earlier snapshot</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that_cli</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prints expected error"</span>, {</span>
<span id="cb15-2">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local_edition</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only works with {testthat} 3e</span></span>
<span id="cb15-3">  testthat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_snapshot</span>({</span>
<span id="cb15-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_class</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.expected_class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>)</span>
<span id="cb15-5">  })</span>
<span id="cb15-6">})</span></code></pre></div>
</div>
</section>
</section>
</section>
<section id="error-helper-help" class="level2">
<h2 class="anchored" data-anchor-id="error-helper-help">Error-helper help?</h2>
<p>Is this horribly overengineered? What is your approach to creating friendly and actionable error messages for your users?</p>

</section>


<div id="quarto-appendix" class="default"><section id="environment" class="level3 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-04-10 08:54:28 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] digest_0.6.35     utf8_1.2.4        fastmap_1.1.1     xfun_0.43        
 [5] glue_1.7.0        knitr_1.45        htmltools_0.5.8   rmarkdown_2.26   
 [9] lifecycle_1.0.4   cli_3.6.2         fansi_1.0.6       vctrs_0.6.5      
[13] compiler_4.3.1    rstudioapi_0.16.0 tools_4.3.1       evaluate_0.23    
[17] pillar_1.9.0      yaml_2.3.8        rlang_1.1.3       jsonlite_1.8.8   
[21] htmlwidgets_1.6.2</code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>{rlang} has <a href="https://rlang.r-lib.org/reference/topic-error-call.html">some helpful documentation on error helpers</a>, which you can find by typing <code>?rlang::`topic-error-call`</code> into the console↩︎</p></li>
<li id="fn2"><p>I’ve used a dot-prefix for the remaining <code>check_class()</code> arguments, which reduces the chance of a clash with user-supplied values to the dots. This is recommended in <a href="https://design.tidyverse.org/dots-prefix.html">the Tidy Design Principles book</a>.↩︎</p></li>
<li id="fn3"><p><a href="https://www.rostrum.blog/posts/2023-09-17-choosethis/">I wrote about {cli} in an earlier post</a>, where I explored its ability to generate hyperlinks in the R console. I used it for fun (to build a choose-your-own-adventure in the console), but it can be useful for things like opening a file at the exact line where a test failure occurred.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>cli</category>
  <category>r</category>
  <category>rlang</category>
  <guid>https://www.rostrum.blog/posts/2024-03-12-eclipse/index.html</guid>
  <pubDate>Tue, 12 Mar 2024 00:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-03-12-eclipse/resources/cli-eclipse.png" medium="image" type="image/png" height="57" width="144"/>
</item>
<item>
  <title>Start an argument with R</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-02-03-base-args/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2024-02-03-base-args/resources/argument.png" class="img-fluid" data-fig.alt="Two poorly drawn angry faces. One says 'str(x)' above it and the other says str(x, max.level = 1)'."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>Some (lesser-known?) arguments to some common base-R functions.</p>
</section>
<section id="getting-argumentative" class="level2">
<h2 class="anchored" data-anchor-id="getting-argumentative">Getting argumentative</h2>
<p>There’s been a recent glut of posts about useful base-R functions, like the ones by <a href="https://masalmon.eu/2023/10/20/three-neat-functions/">Maëlle</a>, <a href="https://ivelasq.rbind.io/blog/not-so-basic-base-r-functions/">Isabella</a> and <a href="https://yihui.org/en/2023/10/three-functions/">Yihui</a>.</p>
<p>I bring you a twist on the theme. Four useful <em>arguments</em> from four everyday base functions:</p>
<ul>
<li><code>max.level</code> in <code>str()</code></li>
<li><code>n</code> in <code>print()</code></li>
<li><code>include.only</code> in <code>library()</code></li>
<li><code>drop</code> in <code>`[`</code></li>
</ul>
<p>Feel free to move on if you know all of these.</p>
<section id="structural-integrity" class="level3">
<h3 class="anchored" data-anchor-id="structural-integrity">Structural integrity</h3>
<p><code>str()</code> prints an object’s structure. It can be especially helpful for viewing lists in a compact hierarchical fashion. Consider this nested list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">nested_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x3 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x4 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)),</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y3 =</span> mtcars))),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z1 =</span> beaver1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z4 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z5 =</span> chickwts), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z5 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-5">)</span></code></pre></div>
</div>
<p>Here’s the output we get from a simple <code>str()</code> call:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(nested_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 3
 $ x:List of 2
  ..$ x1: int [1:3] 1 2 3
  ..$ x2:List of 2
  .. ..$ x3: int [1:3] 4 5 6
  .. ..$ x4: int [1:3] 7 8 9
 $ y:List of 1
  ..$ y1:List of 1
  .. ..$ y2:List of 1
  .. .. ..$ y3:'data.frame':    32 obs. of  11 variables:
  .. .. .. ..$ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
  .. .. .. ..$ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ...
  .. .. .. ..$ disp: num [1:32] 160 160 108 258 360 ...
  .. .. .. ..$ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ...
  .. .. .. ..$ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
  .. .. .. ..$ wt  : num [1:32] 2.62 2.88 2.32 3.21 3.44 ...
  .. .. .. ..$ qsec: num [1:32] 16.5 17 18.6 19.4 17 ...
  .. .. .. ..$ vs  : num [1:32] 0 0 1 1 0 1 0 1 1 1 ...
  .. .. .. ..$ am  : num [1:32] 1 1 1 0 0 0 0 0 0 0 ...
  .. .. .. ..$ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ...
  .. .. .. ..$ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ...
 $ z:List of 3
  ..$ z1:'data.frame':  114 obs. of  4 variables:
  .. ..$ day  : num [1:114] 346 346 346 346 346 346 346 346 346 346 ...
  .. ..$ time : num [1:114] 840 850 900 910 920 930 940 950 1000 1010 ...
  .. ..$ temp : num [1:114] 36.3 36.3 36.4 36.4 36.5 ...
  .. ..$ activ: num [1:114] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ z2:List of 2
  .. ..$ z4: num 100
  .. ..$ z5:'data.frame':   71 obs. of  2 variables:
  .. .. ..$ weight: num [1:71] 179 160 136 227 217 168 108 124 143 140 ...
  .. .. ..$ feed  : Factor w/ 6 levels "casein","horsebean",..: 2 2 2 2 2 2 2 2 2 2 ...
  ..$ z3:List of 1
  .. ..$ z5: num 1</code></pre>
</div>
</div>
<p>Oof, that’s a little bit too much information to flood my console with.</p>
<p>Luckily we can use the <code>max.level</code> argument to restrict the depth to which the list is printed. Here’s the top level only, which has a depth of 1:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(nested_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.level =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 3
 $ x:List of 2
 $ y:List of 1
 $ z:List of 3</code></pre>
</div>
</div>
<p>Now we have a very high-level overview: the object is a list containing three sub-lists of particular lengths.</p>
<p>Let’s go deeper. And since <code>max.level</code> is the second argument, we don’t even need to name it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(nested_list, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 3
 $ x:List of 2
  ..$ x1: int [1:3] 1 2 3
  ..$ x2:List of 2
 $ y:List of 1
  ..$ y1:List of 1
 $ z:List of 3
  ..$ z1:'data.frame':  114 obs. of  4 variables:
  ..$ z2:List of 2
  ..$ z3:List of 1</code></pre>
</div>
</div>
<p>So now we’ve unpeeled the next layer of the onion and can see that the sub-lists are made up of a vector, a data.frame and yet more lists.</p>
<p>For me, this is a nice way to get a sense of structure without seeing the entire content. I also think it beats the interactive list <code>View()</code> in RStudio as well, which can’t be opened to an arbitrary depth in one go<sup>1</sup>.</p>
</section>
<section id="carriage-feed" class="level3">
<h3 class="anchored" data-anchor-id="carriage-feed">Carriage feed</h3>
<p><code>print()</code> is a ubiquitous function across most programming languages. In R, you might just type an object’s name to show it. Here’s a tibble with 21 rows to demonstrate.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">chick_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(ChickWeight[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, ])</span>
<span id="cb8-2">chick_tbl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 21 × 4
   weight  Time Chick Diet 
    &lt;dbl&gt; &lt;dbl&gt; &lt;ord&gt; &lt;fct&gt;
 1     42     0 1     1    
 2     51     2 1     1    
 3     59     4 1     1    
 4     64     6 1     1    
 5     76     8 1     1    
 6     93    10 1     1    
 7    106    12 1     1    
 8    125    14 1     1    
 9    149    16 1     1    
10    171    18 1     1    
# ℹ 11 more rows</code></pre>
</div>
</div>
<p>You might use <code>head()</code> on a data.frame to prevent printing the whole thing, which defaults to showing 6 rows. Tibbles are truncated by default to 10, but a nice feature is that they’ll show a few more if there’s slightly more than 10 rows total. But what if you want more control?</p>
<p>Well, in both <code>print()</code> and <code>head()</code> is the <code>n</code> argument. No surprise: it lets you select <code>n</code> number of data.frame or tibble rows to show in the console.</p>
<p>I particularly like this for inspecting the entirety of a small tibble that’s been truncated by default. I’ll sometimes find myself doing this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(chick_tbl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 21 × 4
   weight  Time Chick Diet 
    &lt;dbl&gt; &lt;dbl&gt; &lt;ord&gt; &lt;fct&gt;
 1     42     0 1     1    
 2     51     2 1     1    
 3     59     4 1     1    
 4     64     6 1     1    
 5     76     8 1     1    
 6     93    10 1     1    
 7    106    12 1     1    
 8    125    14 1     1    
 9    149    16 1     1    
10    171    18 1     1    
11    199    20 1     1    
12    205    21 1     1    
13     40     0 2     1    
14     49     2 2     1    
15     58     4 2     1    
16     72     6 2     1    
17     84     8 2     1    
18    103    10 2     1    
19    122    12 2     1    
20    138    14 2     1    
21    162    16 2     1    </code></pre>
</div>
</div>
<p>You can set an <code>option()</code> to see more tibble rows by default, but I’m usually okay with its normal truncating behaviour. Using <code>n</code> is a convenience when I need it.</p>
</section>
<section id="library-check-out" class="level3">
<h3 class="anchored" data-anchor-id="library-check-out">Library check out</h3>
<p><code>library()</code> calls are a staple of R scripts. Let’s say I’m attaching the {lme4} package because I want to use the famous <code>cake</code> data set (thanks Rasmus<sup>2</sup>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lme4, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>Aha, no, it’s not the <code>quietly</code> argument I want to talk about<sup>3</sup>, though it is handy for stopping messages from being printed.</p>
<p>Of course, what <code>library()</code> does is let you access objects—like functions and data sets—from a named package. How many objects did we attach from {lme4}?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:lme4"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 102</code></pre>
</div>
</div>
<p>Blimey, all we wanted was <code>cake</code>. But actually, we can be more selective with <code>library()</code> using the <code>include.only</code> argument (note that you can <code>exclude</code> as well).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">detach</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:lme4"</span>)</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lme4, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">include.only =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cake"</span>)</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:lme4"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "cake"</code></pre>
</div>
</div>
<p>Why would you want to do this? This can keep your environment tidy—if that’s something you care about—but also helps prevent conflicts between objects that have the same name. For example, {dplyr}’s <code>filter()</code> function masks <code>stats::filter()</code>.</p>
<p>This is also more explicit. People reading your script can see all the functions you’ve pulled in from each package by looking at your <code>library()</code> calls <sup>4</sup>. If I see <code>cake</code> referenced in your script but can’t see how it was derived, I can look at the <code>library()</code> call to see that you imported it from {lme4}.</p>
<p>At worst, this might be a nice thing for Python users, who love to <code>from x import y</code>.</p>
</section>
<section id="score-a-drop-goal" class="level3">
<h3 class="anchored" data-anchor-id="score-a-drop-goal">Score a drop goal</h3>
<p>The square bracket, <code>`[`</code>, is a function<sup>5</sup> for extracting elements out of objects, like rows and columns of a data.frame. Of course, it’s typically used as a pair of square brackets.</p>
<p>So the following will give you the first three rows of the <code>cake</code> data.frame for the columns <code>temp</code> and <code>angle</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">cake[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"angle"</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  temp angle
1  175    42
2  185    46
3  195    47</code></pre>
</div>
</div>
<p>What happens when you select a single column? You get one column back, right?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">cake[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"temp"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 175 185 195</code></pre>
</div>
</div>
<p>Ha, lol, no. You get a vector. This might be a problem if you’re passing column names into <code>`[`</code> programmatically and you’re always expecting a data.frame as output.</p>
<p>Luckily, you can guard against this by ensuring the returned doesn’t <code>drop</code> to its simplest dimension.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">cake[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"angle"</span>, drop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  angle
1    42
2    46
3    47</code></pre>
</div>
</div>
<p>I can see how a third argument inside the square brackets may look spooky if you thought you could only pass two when working on a data.frame<sup>6</sup>.</p>
</section>
</section>
<section id="mutual-agreement" class="level2">
<h2 class="anchored" data-anchor-id="mutual-agreement">Mutual agreement</h2>
<p>These were unlikely to have blown your mind, especially if you’re a seasoned user. But I’ve live-coded recently with some folks who hadn’t seen them before. Maybe you haven’t either.</p>
<p>Let me know if you want to argue your case for some other under-appreciated arguments.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-02-05 14:16:16 GMT</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] lme4_1.1-35.1 Matrix_1.6-0 

loaded via a namespace (and not attached):
 [1] vctrs_0.6.5       nlme_3.1-162      cli_3.6.2         knitr_1.45       
 [5] rlang_1.1.3       xfun_0.41         minqa_1.2.6       jsonlite_1.8.7   
 [9] glue_1.7.0        htmltools_0.5.6.1 fansi_1.0.6       rmarkdown_2.25   
[13] grid_4.3.1        evaluate_0.23     tibble_3.2.1      MASS_7.3-60      
[17] fastmap_1.1.1     yaml_2.3.8        lifecycle_1.0.4   compiler_4.3.1   
[21] Rcpp_1.0.11       htmlwidgets_1.6.2 pkgconfig_2.0.3   rstudioapi_0.15.0
[25] lattice_0.21-8    digest_0.6.33     nloptr_2.0.3      utf8_1.2.4       
[29] pillar_1.9.0      splines_4.3.1     magrittr_2.0.3    tools_4.3.1      
[33] boot_1.3-28.1    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I generally prefer to use the console for inspecting objects, rather than an IDE. I usually have the RStudio environment pane minimised.↩︎</p></li>
<li id="fn2"><p>Rasmus recently <a href="https://www.sumsar.net/blog/source-of-the-cake-dataset/">did some sleuthing</a> to discover the source of this data set! A great read.↩︎</p></li>
<li id="fn3"><p>Note that package startup messages can also be controlled en masse by wrapping library calls in <code>suppressPackageStartupMessages()</code>, which I’ve <a href="https://www.rostrum.blog/posts/2021-08-27-zzz/">talked about before</a>. And also written about <a href="https://www.rostrum.blog/posts/2021-11-27-long-fns/">the sheer length of this function name</a>.↩︎</p></li>
<li id="fn4"><p>I’m fully aware that you can namespace objects in your scripts, like <code>lme4::cake</code>. That can reduce readability if every object is called in this way, though I do this myself when writing packages, for example.↩︎</p></li>
<li id="fn5"><p>Recall that <code>`[`</code> is actually a function so you can write <code>`[`(mtcars, 1:3, c("cyl", "hp"))</code> to achieve the same things as <code>mtcars[1:3, c("cyl", "hp")]</code>.↩︎</p></li>
<li id="fn6"><p>Of course, three arguments to <code>`[`</code> is bread and butter for {data.table} users!↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>base</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2024-02-03-base-args/index.html</guid>
  <pubDate>Sat, 03 Feb 2024 00:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-02-03-base-args/resources/argument.png" medium="image" type="image/png" height="63" width="144"/>
</item>
<item>
  <title>Kill your darlings (but bugfix first)</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-01-27-a11ytables-0.3/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2024-01-27-a11ytables-0.3/resources/a11ytables03.png" class="img-fluid" alt="The text 'a11ytables v0.3' writtten out using cells of a spreadsheet coloured green."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>An update about updates to <a href="https://co-analysis.github.io/a11ytables/index.html">{a11ytables}</a>. Also maybe I should rewrite the whole thing from scratch, lol.</p>
</section>
<section id="birth" class="level2">
<h2 class="anchored" data-anchor-id="birth">Birth</h2>
<p>Right so, <a href="https://co-analysis.github.io/a11ytables/index.html">I made the {a11ytables} R package</a> to help create government statistics publications that meet <a href="https://analysisfunction.civilservice.gov.uk/policy-store/releasing-statistics-in-spreadsheets/">official best practice standards</a>. You may be interested in <a href="https://www.rostrum.blog/posts/2022-09-07-earl22/">a talk I did about it at EARL 2022</a>.</p>
<p>I originally made it for me and my team so we could publish accessible spreadsheets to <a href="https://www.gov.uk/search/research-and-statistics">GOV.UK</a>. It seems to have been picked up by a number of other government departments, so I’ve continued to develop it even though I don’t use it myself anymore<sup>1</sup>.</p>
<p>You can stop reading now if you aren’t one of those 12 users. Go and water your plants maybe.</p>
</section>
<section id="life" class="level2">
<h2 class="anchored" data-anchor-id="life">Life</h2>
<p>I’ve done two minor updates that add new features. We’re now on version 0.3, please try to keep up.</p>
<p>Of course, you can read <a href="https://co-analysis.github.io/a11ytables/news/index.html">the package’s NEWS.md file</a> for details on the changes covered by these updates.</p>
<p>My tests are weak and I’ve no idea of all edge cases, so please do <a href="https://github.com/co-analysis/a11ytables/issues">leave an issue in the repo</a> if you find something bad or embarrassing<sup>2</sup> in the package.</p>
<section id="version-0.2" class="level3">
<h3 class="anchored" data-anchor-id="version-0.2">Version 0.2</h3>
<p>The package interface lets you supply a data.frame to insert into each worksheet. Nice and simple and makes perfect sense for the contents, notes and ‘tables’ sheet types. But not ideal for the cover, actually.</p>
<p>You used to have to supply a data.frame for the cover that had a row per section and a column each for the section headers and their content. This is obviously restrictive: what if the sections on your cover sheet need more than one row of information?</p>
<p>For example, you might need a section on the cover sheet called ‘Contact us’ that contains three rows: some preamble, a website link and a contact email address.</p>
<p>Version 0.2 of the package, which dropped in November 2023, solves this problem. Now you can provide a list object with arbitrary content instead of providing a data.frame. For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">cover_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Information"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a demo spreadsheet cover."</span>,</span>
<span id="cb1-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contact us"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb1-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Find out more by contacting us."</span>,</span>
<span id="cb1-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Website: https://co-analysis.github.io/a11ytables/"</span>,</span>
<span id="cb1-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Email address: fake.address@a11ytables.com"</span></span>
<span id="cb1-7">  )</span>
<span id="cb1-8">)</span></code></pre></div>
</div>
<p>This will result in a cover sheet with two sections. The first will have one row and the second will have three. This is way better than in before, when you could only supply one row per section.</p>
<p>But wait! This update made hyperlinks available on the cover page as well. The user supplies these in Markdown format—like <code>[{a11ytables}](https://github.com/co-analysis/a11ytables)</code>—and they’re auto-converted so that the resulting spreadsheet cell contains a hyperlink<sup>3</sup>. For example, the website and email address could be written like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">cover_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb2-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Information"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a demo spreadsheet cover."</span>,</span>
<span id="cb2-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contact us"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb2-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Find out more by contacting us."</span>,</span>
<span id="cb2-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[Website](https://co-analysis.github.io/a11ytables/)"</span>,</span>
<span id="cb2-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[Email address](fake.address@a11ytables.com)"</span></span>
<span id="cb2-7">  )</span>
<span id="cb2-8">)</span></code></pre></div>
</div>
<p>While I was adding the hyperlink functionality to the cover, I figured I would make it available to the <code>source</code> argument of <code>create_a11ytable()</code> as well, so users can link to the origin for the tables of data in their publication.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">    sources <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb3-2">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb3-3">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[Gorman et al, 2024](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0090081)"</span></span>
<span id="cb3-4">    ),</span></code></pre></div>
</div>
</section>
<section id="version-0.3" class="level3">
<h3 class="anchored" data-anchor-id="version-0.3">Version 0.3</h3>
<p>Arbitrary content was also the theme for version 0.3, which hit shelves earlier this month. Prior to this version, it was assumed there were only going to be certain rows of information above a table: the sheet title (required, provided by the user), a message about the number of tables in the sheet (autogenerated), a message about the presence of notes (autogenerated) and the data source (optional, if provided by the user).</p>
<p>But {a11ytables} users and other spreadsheet publishers made it clear that sometimes they want to put other, arbitrary rows above tables of data. I can’t think of a good reason why extra rows of text above tables of data would necessarily break best practice guidance. In fact, they’ll probably be helpful to provide needed context.</p>
<p>So, version 0.3 allows for these arbitrary rows of content. Not just on sheets containing data tables, but also on the contents and notes sheets, just in case. Of course, these can also be provided in the form of Markdown hyperlinks if the user desires.</p>
<p>The approach to integrating this functionality is a new argument to <code>create_a11ytables()</code>: <code>custom_rows</code>. You provide a character vector where each element is a sheet and each sub-element is a separate custom row for that sheet. Here’s an example of specifying the list argument where the fourth sheet will contain two custom rows, the first of which is a hyperlink:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">    custom_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb4-2">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb4-3">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb4-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First custom row [with a hyperlink.](https://co-analysis.github.io/a11ytables/)"</span>,</span>
<span id="cb4-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Second custom row."</span></span>
<span id="cb4-6">      )</span>
<span id="cb4-7">    ),</span></code></pre></div>
</div>
</section>
</section>
<section id="death" class="level2">
<h2 class="anchored" data-anchor-id="death">Death?</h2>
<p>These are two fixes that were a long time coming. Time now to ramble and navel-gaze<sup>4</sup> about the future of the package. You can always <a href="https://github.com/co-analysis/a11ytables/issues?q=is%3Aissue+is%3Aclosed">take a look at the outstanding issues</a> to see what’s on the to-do list. For now there’s a couple of things I want to mention.</p>
<section id="i-like-those-ods" class="level3">
<h3 class="anchored" data-anchor-id="i-like-those-ods">I like those ODS</h3>
<p>A big missing piece of the puzzle is to have the option to write to an open-format ODS file, which is the preferred format for publishing on GOV.UK. I’ve had some great chats with the underground cross-government ‘Spreadsheet Club’<sup>5</sup> to consider whether it’s possible to do things like piggyback off a spreadsheet program via the command line<sup>6</sup> or even develop some code to generate the necessary XML files. Ideally I need an {openods} package, or to add functionality into {openxlsx}<sup>7</sup> to convert the Workbook-class object into the necessary XML for an xlsx file or an ODS file. None of these are ‘easy’.</p>
<p>Another thing: there are plenty of bugfixes and outstanding nice-to-haves as well. Much of the development required is to handle cell-level problems, like setting the number of decimal places to show. This is not that hard in principle; {openxlsx} itself has some <code>options()</code> that you can set. The hard part is that numeric columns are often coerced to text columns in {a11ytables} because strings are often used as placeholder values, like ‘[c]’ for confidential values.</p>
<p>There’s another reason why this kind of thing is tricky: the ethos of {a11ytables} is to keep the user interface ‘simple’ so an analyst can go from data to spreadsheet as quickly as possible. Adding lots of arguments to control things like decimal places would clutter the interface and could be a headache for backwards-compatibility if more need to be added in future. This makes me think that an <code>options()</code>-led approach would be a decent solution, especially as this is already something that {openxlsx} does.</p>
</section>
<section id="a-fateful-journey" class="level3">
<h3 class="anchored" data-anchor-id="a-fateful-journey">A fateful journey</h3>
<p>I took the train to spend time with my parents over Christmas. High winds caused a tree to fall on the tracks and I could only make it partway. There was a rail replacement service, but the driver got lost and started heading the wrong way.</p>
<p>This gave me plenty of time to try out some new ideas for a potential successor to {a11ytables}. I’ve been thinking about building a new version of the package for a while, now that I’ve had time for its limitations to emerge.</p>
<p>Anyway, while the bus driver was U-turning on a country lane in East Sussex, I fiddled around with alternative input methods. The ‘purity’ of a nice tidy a11ytables-class data.frame is spoiled slightly by having to provide a list rather than a data.frame for the cover sheet and by providing vectors to the new <code>custom_rows</code> argument. This is a minor gripe, but I think it has usability issues and lacks some consistency.</p>
<p>I was able to spend some time <a href="https://github.com/matt-dray/a11ytables2">enacting some ideas for an ‘{a11ytables2}’ package</a>. The long and the short of it is that it uses <a href="https://janmarvin.github.io/openxlsx2/">{openxlsx2}</a> (note the ‘2’) and you provide input via a nested list, so that arbitrary arguments and argument lengths are more easily handled.</p>
<p>I also have some earlier work in that repo to explore the idea of supplying a YAML configuration file that contains all the information required for you to construct a compliant spreadsheet.</p>
</section>
</section>
<section id="introspective-conclusion" class="level2">
<h2 class="anchored" data-anchor-id="introspective-conclusion">Introspective conclusion</h2>
<p>So, a tale as old as time: I’m trying to fix things when I can; please keep submitting bug fixes and feature requests; I’d love to burn the whole thing down and start again<sup>8</sup>.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-02-03 17:08:17 GMT</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.2        
 [5] tools_4.3.1       htmltools_0.5.6.1 rstudioapi_0.15.0 yaml_2.3.8       
 [9] rmarkdown_2.25    knitr_1.45        jsonlite_1.8.7    xfun_0.41        
[13] digest_0.6.33     rlang_1.1.3       evaluate_0.23    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>In fact, I don’t work in central government anymore, which means <a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food">I don’t ‘dogfood’ this work</a>. I can only feed this dogfood (the package) to my dog (package users) and not myself (me), which feels more normal if I’m honest. Weird metaphor.↩︎</p></li>
<li id="fn2"><p>Like, I don’t know, if you <a href="https://github.com/co-analysis/a11ytables/issues/111">spell the name of your own package wrong</a>. I think this highlights how silly this name was in the first place, but there’s no going back now.↩︎</p></li>
<li id="fn3"><p>Note that the text of a spreadsheet cell is either entirely a link or not. So <code>Visit [the site](https://github.com/co-analysis) for more information</code> and <code>[Visit the site for more information](https://github.com/co-analysis)</code> will both result in an output cell that is entirely a hyperlink.↩︎</p></li>
<li id="fn4"><p>This is a guaranteed recipe for accidentally plummeting off a cliff, I don’t recommend it.↩︎</p></li>
<li id="fn5"><p>u jelly?↩︎</p></li>
<li id="fn6"><p>See <a href="https://github.com/co-analysis/a11ytables/issues/46">the issue</a>, especially where <a href="https://github.com/department-for-transport-public/dftutils/blob/main/R/convert_ods.R">Fran presents a function</a> she’s already written to do this for the Department for Transport.↩︎</p></li>
<li id="fn7"><p>I tried asking this of the {openxlsx2} author with <a href="https://github.com/JanMarvin/openxlsx2/discussions/574">predictable results</a>.↩︎</p></li>
<li id="fn8"><p>Slightly dramatic: {a11ytables} would continue to exist and would get bugfixes and small feature updates as needed; it’s just the new version would be the successor, probably.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>a11ytables</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2024-01-27-a11ytables-0.3/index.html</guid>
  <pubDate>Sat, 27 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-01-27-a11ytables-0.3/resources/a11ytables03.png" medium="image" type="image/png" height="34" width="144"/>
</item>
<item>
  <title>Pseudo-apps in the browser with WebR and Quarto?</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-01-20-webr-remote/index.html</link>
  <description><![CDATA[ 
<script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.43.0/min/vs/loader.js"></script>
<script type="module" id="qwebr-monaco-editor-init">

  // Configure the Monaco Editor's loader
  require.config({
    paths: {
      'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.43.0/min/vs'
    }
  });
</script>
<script type="module">
// Global dictionary to store Monaco Editor instances
const qwebrEditorInstances = {};

// Function that builds and registers a Monaco Editor instance    
globalThis.qwebrCreateMonacoEditorInstance = function (cellData) {

  const initialCode = cellData.code;
  const qwebrCounter = cellData.id;

  // Retrieve the previously created document elements
  let runButton = document.getElementById(`qwebr-button-run-${qwebrCounter}`);
  let editorDiv = document.getElementById(`qwebr-editor-${qwebrCounter}`);
  
  // Load the Monaco Editor and create an instance
  let editor;
  require(['vs/editor/editor.main'], function () {
    editor = monaco.editor.create(editorDiv, {
      value: initialCode,
      language: 'r',
      theme: 'vs-light',
      automaticLayout: true,           // Works wonderfully with RevealJS
      scrollBeyondLastLine: false,
      minimap: {
        enabled: false
      },
      fontSize: '17.5pt',              // Bootstrap is 1 rem
      renderLineHighlight: "none",     // Disable current line highlighting
      hideCursorInOverviewRuler: true  // Remove cursor indictor in right hand side scroll bar
    });

    // Store the official counter ID to be used in keyboard shortcuts
    editor.__qwebrCounter = qwebrCounter;

    // Store the official div container ID
    editor.__qwebrEditorId = `qwebr-editor-${qwebrCounter}`;

    // Store the initial code value
    editor.__qwebrinitialCode = initialCode;

    // Dynamically modify the height of the editor window if new lines are added.
    let ignoreEvent = false;
    const updateHeight = () => {
      const contentHeight = editor.getContentHeight();
      // We're avoiding a width change
      //editorDiv.style.width = `${width}px`;
      editorDiv.style.height = `${contentHeight}px`;
      try {
        ignoreEvent = true;

        // The key to resizing is this call
        editor.layout();
      } finally {
        ignoreEvent = false;
      }
    };

    // Helper function to check if selected text is empty
    function isEmptyCodeText(selectedCodeText) {
      return (selectedCodeText === null || selectedCodeText === undefined || selectedCodeText === "");
    }

    // Registry of keyboard shortcuts that should be re-added to each editor window
    // when focus changes.
    const addWebRKeyboardShortCutCommands = () => {
      // Add a keydown event listener for Shift+Enter to run all code in cell
      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {

        // Retrieve all text inside the editor
        qwebrExecuteCode(editor.getValue(), editor.__qwebrCounter);
      });

      // Add a keydown event listener for CMD/Ctrl+Enter to run selected code
      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter, () => {

        // Get the selected text from the editor
        const selectedText = editor.getModel().getValueInRange(editor.getSelection());
        // Check if no code is selected
        if (isEmptyCodeText(selectedText)) {
          // Obtain the current cursor position
          let currentPosition = editor.getPosition();
          // Retrieve the current line content
          let currentLine = editor.getModel().getLineContent(currentPosition.lineNumber);

          // Propose a new position to move the cursor to
          let newPosition = new monaco.Position(currentPosition.lineNumber + 1, 1);

          // Check if the new position is beyond the last line of the editor
          if (newPosition.lineNumber > editor.getModel().getLineCount()) {
            // Add a new line at the end of the editor
            editor.executeEdits("addNewLine", [{
            range: new monaco.Range(newPosition.lineNumber, 1, newPosition.lineNumber, 1),
            text: "\n", 
            forceMoveMarkers: true,
            }]);
          }
          
          // Run the entire line of code.
          qwebrExecuteCode(currentLine, editor.__qwebrCounter,
            EvalTypes.Interactive);

          // Move cursor to new position
          editor.setPosition(newPosition);
        } else {
          // Code to run when Ctrl+Enter is pressed with selected code
          qwebrExecuteCode(selectedText, editor.__qwebrCounter, EvalTypes.Interactive);
        }
      });
    }

    // Register an on focus event handler for when a code cell is selected to update
    // what keyboard shortcut commands should work.
    // This is a workaround to fix a regression that happened with multiple
    // editor windows since Monaco 0.32.0 
    // https://github.com/microsoft/monaco-editor/issues/2947
    editor.onDidFocusEditorText(addWebRKeyboardShortCutCommands);

    // Register an on change event for when new code is added to the editor window
    editor.onDidContentSizeChange(updateHeight);

    // Manually re-update height to account for the content we inserted into the call
    updateHeight();

    // Store the editor instance in the global dictionary
    qwebrEditorInstances[editor.__qwebrCounter] = editor;

  });

  // Add a click event listener to the run button
  runButton.onclick = function () {
    qwebrExecuteCode(editor.getValue(), editor.__qwebrCounter, EvalTypes.Interactive);
  };

}
</script>




<p><img src="https://www.rostrum.blog/posts/2024-01-20-webr-remote/resources/browser.png" class="img-fluid" style="width:75.0%" alt="Meme from Super Mario Movie. Top panel is the king penguin from the start of the film labelled 'R Stats' and saying 'do you yield?' Lower panel is Bowser labelled 'the browser', laughing and saying 'I do not', except the 'not' has been censored with a black bar."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>A demo post to test out embedded <a href="https://docs.r-wasm.org/webr/latest/">WebR chunks</a> that <a href="https://jamesgoldie.dev/writing/your-new-r-package-webr">source a non-CRAN R package</a>. Readers can edit and re-run code later in this blog post, entirely within the browser.</p>
</section>
<section id="world-wide-webr" class="level2">
<h2 class="anchored" data-anchor-id="world-wide-webr">World Wide WebR</h2>
<p><a href="https://docs.r-wasm.org/webr/latest/">WebR</a> lets you run R code in a browser with no need for a server, thanks in large part to <a href="https://gws.phd/">George Stagg</a>’s efforts. And these days you can embed editable R chunks into Quarto documents, thanks to <a href="https://quarto-webr.thecoatlessprofessor.com/">James Balamuta’s quarto-webr extension</a>.</p>
<p>I’ve <a href="https://www.rostrum.blog/posts/2023-03-16-webr-quarto/">written before</a> about how powerful this could be for demonstrating how to use code. Readers can adjust the code themselves to better understand the approach without having to install anything.</p>
<p>This blog has been <a href="https://www.rostrum.blog/posts/2023-08-26-cheerio-blogdown/">ported to Quarto</a> since I wrote that post, so it’s now possible for me to include WebR chunks in my posts directly.</p>
<p>Even better, it’s now possible to install remote, non-CRAN packages for use in WebR sessions. Thanks to <a href="https://jamesgoldie.dev/writing/your-new-r-package-webr">James Goldie</a> for his excellent blog post on how you can get this set up and running<sup>1</sup>. That post should be your first port of call; I’m not going to repeat all of his advice here because you should read his post in the first instance.</p>
<p>So much of this blog could have benefited from the inclusion of WebR chunks and I hope to use it a lot more in future. The rest of this post is a chance for me to try out the process of using WebR and installing a GitHub-hosted package.</p>
</section>
<section id="a-pseudo-app" class="level2">
<h2 class="anchored" data-anchor-id="a-pseudo-app">A ‘pseudo-app’?</h2>
<p>In some cases, WebR helps could help your blog post become a pseudo web app<sup>2</sup>. Load a package and provide some code that performs basic functionality, which readers can then fiddle with. If the package is simple enough, people may not need to install the package at all; they could just visit your blog post.</p>
<p>I call it a ‘pseudo’ app because of the lack of control: in a Shiny app I can force you to select certain elements from a dropdown, or only show you certain outputs. With WebR and Quarto I can only demo functions and let you adjust the arguments; if you delete all the code, that’s on you.</p>
<section id="example" class="level3">
<h3 class="anchored" data-anchor-id="example">Example</h3>
<p>So here’s an example of what I mean. My <a href="https://www.rostrum.blog/posts/2021-04-10-dialga/">{dialga} package</a> is very focused: its goal is to make it easier to compose <a href="https://en.wikipedia.org/wiki/Cron">cron strings</a> programmatically. Provide numeric values to its arguments, convert them to cron strings and then convert those to an English interpretation.</p>
<p>The package is not on CRAN, but I’ve added it to <a href="https://matt-dray.r-universe.dev/builds">my R-universe</a>, thanks to the amazing <a href="https://r-universe.dev/search/">R-universe project</a> by rOpenSci and particularly the mighty Jeroen Ooms<sup>3</sup>. This is crucial for sourcing the package with WebR.</p>
<section id="setup" class="level4">
<h4 class="anchored" data-anchor-id="setup">Setup</h4>
<p>Following <a href="https://jamesgoldie.dev/writing/your-new-r-package-webr">James G’s post</a>, I first installed James B’s WebR extension to <a href="https://github.com/matt-dray/rostrum-blog-2">this blog’s source</a> by running <code>quarto add coatless/quarto-webr</code> in the terminal. Within this post I added <code>filters: ["webr"]</code> to the YAML header and specified the <code>webr-r</code> engine for chunks that I wanted to let users interact with.</p>
<p>I also added the hidden code chunk below, which installs in the background a WebR-ready version of the {dialga} package from R-universe when the page loads (as dictated by the <code>context: setup</code> instruction).</p>
<pre><code>```{webr-r}
#| context: setup
webr::install("dialga", repos = "https://matt-dray.r-universe.dev")
```</code></pre>
<p>How do you know this has worked? You may have noticed when you arrived that ‘WEBR STATUS: 🟡 Loading…’ was shown at the top of the post before changing to ‘🟢 Ready!’ to indicate that the WebR chunks are ready to use.</p>
</section>
<section id="run" class="level4">
<h4 class="anchored" data-anchor-id="run">Run</h4>
<p>Now let’s use the {dialga} package.</p>
<p>Use <code>r2cron()</code> to convert values into a cron string. The integer values for each argument below show the full range of possibilities, which you can adjust. The output will be <code>* * * * *</code>, which means ‘every minute’. Start by running the code with the ‘Run Code’ button.</p>
<div id="qwebr-insertion-location-1"></div>
<noscript>Please enable JavaScript to experience the dynamic code cell content on this page.</noscript>
<div id="qwebr-insertion-location-2"></div>
<noscript>Please enable JavaScript to experience the dynamic code cell content on this page.</noscript>
<p>Let’s say you wanted ‘every minute past hour 12’ instead. Change the <code>hours</code> argument to <code>12</code> and press the ‘Run Code’ button again. And so on as you please.</p>
<p>For completeness, you can convert the output above into English with <code>cron2eng()</code>.</p>
<div id="qwebr-insertion-location-3"></div>
<noscript>Please enable JavaScript to experience the dynamic code cell content on this page.</noscript>
<p>In other words… if you don’t want to install {dialga} you can just visit this page and adjust the WebR chunks!</p>
<p>That, or you can use one of the already-existing, excellent sites like <a href="https://crontab.guru/">crontab.guru</a>, lol. Your call.</p>
<p>Regardless, I think this is a good indication of how a WebR post can help readers understand—or simply just use—your package in a demonstrative blog post.</p>
<div class="tip">
<p> <b>Note</b></p>
<p>As a further example, I’ve now added a WebR chunk to <a href="https://www.rostrum.blog/posts/2022-05-01-dungeon/">the ‘Simple procedural dungeons in R’ post</a> and may well add more to earlier posts that would have benefited from this technology had it existed at the time.</p>
</div>
</section>
</section>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-04-09 22:46:07 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.2        
 [5] tools_4.3.1       htmltools_0.5.8   rstudioapi_0.16.0 yaml_2.3.8       
 [9] rmarkdown_2.26    knitr_1.45        jsonlite_1.8.8    xfun_0.43        
[13] digest_0.6.35     rlang_1.1.3       fontawesome_0.5.2 evaluate_0.23    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I note also that James G has clearly written some CSS on his blog to make the WebR code blocks match the theme of his blog. I haven’t done this yet at time of writing, so the chunks do a look a bit conspicuous.↩︎</p></li>
<li id="fn2"><p>Although these days you can also use <a href="https://posit-dev.github.io/r-shinylive/">{shinylive}</a> to write a Shiny app that can run entirely in the browser! I wrote about this in <a href="https://www.rostrum.blog/posts/2023-10-08-govspeakify-tables/">a previous post</a>.↩︎</p></li>
<li id="fn3"><p>There really isn’t enough space in this post to talk about the R-universe, but you can <a href="https://ropensci.org/r-universe/">learn more on the rOpenSci site</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>dialga</category>
  <category>r</category>
  <category>webR</category>
  <guid>https://www.rostrum.blog/posts/2024-01-20-webr-remote/index.html</guid>
  <pubDate>Sat, 20 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-01-20-webr-remote/resources/browser.png" medium="image" type="image/png" height="119" width="144"/>
</item>
<item>
  <title>Yihui Xie: RAP god</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2024-01-12-yihui-rap/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2024-01-12-yihui-rap/resources/yihui.jpg" class="img-fluid" style="width:100.0%" alt="Screenshot of the Slack emoji picker. The user has searched for 'yihui', which returns an emoji profile picture of Yihui Xie."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>Taking a moment to thank <a href="https://yihui.org/">Yihui</a>, who has unwittingly made possible the rise of <a href="https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/">Reproducible Analytical Pipelines</a> (RAP).</p>
</section>
<section id="hooray-for-yihui" class="level2">
<h2 class="anchored" data-anchor-id="hooray-for-yihui">Hooray for Yihui</h2>
<p><a href="https://yihui.org/">Yihui Xie</a> is an R legend. He was, however, recently <a href="https://yihui.org/en/2024/01/bye-rstudio/">laid off</a> by his employers at Posit.</p>
<p>I’ve personally benefited a great deal from Yihui’s work, from writing reproducible presentations with <a href="https://slides.yihui.org/xaringan/#1">{xaringan}</a> to producing the original version of this blog with <a href="https://pkgs.rstudio.com/blogdown/">{blogdown}</a>.</p>
<p>At a grander scale, Yihui’s contributions to the R ecosystem have had a lasting and transformational impact on how we generate Official Statistics in the UK, where <a href="https://rmarkdown.rstudio.com/">R Markdown</a> and <a href="https://yihui.org/knitr/">{knitr}</a> are essential and ubiquitous tools in particular.</p>
<p>So much so that we have a custom Yihui Slack emoji.</p>
</section>
<section id="thats-a-rap" class="level2">
<h2 class="anchored" data-anchor-id="thats-a-rap">That’s a RAP</h2>
<p>Put (far too) simply, a <a href="https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/">Reproducible Analytical Pipeline</a> (RAP) is any code-driven, version-controlled workflow that reads data, processes it and creates consumable outputs, while ensuring that the process can be re-run in the future and by others.</p>
<p>RAP was birthed from <a href="https://en.wikipedia.org/wiki/DevOps">‘DataOps’ principles</a> with a focus on the production of statistical publications: reports and data files for public consumption, published officially on <a href="https://www.gov.uk/search/research-and-statistics?content_store_document_type=statistics_published&amp;order=updated-newest">the UK government’s website</a>. These files are important for transparency and decision making.</p>
<p>These days, RAP is so much more: it’s a way of thinking, a community and a movement<sup>1</sup>. Its ethos has spread <a href="https://nhsdigital.github.io/rap-community-of-practice/introduction_to_RAP/history_of_RAP/">across the UK public sector</a> and is gaining traction globally through efforts like <a href="https://raps-with-r.dev/">Bruno Rodrigues’s excellent book</a>.</p>
</section>
<section id="r-is-for-rap" class="level2">
<h2 class="anchored" data-anchor-id="r-is-for-rap">R is for RAP</h2>
<p>RAP is language agnostic<sup>2</sup>, but R has emerged as the preferred option for statistical production in the UK’s government and public sector. Why? Possibly because R is a data- and stats-first language<sup>3</sup> and therefore a natural choice for statistics professionals.</p>
<p>Of course, R can easily cover the whole ‘soup-to-nuts’ workflow. Not just ingestion and digestion of data, but also crucially the creation of reports. R Markdown and {knitr} are the obvious tool for this kind of document generation, for which we must thank Yihui for his tireless and humble efforts.</p>
<p>But what makes R Markdown so conducive to RAP, in particular? Well, stats publications are generally periodical (often weekly) and R Markdown is perfect for <a href="https://en.wikipedia.org/wiki/Literate_programming">literate programming</a> at pace: you can create a skeleton document that can be updated dynamically with R code, saving so much time when a new version of the publication needs to be created with fresh data.</p>
<p>Crucially, R Markdown is relatively simple to learn and use<sup>4</sup>. You write some plain text and mark it up with simple adornments<sup>5</sup>. This suits perfectly the range of skills and abilities in statistical teams across the public sector, where staff are often ‘numbers-people’ first and ‘coders’ second.</p>
<p>Hence why R Markdown has been a central tenet of RAP since Dr Matt Upson<sup>6</sup>, RAP’s ‘Founding Father’, noted it in his <a href="https://dataingovernment.blog.gov.uk/2017/03/27/reproducible-analytical-pipeline/">germinal blog post</a>.</p>
</section>
<section id="down-but-not-out" class="level2">
<h2 class="anchored" data-anchor-id="down-but-not-out">Down, but not out</h2>
<p>Of course, I’m not alone: many others have talked about their appreciation for Yihui and his work, including Eric and Mike’s discussion on <a href="https://rweekly.fireside.fm/147">the R Weekly podcast</a> and <a href="https://x.com/EmilyRiederer/status/1743672724403241196">Emily’s thread</a>.</p>
<p>You can also take a look at the incredible number of people who have signed up to <a href="https://github.com/sponsors/yihui">sponsor Yihui on GitHub</a>, which sits just shy of 300 at the time of writing<sup>7</sup>.</p>
<p>Thank you, Yihui. We look forward to what comes next.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-01-22 17:48:46 GMT</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.2        
 [5] tools_4.3.1       htmltools_0.5.6.1 rstudioapi_0.15.0 yaml_2.3.8       
 [9] rmarkdown_2.25    knitr_1.45        jsonlite_1.8.7    xfun_0.41        
[13] digest_0.6.33     rlang_1.1.3       evaluate_0.23    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>To the extent that you can use ‘RAP’ as a noun (‘we have many RAPs in our department’) and verb (‘I’m going to RAP this publication’).↩︎</p></li>
<li id="fn2"><p>Not strictly true. We’re talking here about open source languages like R and Python. Your proprietary tool of choice is not RAP compliant, sorry.↩︎</p></li>
<li id="fn3"><p>R has grown beyond statistical analysis, of course. You can build apps and websites and so much more without ever ‘doing stats’. Just ask <a href="https://rwithoutstatistics.com/">David Keyes</a>.↩︎</p></li>
<li id="fn4"><p>Compared to what? Most regular R users these days are unlikely to have encountered Sweave, for example, which is actually built into R. Sweave relies on knowledge of document preparation using LaTeX, which most of us barely know how to pronounce, let alone use.↩︎</p></li>
<li id="fn5"><p>This becomes even easier with, for example, <a href="https://rstudio.github.io/visual-markdown-editing/">RStudio’s ‘visual’ mode</a> for R Markdown files, which includes a GUI for marking-up to your text without needing to remember how to mark it up in **bold**, for example.↩︎</p></li>
<li id="fn6"><p>RAP was pioneered in the UK government by Dr Matt Upson and the team at the Government Digital Service (GDS), not limited to Dr Mat Gregory (too many Matts, amirite?) and Duncan Garmonsway, as well as several early adopters like the Department for Culture, Media and Sport.↩︎</p></li>
<li id="fn7"><p>Disclaimer: I’m one of these people.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>public-sector</category>
  <category>r</category>
  <category>reproducibility</category>
  <category>rmarkdown</category>
  <guid>https://www.rostrum.blog/posts/2024-01-12-yihui-rap/index.html</guid>
  <pubDate>Fri, 12 Jan 2024 00:00:00 GMT</pubDate>
  <media:content url="https://www.rostrum.blog/posts/2024-01-12-yihui-rap/resources/yihui.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>No tears over missed eyedrops</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-12-03-eyedrop/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-12-03-eyedrop/resources/eyedrop-lotad.gif" class="img-fluid figure-img" alt="Screencast. An 'eyedrop' function in the R programming language is executed, with an image path as its only argument. An image of the Pokemon Lotad is plotted. Three points are clicked: a green, yellow and blue area. After each, the hex colour for that point is printed to the R console and a new plotting window opens that's filled with that colour."></p>
<figcaption class="figure-caption">Lotad: best Pokémon. No contest.</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>Use the <a href="https://gradientdescending.com/select-colours-from-an-image-in-r-with-eyedropper/">{eyedroppeR} package by Dan Oehm</a> if you want to sample a colour from an image using R. You don’t need to use my hastily-created function.</p>
</section>
<section id="top-of-the-drops" class="level2">
<h2 class="anchored" data-anchor-id="top-of-the-drops">Top of the drops</h2>
<p>A colleague on Slack asked about ‘eyedropper’ tools; where you can click a point on an image and have its colour returned. Very handy.</p>
<p>I couldn’t recall seeing an eyedrop tool built with R. How hard could it be to make one?</p>
<p>I thought immediately of the <code>locator()</code> function from base R, which lets you click a plot and have its coordinates returned<sup>1</sup>. So I went ahead and made a little demo function.</p>
<p>But I figured someone must have done this before, so I <a href="https://fosstodon.org/@mattdray/111513532691302980">asked on Mastodon</a>. And lol, of course: <a href="https://gradientdescending.com/select-colours-from-an-image-in-r-with-eyedropper/">the {eyedroppeR} package by Dan Oehm</a> already does this (and more).</p>
<div class="tip">
<p> <b>Note</b></p>
<p>You may also enjoy <a href="https://github.com/doehm/traceR">Dan’s {traceR} package</a>, which lets you interactively click points in the plot window to trace around an image, then use the resulting dot-to-dot in a new plot.</p>
</div>
</section>
<section id="eye-eye" class="level2">
<h2 class="anchored" data-anchor-id="eye-eye">Eye, eye</h2>
<p>So this is a good lesson about avoiding duplication and wasted effort. I’m glad I asked about it!</p>
<p>But I still had fun. For posterity, here’s the sketch I came up with:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">eyedrop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(file, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">swatch =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check file exists</span></span>
<span id="cb1-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(file)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"File doesn't exist."</span>)</span>
<span id="cb1-5">  </span>
<span id="cb1-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check file extension</span></span>
<span id="cb1-7">  file_ext <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_ext</span>(file)</span>
<span id="cb1-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>file_ext <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"png"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jpeg"</span>)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"File must be .png or .jpeg."</span>)</span>
<span id="cb1-9">  </span>
<span id="cb1-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read from path</span></span>
<span id="cb1-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (file_ext <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"png"</span>) img <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> png<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readPNG</span>(file)</span>
<span id="cb1-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (file_ext <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jpeg"</span>) img <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> jpeg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readJPEG</span>(file)</span>
<span id="cb1-13">  </span>
<span id="cb1-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the image</span></span>
<span id="cb1-15">  grDevices<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev.new</span>()</span>
<span id="cb1-16">  grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.raster</span>(img)</span>
<span id="cb1-17">  main_dev <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grDevices<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev.cur</span>()</span>
<span id="cb1-18">  </span>
<span id="cb1-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the size of the plot window</span></span>
<span id="cb1-20">  grid_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev.size</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>))</span>
<span id="cb1-21">  </span>
<span id="cb1-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Select points on the image to identify colours. Press &lt;Esc&gt; to quit."</span>)</span>
<span id="cb1-23">  </span>
<span id="cb1-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep allowing user to click points until they refuse</span></span>
<span id="cb1-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">repeat</span> {</span>
<span id="cb1-26">    </span>
<span id="cb1-27">    clicked_point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.locator</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cm"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># xy in cm</span></span>
<span id="cb1-28">    </span>
<span id="cb1-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(clicked_point)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># exit if user is finished</span></span>
<span id="cb1-30">    </span>
<span id="cb1-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standardise xy as 0 to 1</span></span>
<span id="cb1-32">    grid_coords <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(clicked_point)</span>
<span id="cb1-33">    grid_ratios <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid_coords <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> grid_size</span>
<span id="cb1-34">    </span>
<span id="cb1-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the 'pixel' coords given the image's resolution</span></span>
<span id="cb1-36">    grid_dim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(img)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-37">    pixels <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(grid_dim <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> grid_ratios)</span>
<span id="cb1-38">    pixels[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid_dim[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pixels[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>]</span>
<span id="cb1-39">    </span>
<span id="cb1-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract RGB for given pixel, convert to hex</span></span>
<span id="cb1-41">    rgb_vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> img[pixels[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>], pixels[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>], ]</span>
<span id="cb1-42">    hex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span>(rgb_vals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], rgb_vals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], rgb_vals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb1-43">    </span>
<span id="cb1-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open a window filled with the provided hex colour</span></span>
<span id="cb1-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (swatch) {</span>
<span id="cb1-46">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev.new</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-47">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove plot margins</span></span>
<span id="cb1-48">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> hex)</span>
<span id="cb1-49">      grDevices<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev.set</span>(main_dev)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return focus to original plot window</span></span>
<span id="cb1-50">    }</span>
<span id="cb1-51">    </span>
<span id="cb1-52">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(hex)</span>
<span id="cb1-53">    </span>
<span id="cb1-54">  }</span>
<span id="cb1-55">  </span>
<span id="cb1-56">}</span></code></pre></div>
</div>
<p>You can see an example of this in action in the gif at the top of this page.</p>
<p>Of course, this is a minimum viable product and has many deficiencies; it is not optimised in any way. I may even have misunderstood some concepts from {grid} graphics.</p>
<p>Also, importantly, there is some kind of <a href="https://github.com/rstudio/rstudio/issues/8559">issue with RStudio</a> where grid units are converted incorrectly. Hence why the example shown at the top of this post uses R’s vanilla graphical use interface. Given that <large percentage=""> of people are using RStudio, that isn’t ideal.</large></p>
<p>To explain the basic steps of the function:</p>
<ol type="1">
<li>We get the plot window dimensions with <code>dev.size()</code> and coordinates for our clicked point with <code>grid.locator()</code>. We can use that to work out how far along each axis that our point is, as a percentage.</li>
<li>We can then check the <code>dim()</code>ensions of the image (i.e.&nbsp;its resolution) and locate the ‘pixel’ that is x% and y% along each axis.</li>
<li>The image is an array object with red, green and blue ‘channels’, so we can retrieve each one for our pixel and convert to a hex value.</li>
</ol>
<p>Of course, I welcome your thoughts on how to improve the function. But yeah, y’know, just use {eyedroppeR}.</p>
</section>
<section id="dry-your-eyes-mate" class="level2">
<h2 class="anchored" data-anchor-id="dry-your-eyes-mate">Dry your eyes, mate</h2>
<p>I’m a big believer in sharing failure. I’m a big believer in recognising when to stop<sup>2</sup>. Regardless of ‘success’, I’m also a big believer in sharing your ideas and documenting your thought processes.</p>
<p>I’m also a big believer in having a nice time and coding for fun.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-01-13 10:03:39 GMT</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.2        
 [5] tools_4.3.1       htmltools_0.5.6.1 rstudioapi_0.15.0 yaml_2.3.8       
 [9] rmarkdown_2.25    knitr_1.45        jsonlite_1.8.7    xfun_0.41        
[13] digest_0.6.33     rlang_1.1.3       fontawesome_0.5.2 evaluate_0.23    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I used <code>locator()</code> for <a href="https://github.com/matt-dray/pixeltrix">the {pixeltrix} ‘pixel-art editor’ package</a> and in a previous post about <a href="https://www.rostrum.blog/posts/2021-11-04-kanto-locator/">getting coordinates from fictitious maps</a>.↩︎</p></li>
<li id="fn2"><p>I’ve definitely created things in the past that I didn’t realise already existed, such as <a href="https://github.com/matt-dray/badgr/">my {badgr} package</a> and the pre-existing <a href="https://github.com/GuangchuangYu/badger">{badger} package</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>eyedropper</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2023-12-03-eyedrop/index.html</guid>
  <pubDate>Sun, 03 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>An interactive graph of Pokémon Red locations</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-11-25-kanto-graph/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-11-25-kanto-graph/resources/graph-zoom.png" class="img-fluid figure-img" alt="Screenshot of an interactive graph. The title is 'Kanto' and the subtitle is 'a graph of locations in Pokémon Red'. A dropdown menu has 'Pallet Town' selected and in red text. A node labelled 'Pallet Town' is shown, highlighted in red, as are other labelled nodes like 'Oak's lab' and 'Blue's house' that it's directly connected to. A greyed-out node is also visible, which is not connected by an edge to the 'Pallet Town' node."></p>
<figcaption class="figure-caption">This is a preview.</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I extracted data from the disassembled code of Pokémon Red to create an interactive graph of the game’s locations and their connections. You can jump to the graph below.</p>
<div class="tip">
<p> <b>Note</b></p>
<p>Coincidentally, a few days after posting this, someone posted to <a href="https://news.ycombinator.com/item?id=38462318">Hacker News</a> a non-R <a href="http://peterhajas.com/blog/pokemon_rb_connections.html">implementation by Peter Hajas</a> from a few years ago. I should’ve guessed!</p>
</div>
</section>
<section id="kanto" class="level2">
<h2 class="anchored" data-anchor-id="kanto">Kanto</h2>
<p><a href="https://www.rostrum.blog/posts/2021-11-04-kanto-locator/">I wrote a while back</a> about using the wonderful <code>locator()</code> function to extract coordinates from fictitious maps. In that example I used the Kanto region from <a href="https://en.wikipedia.org/wiki/Pok%C3%A9mon_Red,_Blue,_and_Yellow">the original Pokémon games</a>.</p>
<p>Today I’m back with the same map<sup>1</sup>, but we’re going to be far more methodical and abstract: we’re going to extract data from the underlying game files to build a graph that describes all the locations and connections between them.</p>
<p>This is made possible by <a href="https://github.com/pret">the ‘pret’ collaborative</a>, who have reverse-engineered, or ‘disassembled’, a number of Pokémon games. This is interesting for digi-archaeological reasons<sup>2</sup>, but also for our frivolous purposes.</p>
</section>
<section id="assemble" class="level2">
<h2 class="anchored" data-anchor-id="assemble">Assemble</h2>
<p>To get a copy of the game’s<sup>3</sup> disassembled code, go to <a href="https://github.com/pret/pokered">the pret/pokered GitHub repo</a>, click the ‘Code’ button, then ‘Download as zip’ and finally unzip the file on your computer.</p>
<p>We’re interested in two subfolders: <code>/data/maps/objects/</code> and <code>/data/maps/headers/</code>. These both contain one file of <a href="https://en.wikipedia.org/wiki/Assembly_language">Assembly code</a> per named location in the game, like <code>AgathasRoom.asm</code> and <code>Bikeshop.asm</code>. We’ll be handling these as simple text files.</p>
<p>The ‘objects’ files contain information required to set up things like sprites and text for each location in the game. The example below is for the starting area: Pallet Town. For our purposes, we care about the <code>warp_events</code>, which indicate that you can step on a tile and be warped somewhere else. For example, standing on the door tile at tile location <code>5, 5</code> would warp you to <code>REDS_HOUSE_1F</code>, i.e.&nbsp;the first floor of the player’s house.</p>
<pre><code>object_const_def
const_export PALLETTOWN_OAK
const_export PALLETTOWN_GIRL
const_export PALLETTOWN_FISHER

PalletTown_Object:
db $b ; border block

def_warp_events
warp_event  5,  5, REDS_HOUSE_1F, 1
warp_event 13,  5, BLUES_HOUSE, 1
warp_event 12, 11, OAKS_LAB, 2

def_bg_events
bg_event 13, 13, TEXT_PALLETTOWN_OAKSLAB_SIGN
bg_event  7,  9, TEXT_PALLETTOWN_SIGN
bg_event  3,  5, TEXT_PALLETTOWN_PLAYERSHOUSE_SIGN
bg_event 11,  5, TEXT_PALLETTOWN_RIVALSHOUSE_SIGN

def_object_events
object_event  8,  5, SPRITE_OAK, STAY, NONE, TEXT_PALLETTOWN_OAK
object_event  3,  8, SPRITE_GIRL, WALK, ANY_DIR, TEXT_PALLETTOWN_GIRL
object_event 11, 14, SPRITE_FISHER, WALK, ANY_DIR, TEXT_PALLETTOWN_FISHER

def_warps_to PALLET_TOWN</code></pre>
<p>Some terminology for graphs: the game’s locations are ‘nodes’ connected by common ‘edges’. So Pallet Town and Red’s House are nodes that share an edge.</p>
<p>Note that warping isn’t the only thing that creates an edge between two nodes. If we look in the ‘headers’ file for Pallet Town, you can see that some locations have a simple <code>connection</code> parameter: you can just walk north of Pallet Town to Route 1 (the road to Viridian City) or approach from the south along Route 21 (from Cinnabar Island). Yes, ‘routes’ connect two places, but routes themselves act as nodes in this demo.</p>
<pre><code>map_header PalletTown, PALLET_TOWN, OVERWORLD, NORTH | SOUTH
connection north, Route1, ROUTE_1, 0
connection south, Route21, ROUTE_21, 0
end_map_header</code></pre>
<p>The headers file is useful to us in another way: it maps location names from the ‘PalletTown’ format (used in .asm filenames) to the ‘PALLET_TOWN’ format (as referenced within files). This knowledge will help us to better handle the data as we progress.</p>
</section>
<section id="prepare-data" class="level2">
<h2 class="anchored" data-anchor-id="prepare-data">Prepare data</h2>
<p>So let’s crack open the data and use some base R for corralling. Note that absolutely nothing here is optimised (or even written well in the first place), but regular readers will be used to that.</p>
<section id="prepare-functions" class="level3">
<h3 class="anchored" data-anchor-id="prepare-functions">Prepare functions</h3>
<p>To begin, I’ve made a few helper functions to extract and wrangle the data that we need:</p>
<ul>
<li><code>get_file_paths()</code> to return the filepaths for all the Assembly files (.asm) we need</li>
<li><code>get_warps()</code> to extract the warps in the text of each objects file</li>
<li><code>get_connections()</code> to extract and wrangle all the connections from the headers files</li>
<li><code>create_names_lookup()</code> to map the UpperCamelCase and SCREAMING_SNAKE_CASE name variants for each location</li>
</ul>
<details>
<summary>
Click for function definitions.
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">get_file_paths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(</span>
<span id="cb3-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dir =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Documents/data/pokered-master/data/maps"</span>,</span>
<span id="cb3-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"objects"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"headers"</span>)</span>
<span id="cb3-4">) {</span>
<span id="cb3-5">  path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(dir, type)</span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".asm$"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-7">}</span>
<span id="cb3-8"></span>
<span id="cb3-9">get_warps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(objects_content) {</span>
<span id="cb3-10">  warp_string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warp_event "</span></span>
<span id="cb3-11">  warp_events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> objects_content[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(warp_string, objects_content)]</span>
<span id="cb3-12">  warp_events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(warp_events, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)</span>
<span id="cb3-13">  warp_events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(warp_events, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># third element is warps</span></span>
<span id="cb3-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(warp_events))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vector of unique locations</span></span>
<span id="cb3-15">}</span>
<span id="cb3-16"></span>
<span id="cb3-17">get_connections <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(headers_content) {</span>
<span id="cb3-18">  con_string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"connection"</span></span>
<span id="cb3-19">  con_detected <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> headers_content[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(con_string, headers_content)]</span>
<span id="cb3-20">  con_isolated <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(con_detected, \(x) x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(con_string, x))])</span>
<span id="cb3-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(con_isolated, \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)))</span>
<span id="cb3-22">}</span>
<span id="cb3-23"></span>
<span id="cb3-24">create_names_lookup <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(headers_content) {</span>
<span id="cb3-25">  headers_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(headers_content, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb3-26">  headers_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> headers_split[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb3-27">  name_pair <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"map_header "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trimws</span>(headers_split))</span>
<span id="cb3-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(name_pair[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], name_pair[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb3-29">}</span></code></pre></div>
</div>
</details>
</section>
<section id="extract-connections" class="level3">
<h3 class="anchored" data-anchor-id="extract-connections">Extract connections</h3>
<p>Now down to business. We’ll read the text content of each headers file into a list, then name these elements using the SCREAMING_SNAKE_CASE name for each location.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">headers_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_file_paths</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"headers"</span>)</span>
<span id="cb4-2">headers_content <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(headers_files, readLines)</span>
<span id="cb4-3">headers_lookup <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(headers_content, create_names_lookup))</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(headers_content) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(headers_lookup)</span></code></pre></div>
</div>
<p>Here’s how Pallet Town looks in this format:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">headers_content[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PALLET_TOWN"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$PALLET_TOWN
[1] "\tmap_header PalletTown, PALLET_TOWN, OVERWORLD, NORTH | SOUTH"
[2] "\tconnection north, Route1, ROUTE_1, 0"                        
[3] "\tconnection south, Route21, ROUTE_21, 0"                      
[4] "\tend_map_header"                                              </code></pre>
</div>
</div>
<p>Now we can take these lines of text and extract the node pairs that have an edge due to a ‘connection’ between them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">conns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_connections</span>(headers_content)</span>
<span id="cb7-2">conns_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stack</span>(conns)</span>
<span id="cb7-3">conns_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> conns_df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ind"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"values"</span>)]</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(conns_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span>)</span>
<span id="cb7-5">conns_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(conns_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from"</span>]])</span>
<span id="cb7-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(conns_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           from       to
1  CELADON_CITY ROUTE_16
2  CELADON_CITY  ROUTE_7
3 CERULEAN_CITY ROUTE_24
4 CERULEAN_CITY  ROUTE_5
5 CERULEAN_CITY  ROUTE_4
6 CERULEAN_CITY  ROUTE_9</code></pre>
</div>
</div>
</section>
<section id="extract-warps" class="level3">
<h3 class="anchored" data-anchor-id="extract-warps">Extract warps</h3>
<p>Similarly, we can get the warp data in a node-pair data frame as well. The first step is to read the text of each objects file into a list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">obj_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_file_paths</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"objects"</span>)</span>
<span id="cb9-2">obj_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".asm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(obj_files))</span>
<span id="cb9-3">obj_content <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(obj_files, readLines) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(headers_lookup))</span>
<span id="cb9-4">obj_content[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PALLET_TOWN"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$PALLET_TOWN
 [1] "\tobject_const_def"                                                         
 [2] "\tconst_export PALLETTOWN_OAK"                                              
 [3] "\tconst_export PALLETTOWN_GIRL"                                             
 [4] "\tconst_export PALLETTOWN_FISHER"                                           
 [5] ""                                                                           
 [6] "PalletTown_Object:"                                                         
 [7] "\tdb $b ; border block"                                                     
 [8] ""                                                                           
 [9] "\tdef_warp_events"                                                          
[10] "\twarp_event  5,  5, REDS_HOUSE_1F, 1"                                      
[11] "\twarp_event 13,  5, BLUES_HOUSE, 1"                                        
[12] "\twarp_event 12, 11, OAKS_LAB, 2"                                           
[13] ""                                                                           
[14] "\tdef_bg_events"                                                            
[15] "\tbg_event 13, 13, TEXT_PALLETTOWN_OAKSLAB_SIGN"                            
[16] "\tbg_event  7,  9, TEXT_PALLETTOWN_SIGN"                                    
[17] "\tbg_event  3,  5, TEXT_PALLETTOWN_PLAYERSHOUSE_SIGN"                       
[18] "\tbg_event 11,  5, TEXT_PALLETTOWN_RIVALSHOUSE_SIGN"                        
[19] ""                                                                           
[20] "\tdef_object_events"                                                        
[21] "\tobject_event  8,  5, SPRITE_OAK, STAY, NONE, TEXT_PALLETTOWN_OAK"         
[22] "\tobject_event  3,  8, SPRITE_GIRL, WALK, ANY_DIR, TEXT_PALLETTOWN_GIRL"    
[23] "\tobject_event 11, 14, SPRITE_FISHER, WALK, ANY_DIR, TEXT_PALLETTOWN_FISHER"
[24] ""                                                                           
[25] "\tdef_warps_to PALLET_TOWN"                                                 </code></pre>
</div>
</div>
<p>Then we can extract the warps. Note that some warps don’t explicitly take you back where you came from. Instead the instruction is to warp to the last location. We can remove this from our data, since <code>LAST_MAP</code> isn’t a literal location.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">warps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(obj_content, get_warps)</span>
<span id="cb11-2">warps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(warps, \(x) x[x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LAST_MAP"</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove LAST_MAP</span></span>
<span id="cb11-3">warps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> warps[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lengths</span>(warps) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb11-4">warps_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stack</span>(warps)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to data.frame</span></span>
<span id="cb11-5">warps_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> warps_df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ind"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"values"</span>)]</span>
<span id="cb11-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(warps_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span>)</span>
<span id="cb11-7">warps_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(warps_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from"</span>]])</span>
<span id="cb11-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(warps_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          from                 to
1 AGATHAS_ROOM        BRUNOS_ROOM
2 AGATHAS_ROOM        LANCES_ROOM
3  BRUNOS_ROOM      LORELEIS_ROOM
4  BRUNOS_ROOM       AGATHAS_ROOM
5 CELADON_CITY    CELADON_MART_1F
6 CELADON_CITY CELADON_MANSION_1F</code></pre>
</div>
</div>
</section>
<section id="combine-all-node-pairs" class="level3">
<h3 class="anchored" data-anchor-id="combine-all-node-pairs">Combine all node pairs</h3>
<p>Now we can combine all the node pairs that share edges, whether by simple connections or warps. In this example we’re interested in combinations, rather than permutations, of node pairs<sup>4</sup>. This means that we can treat A→B and B→A as equivalent and simplify down to just A→B.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">edges <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(warps_df, conns_df)</span>
<span id="cb13-2">edges <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> edges[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">duplicated</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(edges, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sort)))), ]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://stackoverflow.com/a/50117582</span></span></code></pre></div>
</div>
<p>We also want a full list of the nodes, which will help us to label and filter them in the final visualisation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">nodes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(edges[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from"</span>]], edges[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span>]])))</span>
<span id="cb14-2">nodes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nodes[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(nodes[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>]]), , drop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>]</span></code></pre></div>
</div>
</section>
</section>
<section id="visualise" class="level2">
<h2 class="anchored" data-anchor-id="visualise">Visualise</h2>
<section id="set-up" class="level3">
<h3 class="anchored" data-anchor-id="set-up">Set up</h3>
<p><a href="https://datastorm-open.github.io/visNetwork/">The {visNetwork} package</a> wraps <a href="https://visjs.org/">the vis.js JavaScript library</a>, which will help output an interactive HTML graph. We just need to feed it our nodes and edges and a bunch of configuration and styling options.</p>
<p>First some CSS to import a font that mimics the font used in the game<sup>5</sup>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">@font-face</span> {</span>
<span id="cb15-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">font-family</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pokemon-font'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-3">  src: <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">url(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resources/pokemon-font.ttf'</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-4">}</span></code></pre></div>
<style type="text/css">
@font-face {
  font-family: 'pokemon-font';
  src: url('resources/pokemon-font.ttf');
}
</style>
</div>
<p>While we’re dealing with font style, we can set up a function to build a CSS style string for when we need it in the visNetwork. Obviously we’ll use red as the accent colour, given the data is for the Red version of the game<sup>6</sup>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">poke_style <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) {</span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb16-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"font-family:pokemon-font,sans-serif;"</span>,</span>
<span id="cb16-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"font-size:"</span>, size, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"px;"</span>,</span>
<span id="cb16-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color:"</span>, colour, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span></span>
<span id="cb16-6">  )</span>
<span id="cb16-7">}</span></code></pre></div>
</div>
<p>Now we can build the visNetwork object with <code>vis*</code> functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(visNetwork)</span>
<span id="cb17-2"></span>
<span id="cb17-3">graph <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visNetwork</span>(</span>
<span id="cb17-4">  nodes,</span>
<span id="cb17-5">  edges,</span>
<span id="cb17-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100%"</span>,</span>
<span id="cb17-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"600px"</span>,</span>
<span id="cb17-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kanto"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poke_style</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)),</span>
<span id="cb17-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">submain =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb17-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A graph of locations in PKMN Red&lt;br&gt;&lt;br&gt;"</span>,</span>
<span id="cb17-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poke_style</span>()</span>
<span id="cb17-12">  ),</span>
<span id="cb17-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">footer =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb17-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source: Nintendo and Game Freak via the pret/pokered dissassembly project"</span>,</span>
<span id="cb17-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poke_style</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb17-16">  )</span>
<span id="cb17-17">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visEdges</span>(</span>
<span id="cb17-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FF7777"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highlight =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">opacity =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb17-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb17-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selectionWidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb17-22">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visNodes</span>(</span>
<span id="cb17-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FF7777"</span>,</span>
<span id="cb17-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">font =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pokemon-font"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>),</span>
<span id="cb17-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">borderWidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb17-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">borderWidthSelected =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb17-28">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visOptions</span>(</span>
<span id="cb17-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">highlightNearest =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb17-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nodesIdSelection =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb17-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">enabled =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb17-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Select a location"</span>,</span>
<span id="cb17-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poke_style</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb17-35">    )</span>
<span id="cb17-36">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visLayout</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">randomSeed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-38">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visPhysics</span>(</span>
<span id="cb17-39">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">solver =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"barnesHut"</span>,</span>
<span id="cb17-40">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">barnesHut =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">springConstant =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gravitationalConstant =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb17-41">  )</span></code></pre></div>
</div>
</section>
<section id="visualise-graph" class="level3">
<h3 class="anchored" data-anchor-id="visualise-graph">The graph</h3>
<p>So here’s the final result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">graph</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-d8baaef2032a09cddcff" style="width:100%;height:600px;" class="visNetwork html-widget "></div>
<script type="application/json" data-for="htmlwidget-d8baaef2032a09cddcff">{"x":{"nodes":{"id":["AGATHAS_ROOM","BIKE_SHOP","BILLS_HOUSE","BLUES_HOUSE","BRUNOS_ROOM","CELADON_CHIEF_HOUSE","CELADON_CITY","CELADON_DINER","CELADON_GYM","CELADON_HOTEL","CELADON_MANSION_1F","CELADON_MANSION_2F","CELADON_MANSION_3F","CELADON_MANSION_ROOF","CELADON_MANSION_ROOF_HOUSE","CELADON_MART_1F","CELADON_MART_2F","CELADON_MART_3F","CELADON_MART_4F","CELADON_MART_5F","CELADON_MART_ELEVATOR","CELADON_MART_ROOF","CELADON_POKECENTER","CERULEAN_BADGE_HOUSE","CERULEAN_CAVE_1F","CERULEAN_CAVE_2F","CERULEAN_CAVE_B1F","CERULEAN_CITY","CERULEAN_GYM","CERULEAN_MART","CERULEAN_POKECENTER","CERULEAN_TRADE_HOUSE","CERULEAN_TRASHED_HOUSE","CHAMPIONS_ROOM","CINNABAR_GYM","CINNABAR_ISLAND","CINNABAR_LAB","CINNABAR_LAB_FOSSIL_ROOM","CINNABAR_LAB_METRONOME_ROOM","CINNABAR_LAB_TRADE_ROOM","CINNABAR_MART","CINNABAR_POKECENTER","COPYCATS_HOUSE_1F","COPYCATS_HOUSE_2F","DAYCARE","DIGLETTS_CAVE","DIGLETTS_CAVE_ROUTE_11","DIGLETTS_CAVE_ROUTE_2","FIGHTING_DOJO","FUCHSIA_BILLS_GRANDPAS_HOUSE","FUCHSIA_CITY","FUCHSIA_GOOD_ROD_HOUSE","FUCHSIA_GYM","FUCHSIA_MART","FUCHSIA_MEETING_ROOM","FUCHSIA_POKECENTER","GAME_CORNER","GAME_CORNER_PRIZE_ROOM","HALL_OF_FAME","INDIGO_PLATEAU","INDIGO_PLATEAU_LOBBY","LANCES_ROOM","LAVENDER_CUBONE_HOUSE","LAVENDER_MART","LAVENDER_POKECENTER","LAVENDER_TOWN","LORELEIS_ROOM","MR_FUJIS_HOUSE","MR_PSYCHICS_HOUSE","MT_MOON_1F","MT_MOON_B1F","MT_MOON_B2F","MT_MOON_POKECENTER","MUSEUM_1F","MUSEUM_2F","NAME_RATERS_HOUSE","OAKS_LAB","PALLET_TOWN","PEWTER_CITY","PEWTER_GYM","PEWTER_MART","PEWTER_NIDORAN_HOUSE","PEWTER_POKECENTER","PEWTER_SPEECH_HOUSE","POKEMON_FAN_CLUB","POKEMON_MANSION_1F","POKEMON_MANSION_2F","POKEMON_MANSION_3F","POKEMON_MANSION_B1F","POKEMON_TOWER_1F","POKEMON_TOWER_2F","POKEMON_TOWER_3F","POKEMON_TOWER_4F","POKEMON_TOWER_5F","POKEMON_TOWER_6F","POKEMON_TOWER_7F","POWER_PLANT","REDS_HOUSE_1F","REDS_HOUSE_2F","ROCK_TUNNEL_1F","ROCK_TUNNEL_B1F","ROCK_TUNNEL_POKECENTER","ROCKET_HIDEOUT_B1F","ROCKET_HIDEOUT_B2F","ROCKET_HIDEOUT_B3F","ROCKET_HIDEOUT_B4F","ROCKET_HIDEOUT_ELEVATOR","ROUTE_1","ROUTE_10","ROUTE_11","ROUTE_11_GATE_1F","ROUTE_11_GATE_2F","ROUTE_12","ROUTE_12_GATE_1F","ROUTE_12_GATE_2F","ROUTE_12_SUPER_ROD_HOUSE","ROUTE_13","ROUTE_14","ROUTE_15","ROUTE_15_GATE_1F","ROUTE_15_GATE_2F","ROUTE_16","ROUTE_16_FLY_HOUSE","ROUTE_16_GATE_1F","ROUTE_16_GATE_2F","ROUTE_17","ROUTE_18","ROUTE_18_GATE_1F","ROUTE_18_GATE_2F","ROUTE_19","ROUTE_2","ROUTE_2_GATE","ROUTE_2_TRADE_HOUSE","ROUTE_20","ROUTE_21","ROUTE_22","ROUTE_22_GATE","ROUTE_23","ROUTE_24","ROUTE_25","ROUTE_3","ROUTE_4","ROUTE_5","ROUTE_5_GATE","ROUTE_6","ROUTE_6_GATE","ROUTE_7","ROUTE_7_GATE","ROUTE_8","ROUTE_8_GATE","ROUTE_9","SAFARI_ZONE_CENTER","SAFARI_ZONE_CENTER_REST_HOUSE","SAFARI_ZONE_EAST","SAFARI_ZONE_EAST_REST_HOUSE","SAFARI_ZONE_GATE","SAFARI_ZONE_NORTH","SAFARI_ZONE_NORTH_REST_HOUSE","SAFARI_ZONE_SECRET_HOUSE","SAFARI_ZONE_WEST","SAFARI_ZONE_WEST_REST_HOUSE","SAFFRON_CITY","SAFFRON_GYM","SAFFRON_MART","SAFFRON_PIDGEY_HOUSE","SAFFRON_POKECENTER","SEAFOAM_ISLANDS_1F","SEAFOAM_ISLANDS_B1F","SEAFOAM_ISLANDS_B2F","SEAFOAM_ISLANDS_B3F","SEAFOAM_ISLANDS_B4F","SILPH_CO_10F","SILPH_CO_11F","SILPH_CO_1F","SILPH_CO_2F","SILPH_CO_3F","SILPH_CO_4F","SILPH_CO_5F","SILPH_CO_6F","SILPH_CO_7F","SILPH_CO_8F","SILPH_CO_9F","SILPH_CO_ELEVATOR","SS_ANNE_1F","SS_ANNE_1F_ROOMS","SS_ANNE_2F","SS_ANNE_2F_ROOMS","SS_ANNE_3F","SS_ANNE_B1F","SS_ANNE_B1F_ROOMS","SS_ANNE_BOW","SS_ANNE_CAPTAINS_ROOM","SS_ANNE_KITCHEN","UNDERGROUND_PATH_NORTH_SOUTH","UNDERGROUND_PATH_ROUTE_5","UNDERGROUND_PATH_ROUTE_6","UNDERGROUND_PATH_ROUTE_7","UNDERGROUND_PATH_ROUTE_8","UNDERGROUND_PATH_WEST_EAST","UNUSED_MAP_ED","VERMILION_CITY","VERMILION_DOCK","VERMILION_GYM","VERMILION_MART","VERMILION_OLD_ROD_HOUSE","VERMILION_PIDGEY_HOUSE","VERMILION_POKECENTER","VERMILION_TRADE_HOUSE","VICTORY_ROAD_1F","VICTORY_ROAD_2F","VICTORY_ROAD_3F","VIRIDIAN_CITY","VIRIDIAN_FOREST","VIRIDIAN_FOREST_NORTH_GATE","VIRIDIAN_FOREST_SOUTH_GATE","VIRIDIAN_GYM","VIRIDIAN_MART","VIRIDIAN_NICKNAME_HOUSE","VIRIDIAN_POKECENTER","VIRIDIAN_SCHOOL_HOUSE","WARDENS_HOUSE"],"label":["AGATHAS_ROOM","BIKE_SHOP","BILLS_HOUSE","BLUES_HOUSE","BRUNOS_ROOM","CELADON_CHIEF_HOUSE","CELADON_CITY","CELADON_DINER","CELADON_GYM","CELADON_HOTEL","CELADON_MANSION_1F","CELADON_MANSION_2F","CELADON_MANSION_3F","CELADON_MANSION_ROOF","CELADON_MANSION_ROOF_HOUSE","CELADON_MART_1F","CELADON_MART_2F","CELADON_MART_3F","CELADON_MART_4F","CELADON_MART_5F","CELADON_MART_ELEVATOR","CELADON_MART_ROOF","CELADON_POKECENTER","CERULEAN_BADGE_HOUSE","CERULEAN_CAVE_1F","CERULEAN_CAVE_2F","CERULEAN_CAVE_B1F","CERULEAN_CITY","CERULEAN_GYM","CERULEAN_MART","CERULEAN_POKECENTER","CERULEAN_TRADE_HOUSE","CERULEAN_TRASHED_HOUSE","CHAMPIONS_ROOM","CINNABAR_GYM","CINNABAR_ISLAND","CINNABAR_LAB","CINNABAR_LAB_FOSSIL_ROOM","CINNABAR_LAB_METRONOME_ROOM","CINNABAR_LAB_TRADE_ROOM","CINNABAR_MART","CINNABAR_POKECENTER","COPYCATS_HOUSE_1F","COPYCATS_HOUSE_2F","DAYCARE","DIGLETTS_CAVE","DIGLETTS_CAVE_ROUTE_11","DIGLETTS_CAVE_ROUTE_2","FIGHTING_DOJO","FUCHSIA_BILLS_GRANDPAS_HOUSE","FUCHSIA_CITY","FUCHSIA_GOOD_ROD_HOUSE","FUCHSIA_GYM","FUCHSIA_MART","FUCHSIA_MEETING_ROOM","FUCHSIA_POKECENTER","GAME_CORNER","GAME_CORNER_PRIZE_ROOM","HALL_OF_FAME","INDIGO_PLATEAU","INDIGO_PLATEAU_LOBBY","LANCES_ROOM","LAVENDER_CUBONE_HOUSE","LAVENDER_MART","LAVENDER_POKECENTER","LAVENDER_TOWN","LORELEIS_ROOM","MR_FUJIS_HOUSE","MR_PSYCHICS_HOUSE","MT_MOON_1F","MT_MOON_B1F","MT_MOON_B2F","MT_MOON_POKECENTER","MUSEUM_1F","MUSEUM_2F","NAME_RATERS_HOUSE","OAKS_LAB","PALLET_TOWN","PEWTER_CITY","PEWTER_GYM","PEWTER_MART","PEWTER_NIDORAN_HOUSE","PEWTER_POKECENTER","PEWTER_SPEECH_HOUSE","POKEMON_FAN_CLUB","POKEMON_MANSION_1F","POKEMON_MANSION_2F","POKEMON_MANSION_3F","POKEMON_MANSION_B1F","POKEMON_TOWER_1F","POKEMON_TOWER_2F","POKEMON_TOWER_3F","POKEMON_TOWER_4F","POKEMON_TOWER_5F","POKEMON_TOWER_6F","POKEMON_TOWER_7F","POWER_PLANT","REDS_HOUSE_1F","REDS_HOUSE_2F","ROCK_TUNNEL_1F","ROCK_TUNNEL_B1F","ROCK_TUNNEL_POKECENTER","ROCKET_HIDEOUT_B1F","ROCKET_HIDEOUT_B2F","ROCKET_HIDEOUT_B3F","ROCKET_HIDEOUT_B4F","ROCKET_HIDEOUT_ELEVATOR","ROUTE_1","ROUTE_10","ROUTE_11","ROUTE_11_GATE_1F","ROUTE_11_GATE_2F","ROUTE_12","ROUTE_12_GATE_1F","ROUTE_12_GATE_2F","ROUTE_12_SUPER_ROD_HOUSE","ROUTE_13","ROUTE_14","ROUTE_15","ROUTE_15_GATE_1F","ROUTE_15_GATE_2F","ROUTE_16","ROUTE_16_FLY_HOUSE","ROUTE_16_GATE_1F","ROUTE_16_GATE_2F","ROUTE_17","ROUTE_18","ROUTE_18_GATE_1F","ROUTE_18_GATE_2F","ROUTE_19","ROUTE_2","ROUTE_2_GATE","ROUTE_2_TRADE_HOUSE","ROUTE_20","ROUTE_21","ROUTE_22","ROUTE_22_GATE","ROUTE_23","ROUTE_24","ROUTE_25","ROUTE_3","ROUTE_4","ROUTE_5","ROUTE_5_GATE","ROUTE_6","ROUTE_6_GATE","ROUTE_7","ROUTE_7_GATE","ROUTE_8","ROUTE_8_GATE","ROUTE_9","SAFARI_ZONE_CENTER","SAFARI_ZONE_CENTER_REST_HOUSE","SAFARI_ZONE_EAST","SAFARI_ZONE_EAST_REST_HOUSE","SAFARI_ZONE_GATE","SAFARI_ZONE_NORTH","SAFARI_ZONE_NORTH_REST_HOUSE","SAFARI_ZONE_SECRET_HOUSE","SAFARI_ZONE_WEST","SAFARI_ZONE_WEST_REST_HOUSE","SAFFRON_CITY","SAFFRON_GYM","SAFFRON_MART","SAFFRON_PIDGEY_HOUSE","SAFFRON_POKECENTER","SEAFOAM_ISLANDS_1F","SEAFOAM_ISLANDS_B1F","SEAFOAM_ISLANDS_B2F","SEAFOAM_ISLANDS_B3F","SEAFOAM_ISLANDS_B4F","SILPH_CO_10F","SILPH_CO_11F","SILPH_CO_1F","SILPH_CO_2F","SILPH_CO_3F","SILPH_CO_4F","SILPH_CO_5F","SILPH_CO_6F","SILPH_CO_7F","SILPH_CO_8F","SILPH_CO_9F","SILPH_CO_ELEVATOR","SS_ANNE_1F","SS_ANNE_1F_ROOMS","SS_ANNE_2F","SS_ANNE_2F_ROOMS","SS_ANNE_3F","SS_ANNE_B1F","SS_ANNE_B1F_ROOMS","SS_ANNE_BOW","SS_ANNE_CAPTAINS_ROOM","SS_ANNE_KITCHEN","UNDERGROUND_PATH_NORTH_SOUTH","UNDERGROUND_PATH_ROUTE_5","UNDERGROUND_PATH_ROUTE_6","UNDERGROUND_PATH_ROUTE_7","UNDERGROUND_PATH_ROUTE_8","UNDERGROUND_PATH_WEST_EAST","UNUSED_MAP_ED","VERMILION_CITY","VERMILION_DOCK","VERMILION_GYM","VERMILION_MART","VERMILION_OLD_ROD_HOUSE","VERMILION_PIDGEY_HOUSE","VERMILION_POKECENTER","VERMILION_TRADE_HOUSE","VICTORY_ROAD_1F","VICTORY_ROAD_2F","VICTORY_ROAD_3F","VIRIDIAN_CITY","VIRIDIAN_FOREST","VIRIDIAN_FOREST_NORTH_GATE","VIRIDIAN_FOREST_SOUTH_GATE","VIRIDIAN_GYM","VIRIDIAN_MART","VIRIDIAN_NICKNAME_HOUSE","VIRIDIAN_POKECENTER","VIRIDIAN_SCHOOL_HOUSE","WARDENS_HOUSE"]},"edges":{"from":["AGATHAS_ROOM","AGATHAS_ROOM","BRUNOS_ROOM","CELADON_CITY","CELADON_CITY","CELADON_CITY","CELADON_CITY","CELADON_CITY","CELADON_CITY","CELADON_CITY","CELADON_CITY","CELADON_CITY","CELADON_CITY","CELADON_MANSION_1F","CELADON_MANSION_2F","CELADON_MANSION_3F","CELADON_MANSION_ROOF","CELADON_MART_1F","CELADON_MART_1F","CELADON_MART_2F","CELADON_MART_2F","CELADON_MART_3F","CELADON_MART_3F","CELADON_MART_4F","CELADON_MART_4F","CELADON_MART_5F","CELADON_MART_5F","CERULEAN_CAVE_1F","CERULEAN_CAVE_1F","CERULEAN_CITY","CERULEAN_CITY","CERULEAN_CITY","CERULEAN_CITY","CERULEAN_CITY","CERULEAN_CITY","CERULEAN_CITY","CERULEAN_CITY","CHAMPIONS_ROOM","CHAMPIONS_ROOM","CINNABAR_ISLAND","CINNABAR_ISLAND","CINNABAR_ISLAND","CINNABAR_ISLAND","CINNABAR_ISLAND","CINNABAR_LAB","CINNABAR_LAB","CINNABAR_LAB","COPYCATS_HOUSE_1F","DIGLETTS_CAVE","DIGLETTS_CAVE","FUCHSIA_CITY","FUCHSIA_CITY","FUCHSIA_CITY","FUCHSIA_CITY","FUCHSIA_CITY","FUCHSIA_CITY","FUCHSIA_CITY","FUCHSIA_CITY","GAME_CORNER","INDIGO_PLATEAU","INDIGO_PLATEAU_LOBBY","LAVENDER_TOWN","LAVENDER_TOWN","LAVENDER_TOWN","LAVENDER_TOWN","LAVENDER_TOWN","LAVENDER_TOWN","MT_MOON_1F","MT_MOON_B1F","MUSEUM_1F","PALLET_TOWN","PALLET_TOWN","PALLET_TOWN","PEWTER_CITY","PEWTER_CITY","PEWTER_CITY","PEWTER_CITY","PEWTER_CITY","PEWTER_CITY","POKEMON_MANSION_1F","POKEMON_MANSION_1F","POKEMON_MANSION_2F","POKEMON_TOWER_1F","POKEMON_TOWER_2F","POKEMON_TOWER_3F","POKEMON_TOWER_4F","POKEMON_TOWER_5F","POKEMON_TOWER_6F","REDS_HOUSE_1F","ROCKET_HIDEOUT_B1F","ROCKET_HIDEOUT_B1F","ROCKET_HIDEOUT_B2F","ROCKET_HIDEOUT_B2F","ROCKET_HIDEOUT_B3F","ROCKET_HIDEOUT_B4F","ROCK_TUNNEL_1F","ROUTE_10","ROUTE_10","ROUTE_10","ROUTE_11","ROUTE_11","ROUTE_11_GATE_1F","ROUTE_12","ROUTE_12","ROUTE_12_GATE_1F","ROUTE_15","ROUTE_15_GATE_1F","ROUTE_16","ROUTE_16","ROUTE_16_GATE_1F","ROUTE_18","ROUTE_18_GATE_1F","ROUTE_2","ROUTE_2","ROUTE_2","ROUTE_2","ROUTE_2","ROUTE_20","ROUTE_22","ROUTE_23","ROUTE_23","ROUTE_23","ROUTE_25","ROUTE_4","ROUTE_4","ROUTE_4","ROUTE_5","ROUTE_5","ROUTE_5","ROUTE_6","ROUTE_6","ROUTE_7","ROUTE_7","ROUTE_8","ROUTE_8","SAFARI_ZONE_CENTER","SAFARI_ZONE_CENTER","SAFARI_ZONE_CENTER","SAFARI_ZONE_CENTER","SAFARI_ZONE_CENTER","SAFARI_ZONE_EAST","SAFARI_ZONE_EAST","SAFARI_ZONE_NORTH","SAFARI_ZONE_NORTH","SAFARI_ZONE_SECRET_HOUSE","SAFARI_ZONE_WEST","SAFFRON_CITY","SAFFRON_CITY","SAFFRON_CITY","SAFFRON_CITY","SAFFRON_CITY","SAFFRON_CITY","SAFFRON_CITY","SAFFRON_CITY","SAFFRON_GYM","SEAFOAM_ISLANDS_1F","SEAFOAM_ISLANDS_B1F","SEAFOAM_ISLANDS_B2F","SEAFOAM_ISLANDS_B3F","SILPH_CO_10F","SILPH_CO_10F","SILPH_CO_10F","SILPH_CO_10F","SILPH_CO_11F","SILPH_CO_11F","SILPH_CO_1F","SILPH_CO_1F","SILPH_CO_1F","SILPH_CO_2F","SILPH_CO_2F","SILPH_CO_2F","SILPH_CO_2F","SILPH_CO_3F","SILPH_CO_3F","SILPH_CO_3F","SILPH_CO_3F","SILPH_CO_3F","SILPH_CO_3F","SILPH_CO_4F","SILPH_CO_4F","SILPH_CO_4F","SILPH_CO_5F","SILPH_CO_5F","SILPH_CO_5F","SILPH_CO_5F","SILPH_CO_6F","SILPH_CO_6F","SILPH_CO_7F","SILPH_CO_7F","SILPH_CO_8F","SILPH_CO_8F","SILPH_CO_8F","SILPH_CO_9F","SILPH_CO_ELEVATOR","SS_ANNE_1F","SS_ANNE_1F","SS_ANNE_1F","SS_ANNE_1F","SS_ANNE_1F","SS_ANNE_2F","SS_ANNE_2F","SS_ANNE_2F","SS_ANNE_3F","SS_ANNE_B1F","UNDERGROUND_PATH_NORTH_SOUTH","UNDERGROUND_PATH_NORTH_SOUTH","UNDERGROUND_PATH_ROUTE_7","UNDERGROUND_PATH_ROUTE_8","VERMILION_CITY","VERMILION_CITY","VERMILION_CITY","VERMILION_CITY","VERMILION_CITY","VERMILION_CITY","VERMILION_CITY","VERMILION_CITY","VICTORY_ROAD_1F","VICTORY_ROAD_2F","VIRIDIAN_CITY","VIRIDIAN_CITY","VIRIDIAN_CITY","VIRIDIAN_CITY","VIRIDIAN_CITY","VIRIDIAN_FOREST","VIRIDIAN_FOREST","CELADON_CITY","CELADON_CITY","CERULEAN_CITY","CERULEAN_CITY","CERULEAN_CITY","CERULEAN_CITY","CINNABAR_ISLAND","CINNABAR_ISLAND","FUCHSIA_CITY","FUCHSIA_CITY","FUCHSIA_CITY","INDIGO_PLATEAU","LAVENDER_TOWN","LAVENDER_TOWN","LAVENDER_TOWN","PALLET_TOWN","PALLET_TOWN","PEWTER_CITY","PEWTER_CITY","ROUTE_1","ROUTE_10","ROUTE_11","ROUTE_11","ROUTE_12","ROUTE_13","ROUTE_14","ROUTE_16","ROUTE_17","ROUTE_19","ROUTE_2","ROUTE_22","ROUTE_22","ROUTE_24","ROUTE_3","ROUTE_5","ROUTE_6","ROUTE_6","ROUTE_7","ROUTE_8"],"to":["BRUNOS_ROOM","LANCES_ROOM","LORELEIS_ROOM","CELADON_MART_1F","CELADON_MANSION_1F","CELADON_POKECENTER","CELADON_GYM","GAME_CORNER","CELADON_MART_5F","GAME_CORNER_PRIZE_ROOM","CELADON_DINER","CELADON_CHIEF_HOUSE","CELADON_HOTEL","CELADON_MANSION_2F","CELADON_MANSION_3F","CELADON_MANSION_ROOF","CELADON_MANSION_ROOF_HOUSE","CELADON_MART_2F","CELADON_MART_ELEVATOR","CELADON_MART_3F","CELADON_MART_ELEVATOR","CELADON_MART_4F","CELADON_MART_ELEVATOR","CELADON_MART_5F","CELADON_MART_ELEVATOR","CELADON_MART_ROOF","CELADON_MART_ELEVATOR","CERULEAN_CAVE_2F","CERULEAN_CAVE_B1F","CERULEAN_TRASHED_HOUSE","CERULEAN_TRADE_HOUSE","CERULEAN_POKECENTER","CERULEAN_GYM","BIKE_SHOP","CERULEAN_MART","CERULEAN_CAVE_1F","CERULEAN_BADGE_HOUSE","LANCES_ROOM","HALL_OF_FAME","POKEMON_MANSION_1F","CINNABAR_GYM","CINNABAR_LAB","CINNABAR_POKECENTER","CINNABAR_MART","CINNABAR_LAB_TRADE_ROOM","CINNABAR_LAB_METRONOME_ROOM","CINNABAR_LAB_FOSSIL_ROOM","COPYCATS_HOUSE_2F","DIGLETTS_CAVE_ROUTE_2","DIGLETTS_CAVE_ROUTE_11","FUCHSIA_MART","FUCHSIA_BILLS_GRANDPAS_HOUSE","FUCHSIA_POKECENTER","WARDENS_HOUSE","SAFARI_ZONE_GATE","FUCHSIA_GYM","FUCHSIA_MEETING_ROOM","FUCHSIA_GOOD_ROD_HOUSE","ROCKET_HIDEOUT_B1F","INDIGO_PLATEAU_LOBBY","LORELEIS_ROOM","LAVENDER_POKECENTER","POKEMON_TOWER_1F","MR_FUJIS_HOUSE","LAVENDER_MART","LAVENDER_CUBONE_HOUSE","NAME_RATERS_HOUSE","MT_MOON_B1F","MT_MOON_B2F","MUSEUM_2F","REDS_HOUSE_1F","BLUES_HOUSE","OAKS_LAB","MUSEUM_1F","PEWTER_GYM","PEWTER_NIDORAN_HOUSE","PEWTER_MART","PEWTER_SPEECH_HOUSE","PEWTER_POKECENTER","POKEMON_MANSION_2F","POKEMON_MANSION_B1F","POKEMON_MANSION_3F","POKEMON_TOWER_2F","POKEMON_TOWER_3F","POKEMON_TOWER_4F","POKEMON_TOWER_5F","POKEMON_TOWER_6F","POKEMON_TOWER_7F","REDS_HOUSE_2F","ROCKET_HIDEOUT_B2F","ROCKET_HIDEOUT_ELEVATOR","ROCKET_HIDEOUT_B3F","ROCKET_HIDEOUT_ELEVATOR","ROCKET_HIDEOUT_B4F","ROCKET_HIDEOUT_ELEVATOR","ROCK_TUNNEL_B1F","ROCK_TUNNEL_POKECENTER","ROCK_TUNNEL_1F","POWER_PLANT","ROUTE_11_GATE_1F","DIGLETTS_CAVE_ROUTE_11","ROUTE_11_GATE_2F","ROUTE_12_GATE_1F","ROUTE_12_SUPER_ROD_HOUSE","ROUTE_12_GATE_2F","ROUTE_15_GATE_1F","ROUTE_15_GATE_2F","ROUTE_16_GATE_1F","ROUTE_16_FLY_HOUSE","ROUTE_16_GATE_2F","ROUTE_18_GATE_1F","ROUTE_18_GATE_2F","DIGLETTS_CAVE_ROUTE_2","VIRIDIAN_FOREST_NORTH_GATE","ROUTE_2_TRADE_HOUSE","ROUTE_2_GATE","VIRIDIAN_FOREST_SOUTH_GATE","SEAFOAM_ISLANDS_1F","ROUTE_22_GATE","ROUTE_22_GATE","VICTORY_ROAD_1F","VICTORY_ROAD_2F","BILLS_HOUSE","MT_MOON_POKECENTER","MT_MOON_1F","MT_MOON_B1F","ROUTE_5_GATE","UNDERGROUND_PATH_ROUTE_5","DAYCARE","ROUTE_6_GATE","UNDERGROUND_PATH_ROUTE_6","ROUTE_7_GATE","UNDERGROUND_PATH_ROUTE_7","ROUTE_8_GATE","UNDERGROUND_PATH_ROUTE_8","SAFARI_ZONE_GATE","SAFARI_ZONE_WEST","SAFARI_ZONE_NORTH","SAFARI_ZONE_EAST","SAFARI_ZONE_CENTER_REST_HOUSE","SAFARI_ZONE_NORTH","SAFARI_ZONE_EAST_REST_HOUSE","SAFARI_ZONE_WEST","SAFARI_ZONE_NORTH_REST_HOUSE","SAFARI_ZONE_WEST","SAFARI_ZONE_WEST_REST_HOUSE","COPYCATS_HOUSE_1F","FIGHTING_DOJO","SAFFRON_GYM","SAFFRON_PIDGEY_HOUSE","SAFFRON_MART","SILPH_CO_1F","SAFFRON_POKECENTER","MR_PSYCHICS_HOUSE","SAFFRON_GYM","SEAFOAM_ISLANDS_B1F","SEAFOAM_ISLANDS_B2F","SEAFOAM_ISLANDS_B3F","SEAFOAM_ISLANDS_B4F","SILPH_CO_9F","SILPH_CO_11F","SILPH_CO_ELEVATOR","SILPH_CO_4F","SILPH_CO_ELEVATOR","SILPH_CO_7F","SILPH_CO_2F","SILPH_CO_ELEVATOR","SILPH_CO_3F","SILPH_CO_3F","SILPH_CO_ELEVATOR","SILPH_CO_8F","SILPH_CO_6F","SILPH_CO_4F","SILPH_CO_ELEVATOR","SILPH_CO_3F","SILPH_CO_5F","SILPH_CO_9F","SILPH_CO_7F","SILPH_CO_5F","SILPH_CO_ELEVATOR","SILPH_CO_6F","SILPH_CO_6F","SILPH_CO_ELEVATOR","SILPH_CO_7F","SILPH_CO_9F","SILPH_CO_7F","SILPH_CO_ELEVATOR","SILPH_CO_8F","SILPH_CO_ELEVATOR","SILPH_CO_9F","SILPH_CO_ELEVATOR","SILPH_CO_8F","SILPH_CO_ELEVATOR","UNUSED_MAP_ED","VERMILION_DOCK","SS_ANNE_1F_ROOMS","SS_ANNE_2F","SS_ANNE_B1F","SS_ANNE_KITCHEN","SS_ANNE_2F_ROOMS","SS_ANNE_3F","SS_ANNE_CAPTAINS_ROOM","SS_ANNE_BOW","SS_ANNE_B1F_ROOMS","UNDERGROUND_PATH_ROUTE_5","UNDERGROUND_PATH_ROUTE_6","UNDERGROUND_PATH_WEST_EAST","UNDERGROUND_PATH_WEST_EAST","VERMILION_POKECENTER","POKEMON_FAN_CLUB","VERMILION_MART","VERMILION_GYM","VERMILION_PIDGEY_HOUSE","VERMILION_DOCK","VERMILION_TRADE_HOUSE","VERMILION_OLD_ROD_HOUSE","VICTORY_ROAD_2F","VICTORY_ROAD_3F","VIRIDIAN_POKECENTER","VIRIDIAN_MART","VIRIDIAN_SCHOOL_HOUSE","VIRIDIAN_NICKNAME_HOUSE","VIRIDIAN_GYM","VIRIDIAN_FOREST_NORTH_GATE","VIRIDIAN_FOREST_SOUTH_GATE","ROUTE_16","ROUTE_7","ROUTE_24","ROUTE_5","ROUTE_4","ROUTE_9","ROUTE_21","ROUTE_20","ROUTE_19","ROUTE_18","ROUTE_15","ROUTE_23","ROUTE_10","ROUTE_12","ROUTE_8","ROUTE_1","ROUTE_21","ROUTE_2","ROUTE_3","VIRIDIAN_CITY","ROUTE_9","VERMILION_CITY","ROUTE_12","ROUTE_13","ROUTE_14","ROUTE_15","ROUTE_17","ROUTE_18","ROUTE_20","VIRIDIAN_CITY","ROUTE_23","VIRIDIAN_CITY","ROUTE_25","ROUTE_4","SAFFRON_CITY","SAFFRON_CITY","VERMILION_CITY","SAFFRON_CITY","SAFFRON_CITY"]},"nodesToDataframe":true,"edgesToDataframe":true,"options":{"width":"100%","height":"100%","nodes":{"shape":"dot","borderWidth":0,"borderWidthSelected":3,"color":"#FF7777","font":{"face":"pokemon-font","size":14}},"manipulation":{"enabled":false},"edges":{"width":3,"selectionWidth":5,"color":{"color":"#FF7777","highlight":"red","opacity":0.5}},"layout":{"randomSeed":150},"physics":{"solver":"barnesHut","barnesHut":{"springConstant":0.1,"gravitationalConstant":-10000}}},"groups":null,"width":"100%","height":"600px","idselection":{"enabled":true,"style":"font-family:pokemon-font,sans-serif;font-size:16px;color:red;","useLabels":true,"main":"Select a location"},"byselection":{"enabled":false,"style":"width: 150px; height: 26px","multiple":false,"hideColor":"rgba(200,200,200,0.5)","highlight":false},"main":{"text":"Kanto","style":"font-family:pokemon-font,sans-serif;font-size:30px;color:black;"},"submain":{"text":"A graph of locations in PKMN Red<br><br>","style":"font-family:pokemon-font,sans-serif;font-size:16px;color:black;"},"footer":{"text":"Source: Nintendo and Game Freak via the pret/pokered dissassembly project","style":"font-family:pokemon-font,sans-serif;font-size:8px;color:black;"},"background":"rgba(0, 0, 0, 0)","highlight":{"enabled":true,"hoverNearest":false,"degree":1,"algorithm":"all","hideColor":"rgba(200,200,200,0.5)","labelOnly":true},"collapse":{"enabled":false,"fit":false,"resetHighlight":true,"clusterOptions":null,"keepCoord":true,"labelSuffix":"(cluster)"}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p><br> It can take a moment to load. You can select a node from the dropdown menu, scroll to zoom, and click on the nodes and edges themselves. The node labels will appear when you zoom in.</p>
<p>It’s interesting to see the simple radial networks around each city; the spaghetti and meatballs of Silph Co caused by all the warp tiles (also note <a href="https://tcrf.net/Pok%C3%A9mon_Red_and_Blue/Unused_Maps">its unused location</a>); the long ‘tail’ from Victory Road through the Elite Four to the Hall of Fame; and the hand-like structure of the Safari Zone.</p>
<p>Of course, you could spend all day tweaking things like the physics of the relationship between each node, or you could replace each node an images of its in-game sprite. I’ve chosen to keep things relatively simple because it’s bed time and I need to go and <a href="https://bulbapedia.bulbagarden.net/wiki/Mareep_(Pok%C3%A9mon)">count some Mareep</a>.</p>
</section>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2024-01-13 09:56:18 GMT</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] visNetwork_2.1.2

loaded via a namespace (and not attached):
 [1] digest_0.6.33     fastmap_1.1.1     xfun_0.41         fontawesome_0.5.2
 [5] magrittr_2.0.3    knitr_1.45        htmltools_0.5.6.1 rmarkdown_2.25   
 [9] cli_3.6.2         compiler_4.3.1    rstudioapi_0.15.0 tools_4.3.1      
[13] ellipsis_0.3.2    evaluate_0.23     yaml_2.3.8        rlang_1.1.3      
[17] jsonlite_1.8.7    htmlwidgets_1.6.2</code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Oh no! He’s running out of ideas!↩︎</p></li>
<li id="fn2"><p>Not to mention that you can mess about with modding the game, like adjusting the code to <a href="https://www.youtube.com/watch?v=f5R8mcmlbFQ">set Mew as one of the starter ’mons</a>.↩︎</p></li>
<li id="fn3"><p>As a diehard Blue-version enjoyer, it pains me slightly that this is the Red version. Red is the bad guy! Blue is the good guy!↩︎</p></li>
<li id="fn4"><p>This wrangling was actually mildly trickier than I thought it was be and so <a href="https://stackoverflow.com/a/50117582">I ‘borrowed’ from StackOverflow</a> to save time.↩︎</p></li>
<li id="fn5"><p>I can’t actually remember where I got this exact font file from, but I know it’s available from <a href="https://www.fontspace.com/pokemon-gb-font-f9621">free font sites</a>.↩︎</p></li>
<li id="fn6"><p>Graphic design is my passion, etc. As a colourblind person, I’m just glad they didn’t release Red and Green versions simultaneously.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>r</category>
  <category>videogames</category>
  <category>visNetwork</category>
  <guid>https://www.rostrum.blog/posts/2023-11-25-kanto-graph/index.html</guid>
  <pubDate>Sat, 25 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Unlock R functions with QR codes</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-11-01-qr-enabled-fn/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-11-01-qr-enabled-fn/resources/uhuhuh.png" class="img-fluid figure-img" alt="Screenshot of the computer from Jurassic Park with repeating monospace text in all caps saying 'you didn't say the magic word' and a photo of the antagonist's (Nedry's) head on a cartoon body wagging his finger."></p>
<figcaption class="figure-caption">Uh uh uh! (Jurassic Park via <a href="https://www.youtube.com/watch?v=K3PrSj9XEu4">BJ22CS</a>)</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>What if (hear me out) you could prevent an R function from operating correctly unless the user presents a specific QR code?</p>
</section>
<section id="qr-you" class="level2">
<h2 class="anchored" data-anchor-id="qr-you">QR you?</h2>
<p><a href="https://ropensci.org/blog/2023/10/30/opencv-qr/">Jeroen announced</a> that the latest version of <a href="https://ropensci.r-universe.dev/opencv#">the {opencv} package</a> is capable of detecting and decoding a QR code.</p>
<p>So this means we could write a function that only returns an answer when you introduce a QR code that encodes the correct ‘password’.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">add_one <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n) {</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  string_in <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> opencv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qr_scanner</span>()</span>
<span id="cb1-4">  password <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> RCurl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base64Decode</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b3BlbmN2IHNlc2FtZSE="</span>)</span>
<span id="cb1-5">  </span>
<span id="cb1-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (string_in <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> password) {</span>
<span id="cb1-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🔑 Correct password!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-8">    n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-9">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wrong password!"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-11">  }</span>
<span id="cb1-12">  </span>
<span id="cb1-13">}</span></code></pre></div>
</div>
<p>So <code>add_one()</code> uses the <code>qr_scanner()</code> function to find and read a QR code from a video image and compare that to a password before giving the answer. You can see in the function body that I’ve only mildly obfuscated the password, using base64 encoding. Maybe you can do something more secure?</p>
<p>Now to run the function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_one</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<pre><code>Starting video window (could be behind this window)</code></pre>
<p>This will activate your device’s camera and it will keep looking for a QR code before it runs the rest of the code in the function.</p>
<p>The ‘correct’ QR code (made with <a href="https://cran.r-project.org/package=qrcode">{qrcode}</a>) is this one:</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-11-01-qr-enabled-fn/resources/qr.png" class="img-fluid figure-img" style="width:25.0%" alt="A QR code."></p>
<figcaption class="figure-caption">Maybe this is a rickroll, who knows?</figcaption>
</figure>
</div>
<p>If you then scan this QR code with your device you’ll get an answer:</p>
<pre><code>Correct password!
[1] 2</code></pre>
<p>Here’s a gif of the process:</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-11-01-qr-enabled-fn/resources/add-one-qr.gif" class="img-fluid figure-img" style="width:75.0%" alt="Screengrab gif. An R function called 'add_one' is run in the terminal with the argument '1'. A message is printed saying 'Starting video window (could be behind this window)' and then a video image appears, showing the corner of a room. A phone displaying a QR code flashes briefly in front of the screen. The Terminal window returns and the message 'correct password' is displayed, along with the answer value of '2'."></p>
<figcaption class="figure-caption">Halloween special: the QR code appears like a jumpscare</figcaption>
</figure>
</div>
<p>The <code>add_one()</code> function was run, my laptop’s camera opened and then I showed it the QR code on my phone. The code was detected super quickly and the correct answer was returned in the console.</p>
<p>I think there’s a lot of promise in this approach for helping to <a href="https://www.rostrum.blog/posts/2023-08-01-monetize/">monetise your R package</a>!</p>
<div class="tip">
<p> <b>Note</b></p>
<p>As <a href="https://fosstodon.org/@Dan@aus.social/111334590992309389">Jeroen and Dan</a> pointed out: you could use this to create an R-based multi-factor authentication solution by introducing <a href="https://randy3k.github.io/otp/">{otp}</a> and <a href="https://github.com/jonocarroll/ntfy">{ntfy}</a> into the mix.</p>
<p>I also wanted to mention <a href="https://the-strategy-unit.github.io/data_science/presentations/2023-10-17_conference-check-in-app/#/title-slide">Tom’s talk</a> at the recent NHS-R conference. Tom had fun building a conference check-in service with personalised QR codes, making use of <a href="https://www.rplumber.io/">{plumber}</a> and <a href="https://rstudio.github.io/blastula/">{blastula}</a> in the back end.</p>
</div>
</section>


<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-11-01 10:23:17 GMT</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        
 [5] tools_4.3.1       htmltools_0.5.6.1 rstudioapi_0.15.0 yaml_2.3.7       
 [9] rmarkdown_2.25    knitr_1.44        jsonlite_1.8.7    xfun_0.40        
[13] digest_0.6.33     rlang_1.1.1       fontawesome_0.5.2 evaluate_0.22    </code></pre>
</div>
</div>
</details>


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>opencv</category>
  <category>qrcode</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2023-11-01-qr-enabled-fn/index.html</guid>
  <pubDate>Wed, 01 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Base slaps!</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/index.html</link>
  <description><![CDATA[ 




<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I gave <a href="https://matt-dray.github.io/nhs-r-2023/">a lightning talk</a> at the <a href="https://nhsrcommunity.com/">NHS-R</a> Conference 2023 about base R.</p>
</section>
<section id="video" class="level2">
<h2 class="anchored" data-anchor-id="video">Video</h2>
<p>You can choose to <a href="https://youtu.be/q-JZxrDC0ck?feature=shared&amp;t=14298">watch the video on YouTube</a><sup>1</sup>.</p>
<div class="cell">
<div class="cell-output-display">
<div class="vembedr">
<div>
<iframe src="https://www.youtube.com/embed/q-JZxrDC0ck?start=14298" width="533" height="300" frameborder="0" allowfullscreen="" data-external="1"></iframe>
</div>
</div>
</div>
</div>
</section>
<section id="slides" class="level2">
<h2 class="anchored" data-anchor-id="slides">Slides</h2>
<p>The slides are embedded below<sup>2</sup> or they can be <a href="https://matt-dray.github.io/nhs-r-2023/">opened in a dedicated tab</a>. Click on them and press <kbd>→</kbd> to advance, <kbd>F</kbd> to go fullscreen, and <kbd>S</kbd> to pop-out the speaker notes<sup>3</sup>.</p>
<div class="cell">
<div class="cell-output-display">
<div class="shareagain" style="min-width:300px;margin:1em auto;" data-exeternal="1">
<iframe src="https://matt-dray.github.io/nhs-r-2023/" width="1600" height="900" style="border:2px solid currentColor;" loading="lazy" allowfullscreen=""></iframe>
<script>fitvids('.shareagain', {players: 'iframe'});</script>
</div>
</div>
</div>
<p>The source is <a href="https://github.com/matt-dray/nhs-r-2023">on GitHub</a>. The slides are <a href="https://quarto.org/docs/presentations/">written with Quarto</a>, of course.</p>
</section>
<section id="premise" class="level2">
<h2 class="anchored" data-anchor-id="premise">Premise</h2>
<p>The abstract for the talk:</p>
<blockquote class="blockquote">
<p>Did you hear? Base R is dead! Or is it? I’ve spent most of my time in the public sector using the tidyverse, but I started learning R before the tidyverse existed (to be polite, you could call me ‘seasoned’). Recently I’ve started to write more base R code again. Why? I’ll talk about how base R can do loads of neat stuff out of the box without you needing to install and update any packages (dependencies aren’t bad things per se, but can cause trouble if not managed appropriately). I’ll also tell you about some recent additions, like the base pipe and lambda function notation, which demonstrate how base R is responding to the needs of the modern coder. Oh, and you can also do wacky stuff like make an interactive pixel-art creator, a persistent Tamagotchi pet, or a procedural dungeon-crawler. Note that this talk does not constitute a ‘base versus tidyverse’ flamewar. It’s purely to appreciate the elegance of good ol’ base R and to highlight some things it can do that you might not have realised (or like me, you forgot a long time ago).</p>
</blockquote>
<p>In other words, the content of the talk was neither new nor earth-shattering<sup>4</sup>. The basic premise was ‘base R is pretty neat, don’t forget it exists!’</p>
<p>I have a narrow window of experience. I work in the public sector, mostly with people who publish statistical reports. The default for data preparation and analysis is often the tidyverse. That’s fine, for many reasons, but it may be overkill for small projects. Arguably, at worst, reproducibility may be jeopardised. And we <a href="https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/">love reproducibility</a> in the public sector.</p>
<p>My plea to fellow public-sector coders: use your tool of choice, but consider if base R can do it alone<sup>5</sup>. Or, at very least, become more acquainted with the built-in functions and (spoiler alert) maybe build some off-piste packages for a laugh.</p>
</section>
<section id="content" class="level2">
<h2 class="anchored" data-anchor-id="content">Content</h2>
<p>The talk mentions three beneficial things related to base R:</p>
<ol type="1">
<li>Stability.</li>
<li>Dependency.</li>
<li>Modernity.</li>
</ol>
<p>Re stability, vanilla R has changed little over time. Code written a couple of decades ago has a high chance of running now and will (likely) be executable for a long time into the future<sup>6</sup>. As a result, I contend that R is a horseshoe crab (unchanged for aeons, cryptically beautiful). And that R users are Milhouse in this relevant gif (look deep inside yourself, you are Milhouse).</p>
<p><img src="https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/resources/nice-doggie.gif" class="img-fluid" style="width:50.0%" alt="Milhouse from the Simpsons pats a happy horseshoe crab on the head. Milhouse is not wearig his glasses. He thinks the crab is a dog."></p>
<p>Re dependencies, R’s extensibility is one of its greatest strengths, but reducing the dependency count could help improve reproducibility and reduce headaches<sup>7</sup>. I used an obligatory (adapted) <a href="https://xkcd.com/2347/">xkcd comic</a> to illustrate this. Note that base R is the literal, unyielding base of the teetering tower of packages used by your project (incredible metaphor).</p>
<p><img src="https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/resources/xkcd.png" class="img-fluid" style="width:50.0%" alt="Comic from xkcd. Lots of blocks are stacked on top of each other. One small block near the bottom is indicated. The implication is that removing the one small block will bring the whole thing down. The stack is labelled 'your project', the small block is labelled 'some dependency' and the big stable blocks underneath it at the bottom are labelled 'base'."></p>
<p>Re ‘modernity’, high stability hasn’t stopped base R from also being adapted to meet the expectations of a contemporary coder. R version 4.0 has given us a ‘modern base aesthetic’ (trademark pending) of pipes (<code>|&gt;</code>), lambdas (<code>\()</code>) and string literals (<code>r"{}"</code>). R has morphed, much like the morphing of its janky old logo to the (perhaps already-outdated, lol) contemporary ‘flat’ design of the new logo<sup>8</sup>?</p>
<p><img src="https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/resources/logo.gif" class="img-fluid" style="width:50.0%" alt="The old R logo morphs into the new R logo. The old has bevels, highlights and shadows. The new one is simpler with peak 'flat' design."></p>
<p>But wait! A bonus thing:</p>
<ol start="4" type="1">
<li>‘Oddity’.</li>
</ol>
<p>Re oddity, base R has some hidden-gem functions that you can use for serious—or utterly nonserious things—like:</p>
<ul>
<li><code>locator()</code> to click a plot and have coordinates returned (e.g.&nbsp;in <a href="https://github.com/matt-dray/pixeltrix">my experimental {pixeltrix} package</a> for interactive pixel art)</li>
<li><code>readline()</code> to accept user input interactively (e.g.&nbsp;i <a href="https://github.com/matt-dray/r.oguelike">my experimental {r.oguelike} package</a> for a ‘procedural dungeon-crawler’ in the R console)</li>
<li><code>R_user_dir()</code> as a location for storing user data (e.g.&nbsp;in <a href="https://github.com/matt-dray/tamRgo">my experimental {tamRgo} package</a> for a persistent cyber pet in the R console)</li>
</ul>
<p>Despite all this, base R isn’t perfect for everyone in every situation<sup>9</sup>. Base <em>flaps</em> sometimes, that’s fine. You can argue it’s more terse and less readable than the verb-driven tidyverse, for example. But we have a duty in the public sector to think about long-term code survival. And high employee turnover rates mean we should perhaps default to the most vanilla tool.</p>
<p>I like base R for writing functions and code I want to live for a long time, for example. I use the tidyverse for everyday data wrangling.</p>
<p>But ultimately, I just wanted to do this terrible ‘base slaps’/‘slap bass’ pun, sorry. But also, I hear that zoomers say ‘slaps’ to mean ‘cool’. I think. Oh dear, this was a flimsy premise for a talk. Cringe-driven development?</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-11-28 23:20:58 GMT</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] assertthat_0.2.1    digest_0.6.33       R6_2.5.1           
 [4] fastmap_1.1.1       xfun_0.41           magrittr_2.0.3     
 [7] glue_1.6.2          stringr_1.5.0       knitr_1.45         
[10] htmltools_0.5.6.1   rmarkdown_2.25      lifecycle_1.0.3    
[13] cli_3.6.1           vctrs_0.6.4         compiler_4.3.1     
[16] httr_1.4.7          vembedr_0.1.5       rstudioapi_0.15.0  
[19] tools_4.3.1         xaringanExtra_0.7.0 curl_5.1.0         
[22] evaluate_0.23       yaml_2.3.7          rlang_1.1.1        
[25] jsonlite_1.8.7      htmlwidgets_1.6.2   stringi_1.7.12     </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>No Matt Dray presentation is complete without a ‘Dr Dre’ pun at beginning, lol. Only made funnier by my ongoing work with RAP (Reproducible Analytical Pipelines).↩︎</p></li>
<li id="fn2"><p>I think there’ll be a video; I’ll link to it here when it’s released.↩︎</p></li>
<li id="fn3"><p>Amusingly, these notes are absolutely not what I said in the talk itself, lol.↩︎</p></li>
<li id="fn4"><p>Although at least one attendee’s mind was blown to discover that you can simultaneously assign and print an expression by wrapping it in brackets, like <code>(x &lt;- 1)</code>.↩︎</p></li>
<li id="fn5"><p>But to be clear: I don’t think you should ‘just replace all your code with base R code’. There’s very few examples of where that would make sense. But is it worth importing all of {dplyr} if you just want to <code>select()</code>, <code>filter()</code> and <code>mutate()</code> a data.frame? Maybe, maybe not.↩︎</p></li>
<li id="fn6"><p>Until we all switch to the Julia and/or Rust languages, amirite.↩︎</p></li>
<li id="fn7"><p>Bearing in mind that tools like {renv}, Docker and Nix (thanks Bruno) can help coordinate dependencies. But that’s yet another tool to manage.↩︎</p></li>
<li id="fn8"><p>I think this was incepted into my brain by Jeroen in <a href="https://docs.ropensci.org/magick/articles/intro.html">the {magick} docs</a>.↩︎</p></li>
<li id="fn9"><p>See <a href="https://github.com/HenrikBengtsson/Wishlist-for-R/issues">the wishlist</a> that Henrik Bengtsson has been hosting.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>base</category>
  <category>public-sector</category>
  <category>r</category>
  <category>talk</category>
  <guid>https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/index.html</guid>
  <pubDate>Mon, 16 Oct 2023 23:00:00 GMT</pubDate>
</item>
</channel>
</rss>
