<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>rostrum.blog</title>
<link>https://www.rostrum.blog/index.html</link>
<atom:link href="https://www.rostrum.blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Japes with R</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Mon, 16 Oct 2023 23:00:00 GMT</lastBuildDate>
<item>
  <title>Base slaps!</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/index.html</link>
  <description><![CDATA[ 




<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I’m giving <a href="https://matt-dray.github.io/nhs-r-2023/">a lightning talk</a> at the <a href="https://nhsrcommunity.com/">NHS-R</a> Conference 2023 (tomorrow!) about base R.</p>
</section>
<section id="slides" class="level2">
<h2 class="anchored" data-anchor-id="slides">Slides</h2>
<p>The slides are embedded below<sup>1</sup> or they can be <a href="https://matt-dray.github.io/nhs-r-2023/">opened in a dedicated tab</a>. Click on them and press <kbd>→</kbd> to advance, <kbd>F</kbd> to go fullscreen, and <kbd>S</kbd> to pop-out the speaker notes.</p>
<div class="cell">
<div class="cell-output-display">
<div class="shareagain" style="min-width:300px;margin:1em auto;" data-exeternal="1">
<iframe src="https://matt-dray.github.io/nhs-r-2023/" width="1600" height="900" style="border:2px solid currentColor;" loading="lazy" allowfullscreen=""></iframe>
<script>fitvids('.shareagain', {players: 'iframe'});</script>
</div>
</div>
</div>
<p>The source is <a href="https://github.com/matt-dray/nhs-r-2023">on GitHub</a>. The slides are <a href="https://quarto.org/docs/presentations/">written with Quarto</a>, of course.</p>
</section>
<section id="premise" class="level2">
<h2 class="anchored" data-anchor-id="premise">Premise</h2>
<p>The abstract for the talk:</p>
<blockquote class="blockquote">
<p>Did you hear? Base R is dead! Or is it? I’ve spent most of my time in the public sector using the tidyverse, but I started learning R before the tidyverse existed (to be polite, you could call me ‘seasoned’). Recently I’ve started to write more base R code again. Why? I’ll talk about how base R can do loads of neat stuff out of the box without you needing to install and update any packages (dependencies aren’t bad things per se, but can cause trouble if not managed appropriately). I’ll also tell you about some recent additions, like the base pipe and lambda function notation, which demonstrate how base R is responding to the needs of the modern coder. Oh, and you can also do wacky stuff like make an interactive pixel-art creator, a persistent Tamagotchi pet, or a procedural dungeon-crawler. Note that this talk does not constitute a ‘base versus tidyverse’ flamewar. It’s purely to appreciate the elegance of good ol’ base R and to highlight some things it can do that you might not have realised (or like me, you forgot a long time ago).</p>
</blockquote>
<p>In other words, the content of the talk is neither new nor earth-shattering. The basic premise is ‘base R is pretty neat, eh?’ I hope R users of all skill levels will learn something, no matter how small.</p>
<p>I have a narrow window of experience. I work in the public sector, mostly with people who publish statistical reports. The default for this purpose is often the tidyverse. That’s fine, for many reasons, but it may be overkill for small projects. At worst, reproducibility may be jeopardised.</p>
<p>The bottom line: use your tool of choice, but consider if base R can do it alone<sup>2</sup>.</p>
</section>
<section id="content" class="level2">
<h2 class="anchored" data-anchor-id="content">Content</h2>
<p>The talk mentions three beneficial things related to base R:</p>
<ol type="1">
<li>Stability.</li>
<li>Dependency.</li>
<li>Modernity.</li>
</ol>
<p>Re stability, vanilla R has changed little over time and will (likely) be executable for a long time into the future<sup>3</sup>. I contend that R is a horseshoe crab (unchanged for aeons, cryptically beautiful). And that R users are Milhouse in this relevant gif (look deep inside yourself, you know R users are Milhouse).</p>
<p><img src="https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/resources/nice-doggie.gif" class="img-fluid" style="width:50.0%" alt="Milhouse from the Simpsons pats a happy horseshoe crab on the head. Milhouse is not wearig his glasses. He thinks the crab is a dog."></p>
<p>Re dependency, R’s extensibility is one of its greatest strengths, but reducing the dependency count could help improve reproducibility and reduce headaches<sup>4</sup>. I use an obligatory (adapted) <a href="https://xkcd.com/2347/">xkcd comic</a>, where base R is the literal, unyielding base of the teetering tower of packages used by your project.</p>
<p><img src="https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/resources/xkcd.png" class="img-fluid" style="width:50.0%" alt="Comic from xkcd. Lots of blocks are stacked on top of each other. One small block near the bottom is indicated. The implication is that removing the one small block will bring the whole thing down. The stack is labelled 'your project', the small block is labelled 'some dependency' and the big stable blocks underneath it at the bottom are labelled 'base'."></p>
<p>Re modernity, high stability hasn’t stopped base R from adapting to the expectation of a modern R coder. I morph the janky old R logo to the (perhaps already-outdated, lol) contemporary ‘flat’ design of the new logo<sup>5</sup> and explain the ‘modern base aesthetic’ of pipes, lambdas and string literals.</p>
<p><img src="https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/resources/logo.gif" class="img-fluid" style="width:50.0%" alt="The old R logo morphs into the new R logo. The old has bevels, highlights and shadows. The new one is simpler with peak 'flat' design."></p>
<p>And, as a bonus fourth point raised in the talk:</p>
<ol start="4" type="1">
<li>‘Oddity’.</li>
</ol>
<p>Re oddity, base R has some hidden-gem functions like:</p>
<ul>
<li><code>locator()</code> to click a plot and have coordinates returned (e.g.&nbsp;in <a href="https://github.com/matt-dray/pixeltrix">my experimental {pixeltrix} package</a> for interactive pixel art)</li>
<li><code>readline()</code> to accept user input interactively (e.g.&nbsp;i <a href="https://github.com/matt-dray/r.oguelike">my experimental {r.oguelike} package</a> for a ‘procedural dungeon-crawler’ in the R console)</li>
<li><code>R_user_dir()</code> as a location for storing user data (e.g.&nbsp;in <a href="https://github.com/matt-dray/tamRgo">my experimental {tamRgo} package</a> for a persistent cyber pet in the R console)</li>
</ul>
<p>Of course, base R isn’t perfect for every situation<sup>6</sup>. Base <em>flaps</em> sometimes. You can argue it’s more terse and less readable than the verb-driven tidyverse, for example. But we have a duty in the public sector to think about long-term code survival. And high employee turnover rates mean we should perhaps default to the most vanilla tool.</p>
<p>But ultimately, I just wanted to do this terrible ‘base slaps’/‘slap bass’ pun. But also, like, zoomers say ‘slaps’ to mean ‘cool’. I think. Oh dear, this was a flimsy premise for a talk. Cringe-driven development?</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-10-17 21:38:51 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2   compiler_4.3.1      fastmap_1.1.1      
 [4] cli_3.6.1           tools_4.3.1         htmltools_0.5.6.1  
 [7] xaringanExtra_0.7.0 rstudioapi_0.15.0   yaml_2.3.7         
[10] rmarkdown_2.25      knitr_1.44          jsonlite_1.8.7     
[13] xfun_0.40           digest_0.6.33       rlang_1.1.1        
[16] evaluate_0.22      </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I think there’ll be a video; I’ll link to it here when it’s released.↩︎</p></li>
<li id="fn2"><p>But to be clear: I don’t think you should ‘just replace all your code with base R code’. There’s very few examples of where that would make sense. But is it worth importing all of {dplyr} if you just want to <code>select()</code>, <code>filter()</code> and <code>mutate()</code> a data.frame? Maybe, maybe not.↩︎</p></li>
<li id="fn3"><p>Until we all switch to the Julia and/or Rust languages, amirite.↩︎</p></li>
<li id="fn4"><p>Bearing in mind that tools like {renv}, Docker and Nix can help coordinate dependencies. But that’s yet another tool to manage.↩︎</p></li>
<li id="fn5"><p>I think this was incepted into my brain by Jeroen in <a href="https://docs.ropensci.org/magick/articles/intro.html">the {magick} docs</a>.↩︎</p></li>
<li id="fn6"><p>See <a href="https://github.com/HenrikBengtsson/Wishlist-for-R/issues">the wishlist</a> that Henrick Bengtsson has been hosting.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>base</category>
  <category>public-sector</category>
  <category>r</category>
  <category>talk</category>
  <guid>https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/index.html</guid>
  <pubDate>Mon, 16 Oct 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Govspeakify tables with {shinylive}</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-10-08-govspeakify-tables/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-10-08-govspeakify-tables/resources/govspeakify-tables.gif" class="img-fluid figure-img" alt="Gif of an app called 'Govspeakify Tables'. A table is pasted into a text box, then a checkbox is ticked to say that the table has row titles and the number 4 is written into a text box that asks for row numbers that contain totals. The 'convert to Govspeak' button is clicked and a special Markdown version of the pasted table is printed. A 'copy' button underneath it is clicked."></p>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I made <a href="https://matt-dray.github.io/govspeakify-tables/">a demo Shiny app</a> that’s hosted with GitHub Pages but runs serverless in the browser, thanks to <a href="https://posit-dev.github.io/r-shinylive/">{shinylive}</a>. It converts a copied table to Govspeak Markdown, the format required for publishing reports by the UK’s government.</p>
</section>
<section id="rise" class="level2">
<h2 class="anchored" data-anchor-id="rise">Rise</h2>
<p>Statistical reports in the UK public sector are often prepared as Word documents. However, they need to be uploaded to the UK government’s publishing system as a special, simplified flavour of Markdown called ‘<a href="https://govspeak-preview.publishing.service.gov.uk/guide">Govspeak</a>’. There’s <a href="https://govspeak-preview.publishing.service.gov.uk/">an online tool</a> to help with this, but it doesn’t yet handle the conversion of tables.</p>
<p><a href="https://www.rostrum.blog/posts/2023-06-21-wordup-tables/">I wrote recently</a> about a little function I made to transform Word tables to Govspeak. It suits me to run the function within R, but this approach isn’t ideal for colleagues who aren’t R users (imagine!).</p>
<p>A Shiny app could be useful here. But that’s a bit of a faff; where would I serve it from? I don’t have access to a server and all my free slots on shinyapps.io are taken up.</p>
<p>But! Thanks to recent developments<sup>1</sup> in <a href="https://github.com/posit-dev/shinylive">Shinylive</a> and <a href="https://docs.r-wasm.org/webr/latest/">{webR}</a>, I can serve the app from GitHub pages and have all the computation happen in the user’s browser. This is a gamechanger.</p>
</section>
<section id="and-shine" class="level2">
<h2 class="anchored" data-anchor-id="and-shine">And shine</h2>
<p>The first step was to create a Shiny app to ‘govspeakify’ a table. Nothing fancy, I just wanted:</p>
<ol type="1">
<li>A text field to receive a copied table.</li>
<li>Some interactive options for additional Govspeak formatting<sup>2</sup>.</li>
<li>A button to convert the table to Govspeak.</li>
<li>The Govspeak output printed to the screen.</li>
<li>A button to copy the output to the clipboard.</li>
</ol>
<p>So, a button-click triggers the conversion of the pasted table via <code>eventReactive()</code>, given the user-supplied formatting options. The output is presented back to the user, along with a button to copy it, thanks to <a href="https://CRAN.R-project.org/package=rclipboard">{rclipboard}</a>.</p>
<p>You can find the app code in <a href="https://github.com/matt-dray/govspeakify-tables">a GitHub repo</a>. I prepared the app in a single <code>app.R</code> file, along with an <code>R/conversion.R</code> file with bespoke functions. I housed these in a <code>govspeakify-tables</code> subfolder.</p>
<p>There’s a number of things I want to add or improve to this proof of concept. For example, some more defensive programming to protect against invalid inputs and perhaps some more explanations and styling. Also the ability to upload a full docx file, extract and ‘govspeakify’ all tables and return them in a text file.</p>
<p>You’ll be able to break the app very easily, but it does what I need it to do for now.</p>
</section>
<section id="and-live" class="level2">
<h2 class="anchored" data-anchor-id="and-live">And live!</h2>
<p>So, I have the Shiny app; how do we prepare it? The <a href="https://posit-dev.github.io/r-shinylive/">{shinylive}</a> package has a one-liner function that will generate a single folder containing your app and all the necessary bits and bobs from <a href="https://github.com/posit-dev/shinylive">the Shinylive project</a> so it can be served by GitHub Pages but perform computations in the user’s browser.</p>
<p>The steps are:</p>
<ol type="1">
<li>Run <code>shinylive::export("govspeakify-tables", "docs")</code> to take the Shiny app and assets from the <code>govspeakify-tables</code> folder and generate a deployable version of it in a folder called <code>docs/</code> (since this is a folder name that GitHub Pages can serve from).</li>
<li>Run <code>httpuv::runStaticServer("docs")</code> to launch the app in a local static server and check that it works as intended (this requires the development version of {httpuv} at the time of writing, which you can install <a href="https://github.com/rstudio/httpuv">from GitHub</a>). You could also test it out by pasting code into <a href="https://shinylive.io/r/editor/">the online Shinylive editor</a>.</li>
<li>Push to your GitHub repo and set up GitHub Pages to serve the <code>docs/</code> folder (from the repo, go to the ‘Settings’ tab, click ‘Pages’ in the sidebar, select the ‘main’ branch and ‘/docs’ folder from the dropdowns, then click the ‘Save’ button).</li>
</ol>
<p>GitHub will take a moment to ready your app, but it’s then available on the web via a URL in the form ‘https://username.github.io/repo-name’. The Govspeakify Tables app can be found here: <a href="https://matt-dray.github.io/govspeakify-tables">https://matt-dray.github.io/govspeakify-tables</a> (may take a sec to load).</p>
<p>Some of these instructions and links may change as tools like Shinylive (the asset-preparation system), {shinylive} (the package) and {webR} continue to develop. I realised later that Rami has also <a href="https://github.com/RamiKrispin/shinylive-r">recorded these steps in a README</a>, so you may want to look there in future for more up-to-date information.</p>
<p>Bottom line: Shinylive is a huge deal for creating small, nimble apps that are free from the tyranny of server management.</p>
<div class="tip">
<p> <b>Note</b></p>
<p>I later saw Nicola Rennie’s <a href="https://nrennie.github.io/tidytuesday-shiny-app/">TidyTuesday Shinylive app</a> and Veerle van Leemput’s post about a <a href="https://hypebright.nl/index.php/en/2023/10/02/run-a-shiny-app-in-the-browser-with-shinylive-for-r/">Hangman Shinylive app</a> that are worth checking out too.</p>
</div>
<div class="tip">
<p> <b>Note</b></p>
<p>It occurred to me that the arrival of Shinylive might finally be the death knell for <a href="https://rstudio.github.io/crosstalk/">{crosstalk}</a>. {crosstalk} allows for certain <a href="https://rstudio.github.io/crosstalk/widgets.html">htmlwidgets</a> to speak to each other so that, for example, you can select from a dropdown and the points displayed on a graph or table will get filtered. In other words, you get a Shiny-like experience without {shiny} and without a server. I <a href="https://www.rostrum.blog/posts/2018-09-12-crosstalk-memes/">spoke about {crosstalk} in 2018</a> and it hasn’t really been developed since then. I think I’ll probably use Shinylive in Quarto from now on.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-10-08-govspeakify-tables/resources/crosstalk.png" class="img-fluid figure-img" style="width:100.0%" alt="Meme. First line says 'mom, can we have serverless Shiny?' with a screenshot of the Shinylive R package website. Second line says 'No, there is serverless Shiny at home'. Third line says 'serverless Shiny at home' and has a screenshot of the crosstalk R package website."></p>
</figure>
</div>
</div>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-10-11 17:12:59 CEST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/Rome
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        
 [5] tools_4.3.1       htmltools_0.5.6.1 rstudioapi_0.15.0 yaml_2.3.7       
 [9] rmarkdown_2.25    knitr_1.44        jsonlite_1.8.7    xfun_0.40        
[13] digest_0.6.33     rlang_1.1.1       fontawesome_0.5.2 evaluate_0.22    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Thanks to George Stagg, Winston Chang, Barret Schloerke and many others! See Joe Cheng’s <a href="https://jcheng5.github.io/posit-conf-2023-shinylive/">slides from Shinylive</a> at the 2023 Posit conference.↩︎</p></li>
<li id="fn2"><p>To mark-up row titles (i.e.&nbsp;content in the first column is suffixed with <code>#</code>) and totals rows (all content in the row is emboldened between asterisks), and to provide a regular expression for characters to ignore when evaluating numeric columns (e.g.&nbsp;recognise that <code>"75%"</code> is 75 and <code>"1,000"</code> is 1000) so that they’ll be marked-up as right-aligned in the output.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>govspeak</category>
  <category>markdown</category>
  <category>public-sector</category>
  <category>r</category>
  <category>shiny</category>
  <category>shinylive</category>
  <category>wordup</category>
  <guid>https://www.rostrum.blog/posts/2023-10-08-govspeakify-tables/index.html</guid>
  <pubDate>Sat, 07 Oct 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Click links to execute code in the R console!</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-09-17-choosethis/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2023-09-17-choosethis/resources/virus.png" class="img-fluid" alt="Text saying 'definitely not a virus' with a clickable link underneath that says 'not a virus'. The mouse hovers and has a popup saying 'virus!'"></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p><a href="https://cli.r-lib.org/index.html">The {cli} R package</a> can help build clickable hyperlinks in the R console, which you can use to execute functions. Of course, I used this for japes.</p>
</section>
<section id="error" class="level2">
<h2 class="anchored" data-anchor-id="error">Error!</h2>
<p>Have you noticed that tidyverse error messages are both helpful and pretty? This is in part due to <a href="https://cli.r-lib.org/index.html">Gabor’s {cli} package</a>, which helps to style command-line output. Sometimes I make errors on purpose just to see these messages (that’s how I explain my mistakes to colleagues, anyway).</p>
<p>Have you noticed that sometimes the error message will include a link that, when clicked, will execute some code to help explore the bug? When you hover over the link, you get a popup in RStudio showing you a green ‘play’ arrow, the name and description of the function and the phrase ‘click to run’.</p>
<p>For example, if we ask {dplyr}’s <code>select()</code> to retain a column that doesn’t exist and then hover over the link in the error message:</p>
<p><img src="https://www.rostrum.blog/posts/2023-09-17-choosethis/resources/cli.png" class="img-fluid" data-fig.alt="The function 'select' from the 'dplyr' package has been run in the RStudio console with the 'mtcars' dataset and passing the column name 'x'. This column doesn't exist in the dataset, so there's a warning: 'can't subset columns that don't exist'. Beneath that is a clickable link to run the function 'rlang::last_trace', which on hover shows a popup that describes the function and says 'click to run'."></p>
<p>That’s curious isn’t it? It also appears in other scenarios and sometimes even links to specific lines in specific scripts.</p>
</section>
<section id="how" class="level2">
<h2 class="anchored" data-anchor-id="how">How?</h2>
<p>{cli} functions like <code>cli_text()</code> accept {glue} strings that begin with a <code>.run</code> keyword and contain a Markdown hyperlink. Something like this: <code>"{.run [function](package::function())}"</code>. The outcome is a link in the console with the text ‘function’ that will execute <code>package::function()</code> when clicked.</p>
<p>You can read more about hyperlinks <a href="https://cli.r-lib.org/reference/links.html">in the {cli} docs</a>. There’s some limitations, including that your terminal must be capable of supporting this type of hyperlink (RStudio is capable). Note also that links are ‘experimental’ in {cli}.</p>
<p>You might be wondering if a bad actor could exploit this to execute arbitrary code. As per <a href="https://cli.r-lib.org/reference/links.html?q=run#security-considerations">the {cli} docs</a>, there are several restrictions in place:</p>
<blockquote class="blockquote">
<p>To make <code>.run</code> hyperlinks more secure, RStudio [will] not run code</p>
<ul>
<li>that is not in the <code>pkg::fun(args)</code> form,</li>
<li>if args contains <code>(</code>, <code>)</code> or <code>;</code>,</li>
<li>if it calls a core package (base, stats, etc.),</li>
<li>if it calls a package that is not loaded, and it is not one of testthat, devtools, usethis, or rlang, which are explicitly allowed.</li>
</ul>
</blockquote>
<p>Note that this doesn’t stop nerd hobbyists like me from going off-piste.</p>
</section>
<section id="demos" class="level2">
<h2 class="anchored" data-anchor-id="demos">Demos</h2>
<p>I’ve made two quick sketches that use {cli}’s <code>.run</code>-enabled links. I’ve put these in <a href="https://github.com/matt-dray/choosethis">the {choosethis} package</a><sup>1</sup>, which is on GitHub.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"remotes"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if not yet installed</span></span>
<span id="cb1-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matt-dray/choosethis"</span>)</span></code></pre></div>
</div>
<p>These nonserious demos are pretty minimal and only exist to prove the point. Maybe you can take these ideas and run with them?</p>
<section id="a-clickable-text-adventure" class="level3">
<h3 class="anchored" data-anchor-id="a-clickable-text-adventure">1. A clickable text adventure</h3>
<p>You can set up a narrative in the console that prompts the user for an action to advance the story. Clicking a link takes you down a story branch and prompts you with a new set of options.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-09-17-choosethis/resources/adventure.gif" class="img-fluid figure-img" style="width:75.0%" alt="A gif of the R console. The function 'begin' is run from the 'choosethis' package, which prints the message 'you reach a fork in the road'. Two clickable options are presented: go left or go right. The user clicks 'go right' and this automatically runs the 'right' function and outputs the text 'you died'."></p>
</figure>
</div>
<p>In other words, a classic text adventure in with the flavour of a ‘<a href="https://en.wikipedia.org/wiki/Choose_Your_Own_Adventure">Choose Your Own Adventure</a>’ book.</p>
<p>This works by setting up a function for each option. Click a link and it will run that function, which itself will present more clickable options with their own underlying functions. And so on. In this demo, the chain starts when the user runs <code>choosethis::begin()</code>.</p>
<p>Of course, the more complicated the story, the more functions there are to create and maintain.</p>
</section>
<section id="an-r-gui" class="level3">
<h3 class="anchored" data-anchor-id="an-r-gui">2. An R GUI</h3>
<p><a href="https://www.rostrum.blog/about#adriana-de-palma">Adriana</a> suggested that <code>.run</code> could be used to create a sort-of ‘clickable R interface’ to do away with all that pesky typing and emulate superior statistical packages like SPSS, lol. She was definitely joking<sup>2</sup>, but like, you <em>could</em> do something like that, right?<sup>3</sup></p>
<p>But this is… tricky. First there’s the limitations of <code>.run</code> itself, but the user prompts could also become overwhelming. For example, if you want to summarise a data.frame. Which columns should be summarised? Do you want the sum or mean or something else? Should NAs be ignored? And so on.</p>
<p>I made a tiny demo of this anyway. The user runs <code>choosethis::ask_col_means()</code> with a data.frame and they’re presented the names of any numeric columns as clickable links. The dataframe and selected column name are passed to <code>choosethis::get_mean()</code>, a bespoke function for calculating the summary.</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-09-17-choosethis/resources/mean.gif" class="img-fluid figure-img" style="width:100.0%" alt="Gif of the R console. The 'ask_col_mean' function is run from the 'choosethis' package. The Palmer penguins dataset is passed as the only argument. The user is then prompted with the message 'what column would you like the mean of' and it presents a number of clickable column names. 'bill_depth_mm' is clicked and the console outputs the answer. This is repeated for the column 'body_mass_g'."></p>
</figure>
</div>
<p>Yes, due (I think) to the limitations of <code>.run</code>, we need a separate function in the package to calculate the mean for us (at least I think that’s the case). You can see how tedious it would be to wrap loads of potential summary functions using this approach.</p>
</section>
<section id="bonus-de-linkification" class="level3">
<h3 class="anchored" data-anchor-id="bonus-de-linkification">3. Bonus: de-linkification</h3>
<p>It feels a bit mean to write an exciting text adventure that people can’t play if their terminal doesn’t support hyperlinks. So you can check the user’s console and either provide them an executable link, or otherwise print the underlying expression to copy-paste.</p>
<p>To perform this check, you can use <code>cli::ansi_has_hyperlink_support()</code><sup>4</sup>. I added the argument <code>show_links</code> to the <code>choosethis::begin()</code> function that defaults to this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getOption</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"choosethis.show_links"</span>, cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ansi_has_hyperlink_support</span>())</span></code></pre></div>
</div>
<p>By making this an option, the user can set <code>options(choosethis.show_links = FALSE)</code> to avoid seeing links even if their terminal supports them.</p>
</section>
</section>
<section id="hype-man" class="level2">
<h2 class="anchored" data-anchor-id="hype-man">Hype man</h2>
<p>So yeah, hyperlinks are ‘experimental’ in {cli} and—quite rightly—they’re limited to prevent nefarious activity. Everything I’ve created here might stop working tomorrow. And of course, the intent for links is to help people with errors, not mess around. But it is fun isn’t it?</p>
<p>I’d be interested to know if anyone is already using {cli}-enacted links in their packages, or if the ideas in {choosethis} spark some inspiration.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-09-25 18:59:10 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        
 [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       
 [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        
[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Yes, a very clever pun on {usethis}, but infinitely less useful than that package.↩︎</p></li>
<li id="fn2"><p>My lawyers have insisted I must clarify that, unequivocally, she definitely does not want R to be corrupted into an SPSS-like thing.↩︎</p></li>
<li id="fn3"><p>Doesn’t mean you should, amirite.↩︎</p></li>
<li id="fn4"><p>Thanks to <a href="https://fosstodon.org/@_TimTaylor">Tim</a> for suggesting a method for using options in this function.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>choosethis</category>
  <category>cli</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2023-09-17-choosethis/index.html</guid>
  <pubDate>Sat, 16 Sep 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Dear John, I’m sorry</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-09-16-chunktop/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2023-09-16-chunktop/resources/chunktop.png" class="img-fluid" data-fig.alt="Crudely drawn picture of an apologetic face with two documents pointing to each other. One says Rmd on it, one says CSV."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I developed a convenience function for parsing chunk options out of an R Markdown document for collaborators to edit. But it doesn’t work in reverse, which is the whole point. Some notes on failure.</p>
</section>
<section id="a-very-simple-problem" class="level2">
<h2 class="anchored" data-anchor-id="a-very-simple-problem">A very simple problem (?)</h2>
<p>John asked about <a href="https://fosstodon.org/@johnmackintosh/111047625054222865">parsing chunk options</a> from R Markdown files (Rmd), passing the content to editors, then reincorporating the edited text back into the chunk whence it came.</p>
<p>Well, John, have I got the solution for you. Oh wait, I absolutely don’t. Rather I’ve looked into <a href="https://CRAN.R-project.org/package=parsermd">{parsermd}</a>, messed around and… gave up. C’est la vie.</p>
<p>In my hubris, I began the package <a href="https://github.com/matt-dray/chunktop">{chunktop}</a> to solve John’s problem. Goal: parse Rmd chunk options, write them to file, allow for edits, read them back in and reintegrate the strings into the chunks they came from. Then re-write the Rmd with the changes. Boom.</p>
<p>Spoiler: I was naïve.</p>
</section>
<section id="a-good-start" class="level2">
<h2 class="anchored" data-anchor-id="a-good-start">A good start</h2>
<p>My advice: don’t install {chunktop}; it’s already archived on GitHub.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"remotes"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if not yet installed</span></span>
<span id="cb1-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matt-dray/chunktop"</span>)</span></code></pre></div>
</div>
<p>It steals functionality from the excellent <a href="https://CRAN.R-project.org/package=parsermd">{parsermd} package</a> to grab Rmd chunk options using the very appropriate <code>rmd_get_options()</code> function.</p>
<p>The package contains a demo Rmd for testing purposes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"extdata/demo1.Rmd"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chunktop"</span>)</span></code></pre></div>
</div>
<p>You can read in this demo Rmd with <code>parsermd::parse_rmd()</code>, which is actually a little abstract syntax tree (AST) that demonstrates the hierarchy of the page and contains all the data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parsermd"</span>)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(parsermd)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: parsermd</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">(rmd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_rmd</span>(path))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>├── YAML [1 lines]
└── Heading [h1] - A header
    ├── Chunk [r, 1 opt, 1 lines] - chunk1
    └── Heading [h2] - A subheader
        ├── Chunk [r, 2 opts, 1 lines] - chunk2
        ├── Markdown [2 lines]
        ├── Chunk [r, 1 lines] - chunk3
        └── Chunk [r, 2 opts, 1 lines] - chunk4</code></pre>
</div>
</div>
<p>And we can take a look at the lines in the Rmd doc.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">(rmd_doc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> parsermd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_document</span>(rmd))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "---"                                                                
 [2] "title: Test"                                                        
 [3] "---"                                                                
 [4] ""                                                                   
 [5] "# A header"                                                         
 [6] ""                                                                   
 [7] "```{r chunk1, eval = FALSE}"                                        
 [8] "1 + 1"                                                              
 [9] "```"                                                                
[10] ""                                                                   
[11] "## A subheader"                                                     
[12] ""                                                                   
[13] "```{r chunk2, fig.cap = \"I am a fig caption.\", fig.height = 4}"   
[14] "plot(mtcars$mpg, mtcars$cyl)"                                       
[15] "```"                                                                
[16] ""                                                                   
[17] "Some text."                                                         
[18] ""                                                                   
[19] ""                                                                   
[20] "```{r chunk3}"                                                      
[21] "plot(mtcars$mpg, mtcars$disp"                                       
[22] "```"                                                                
[23] ""                                                                   
[24] "```{r chunk4, fig.cap = \"I am another fig caption.\", eval = TRUE}"
[25] "plot(mtcars$mpg, mtcars$drat)"                                      
[26] "```"                                                                
[27] ""                                                                   </code></pre>
</div>
</div>
<p>So it contains a bunch of chunks with various options.</p>
<p>So, here’s as far as I got. First off, given our Rmd file, we can use <code>get_chunktop()</code> to read the chunk options of interest using {parsermd} and stick them a nice little list. Trivially.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(chunktop)</span>
<span id="cb9-2">(chunktop_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_chunktop</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rmd_file =</span> path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">opts =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fig.cap"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eval"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$chunk1
$chunk1$eval
[1] "FALSE"


$chunk2
$chunk2$fig.cap
[1] "\"I am a fig caption.\""


$chunk4
$chunk4$fig.cap
[1] "\"I am another fig caption.\""

$chunk4$eval
[1] "TRUE"</code></pre>
</div>
</div>
<p>Which is trivially massaged into a data.frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">(chunktop_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chunktop_to_df</span>(chunktop_list))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  chunk_name option_name                option_value
1     chunk1        eval                       FALSE
2     chunk2     fig.cap       "I am a fig caption."
3     chunk4     fig.cap "I am another fig caption."
4     chunk4        eval                        TRUE</code></pre>
</div>
</div>
<p>Which is trivially written to a CSV to share with your colleagues for editing.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">csv_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(chunktop_df, csv_file, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</div>
<p>Which is trivially read back into R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">(chunktop_df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(csv_file))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  chunk_name option_name                option_value
1     chunk1        eval                       FALSE
2     chunk2     fig.cap       "I am a fig caption."
3     chunk4     fig.cap "I am another fig caption."
4     chunk4        eval                        TRUE</code></pre>
</div>
</div>
<p>Which is trivially converted back into a list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">(chunktop_list2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df_to_chunktop</span>(chunktop_df2))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$chunk1
$chunk1$eval
[1] "FALSE"


$chunk2
$chunk2$fig.cap
[1] "\"I am a fig caption.\""


$chunk4
$chunk4$fig.cap
[1] "\"I am another fig caption.\""

$chunk4$eval
[1] "TRUE"</code></pre>
</div>
</div>
<p>And then we trivially, um, well, I don’t know, actually. I just assumed there would be an elegant way to convert the listed options back into the chunk options.</p>
<p>The function <code>parsermd::rmd_set_options()</code> exists, but appears to set options for <em>all</em> chunks, not <em>selected</em> options. Maybe I misunderstood, let me know.</p>
<p>For sure you could do a thing where you parse the strings out of the Rmd and replace them with the new option values. You are welcome to do that, friend.</p>
</section>
<section id="descent-into-masochism" class="level2">
<h2 class="anchored" data-anchor-id="descent-into-masochism">Descent into masochism</h2>
<p>Anyway, having implied that I am too lazy to do that, I actually tried something much more procastinatory when I hit a brick wall. Enjoy this bonus content.</p>
<p>I wondered if I could just… extract the chunk options from the original Rmd myself, dependency-free. For ‘fun’.</p>
<p>But I turned I into a sort of unhinged <a href="remotes::install_github(%22matt-dray/chunktop%22)">code golf</a>. Well, maybe ‘code wild-goose-chase’. The challenge: is it possible to extract chunk options from an arbitrary Rmd using only base R in a single base-R pipe (<code>|&gt;</code>) chain? Haha, of course.</p>
<p>First, I’ve got a few input checks that I’ve put into a <code>.check_inputs()</code> so that it causes less clutter in the main function.</p>
<details>
<summary>
Click for function to check inputs
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">.check_inputs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(rmd_lines, engine, yaml_out) {</span>
<span id="cb18-2">  </span>
<span id="cb18-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(rmd_lines, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>)) {</span>
<span id="cb18-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Argument 'rmd_lines' must be a character vector."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb18-5">  }</span>
<span id="cb18-6">  </span>
<span id="cb18-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (engine <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) {</span>
<span id="cb18-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"For now, argument 'engine' must be 'r'."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb18-9">  }</span>
<span id="cb18-10">  </span>
<span id="cb18-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(yaml_out) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(yaml_out, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>)) {</span>
<span id="cb18-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Argument 'yaml_out' must be NULL or character."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb18-13">  }</span>
<span id="cb18-14">  </span>
<span id="cb18-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(yaml_out)) {</span>
<span id="cb18-16">    </span>
<span id="cb18-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_ext</span>(yaml_out) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yaml"</span>) {</span>
<span id="cb18-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Argument 'yaml_out' must have extension '.yaml'."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb18-19">    }</span>
<span id="cb18-20">    </span>
<span id="cb18-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.exists</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dirname</span>(yaml_out))) {</span>
<span id="cb18-22">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The directory in 'yaml_out' does not exist."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb18-23">    }</span>
<span id="cb18-24">    </span>
<span id="cb18-25">  }</span>
<span id="cb18-26">  </span>
<span id="cb18-27">}</span></code></pre></div>
</div>
</details>
<p>So here’s an overengineered <code>grab_chunktop()</code> function that extracts Rmd chunk options.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">grab_chunktop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(rmd_lines, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">engine =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yaml_out =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb19-2">  </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.check_inputs</span>(rmd_lines, engine, yaml_out)</span>
<span id="cb19-4">  </span>
<span id="cb19-5">  rmd_lines[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{"</span>, rmd_lines)] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># isolate Rmd chunks</span></span>
<span id="cb19-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{"</span>, engine , <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" |</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}$"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> _) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># retain options</span></span>
<span id="cb19-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list of chunks, split by comas</span></span>
<span id="cb19-8">    (\(chunk_str) {</span>
<span id="cb19-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> chunk_str, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(chunk_str, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[["</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name-value</span></span>
<span id="cb19-10">    })() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name the list elements after chunks</span></span>
<span id="cb19-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"["</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forget first element (engine)</span></span>
<span id="cb19-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split options/values into nested list under named chunk</span></span>
<span id="cb19-13">      \(opt_str) {</span>
<span id="cb19-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(opt_str, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "eval=TRUE" to "eval" and "TRUE"</span></span>
<span id="cb19-15">          (\(opt_str) {  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first element to name</span></span>
<span id="cb19-16">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> opt_str, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trimws</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(opt_str, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[["</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))}</span>
<span id="cb19-17">          )() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-18">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"["</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now remove first element</span></span>
<span id="cb19-19">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trimws</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb19-20">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-21">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type.convert</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as.is =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure "1" becomes 1</span></span>
<span id="cb19-22">      }</span>
<span id="cb19-23">    )</span>
<span id="cb19-24">  </span>
<span id="cb19-25">}</span></code></pre></div>
</div>
<p>Absolutely disgusting. But it works!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grab_chunktop</span>(rmd_doc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$chunk1
$chunk1$eval
[1] FALSE


$chunk2
$chunk2$fig.cap
[1] "\"I am a fig caption.\""

$chunk2$fig.height
[1] 4


$chunk3
list()

$chunk4
$chunk4$fig.cap
[1] "\"I am another fig caption.\""

$chunk4$eval
[1] TRUE</code></pre>
</div>
</div>
<p>Note the exclusive use of <code>|&gt;</code> base pipe, <code>_</code> placeholder, <code>\()</code> anonymous function and <code>()()</code> ‘dog’s balls’. Welcome to base R circa 2023.</p>
<p>I’m telling you this works and you can see that’s the case. But gosh bless you if you actually try to grok that code by eye.</p>
</section>
<section id="brief-grief" class="level2">
<h2 class="anchored" data-anchor-id="brief-grief">Brief grief</h2>
<p>Nothing good has come of this. I just have more respect for {parsermd}. But here’s a brief timeline of my activites on this task:</p>
<ul>
<li>there’s no way this isn’t trivial (denial)</li>
<li>I can’t believe I can’t batter {parsermd} into doing this (anger)</li>
<li>I’ll start a package and see where we get (bargaining)</li>
<li>what if I simply ignore the package and lark about with base R instead (depression)</li>
<li>I’ll just write a blog post and move on (acceptance)</li>
</ul>
<p>Don’t worry, you only lost a few braincells reading this. I lost an afternoon, woe is me.</p>
</section>


<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-09-16 23:24:51 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] chunktop_0.0.0.9000 parsermd_0.1.2     

loaded via a namespace (and not attached):
 [1] vctrs_0.6.3       cli_3.6.1         knitr_1.43.1      rlang_1.1.1      
 [5] xfun_0.39         purrr_1.0.1       jsonlite_1.8.7    glue_1.6.2       
 [9] backports_1.4.1   htmltools_0.5.5   hms_1.1.3         fansi_1.0.4      
[13] rmarkdown_2.23    evaluate_0.21     tibble_3.2.1      tzdb_0.4.0       
[17] fastmap_1.1.1     yaml_2.3.7        lifecycle_1.0.3   compiler_4.3.1   
[21] htmlwidgets_1.6.2 Rcpp_1.0.11       pkgconfig_2.0.3   rstudioapi_0.15.0
[25] digest_0.6.33     R6_2.5.1          tidyselect_1.2.0  readr_2.1.4      
[29] utf8_1.2.3        pillar_1.9.0      magrittr_2.0.3    checkmate_2.2.0  
[33] withr_2.5.0       tools_4.3.1      </code></pre>
</div>
</div>
</details>


</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>parsermd</category>
  <category>r</category>
  <category>r-markdown</category>
  <guid>https://www.rostrum.blog/posts/2023-09-16-chunktop/index.html</guid>
  <pubDate>Fri, 15 Sep 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>The life and death of the tidyverse</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-09-10-lifecycle/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-09-10-lifecycle/resources/name-badge.png" class="img-fluid figure-img" style="width:50.0%" alt="A name badge that says 'Hello, I am...' at the top and 'Deprecated' is written in the space at the bottom."></p>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>In which I try to work out what functions and arguments in the tidyverse are badged as ‘experimental’, ‘deprecated’, ‘superseded’, etc. You can jump to the results table.</p>
</section>
<section id="birth" class="level2">
<h2 class="anchored" data-anchor-id="birth">Birth</h2>
<p>The tidyverse suite of packages develops quickly and there have been many API changes over the years. For example, <code>gather()</code> and <code>spread()</code> were superseded by <code>pivot_longer()</code> and <code>pivot_wider()</code> in {tidyr}, and there was a recent introduction of experimental <code>.by</code>/<code>by</code> arguments in several {dplyr} functions<sup>1</sup>.</p>
<p>The tidyverse uses the <a href="https://CRAN.R-project.org/package=lifecycle">{lifecycle} package</a> to advertise to users the current state of a function or argument, via a badge in the help files (e.g.&nbsp;<code>?tidyr::gather</code>). There’s a good <a href="https://lifecycle.r-lib.org/articles/stages.html">explanatory vignette about lifecycles</a> if you want to learn more. The badges look like this: <a href="https://lifecycle.r-lib.org/articles/stages.html#superseded"><img src="https://www.rostrum.blog/posts/2023-09-10-lifecycle/https:/img.shields.io/badge/lifecycle-superseded-orange?style=flat&amp;labelColor=#4E4E4E.png" class="img-fluid" data-fig-align="left"></a></p>
<p>With this in mind, wouldn’t it be fun—haha, I mean ‘informative’—to try and extract lifecycle information from tidyverse packages?<sup>2</sup>.</p>
</section>
<section id="life" class="level2">
<h2 class="anchored" data-anchor-id="life">Life</h2>
<section id="functions" class="level3">
<h3 class="anchored" data-anchor-id="functions">Functions</h3>
<p>First, we get the names of tidyverse packages from within {tidyverse} itself. Preparing these as e.g.&nbsp;<code>package:tidyr</code> will help us later to <code>ls()</code> (list functions) and <code>detach()</code> (remove the package from the search path).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Package names in the tidyverse</span></span>
<span id="cb1-2">pkg_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tidyverse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidyverse_packages</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">include_self =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-3">pkg_envs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:"</span>, pkg_names)</span>
<span id="cb1-4">pkg_names</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "broom"         "conflicted"    "cli"           "dbplyr"       
 [5] "dplyr"         "dtplyr"        "forcats"       "ggplot2"      
 [9] "googledrive"   "googlesheets4" "haven"         "hms"          
[13] "httr"          "jsonlite"      "lubridate"     "magrittr"     
[17] "modelr"        "pillar"        "purrr"         "ragg"         
[21] "readr"         "readxl"        "reprex"        "rlang"        
[25] "rstudioapi"    "rvest"         "stringr"       "tibble"       
[29] "tidyr"         "xml2"         </code></pre>
</div>
</div>
</section>
<section id="badges" class="level3">
<h3 class="anchored" data-anchor-id="badges">Badges</h3>
<p>Then we need the badge strings and some regular expression versions that will help with string handling later. ‘Stable’ shouldn’t need to be indicated, but I thought I’d add it for completeness. ‘Maturing’ and ‘Questioning’ have been superseded (lol, so meta), but there might still be some badges in the wild, maybe. I found at least one instance of ‘Soft-deprecated’ as well, which isn’t part of the r-lib lifecycle, so I included it too.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Badge strings in Rd</span></span>
<span id="cb3-2">life_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb3-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deprecated"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Experimental"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Superseded"</span>,</span>
<span id="cb3-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stable"</span>,</span>
<span id="cb3-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maturing"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Questioning"</span>,</span>
<span id="cb3-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Soft-deprecated"</span></span>
<span id="cb3-7">)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Regex to help detect lifecycle stages</span></span>
<span id="cb3-10">life_names_rx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(life_names, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Regex to help detect lifecycle badge format: '*[Experimental]*'</span></span>
<span id="cb3-13">badges_rx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb3-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[("</span>, life_names_rx, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*"</span>)</span></code></pre></div>
</div>
</section>
<section id="help-files" class="level3">
<h3 class="anchored" data-anchor-id="help-files">Help files</h3>
<p>I went down rabbitholes trying to extract help files for each function, but <a href="https://stackoverflow.com/a/51330864">a Stackoverflow solution by MrFlick</a> is exactly what I was looking for. It grabs a function’s underlying Rd (‘R documentation’) help file and outputs it to a vector with one element per string, thanks to a couple of functions from {tools}: the most underrated R package (prove me wrong).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to extract function help file from Rd</span></span>
<span id="cb4-2">get_help_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(fn, pkg) {</span>
<span id="cb4-3">  </span>
<span id="cb4-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare paths to package directory</span></span>
<span id="cb4-5">  file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">help</span>(fn, (pkg))</span>
<span id="cb4-6">  path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dirname</span>(file)</span>
<span id="cb4-7">  dirpath <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dirname</span>(path)</span>
<span id="cb4-8">  rd_db <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(path, pkg)</span>
<span id="cb4-9">  </span>
<span id="cb4-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read rendered function docs (Rd)</span></span>
<span id="cb4-11">  rd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetchRdDB</span>(rd_db, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(file))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># unexported function (':::')</span></span>
<span id="cb4-12">  </span>
<span id="cb4-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert raw Rd to text and capture it as strings</span></span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">capture.output</span>(</span>
<span id="cb4-15">    tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Rd2txt</span>(rd, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">out =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">options =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">underline_titles =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>))</span>
<span id="cb4-16">  )</span>
<span id="cb4-17">  </span>
<span id="cb4-18">}</span></code></pre></div>
</div>
<p>Here’s a demo showing the description block of the function documentation for <code>tidyr::gather()</code>, which was superseded by <code>tidyr::pivot_longer()</code>. You can see how the ‘Superseded’ badge is represented: surrounded by square brackets and asterisks. That’s the pattern what we’ll need to search for.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_help_text</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gather"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyr"</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "Description:"                                                             
 [2] ""                                                                         
 [3] "     *[Superseded]*"                                                      
 [4] ""                                                                         
 [5] "     Development on 'gather()' is complete, and for new code we"          
 [6] "     recommend switching to 'pivot_longer()', which is easier to use,"    
 [7] "     more featureful, and still under active development. 'df %&gt;%"        
 [8] "     gather(\"key\", \"value\", x, y, z)' is equivalent to 'df %&gt;%"       
 [9] "     pivot_longer(c(x, y, z), names_to = \"key\", values_to = \"value\")'"
[10] ""                                                                         
[11] "     See more details in 'vignette(\"pivot\")'."                          </code></pre>
</div>
</div>
<p>And here’s how the text is laid out for an argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_help_text</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mutate"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "     .by: *[Experimental]*"                                            
[2] ""                                                                      
[3] "          &lt;'tidy-select'&gt; Optionally, a selection of columns to group" 
[4] "          by for just this operation, functioning as an alternative to"
[5] "          'group_by()'. For details and examples, see ?dplyr_by."      </code></pre>
</div>
</div>
</section>
<section id="loop-de-loop" class="level3">
<h3 class="anchored" data-anchor-id="loop-de-loop">Loop-de-loop</h3>
<p>So, the premise is to iterate over each package and, within each one, iterate through the functions to read their help pages and find any lifecycle badges. This’ll output a list (with an element per package) of lists (an element per function).</p>
<p>Note that I’m retrieving help files from my local computer, having already downloaded the tidyverse packages with <code>install.packages("tidyverse")</code>.</p>
<p>There’s always discourse in the R community about <code>for</code> loops. So, as a special surprise, I decided to put a <code>for</code> loop in a <code>for</code> loop (yo dawg)<sup>3</sup>. I even pre-allocated my vectors, which is <a href="https://www.mm218.dev/posts/2023-08-29-allocations/">for nerds</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare 'outer' list, where each element is a package</span></span>
<span id="cb9-2">pkg_badges <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(pkg_names))</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(pkg_badges) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pkg_names</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over each package to get lifecycle badge usage</span></span>
<span id="cb9-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (pkg <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pkg_names) {</span>
<span id="cb9-7">  </span>
<span id="cb9-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract package function names</span></span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">character.only =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb9-10">  pkg_env <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:"</span>, pkg)</span>
<span id="cb9-11">  fn_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(pkg_env)</span>
<span id="cb9-12">  </span>
<span id="cb9-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ignore these particular functions, which caused errors, lol</span></span>
<span id="cb9-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (pkg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lubridate"</span>) {</span>
<span id="cb9-15">    fn_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fn_names[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>fn_names <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arith"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Compare"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show"</span>)]</span>
<span id="cb9-16">  }</span>
<span id="cb9-17">  </span>
<span id="cb9-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare 'inner' list, where each element is a function</span></span>
<span id="cb9-19">  fn_badges <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(fn_names))</span>
<span id="cb9-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(fn_badges) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fn_names</span>
<span id="cb9-21">  </span>
<span id="cb9-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over each function to get lifecycle badge usage</span></span>
<span id="cb9-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (fn <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> fn_names) {</span>
<span id="cb9-24">    </span>
<span id="cb9-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"::"</span>,  fn)</span>
<span id="cb9-26">    </span>
<span id="cb9-27">    txt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_help_text</span>(fn, pkg)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fetch help file</span></span>
<span id="cb9-28">    lines_with_badges <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(badges_rx, txt)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find rows that contain badges</span></span>
<span id="cb9-29">    </span>
<span id="cb9-30">    badge_lines <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default to no badges</span></span>
<span id="cb9-31">    </span>
<span id="cb9-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If lines with badges exist, then extract the text</span></span>
<span id="cb9-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(badge_lines) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb9-34">      badge_lines <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trimws</span>(txt[lines_with_badges])</span>
<span id="cb9-35">      badge_lines <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*[^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*]+$"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, badge_lines)</span>
<span id="cb9-36">    }</span>
<span id="cb9-37">    </span>
<span id="cb9-38">    fn_badges[[fn]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> badge_lines  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add to inner list of functions</span></span>
<span id="cb9-39">    </span>
<span id="cb9-40">  }</span>
<span id="cb9-41">  </span>
<span id="cb9-42">  pkg_badges[[pkg]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fn_badges  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add to outer list of packages</span></span>
<span id="cb9-43">  </span>
<span id="cb9-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">detach</span>(pkg_env, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">character.only =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># unclutter the search path</span></span>
<span id="cb9-45">  </span>
<span id="cb9-46">}</span></code></pre></div>
</div>
<p>So here’s <code>gather()</code> again, with that ‘Superseded’ badge extracted, as expected. The list element will be empty if there’s no badge.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">pkg_badges<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>gather</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "*[Superseded]*"</code></pre>
</div>
</div>
<p>And here’s how the badge for an argument looks in that <code>.by</code> example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">pkg_badges<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mutate</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] ".by: *[Experimental]*"</code></pre>
</div>
</div>
</section>
</section>
<section id="entabulate" class="level2">
<h2 class="anchored" data-anchor-id="entabulate">Entabulate</h2>
<p>We can convert this to a dataframe for presentational and manipulational purposes. I’m choosing to do that with <code>stack(unlist())</code>, mostly because I haven’t had a chance to use <code>stack()</code> in this blog yet. Handily, this approach also removes all the empty list elements for us.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">life_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stack</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(pkg_badges))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stack is a nice function</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(life_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                values                      ind
1     *[Experimental]* dbplyr.get_returned_rows
2     *[Experimental]* dbplyr.has_returned_rows
3  vars: *[Deprecated]      dbplyr.partial_eval
4 cte: *[Experimental]        dbplyr.remote_con
5 cte: *[Experimental]       dbplyr.remote_name
6 cte: *[Experimental]      dbplyr.remote_query</code></pre>
</div>
</div>
<p>Then we can do a bit of awkward string manipulation to get each package name, function name, argument names (if relevant) and the associated lifecycle badge(s).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Uncouple 'tidyr.gather' to 'tidyr' and 'gather'</span></span>
<span id="cb16-2">life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Package <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">..*"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ind)</span>
<span id="cb16-3">life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Function <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ind)</span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clean off the '*[]*' from the lifecycle badge text</span></span>
<span id="cb16-6">life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values)</span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Arg names are captured as a string before the lifecycle badge</span></span>
<span id="cb16-9">life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(life_names_rx, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values)</span>
<span id="cb16-10">life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trimws</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Args))</span>
<span id="cb16-11">life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Args[life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Args <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb16-12"></span>
<span id="cb16-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Badges appear after args (if any)</span></span>
<span id="cb16-14">life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Badges <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trimws</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values))</span>
<span id="cb16-15">life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Badges <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>, life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Badges)</span>
<span id="cb16-16"></span>
<span id="cb16-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select and reorder</span></span>
<span id="cb16-18">life_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> life_df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Package"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Function"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Args"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Badges"</span>)]</span></code></pre></div>
</div>
<p>So now we have a table with one row per package and function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(life_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Package          Function Args       Badges
1  dbplyr get_returned_rows &lt;NA&gt; Experimental
2  dbplyr has_returned_rows &lt;NA&gt; Experimental
3  dbplyr      partial_eval vars   Deprecated
4  dbplyr        remote_con  cte Experimental
5  dbplyr       remote_name  cte Experimental
6  dbplyr      remote_query  cte Experimental</code></pre>
</div>
</div>
<section id="results" class="level3">
<h3 class="anchored" data-anchor-id="results">Results</h3>
<p>Here’s an interactive table of the results. You can click the function name to be taken to the rdrr.io website, which hosts package help files in HTML on the web. Note that this won’t always resolve to a functioning URL for various reasons! If you’ve installed the tidyverse packages, you can of course see a function’s help page by running e.g.&nbsp;<code>?tidyr::gather</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Factors allow dropdown search in {DT}</span></span>
<span id="cb19-2">life_df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(life_df)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(life_df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(life_df)], as.factor)</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build URL path to rdrr.io docs</span></span>
<span id="cb19-5">life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Function <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb19-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;a href='https://rdrr.io/cran/"</span>, </span>
<span id="cb19-7">  life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Package, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/man/"</span>, life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Function, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".html'&gt;"</span>,</span>
<span id="cb19-8">  life_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Function, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/a&gt;"</span></span>
<span id="cb19-9">)</span>
<span id="cb19-10"></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build interactive table</span></span>
<span id="cb19-12">DT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">datatable</span>(</span>
<span id="cb19-13">  life_df, </span>
<span id="cb19-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filter =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>,</span>
<span id="cb19-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">options =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">autoWidth =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tp"</span>),</span>
<span id="cb19-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">esc =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb19-17">)</span></code></pre></div>
<div class="cell-output-display">

<div class="datatables html-widget html-fill-item-overflow-hidden html-fill-item" id="htmlwidget-5f9e902839ea17abe608" style="width:100%;height:auto;"></div>
<script type="application/json" data-for="htmlwidget-5f9e902839ea17abe608">{"x":{"filter":"top","vertical":false,"filterHTML":"<tr>\n  <td><\/td>\n  <td data-type=\"factor\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n    <div style=\"width: 100%; display: none;\">\n      <select multiple=\"multiple\" style=\"width: 100%;\" data-options=\"[&quot;dbplyr&quot;,&quot;dplyr&quot;,&quot;forcats&quot;,&quot;ggplot2&quot;,&quot;googledrive&quot;,&quot;googlesheets4&quot;,&quot;haven&quot;,&quot;pillar&quot;,&quot;purrr&quot;,&quot;readr&quot;,&quot;reprex&quot;,&quot;rlang&quot;,&quot;rvest&quot;,&quot;stringr&quot;,&quot;tibble&quot;,&quot;tidyr&quot;]\"><\/select>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"factor\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n    <div style=\"width: 100%; display: none;\">\n      <select multiple=\"multiple\" style=\"width: 100%;\" data-options=\"[&quot;_n, validate&quot;,&quot;...&quot;,&quot;.by&quot;,&quot;.by, by&quot;,&quot;.drop, .preserve&quot;,&quot;.env&quot;,&quot;.expr, ..., handler&quot;,&quot;.first&quot;,&quot;.fn, args, ..., .env, .bury&quot;,&quot;.groups&quot;,&quot;.id&quot;,&quot;.lazy&quot;,&quot;.right&quot;,&quot;.sep&quot;,&quot;.subclass&quot;,&quot;.unpack&quot;,&quot;.x, ...&quot;,&quot;action&quot;,&quot;app&quot;,&quot;call, env&quot;,&quot;cols_only&quot;,&quot;cte&quot;,&quot;environment&quot;,&quot;facets&quot;,&quot;focus&quot;,&quot;fun.ymin, fun.y, fun.ymax&quot;,&quot;inline&quot;,&quot;keep.as.numeric&quot;,&quot;limx, limy&quot;,&quot;outfile&quot;,&quot;path&quot;,&quot;quote_escape&quot;,&quot;quoted_na&quot;,&quot;show&quot;,&quot;si&quot;,&quot;stat, position&quot;,&quot;team_drive&quot;,&quot;type_sum&quot;,&quot;vars&quot;,&quot;verbose&quot;,&quot;x, env&quot;]\"><\/select>\n    <\/div>\n  <\/td>\n  <td data-type=\"factor\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n    <div style=\"width: 100%; display: none;\">\n      <select multiple=\"multiple\" style=\"width: 100%;\" data-options=\"[&quot;Deprecated&quot;,&quot;Experimental&quot;,&quot;Questioning&quot;,&quot;Soft-deprecated&quot;,&quot;Soft-deprecated, Experimental&quot;,&quot;Superseded&quot;]\"><\/select>\n    <\/div>\n  <\/td>\n<\/tr>","data":[["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548"],["dbplyr","dbplyr","dbplyr","dbplyr","dbplyr","dbplyr","dbplyr","dbplyr","dbplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","dplyr","forcats","ggplot2","ggplot2","ggplot2","ggplot2","ggplot2","ggplot2","ggplot2","ggplot2","ggplot2","ggplot2","ggplot2","ggplot2","ggplot2","ggplot2","ggplot2","ggplot2","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googledrive","googlesheets4","googlesheets4","googlesheets4","googlesheets4","haven","haven","pillar","pillar","pillar","pillar","pillar","pillar","pillar","pillar","pillar","pillar","pillar","pillar","pillar","pillar","pillar","pillar","pillar","pillar","pillar","pillar","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","purrr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","readr","reprex","reprex","reprex","reprex","reprex","reprex","reprex","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rlang","rvest","rvest","rvest","rvest","rvest","rvest","rvest","rvest","rvest","rvest","rvest","rvest","rvest","stringr","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tibble","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr","tidyr"],["<a href='https://rdrr.io/cran/dbplyr/man/get_returned_rows.html'>get_returned_rows<\/a>","<a href='https://rdrr.io/cran/dbplyr/man/has_returned_rows.html'>has_returned_rows<\/a>","<a href='https://rdrr.io/cran/dbplyr/man/partial_eval.html'>partial_eval<\/a>","<a href='https://rdrr.io/cran/dbplyr/man/remote_con.html'>remote_con<\/a>","<a href='https://rdrr.io/cran/dbplyr/man/remote_name.html'>remote_name<\/a>","<a href='https://rdrr.io/cran/dbplyr/man/remote_query.html'>remote_query<\/a>","<a href='https://rdrr.io/cran/dbplyr/man/remote_query_plan.html'>remote_query_plan<\/a>","<a href='https://rdrr.io/cran/dbplyr/man/remote_src.html'>remote_src<\/a>","<a href='https://rdrr.io/cran/dbplyr/man/src_dbi.html'>src_dbi<\/a>","<a href='https://rdrr.io/cran/dplyr/man/across1.html'>across1<\/a>","<a href='https://rdrr.io/cran/dplyr/man/across2.html'>across2<\/a>","<a href='https://rdrr.io/cran/dplyr/man/add_count.html'>add_count<\/a>","<a href='https://rdrr.io/cran/dplyr/man/add_count_.html'>add_count_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/add_rownames.html'>add_rownames<\/a>","<a href='https://rdrr.io/cran/dplyr/man/add_tally.html'>add_tally<\/a>","<a href='https://rdrr.io/cran/dplyr/man/add_tally_.html'>add_tally_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/all_equal.html'>all_equal<\/a>","<a href='https://rdrr.io/cran/dplyr/man/all_vars.html'>all_vars<\/a>","<a href='https://rdrr.io/cran/dplyr/man/any_vars.html'>any_vars<\/a>","<a href='https://rdrr.io/cran/dplyr/man/arrange_.html'>arrange_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/arrange_all.html'>arrange_all<\/a>","<a href='https://rdrr.io/cran/dplyr/man/arrange_at.html'>arrange_at<\/a>","<a href='https://rdrr.io/cran/dplyr/man/arrange_if.html'>arrange_if<\/a>","<a href='https://rdrr.io/cran/dplyr/man/tbl.html'>tbl<\/a>","<a href='https://rdrr.io/cran/dplyr/man/combine.html'>combine<\/a>","<a href='https://rdrr.io/cran/dplyr/man/count.html'>count<\/a>","<a href='https://rdrr.io/cran/dplyr/man/count_.html'>count_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/cur_data.html'>cur_data<\/a>","<a href='https://rdrr.io/cran/dplyr/man/cur_data_all.html'>cur_data_all<\/a>","<a href='https://rdrr.io/cran/dplyr/man/distinct_.html'>distinct_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/distinct_all.html'>distinct_all<\/a>","<a href='https://rdrr.io/cran/dplyr/man/distinct_at.html'>distinct_at<\/a>","<a href='https://rdrr.io/cran/dplyr/man/distinct_if.html'>distinct_if<\/a>","<a href='https://rdrr.io/cran/dplyr/man/do.html'>do<\/a>","<a href='https://rdrr.io/cran/dplyr/man/do_.html'>do_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/dplyr_col_modify.html'>dplyr_col_modify<\/a>","<a href='https://rdrr.io/cran/dplyr/man/dplyr_reconstruct.html'>dplyr_reconstruct<\/a>","<a href='https://rdrr.io/cran/dplyr/man/dplyr_row_slice.html'>dplyr_row_slice<\/a>","<a href='https://rdrr.io/cran/dplyr/man/filter.html'>filter<\/a>","<a href='https://rdrr.io/cran/dplyr/man/filter_.html'>filter_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/filter_all.html'>filter_all<\/a>","<a href='https://rdrr.io/cran/dplyr/man/filter_at.html'>filter_at<\/a>","<a href='https://rdrr.io/cran/dplyr/man/filter_if.html'>filter_if<\/a>","<a href='https://rdrr.io/cran/dplyr/man/funs.html'>funs<\/a>","<a href='https://rdrr.io/cran/dplyr/man/funs_.html'>funs_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/group_by_.html'>group_by_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/group_by_all.html'>group_by_all<\/a>","<a href='https://rdrr.io/cran/dplyr/man/group_by_at.html'>group_by_at<\/a>","<a href='https://rdrr.io/cran/dplyr/man/group_by_if.html'>group_by_if<\/a>","<a href='https://rdrr.io/cran/dplyr/man/group_indices_.html'>group_indices_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/group_map.html'>group_map<\/a>","<a href='https://rdrr.io/cran/dplyr/man/group_modify.html'>group_modify<\/a>","<a href='https://rdrr.io/cran/dplyr/man/group_nest.html'>group_nest<\/a>","<a href='https://rdrr.io/cran/dplyr/man/group_split.html'>group_split<\/a>","<a href='https://rdrr.io/cran/dplyr/man/group_trim.html'>group_trim<\/a>","<a href='https://rdrr.io/cran/dplyr/man/group_walk.html'>group_walk<\/a>","<a href='https://rdrr.io/cran/dplyr/man/if_all1.html'>if_all1<\/a>","<a href='https://rdrr.io/cran/dplyr/man/if_all2.html'>if_all2<\/a>","<a href='https://rdrr.io/cran/dplyr/man/if_any1.html'>if_any1<\/a>","<a href='https://rdrr.io/cran/dplyr/man/if_any2.html'>if_any2<\/a>","<a href='https://rdrr.io/cran/dplyr/man/mutate.html'>mutate<\/a>","<a href='https://rdrr.io/cran/dplyr/man/mutate_.html'>mutate_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/mutate_all.html'>mutate_all<\/a>","<a href='https://rdrr.io/cran/dplyr/man/mutate_at.html'>mutate_at<\/a>","<a href='https://rdrr.io/cran/dplyr/man/mutate_each.html'>mutate_each<\/a>","<a href='https://rdrr.io/cran/dplyr/man/mutate_each_.html'>mutate_each_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/mutate_if.html'>mutate_if<\/a>","<a href='https://rdrr.io/cran/dplyr/man/nest_by.html'>nest_by<\/a>","<a href='https://rdrr.io/cran/dplyr/man/progress_estimated.html'>progress_estimated<\/a>","<a href='https://rdrr.io/cran/dplyr/man/recode.html'>recode<\/a>","<a href='https://rdrr.io/cran/dplyr/man/recode_factor.html'>recode_factor<\/a>","<a href='https://rdrr.io/cran/dplyr/man/reframe1.html'>reframe1<\/a>","<a href='https://rdrr.io/cran/dplyr/man/reframe2.html'>reframe2<\/a>","<a href='https://rdrr.io/cran/dplyr/man/rename_.html'>rename_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/rename_all.html'>rename_all<\/a>","<a href='https://rdrr.io/cran/dplyr/man/rename_at.html'>rename_at<\/a>","<a href='https://rdrr.io/cran/dplyr/man/rename_if.html'>rename_if<\/a>","<a href='https://rdrr.io/cran/dplyr/man/rename_vars_.html'>rename_vars_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/sample_frac.html'>sample_frac<\/a>","<a href='https://rdrr.io/cran/dplyr/man/sample_n.html'>sample_n<\/a>","<a href='https://rdrr.io/cran/dplyr/man/select_.html'>select_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/select_all.html'>select_all<\/a>","<a href='https://rdrr.io/cran/dplyr/man/select_at.html'>select_at<\/a>","<a href='https://rdrr.io/cran/dplyr/man/select_if.html'>select_if<\/a>","<a href='https://rdrr.io/cran/dplyr/man/select_vars_.html'>select_vars_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/slice.html'>slice<\/a>","<a href='https://rdrr.io/cran/dplyr/man/slice_.html'>slice_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/slice_head.html'>slice_head<\/a>","<a href='https://rdrr.io/cran/dplyr/man/slice_max.html'>slice_max<\/a>","<a href='https://rdrr.io/cran/dplyr/man/slice_min.html'>slice_min<\/a>","<a href='https://rdrr.io/cran/dplyr/man/slice_sample.html'>slice_sample<\/a>","<a href='https://rdrr.io/cran/dplyr/man/slice_tail.html'>slice_tail<\/a>","<a href='https://rdrr.io/cran/dplyr/man/src_df.html'>src_df<\/a>","<a href='https://rdrr.io/cran/dplyr/man/src_local.html'>src_local<\/a>","<a href='https://rdrr.io/cran/dplyr/man/src_mysql.html'>src_mysql<\/a>","<a href='https://rdrr.io/cran/dplyr/man/src_postgres.html'>src_postgres<\/a>","<a href='https://rdrr.io/cran/dplyr/man/src_sqlite.html'>src_sqlite<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarise1.html'>summarise1<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarise2.html'>summarise2<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarise3.html'>summarise3<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarise_.html'>summarise_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarise_all.html'>summarise_all<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarise_at.html'>summarise_at<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarise_each.html'>summarise_each<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarise_each_.html'>summarise_each_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarise_if.html'>summarise_if<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarize1.html'>summarize1<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarize2.html'>summarize2<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarize3.html'>summarize3<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarize_.html'>summarize_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarize_all.html'>summarize_all<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarize_at.html'>summarize_at<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarize_each.html'>summarize_each<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarize_each_.html'>summarize_each_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/summarize_if.html'>summarize_if<\/a>","<a href='https://rdrr.io/cran/dplyr/man/tally.html'>tally<\/a>","<a href='https://rdrr.io/cran/dplyr/man/tally_.html'>tally_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/tbl_df.html'>tbl_df<\/a>","<a href='https://rdrr.io/cran/dplyr/man/top_frac.html'>top_frac<\/a>","<a href='https://rdrr.io/cran/dplyr/man/top_n.html'>top_n<\/a>","<a href='https://rdrr.io/cran/dplyr/man/transmute.html'>transmute<\/a>","<a href='https://rdrr.io/cran/dplyr/man/transmute_.html'>transmute_<\/a>","<a href='https://rdrr.io/cran/dplyr/man/transmute_all.html'>transmute_all<\/a>","<a href='https://rdrr.io/cran/dplyr/man/transmute_at.html'>transmute_at<\/a>","<a href='https://rdrr.io/cran/dplyr/man/transmute_if.html'>transmute_if<\/a>","<a href='https://rdrr.io/cran/dplyr/man/vars.html'>vars<\/a>","<a href='https://rdrr.io/cran/dplyr/man/with_groups.html'>with_groups<\/a>","<a href='https://rdrr.io/cran/forcats/man/fct_explicit_na.html'>fct_explicit_na<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/aes_.html'>aes_<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/aes_auto.html'>aes_auto<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/aes_q.html'>aes_q<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/aes_string.html'>aes_string<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/coord_map.html'>coord_map<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/coord_quickmap.html'>coord_quickmap<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/coord_trans.html'>coord_trans<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/facet_grid.html'>facet_grid<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/gg_dep.html'>gg_dep<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/ggplot.html'>ggplot<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/labeller.html'>labeller<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/qplot.html'>qplot<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/quickplot.html'>quickplot<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/stat_ecdf.html'>stat_ecdf<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/stat_summary.html'>stat_summary<\/a>","<a href='https://rdrr.io/cran/ggplot2/man/stat_summary_bin.html'>stat_summary_bin<\/a>","<a href='https://rdrr.io/cran/googledrive/man/as_team_drive1.html'>as_team_drive1<\/a>","<a href='https://rdrr.io/cran/googledrive/man/as_team_drive2.html'>as_team_drive2<\/a>","<a href='https://rdrr.io/cran/googledrive/man/do_paginated_request.html'>do_paginated_request<\/a>","<a href='https://rdrr.io/cran/googledrive/man/do_request.html'>do_request<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_api_key.html'>drive_api_key<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_auth_config1.html'>drive_auth_config1<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_auth_config2.html'>drive_auth_config2<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_auth_configure.html'>drive_auth_configure<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_cp.html'>drive_cp<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_create.html'>drive_create<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_download.html'>drive_download<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_empty_trash.html'>drive_empty_trash<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_example1.html'>drive_example1<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_example2.html'>drive_example2<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_find1.html'>drive_find1<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_find2.html'>drive_find2<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_get1.html'>drive_get1<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_get2.html'>drive_get2<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_mkdir.html'>drive_mkdir<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_mv.html'>drive_mv<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_oauth_app1.html'>drive_oauth_app1<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_oauth_app2.html'>drive_oauth_app2<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_oauth_client.html'>drive_oauth_client<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_publish.html'>drive_publish<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_put.html'>drive_put<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_rename.html'>drive_rename<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_rm.html'>drive_rm<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_share.html'>drive_share<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_share_anyone.html'>drive_share_anyone<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_trash.html'>drive_trash<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_unpublish.html'>drive_unpublish<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_untrash.html'>drive_untrash<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_update.html'>drive_update<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_upload.html'>drive_upload<\/a>","<a href='https://rdrr.io/cran/googledrive/man/drive_user.html'>drive_user<\/a>","<a href='https://rdrr.io/cran/googledrive/man/is_team_drive1.html'>is_team_drive1<\/a>","<a href='https://rdrr.io/cran/googledrive/man/is_team_drive2.html'>is_team_drive2<\/a>","<a href='https://rdrr.io/cran/googledrive/man/request_make.html'>request_make<\/a>","<a href='https://rdrr.io/cran/googledrive/man/team_drive_create1.html'>team_drive_create1<\/a>","<a href='https://rdrr.io/cran/googledrive/man/team_drive_create2.html'>team_drive_create2<\/a>","<a href='https://rdrr.io/cran/googledrive/man/team_drive_find1.html'>team_drive_find1<\/a>","<a href='https://rdrr.io/cran/googledrive/man/team_drive_find2.html'>team_drive_find2<\/a>","<a href='https://rdrr.io/cran/googledrive/man/team_drive_get1.html'>team_drive_get1<\/a>","<a href='https://rdrr.io/cran/googledrive/man/team_drive_get2.html'>team_drive_get2<\/a>","<a href='https://rdrr.io/cran/googledrive/man/team_drive_rm1.html'>team_drive_rm1<\/a>","<a href='https://rdrr.io/cran/googledrive/man/team_drive_rm2.html'>team_drive_rm2<\/a>","<a href='https://rdrr.io/cran/googledrive/man/team_drive_update1.html'>team_drive_update1<\/a>","<a href='https://rdrr.io/cran/googledrive/man/team_drive_update2.html'>team_drive_update2<\/a>","<a href='https://rdrr.io/cran/googlesheets4/man/gs4_api_key.html'>gs4_api_key<\/a>","<a href='https://rdrr.io/cran/googlesheets4/man/gs4_auth_configure.html'>gs4_auth_configure<\/a>","<a href='https://rdrr.io/cran/googlesheets4/man/gs4_oauth_app.html'>gs4_oauth_app<\/a>","<a href='https://rdrr.io/cran/googlesheets4/man/gs4_oauth_client.html'>gs4_oauth_client<\/a>","<a href='https://rdrr.io/cran/haven/man/read_sas.html'>read_sas<\/a>","<a href='https://rdrr.io/cran/haven/man/write_sas.html'>write_sas<\/a>","<a href='https://rdrr.io/cran/pillar/man/colonnade.html'>colonnade<\/a>","<a href='https://rdrr.io/cran/pillar/man/ctl_new_pillar.html'>ctl_new_pillar<\/a>","<a href='https://rdrr.io/cran/pillar/man/ctl_new_pillar_list.html'>ctl_new_pillar_list<\/a>","<a href='https://rdrr.io/cran/pillar/man/ctl_new_rowid_pillar.html'>ctl_new_rowid_pillar<\/a>","<a href='https://rdrr.io/cran/pillar/man/expect_known_display.html'>expect_known_display<\/a>","<a href='https://rdrr.io/cran/pillar/man/extra_cols.html'>extra_cols<\/a>","<a href='https://rdrr.io/cran/pillar/man/format_glimpse.html'>format_glimpse<\/a>","<a href='https://rdrr.io/cran/pillar/man/is_vector_s3.html'>is_vector_s3<\/a>","<a href='https://rdrr.io/cran/pillar/man/new_pillar.html'>new_pillar<\/a>","<a href='https://rdrr.io/cran/pillar/man/new_pillar_component.html'>new_pillar_component<\/a>","<a href='https://rdrr.io/cran/pillar/man/new_pillar_shaft.html'>new_pillar_shaft<\/a>","<a href='https://rdrr.io/cran/pillar/man/new_pillar_shaft_simple.html'>new_pillar_shaft_simple<\/a>","<a href='https://rdrr.io/cran/pillar/man/pillar_component.html'>pillar_component<\/a>","<a href='https://rdrr.io/cran/pillar/man/scale_x_num.html'>scale_x_num<\/a>","<a href='https://rdrr.io/cran/pillar/man/scale_y_num.html'>scale_y_num<\/a>","<a href='https://rdrr.io/cran/pillar/man/squeeze.html'>squeeze<\/a>","<a href='https://rdrr.io/cran/pillar/man/tbl_format_body.html'>tbl_format_body<\/a>","<a href='https://rdrr.io/cran/pillar/man/tbl_format_footer.html'>tbl_format_footer<\/a>","<a href='https://rdrr.io/cran/pillar/man/tbl_format_header.html'>tbl_format_header<\/a>","<a href='https://rdrr.io/cran/pillar/man/tbl_format_setup.html'>tbl_format_setup<\/a>","<a href='https://rdrr.io/cran/purrr/man/%@%.html'>%@%<\/a>","<a href='https://rdrr.io/cran/purrr/man/accumulate_right.html'>accumulate_right<\/a>","<a href='https://rdrr.io/cran/purrr/man/as_vector.html'>as_vector<\/a>","<a href='https://rdrr.io/cran/purrr/man/cross.html'>cross<\/a>","<a href='https://rdrr.io/cran/purrr/man/cross_d.html'>cross_d<\/a>","<a href='https://rdrr.io/cran/purrr/man/cross_df.html'>cross_df<\/a>","<a href='https://rdrr.io/cran/purrr/man/cross_n.html'>cross_n<\/a>","<a href='https://rdrr.io/cran/purrr/man/cross2.html'>cross2<\/a>","<a href='https://rdrr.io/cran/purrr/man/cross3.html'>cross3<\/a>","<a href='https://rdrr.io/cran/purrr/man/detect.html'>detect<\/a>","<a href='https://rdrr.io/cran/purrr/man/detect_index.html'>detect_index<\/a>","<a href='https://rdrr.io/cran/purrr/man/discard_at.html'>discard_at<\/a>","<a href='https://rdrr.io/cran/purrr/man/flatten.html'>flatten<\/a>","<a href='https://rdrr.io/cran/purrr/man/flatten_chr.html'>flatten_chr<\/a>","<a href='https://rdrr.io/cran/purrr/man/flatten_dbl.html'>flatten_dbl<\/a>","<a href='https://rdrr.io/cran/purrr/man/flatten_df.html'>flatten_df<\/a>","<a href='https://rdrr.io/cran/purrr/man/flatten_dfc.html'>flatten_dfc<\/a>","<a href='https://rdrr.io/cran/purrr/man/flatten_dfr.html'>flatten_dfr<\/a>","<a href='https://rdrr.io/cran/purrr/man/flatten_int.html'>flatten_int<\/a>","<a href='https://rdrr.io/cran/purrr/man/flatten_lgl.html'>flatten_lgl<\/a>","<a href='https://rdrr.io/cran/purrr/man/flatten_raw.html'>flatten_raw<\/a>","<a href='https://rdrr.io/cran/purrr/man/imap_dfc.html'>imap_dfc<\/a>","<a href='https://rdrr.io/cran/purrr/man/imap_dfr.html'>imap_dfr<\/a>","<a href='https://rdrr.io/cran/purrr/man/imap_raw.html'>imap_raw<\/a>","<a href='https://rdrr.io/cran/purrr/man/imodify.html'>imodify<\/a>","<a href='https://rdrr.io/cran/purrr/man/invoke.html'>invoke<\/a>","<a href='https://rdrr.io/cran/purrr/man/invoke_map.html'>invoke_map<\/a>","<a href='https://rdrr.io/cran/purrr/man/invoke_map_chr.html'>invoke_map_chr<\/a>","<a href='https://rdrr.io/cran/purrr/man/invoke_map_dbl.html'>invoke_map_dbl<\/a>","<a href='https://rdrr.io/cran/purrr/man/invoke_map_df.html'>invoke_map_df<\/a>","<a href='https://rdrr.io/cran/purrr/man/invoke_map_dfc.html'>invoke_map_dfc<\/a>","<a href='https://rdrr.io/cran/purrr/man/invoke_map_dfr.html'>invoke_map_dfr<\/a>","<a href='https://rdrr.io/cran/purrr/man/invoke_map_int.html'>invoke_map_int<\/a>","<a href='https://rdrr.io/cran/purrr/man/invoke_map_lgl.html'>invoke_map_lgl<\/a>","<a href='https://rdrr.io/cran/purrr/man/invoke_map_raw.html'>invoke_map_raw<\/a>","<a href='https://rdrr.io/cran/purrr/man/keep_at.html'>keep_at<\/a>","<a href='https://rdrr.io/cran/purrr/man/lift.html'>lift<\/a>","<a href='https://rdrr.io/cran/purrr/man/lift_dl.html'>lift_dl<\/a>","<a href='https://rdrr.io/cran/purrr/man/lift_dv.html'>lift_dv<\/a>","<a href='https://rdrr.io/cran/purrr/man/lift_ld.html'>lift_ld<\/a>","<a href='https://rdrr.io/cran/purrr/man/lift_lv.html'>lift_lv<\/a>","<a href='https://rdrr.io/cran/purrr/man/lift_vd.html'>lift_vd<\/a>","<a href='https://rdrr.io/cran/purrr/man/lift_vl.html'>lift_vl<\/a>","<a href='https://rdrr.io/cran/purrr/man/list_along.html'>list_along<\/a>","<a href='https://rdrr.io/cran/purrr/man/lmap.html'>lmap<\/a>","<a href='https://rdrr.io/cran/purrr/man/lmap_at.html'>lmap_at<\/a>","<a href='https://rdrr.io/cran/purrr/man/lmap_if.html'>lmap_if<\/a>","<a href='https://rdrr.io/cran/purrr/man/map_at.html'>map_at<\/a>","<a href='https://rdrr.io/cran/purrr/man/map_df.html'>map_df<\/a>","<a href='https://rdrr.io/cran/purrr/man/map_dfc.html'>map_dfc<\/a>","<a href='https://rdrr.io/cran/purrr/man/map_dfr.html'>map_dfr<\/a>","<a href='https://rdrr.io/cran/purrr/man/map_if.html'>map_if<\/a>","<a href='https://rdrr.io/cran/purrr/man/map_raw.html'>map_raw<\/a>","<a href='https://rdrr.io/cran/purrr/man/map2_df.html'>map2_df<\/a>","<a href='https://rdrr.io/cran/purrr/man/map2_dfc.html'>map2_dfc<\/a>","<a href='https://rdrr.io/cran/purrr/man/map2_dfr.html'>map2_dfr<\/a>","<a href='https://rdrr.io/cran/purrr/man/map2_raw.html'>map2_raw<\/a>","<a href='https://rdrr.io/cran/purrr/man/modify.html'>modify<\/a>","<a href='https://rdrr.io/cran/purrr/man/modify_at.html'>modify_at<\/a>","<a href='https://rdrr.io/cran/purrr/man/modify_if.html'>modify_if<\/a>","<a href='https://rdrr.io/cran/purrr/man/modify2.html'>modify2<\/a>","<a href='https://rdrr.io/cran/purrr/man/partial1.html'>partial1<\/a>","<a href='https://rdrr.io/cran/purrr/man/partial2.html'>partial2<\/a>","<a href='https://rdrr.io/cran/purrr/man/partial3.html'>partial3<\/a>","<a href='https://rdrr.io/cran/purrr/man/pmap_df.html'>pmap_df<\/a>","<a href='https://rdrr.io/cran/purrr/man/pmap_dfc.html'>pmap_dfc<\/a>","<a href='https://rdrr.io/cran/purrr/man/pmap_dfr.html'>pmap_dfr<\/a>","<a href='https://rdrr.io/cran/purrr/man/pmap_raw.html'>pmap_raw<\/a>","<a href='https://rdrr.io/cran/purrr/man/prepend.html'>prepend<\/a>","<a href='https://rdrr.io/cran/purrr/man/rbernoulli.html'>rbernoulli<\/a>","<a href='https://rdrr.io/cran/purrr/man/rdunif.html'>rdunif<\/a>","<a href='https://rdrr.io/cran/purrr/man/reduce_right.html'>reduce_right<\/a>","<a href='https://rdrr.io/cran/purrr/man/reduce2_right.html'>reduce2_right<\/a>","<a href='https://rdrr.io/cran/purrr/man/rerun.html'>rerun<\/a>","<a href='https://rdrr.io/cran/purrr/man/simplify.html'>simplify<\/a>","<a href='https://rdrr.io/cran/purrr/man/simplify_all.html'>simplify_all<\/a>","<a href='https://rdrr.io/cran/purrr/man/splice.html'>splice<\/a>","<a href='https://rdrr.io/cran/purrr/man/transpose.html'>transpose<\/a>","<a href='https://rdrr.io/cran/purrr/man/update_list.html'>update_list<\/a>","<a href='https://rdrr.io/cran/purrr/man/when.html'>when<\/a>","<a href='https://rdrr.io/cran/readr/man/format_csv.html'>format_csv<\/a>","<a href='https://rdrr.io/cran/readr/man/format_csv2.html'>format_csv2<\/a>","<a href='https://rdrr.io/cran/readr/man/format_delim.html'>format_delim<\/a>","<a href='https://rdrr.io/cran/readr/man/format_tsv.html'>format_tsv<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_csv1.html'>melt_csv1<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_csv2.html'>melt_csv2<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_csv_chunked.html'>melt_csv_chunked<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_csv21.html'>melt_csv21<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_csv22.html'>melt_csv22<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_csv2_chunked.html'>melt_csv2_chunked<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_delim1.html'>melt_delim1<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_delim2.html'>melt_delim2<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_delim_chunked.html'>melt_delim_chunked<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_fwf.html'>melt_fwf<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_table.html'>melt_table<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_table2.html'>melt_table2<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_tsv1.html'>melt_tsv1<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_tsv2.html'>melt_tsv2<\/a>","<a href='https://rdrr.io/cran/readr/man/melt_tsv_chunked.html'>melt_tsv_chunked<\/a>","<a href='https://rdrr.io/cran/readr/man/read_csv.html'>read_csv<\/a>","<a href='https://rdrr.io/cran/readr/man/read_csv_chunked.html'>read_csv_chunked<\/a>","<a href='https://rdrr.io/cran/readr/man/read_csv2.html'>read_csv2<\/a>","<a href='https://rdrr.io/cran/readr/man/read_csv2_chunked.html'>read_csv2_chunked<\/a>","<a href='https://rdrr.io/cran/readr/man/read_delim.html'>read_delim<\/a>","<a href='https://rdrr.io/cran/readr/man/read_delim_chunked.html'>read_delim_chunked<\/a>","<a href='https://rdrr.io/cran/readr/man/read_file.html'>read_file<\/a>","<a href='https://rdrr.io/cran/readr/man/read_file_raw.html'>read_file_raw<\/a>","<a href='https://rdrr.io/cran/readr/man/read_lines.html'>read_lines<\/a>","<a href='https://rdrr.io/cran/readr/man/read_lines_raw.html'>read_lines_raw<\/a>","<a href='https://rdrr.io/cran/readr/man/read_rds.html'>read_rds<\/a>","<a href='https://rdrr.io/cran/readr/man/read_table2.html'>read_table2<\/a>","<a href='https://rdrr.io/cran/readr/man/read_tsv.html'>read_tsv<\/a>","<a href='https://rdrr.io/cran/readr/man/read_tsv_chunked.html'>read_tsv_chunked<\/a>","<a href='https://rdrr.io/cran/readr/man/spec_csv.html'>spec_csv<\/a>","<a href='https://rdrr.io/cran/readr/man/spec_csv2.html'>spec_csv2<\/a>","<a href='https://rdrr.io/cran/readr/man/spec_delim.html'>spec_delim<\/a>","<a href='https://rdrr.io/cran/readr/man/spec_table.html'>spec_table<\/a>","<a href='https://rdrr.io/cran/readr/man/spec_tsv.html'>spec_tsv<\/a>","<a href='https://rdrr.io/cran/readr/man/tokenizer_csv.html'>tokenizer_csv<\/a>","<a href='https://rdrr.io/cran/readr/man/tokenizer_delim.html'>tokenizer_delim<\/a>","<a href='https://rdrr.io/cran/readr/man/tokenizer_fwf.html'>tokenizer_fwf<\/a>","<a href='https://rdrr.io/cran/readr/man/tokenizer_line.html'>tokenizer_line<\/a>","<a href='https://rdrr.io/cran/readr/man/tokenizer_log.html'>tokenizer_log<\/a>","<a href='https://rdrr.io/cran/readr/man/tokenizer_tsv.html'>tokenizer_tsv<\/a>","<a href='https://rdrr.io/cran/readr/man/tokenizer_ws.html'>tokenizer_ws<\/a>","<a href='https://rdrr.io/cran/readr/man/write_csv1.html'>write_csv1<\/a>","<a href='https://rdrr.io/cran/readr/man/write_csv2.html'>write_csv2<\/a>","<a href='https://rdrr.io/cran/readr/man/write_csv21.html'>write_csv21<\/a>","<a href='https://rdrr.io/cran/readr/man/write_csv22.html'>write_csv22<\/a>","<a href='https://rdrr.io/cran/readr/man/write_delim1.html'>write_delim1<\/a>","<a href='https://rdrr.io/cran/readr/man/write_delim2.html'>write_delim2<\/a>","<a href='https://rdrr.io/cran/readr/man/write_excel_csv1.html'>write_excel_csv1<\/a>","<a href='https://rdrr.io/cran/readr/man/write_excel_csv2.html'>write_excel_csv2<\/a>","<a href='https://rdrr.io/cran/readr/man/write_excel_csv21.html'>write_excel_csv21<\/a>","<a href='https://rdrr.io/cran/readr/man/write_excel_csv22.html'>write_excel_csv22<\/a>","<a href='https://rdrr.io/cran/readr/man/write_file.html'>write_file<\/a>","<a href='https://rdrr.io/cran/readr/man/write_lines.html'>write_lines<\/a>","<a href='https://rdrr.io/cran/readr/man/write_rds.html'>write_rds<\/a>","<a href='https://rdrr.io/cran/readr/man/write_tsv1.html'>write_tsv1<\/a>","<a href='https://rdrr.io/cran/readr/man/write_tsv2.html'>write_tsv2<\/a>","<a href='https://rdrr.io/cran/reprex/man/reprex1.html'>reprex1<\/a>","<a href='https://rdrr.io/cran/reprex/man/reprex2.html'>reprex2<\/a>","<a href='https://rdrr.io/cran/reprex/man/reprex3.html'>reprex3<\/a>","<a href='https://rdrr.io/cran/reprex/man/reprex4.html'>reprex4<\/a>","<a href='https://rdrr.io/cran/reprex/man/reprex_clean.html'>reprex_clean<\/a>","<a href='https://rdrr.io/cran/reprex/man/reprex_invert.html'>reprex_invert<\/a>","<a href='https://rdrr.io/cran/reprex/man/reprex_rescue.html'>reprex_rescue<\/a>","<a href='https://rdrr.io/cran/rlang/man/abort.html'>abort<\/a>","<a href='https://rdrr.io/cran/rlang/man/are_na.html'>are_na<\/a>","<a href='https://rdrr.io/cran/rlang/man/as_character.html'>as_character<\/a>","<a href='https://rdrr.io/cran/rlang/man/as_complex.html'>as_complex<\/a>","<a href='https://rdrr.io/cran/rlang/man/as_double.html'>as_double<\/a>","<a href='https://rdrr.io/cran/rlang/man/as_integer.html'>as_integer<\/a>","<a href='https://rdrr.io/cran/rlang/man/as_list.html'>as_list<\/a>","<a href='https://rdrr.io/cran/rlang/man/as_logical.html'>as_logical<\/a>","<a href='https://rdrr.io/cran/rlang/man/as_utf8_character.html'>as_utf8_character<\/a>","<a href='https://rdrr.io/cran/rlang/man/bytes.html'>bytes<\/a>","<a href='https://rdrr.io/cran/rlang/man/call_fn1.html'>call_fn1<\/a>","<a href='https://rdrr.io/cran/rlang/man/call_fn2.html'>call_fn2<\/a>","<a href='https://rdrr.io/cran/rlang/man/call_standardise1.html'>call_standardise1<\/a>","<a href='https://rdrr.io/cran/rlang/man/call_standardise2.html'>call_standardise2<\/a>","<a href='https://rdrr.io/cran/rlang/man/calling1.html'>calling1<\/a>","<a href='https://rdrr.io/cran/rlang/man/calling2.html'>calling2<\/a>","<a href='https://rdrr.io/cran/rlang/man/check_dots_empty.html'>check_dots_empty<\/a>","<a href='https://rdrr.io/cran/rlang/man/check_dots_unnamed.html'>check_dots_unnamed<\/a>","<a href='https://rdrr.io/cran/rlang/man/check_dots_used.html'>check_dots_used<\/a>","<a href='https://rdrr.io/cran/rlang/man/child_env.html'>child_env<\/a>","<a href='https://rdrr.io/cran/rlang/man/chr.html'>chr<\/a>","<a href='https://rdrr.io/cran/rlang/man/chr_unserialise_unicode.html'>chr_unserialise_unicode<\/a>","<a href='https://rdrr.io/cran/rlang/man/coerce_class.html'>coerce_class<\/a>","<a href='https://rdrr.io/cran/rlang/man/coerce_type.html'>coerce_type<\/a>","<a href='https://rdrr.io/cran/rlang/man/cpl.html'>cpl<\/a>","<a href='https://rdrr.io/cran/rlang/man/ctxt_frame.html'>ctxt_frame<\/a>","<a href='https://rdrr.io/cran/rlang/man/dbl.html'>dbl<\/a>","<a href='https://rdrr.io/cran/rlang/man/dots_splice.html'>dots_splice<\/a>","<a href='https://rdrr.io/cran/rlang/man/env_binding_are_active.html'>env_binding_are_active<\/a>","<a href='https://rdrr.io/cran/rlang/man/env_binding_are_lazy.html'>env_binding_are_lazy<\/a>","<a href='https://rdrr.io/cran/rlang/man/env_binding_are_locked.html'>env_binding_are_locked<\/a>","<a href='https://rdrr.io/cran/rlang/man/env_binding_lock.html'>env_binding_lock<\/a>","<a href='https://rdrr.io/cran/rlang/man/env_binding_unlock.html'>env_binding_unlock<\/a>","<a href='https://rdrr.io/cran/rlang/man/env_bury.html'>env_bury<\/a>","<a href='https://rdrr.io/cran/rlang/man/env_is_locked.html'>env_is_locked<\/a>","<a href='https://rdrr.io/cran/rlang/man/env_lock.html'>env_lock<\/a>","<a href='https://rdrr.io/cran/rlang/man/exiting1.html'>exiting1<\/a>","<a href='https://rdrr.io/cran/rlang/man/exiting2.html'>exiting2<\/a>","<a href='https://rdrr.io/cran/rlang/man/expr_interp1.html'>expr_interp1<\/a>","<a href='https://rdrr.io/cran/rlang/man/expr_interp2.html'>expr_interp2<\/a>","<a href='https://rdrr.io/cran/rlang/man/expr_label.html'>expr_label<\/a>","<a href='https://rdrr.io/cran/rlang/man/expr_name.html'>expr_name<\/a>","<a href='https://rdrr.io/cran/rlang/man/expr_text.html'>expr_text<\/a>","<a href='https://rdrr.io/cran/rlang/man/flatten.html'>flatten<\/a>","<a href='https://rdrr.io/cran/rlang/man/flatten_chr.html'>flatten_chr<\/a>","<a href='https://rdrr.io/cran/rlang/man/flatten_cpl.html'>flatten_cpl<\/a>","<a href='https://rdrr.io/cran/rlang/man/flatten_dbl.html'>flatten_dbl<\/a>","<a href='https://rdrr.io/cran/rlang/man/flatten_if.html'>flatten_if<\/a>","<a href='https://rdrr.io/cran/rlang/man/flatten_int.html'>flatten_int<\/a>","<a href='https://rdrr.io/cran/rlang/man/flatten_lgl.html'>flatten_lgl<\/a>","<a href='https://rdrr.io/cran/rlang/man/flatten_raw.html'>flatten_raw<\/a>","<a href='https://rdrr.io/cran/rlang/man/friendly_type.html'>friendly_type<\/a>","<a href='https://rdrr.io/cran/rlang/man/global_frame.html'>global_frame<\/a>","<a href='https://rdrr.io/cran/rlang/man/inform.html'>inform<\/a>","<a href='https://rdrr.io/cran/rlang/man/int.html'>int<\/a>","<a href='https://rdrr.io/cran/rlang/man/invoke1.html'>invoke1<\/a>","<a href='https://rdrr.io/cran/rlang/man/invoke2.html'>invoke2<\/a>","<a href='https://rdrr.io/cran/rlang/man/is_chr_na.html'>is_chr_na<\/a>","<a href='https://rdrr.io/cran/rlang/man/is_cpl_na.html'>is_cpl_na<\/a>","<a href='https://rdrr.io/cran/rlang/man/is_dbl_na.html'>is_dbl_na<\/a>","<a href='https://rdrr.io/cran/rlang/man/is_int_na.html'>is_int_na<\/a>","<a href='https://rdrr.io/cran/rlang/man/is_lang.html'>is_lang<\/a>","<a href='https://rdrr.io/cran/rlang/man/is_lgl_na.html'>is_lgl_na<\/a>","<a href='https://rdrr.io/cran/rlang/man/is_na.html'>is_na<\/a>","<a href='https://rdrr.io/cran/rlang/man/is_scoped.html'>is_scoped<\/a>","<a href='https://rdrr.io/cran/rlang/man/lang.html'>lang<\/a>","<a href='https://rdrr.io/cran/rlang/man/lgl.html'>lgl<\/a>","<a href='https://rdrr.io/cran/rlang/man/local_use_cli1.html'>local_use_cli1<\/a>","<a href='https://rdrr.io/cran/rlang/man/local_use_cli2.html'>local_use_cli2<\/a>","<a href='https://rdrr.io/cran/rlang/man/locally.html'>locally<\/a>","<a href='https://rdrr.io/cran/rlang/man/na_chr.html'>na_chr<\/a>","<a href='https://rdrr.io/cran/rlang/man/na_cpl.html'>na_cpl<\/a>","<a href='https://rdrr.io/cran/rlang/man/na_dbl.html'>na_dbl<\/a>","<a href='https://rdrr.io/cran/rlang/man/na_int.html'>na_int<\/a>","<a href='https://rdrr.io/cran/rlang/man/na_lgl.html'>na_lgl<\/a>","<a href='https://rdrr.io/cran/rlang/man/new_character.html'>new_character<\/a>","<a href='https://rdrr.io/cran/rlang/man/new_complex.html'>new_complex<\/a>","<a href='https://rdrr.io/cran/rlang/man/new_double.html'>new_double<\/a>","<a href='https://rdrr.io/cran/rlang/man/new_integer.html'>new_integer<\/a>","<a href='https://rdrr.io/cran/rlang/man/new_list.html'>new_list<\/a>","<a href='https://rdrr.io/cran/rlang/man/new_logical.html'>new_logical<\/a>","<a href='https://rdrr.io/cran/rlang/man/new_raw.html'>new_raw<\/a>","<a href='https://rdrr.io/cran/rlang/man/quo_expr.html'>quo_expr<\/a>","<a href='https://rdrr.io/cran/rlang/man/quo_label.html'>quo_label<\/a>","<a href='https://rdrr.io/cran/rlang/man/quo_name.html'>quo_name<\/a>","<a href='https://rdrr.io/cran/rlang/man/quo_text.html'>quo_text<\/a>","<a href='https://rdrr.io/cran/rlang/man/raw_deparse_str.html'>raw_deparse_str<\/a>","<a href='https://rdrr.io/cran/rlang/man/reset_message_verbosity.html'>reset_message_verbosity<\/a>","<a href='https://rdrr.io/cran/rlang/man/reset_warning_verbosity.html'>reset_warning_verbosity<\/a>","<a href='https://rdrr.io/cran/rlang/man/return_from.html'>return_from<\/a>","<a href='https://rdrr.io/cran/rlang/man/scoped_bindings.html'>scoped_bindings<\/a>","<a href='https://rdrr.io/cran/rlang/man/scoped_env.html'>scoped_env<\/a>","<a href='https://rdrr.io/cran/rlang/man/scoped_interactive.html'>scoped_interactive<\/a>","<a href='https://rdrr.io/cran/rlang/man/scoped_options.html'>scoped_options<\/a>","<a href='https://rdrr.io/cran/rlang/man/set_attrs1.html'>set_attrs1<\/a>","<a href='https://rdrr.io/cran/rlang/man/set_attrs2.html'>set_attrs2<\/a>","<a href='https://rdrr.io/cran/rlang/man/signal.html'>signal<\/a>","<a href='https://rdrr.io/cran/rlang/man/squash.html'>squash<\/a>","<a href='https://rdrr.io/cran/rlang/man/squash_chr.html'>squash_chr<\/a>","<a href='https://rdrr.io/cran/rlang/man/squash_cpl.html'>squash_cpl<\/a>","<a href='https://rdrr.io/cran/rlang/man/squash_dbl.html'>squash_dbl<\/a>","<a href='https://rdrr.io/cran/rlang/man/squash_if.html'>squash_if<\/a>","<a href='https://rdrr.io/cran/rlang/man/squash_int.html'>squash_int<\/a>","<a href='https://rdrr.io/cran/rlang/man/squash_lgl.html'>squash_lgl<\/a>","<a href='https://rdrr.io/cran/rlang/man/squash_raw.html'>squash_raw<\/a>","<a href='https://rdrr.io/cran/rlang/man/string.html'>string<\/a>","<a href='https://rdrr.io/cran/rlang/man/switch_class.html'>switch_class<\/a>","<a href='https://rdrr.io/cran/rlang/man/switch_type.html'>switch_type<\/a>","<a href='https://rdrr.io/cran/rlang/man/try_fetch.html'>try_fetch<\/a>","<a href='https://rdrr.io/cran/rlang/man/type_of.html'>type_of<\/a>","<a href='https://rdrr.io/cran/rlang/man/UQ.html'>UQ<\/a>","<a href='https://rdrr.io/cran/rlang/man/UQS.html'>UQS<\/a>","<a href='https://rdrr.io/cran/rlang/man/vec_poke_n.html'>vec_poke_n<\/a>","<a href='https://rdrr.io/cran/rlang/man/vec_poke_range.html'>vec_poke_range<\/a>","<a href='https://rdrr.io/cran/rlang/man/warn.html'>warn<\/a>","<a href='https://rdrr.io/cran/rlang/man/with_env.html'>with_env<\/a>","<a href='https://rdrr.io/cran/rlang/man/with_handlers1.html'>with_handlers1<\/a>","<a href='https://rdrr.io/cran/rlang/man/with_handlers2.html'>with_handlers2<\/a>","<a href='https://rdrr.io/cran/rvest/man/back.html'>back<\/a>","<a href='https://rdrr.io/cran/rvest/man/follow_link.html'>follow_link<\/a>","<a href='https://rdrr.io/cran/rvest/man/forward.html'>forward<\/a>","<a href='https://rdrr.io/cran/rvest/man/html_node.html'>html_node<\/a>","<a href='https://rdrr.io/cran/rvest/man/html_nodes.html'>html_nodes<\/a>","<a href='https://rdrr.io/cran/rvest/man/html_session.html'>html_session<\/a>","<a href='https://rdrr.io/cran/rvest/man/jump_to.html'>jump_to<\/a>","<a href='https://rdrr.io/cran/rvest/man/repair_encoding.html'>repair_encoding<\/a>","<a href='https://rdrr.io/cran/rvest/man/set_values.html'>set_values<\/a>","<a href='https://rdrr.io/cran/rvest/man/submit_form.html'>submit_form<\/a>","<a href='https://rdrr.io/cran/rvest/man/xml_node.html'>xml_node<\/a>","<a href='https://rdrr.io/cran/rvest/man/xml_nodes.html'>xml_nodes<\/a>","<a href='https://rdrr.io/cran/rvest/man/xml_tag.html'>xml_tag<\/a>","<a href='https://rdrr.io/cran/stringr/man/str_interp.html'>str_interp<\/a>","<a href='https://rdrr.io/cran/tibble/man/as_data_frame.html'>as_data_frame<\/a>","<a href='https://rdrr.io/cran/tibble/man/as_tibble.html'>as_tibble<\/a>","<a href='https://rdrr.io/cran/tibble/man/as_tibble_col.html'>as_tibble_col<\/a>","<a href='https://rdrr.io/cran/tibble/man/as_tibble_row.html'>as_tibble_row<\/a>","<a href='https://rdrr.io/cran/tibble/man/tibble.html'>tibble<\/a>","<a href='https://rdrr.io/cran/tibble/man/char.html'>char<\/a>","<a href='https://rdrr.io/cran/tibble/man/data_frame.html'>data_frame<\/a>","<a href='https://rdrr.io/cran/tibble/man/data_frame_.html'>data_frame_<\/a>","<a href='https://rdrr.io/cran/tibble/man/frame_data.html'>frame_data<\/a>","<a href='https://rdrr.io/cran/tibble/man/tibble.html'>tibble<\/a>","<a href='https://rdrr.io/cran/tibble/man/lst_.html'>lst_<\/a>","<a href='https://rdrr.io/cran/tibble/man/num.html'>num<\/a>","<a href='https://rdrr.io/cran/tibble/man/repair_names.html'>repair_names<\/a>","<a href='https://rdrr.io/cran/tibble/man/set_char_opts.html'>set_char_opts<\/a>","<a href='https://rdrr.io/cran/tibble/man/set_num_opts.html'>set_num_opts<\/a>","<a href='https://rdrr.io/cran/tibble/man/set_tidy_names.html'>set_tidy_names<\/a>","<a href='https://rdrr.io/cran/tibble/man/tibble_.html'>tibble_<\/a>","<a href='https://rdrr.io/cran/tibble/man/tidy_names.html'>tidy_names<\/a>","<a href='https://rdrr.io/cran/tibble/man/trunc_mat.html'>trunc_mat<\/a>","<a href='https://rdrr.io/cran/tibble/man/view.html'>view<\/a>","<a href='https://rdrr.io/cran/tidyr/man/complete_.html'>complete_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/crossing_.html'>crossing_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/drop_na_.html'>drop_na_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/expand_.html'>expand_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/extract.html'>extract<\/a>","<a href='https://rdrr.io/cran/tidyr/man/extract_.html'>extract_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/fill_.html'>fill_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/gather.html'>gather<\/a>","<a href='https://rdrr.io/cran/tidyr/man/gather_.html'>gather_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/nest.html'>nest<\/a>","<a href='https://rdrr.io/cran/tidyr/man/nest_.html'>nest_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/nest_legacy.html'>nest_legacy<\/a>","<a href='https://rdrr.io/cran/tidyr/man/nesting_.html'>nesting_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/separate.html'>separate<\/a>","<a href='https://rdrr.io/cran/tidyr/man/separate_.html'>separate_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/separate_longer_delim.html'>separate_longer_delim<\/a>","<a href='https://rdrr.io/cran/tidyr/man/separate_longer_position.html'>separate_longer_position<\/a>","<a href='https://rdrr.io/cran/tidyr/man/separate_rows.html'>separate_rows<\/a>","<a href='https://rdrr.io/cran/tidyr/man/separate_rows_.html'>separate_rows_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/separate_wider_delim.html'>separate_wider_delim<\/a>","<a href='https://rdrr.io/cran/tidyr/man/separate_wider_position.html'>separate_wider_position<\/a>","<a href='https://rdrr.io/cran/tidyr/man/separate_wider_regex.html'>separate_wider_regex<\/a>","<a href='https://rdrr.io/cran/tidyr/man/spread.html'>spread<\/a>","<a href='https://rdrr.io/cran/tidyr/man/spread_.html'>spread_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/unite_.html'>unite_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/unnest1.html'>unnest1<\/a>","<a href='https://rdrr.io/cran/tidyr/man/unnest2.html'>unnest2<\/a>","<a href='https://rdrr.io/cran/tidyr/man/unnest3.html'>unnest3<\/a>","<a href='https://rdrr.io/cran/tidyr/man/unnest4.html'>unnest4<\/a>","<a href='https://rdrr.io/cran/tidyr/man/unnest_.html'>unnest_<\/a>","<a href='https://rdrr.io/cran/tidyr/man/unnest_legacy.html'>unnest_legacy<\/a>"],[null,null,"vars","cte","cte","cte","cte","cte",null,"...",".unpack",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,".by",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"...",".unpack","...",".unpack",".by",null,null,null,null,null,null,null,null,null,null,null,".by",null,null,null,null,null,null,null,null,null,null,null,null,".by, by",null,".by, by",".by, by",".by, by",".by, by",".by, by",null,null,null,null,null,null,".by",".groups",null,null,null,null,null,null,null,".by",".groups",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"limx, limy","facets",null,"environment","keep.as.numeric","stat, position","stat, position",null,"fun.ymin, fun.y, fun.ymax","fun.ymin, fun.y, fun.ymax",null,"team_drive","verbose","verbose","app",null,"app","app","verbose","verbose","verbose","verbose",null,"app","verbose","team_drive","verbose","team_drive","verbose","verbose",null,"app","app","verbose","verbose","verbose","verbose","verbose","verbose","verbose","verbose","verbose","verbose","verbose","verbose",null,"team_drive","verbose",null,"team_drive",null,"team_drive",null,"team_drive",null,"team_drive",null,"team_drive","app","app",null,"app","cols_only",null,null,null,null,null,null,null,null,null,null,null,"type_sum","type_sum",null,null,null,null,null,null,null,"focus",null,null,null,null,null,null,null,null,null,".right",".right",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,".env",".lazy",".first",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"quote_escape","quote_escape","quote_escape","quote_escape",null,"quoted_na","quoted_na",null,"quoted_na","quoted_na",null,"quoted_na","quoted_na",null,null,null,null,"quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","path","path","path","path","path",null,"quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","quoted_na","path","quote_escape","path","quote_escape","path","quote_escape","path","quote_escape","path","quote_escape","path","path","path","path","quote_escape","outfile","show","si",null,"outfile","outfile","outfile",".subclass",null,null,null,null,null,null,null,null,null,null,"call, env",null,"call, env",null,".expr, ..., handler","action","action","action",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,".expr, ..., handler",null,"x, env",null,null,null,null,null,null,null,null,null,null,null,null,null,".subclass",null,null,".fn, args, ..., .env, .bury",null,null,null,null,null,null,null,null,null,null,null,"inline",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,".subclass",".subclass",null,null,null,null,null,null,".x, ...",".subclass",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,".subclass",null,null,".expr, ..., handler",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"_n, validate","_n, validate","_n, validate",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"...",".drop, .preserve",".id",".sep",null,null],["Experimental","Experimental","Deprecated","Experimental","Experimental","Experimental","Experimental","Experimental","Superseded","Deprecated","Experimental","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Superseded","Superseded","Deprecated","Superseded","Superseded","Superseded","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Superseded","Superseded","Superseded","Superseded","Deprecated","Experimental","Experimental","Experimental","Experimental","Deprecated","Superseded","Superseded","Superseded","Deprecated","Deprecated","Deprecated","Superseded","Superseded","Superseded","Deprecated","Experimental","Experimental","Experimental","Experimental","Experimental","Experimental","Deprecated","Experimental","Deprecated","Experimental","Experimental","Deprecated","Superseded","Superseded","Deprecated","Deprecated","Superseded","Experimental","Deprecated","Superseded","Superseded","Experimental","Experimental","Deprecated","Superseded","Superseded","Superseded","Deprecated","Superseded","Superseded","Deprecated","Superseded","Superseded","Superseded","Deprecated","Experimental","Deprecated","Experimental","Experimental","Experimental","Experimental","Experimental","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Experimental","Experimental","Deprecated","Superseded","Superseded","Deprecated","Deprecated","Superseded","Deprecated","Experimental","Experimental","Deprecated","Superseded","Superseded","Deprecated","Deprecated","Superseded","Deprecated","Deprecated","Deprecated","Superseded","Superseded","Superseded","Deprecated","Superseded","Superseded","Superseded","Superseded","Superseded","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Superseded","Superseded","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Superseded","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Soft-deprecated","Experimental","Experimental","Experimental","Deprecated","Soft-deprecated","Experimental","Deprecated","Experimental","Experimental","Experimental","Experimental","Experimental","Experimental","Experimental","Soft-deprecated","Experimental","Experimental","Experimental","Experimental","Deprecated","Deprecated","Superseded","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Superseded","Superseded","Superseded","Superseded","Superseded","Superseded","Superseded","Superseded","Deprecated","Superseded","Superseded","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Superseded","Superseded","Superseded","Deprecated","Deprecated","Superseded","Superseded","Superseded","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Superseded","Superseded","Superseded","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Superseded","Superseded","Deprecated","Superseded","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Superseded","Deprecated","Deprecated","Superseded","Deprecated","Deprecated","Superseded","Deprecated","Deprecated","Superseded","Superseded","Superseded","Superseded","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Experimental","Deprecated","Deprecated","Deprecated","Deprecated","Questioning","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Experimental","Questioning","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Questioning","Experimental","Soft-deprecated, Experimental","Soft-deprecated, Experimental","Questioning","Deprecated","Questioning","Deprecated","Experimental","Experimental","Experimental","Experimental","Experimental","Superseded","Experimental","Experimental","Deprecated","Deprecated","Deprecated","Deprecated","Questioning","Questioning","Questioning","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Questioning","Deprecated","Deprecated","Questioning","Questioning","Questioning","Questioning","Deprecated","Questioning","Questioning","Deprecated","Deprecated","Questioning","Experimental","Experimental","Deprecated","Questioning","Questioning","Questioning","Questioning","Questioning","Questioning","Questioning","Questioning","Questioning","Questioning","Questioning","Questioning","Deprecated","Superseded","Superseded","Superseded","Experimental","Deprecated","Deprecated","Questioning","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Experimental","Soft-deprecated, Experimental","Soft-deprecated, Experimental","Experimental","Soft-deprecated, Experimental","Deprecated","Deprecated","Experimental","Experimental","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Superseded","Deprecated","Soft-deprecated","Soft-deprecated","Soft-deprecated","Deprecated","Experimental","Deprecated","Deprecated","Deprecated","Soft-deprecated","Deprecated","Experimental","Superseded","Experimental","Experimental","Superseded","Deprecated","Superseded","Deprecated","Experimental","Deprecated","Deprecated","Deprecated","Deprecated","Superseded","Deprecated","Deprecated","Superseded","Deprecated","Deprecated","Deprecated","Superseded","Deprecated","Superseded","Deprecated","Experimental","Experimental","Superseded","Deprecated","Experimental","Experimental","Experimental","Superseded","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Deprecated","Superseded"]],"container":"<table class=\"display\">\n  <thead>\n    <tr>\n      <th> <\/th>\n      <th>Package<\/th>\n      <th>Function<\/th>\n      <th>Args<\/th>\n      <th>Badges<\/th>\n    <\/tr>\n  <\/thead>\n<\/table>","options":{"autoWidth":true,"dom":"tp","columnDefs":[{"orderable":false,"targets":0}],"order":[],"orderClasses":false,"orderCellsTop":true}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
</section>
</section>
<section id="death" class="level2">
<h2 class="anchored" data-anchor-id="death">Death</h2>
<p>You can see a few patterns. For example:</p>
<ul>
<li>some packages are not represented here at all, while others appear a lot (e.g.&nbsp;{googledrive} has a large number of deprecated functions, maybe due to a change to the API, or overhaul of package design?)</li>
<li>‘Questioning’ is still being used in {rlang}, despite not being part of the {lifecycle} system</li>
<li>{rlang} curiously has functions that are both ‘Experimental’ <em>and</em> ‘Soft-deprecated’ (perhaps an example of trying something and realising it wasn’t the right fit?)</li>
<li>sometimes it’s more than one argument that gets a badge, which can happen when the same help page is being used by multiple functions (e.g.&nbsp;<code>slice()</code> and family’s help page has ‘Experimental’ for <code>.by, by</code><sup>4</sup>, use of which differ depending on the exact function)</li>
</ul>
<p>Plus some other stuff I’m sure you can fathom out yourself.</p>
<p>Of course, this all assumes that the badges are used consistently by developers across the suite of tidyverse packages. The method I used may also miss badges I’m not aware of, like the ‘Soft-deprecated’ example mentioned earlier.</p>
<p>Regardless, the general approach outlined in this post might be useful for exploring other aspects of help pages, like the use of certain terms, grammar or writing styles. <a href="https://contributor.r-project.org/r-project-sprint-2023/projects/documentation/">Documentation was a theme</a> of the recent R Project Sprint 2023, after all.</p>
<p>Of course, it helps to keep badged functions around so that people’s code remains reproducible. The downside is the potential for clutter and confusion, though the tidyverse packages sometimes warn you when something is old hat and suggest the preferred new method<sup>5</sup>.</p>
<p>But I think it’s an even better idea to keep these vestiges around to remind us that we all make mistakes. Oh, and, of course, that ✨ nothing is permanent ✨.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-09-11 14:19:57 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] gtable_0.3.3        bslib_0.5.0         xfun_0.39          
 [4] ggplot2_3.4.2       htmlwidgets_1.6.2   gargle_1.5.2       
 [7] tzdb_0.4.0          crosstalk_1.2.0     vctrs_0.6.3        
[10] tools_4.3.1         generics_0.1.3      tibble_3.2.1       
[13] fansi_1.0.4         pkgconfig_2.0.3     data.table_1.14.8  
[16] tidyverse_2.0.0     dbplyr_2.3.3        readxl_1.4.3       
[19] lifecycle_1.0.3     compiler_4.3.1      stringr_1.5.0      
[22] textshaping_0.3.6   munsell_0.5.0       sass_0.4.7         
[25] htmltools_0.5.5     yaml_2.3.7          jquerylib_0.1.4    
[28] pillar_1.9.0        tidyr_1.3.0         ellipsis_0.3.2     
[31] DT_0.28             googlesheets4_1.1.1 cachem_1.0.8       
[34] tidyselect_1.2.0    rvest_1.0.3         conflicted_1.2.0   
[37] digest_0.6.33       stringi_1.7.12      dplyr_1.1.2        
[40] purrr_1.0.1         forcats_1.0.0       fastmap_1.1.1      
[43] grid_4.3.1          colorspace_2.1-0    cli_3.6.1          
[46] magrittr_2.0.3      utf8_1.2.3          broom_1.0.5        
[49] readr_2.1.4         withr_2.5.0         scales_1.2.1       
[52] backports_1.4.1     lubridate_1.9.2     googledrive_2.1.1  
[55] timechange_0.2.0    rmarkdown_2.23      modelr_0.1.11      
[58] httr_1.4.6          cellranger_1.1.0    ragg_1.2.5         
[61] hms_1.1.3           memoise_2.0.1       evaluate_0.21      
[64] knitr_1.43.1        haven_2.5.3         dtplyr_1.3.1       
[67] rlang_1.1.1         glue_1.6.2          DBI_1.1.3          
[70] xml2_1.3.5          reprex_2.0.2        rstudioapi_0.15.0  
[73] jsonlite_1.8.7      R6_2.5.1            systemfonts_1.0.4  
[76] fs_1.6.3           </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Ethan White <a href="https://hachyderm.io/@ethanwhite/111012724465096811">wondered aloud</a> recently if people are teaching learners to <code>ungroup()</code> then <code>summarise()</code>, or to use the ‘experimental’ <code>.by</code> argument within <code>summarise()</code> itself. Opinion: typically I prefer to avoid ‘deprecated’ or ‘superseded’ functions when teaching, like the <code>mutate_*()</code> suite that became <code>mutate(across())</code>. I’m a little wary of anything ‘experimental’ for teaching, for similarish reasons. But I do personally use them.↩︎</p></li>
<li id="fn2"><p>I assume a running list of these functions/args must already exist, or this has already been explored by a third party. But forget them; we’re here to have fun!↩︎</p></li>
<li id="fn3"><p>Yeah, this approach is pretty awkward. Basically I was noodling around with some code and then realised I don’t really care to refactor it. That could be a nice treat for you instead.↩︎</p></li>
<li id="fn4"><p>Having mentioned teaching earlier, could this be awkward for learners? How do you teach that sometimes it’s <code>by</code> and sometimes its <code>.by</code>, especially when the same family of functions (like <code>slice()</code>) is inconsistent? You should teach people to look at help files, sure, but it would be nice if it was always predictable.↩︎</p></li>
<li id="fn5"><p>I’ll leave the grumbling to you about whether all this chopping and changing of functions and arguments is A Good Thing or not; that’s not what this post is about.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>lifecycle</category>
  <category>r</category>
  <category>tidyverse</category>
  <guid>https://www.rostrum.blog/posts/2023-09-10-lifecycle/index.html</guid>
  <pubDate>Sat, 09 Sep 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Combing through my trash</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-09-08-trash-combing/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-09-08-trash-combing/resources/raccoon.png" class="img-fluid figure-img" style="width:50.0%" alt="A crudely drawn racoon holding some kind of nugget with the litter 'R' on it."></p>
<figcaption class="figure-caption"><em>Procyon lotor</em>. Released graciously by the author under CC0.</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>Three little R things I never finished. Or are useless. Or both?</p>
</section>
<section id="flotsam-and-jetsam" class="level2">
<h2 class="anchored" data-anchor-id="flotsam-and-jetsam">Flotsam and jetsam</h2>
<p>It’ll not surprise you that after all these years of blogging and farting around with R that I have a huge <a href="https://en.wikipedia.org/wiki/Great_Pacific_garbage_patch">floating garbage patch</a> of odds and sods that I sketched out at some point, but never finished or never found a use for.</p>
<p>Join me, fellow trash pandas, as we carouse through the accumulated bilge to dig up some certified D-rank content. Today I have three things to share:</p>
<ol type="1">
<li>A method for finding treasure.</li>
<li>Infinite abandoned dungeons.</li>
<li>An underwhelming ‘physics’ ‘simulation’ for ‘secret’ purposes.</li>
</ol>
<section id="plunderplot" class="level3">
<h3 class="anchored" data-anchor-id="plunderplot">1. {plunderplot}</h3>
<p><code>locator()</code> is <a href="https://rdrr.io/r/graphics/locator.html">a funny base R function</a> that lets you click a point on a plot to retrieve its coordinates.</p>
<p>I had a little <code>locator()</code> phase on this blog: I used it to make <a href="https://www.rostrum.blog/index.html#category=pixeltrix">the {pixeltrix} package</a> for point-and-click editing of ‘pixel art’ and wrote a post about <a href="https://www.rostrum.blog/posts/2021-11-04-kanto-locator/">extracting coordinates from fictitious maps</a>.</p>
<p><a href="https://github.com/matt-dray/plunderplot">The {plunderplot} package</a> was an extension of the ‘data extraction’ idea, really. The <code>plunder()</code> function plots your image<sup>1</sup> and asks you to click and label the axes for calibration. Then you’re invited you to click points on the plot and get in return a dataframe of the coordinates.</p>
<p>So you’re plundering coordindates from a plot, right? Hence the name. Consequently, <a href="https://github.com/matt-dray/plunderplot/blob/main/README.md">the package README</a> uses some piratespeak to explain how it works. I won’t subject you to that here.</p>
<p>To keep with the theme, the example image here is a simple treasure map with treasure markers<sup>2</sup>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">treasure <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> plunderplot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plunder</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"resources/treasure.png"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p><img src="https://www.rostrum.blog/posts/2023-09-08-trash-combing/resources/treasure.png" class="img-fluid" style="width:100.0%" alt="Chart titled 'Treasure locations on Rectangle Island'. It's a plot with x limits of 0 to 100 and y limits of 0 to 50. There are concentric rectangles that look like an island in the sea. There are three red crosses on the island."></p>
<p>The console will talk to you during the process. You’ll be instructed to do things, one after the other. You calibrate the plot, select the points and optionally label them.</p>
<pre><code>Click x axis min
Click x axis max
Click y axis min
Click y axis max
Type value at x axis min: 0
Type value at x axis max: 100
Type value at y axis min: 0
Type value at y axis max: 50
Click points on the chart, press ESC when finished
Type a label for point 1: west
Type a label for point 2: centre
Type a label for point 3: east
Done</code></pre>
<p>And then you get your coordinates back:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">treasure</span></code></pre></div>
</div>
<pre><code>x        y labels
1 35.97651 32.19178   west
2 55.94714 23.15068 centre
3 61.96769 26.16438   east</code></pre>
<p>Except, well, this package has done before<sup>3</sup>. More than once. I was aware of <a href="https://github.com/mjlajeunesse/juicr">the {juicr} package</a>, which contains an interactive GUI for extracting data out of plots in scientific PDFs and that sort of thing, but there’s already CRAN packages with {plunderplot}’s functionality: <a href="https://CRAN.R-project.org/package=digitize">{digitize}</a> and <a href="https://cran.r-project.org/package=metaDigitise">{metaDigitise}</a>, which have been around for years.</p>
<p>So it’s not more useful than other tools… but I had fun coding it and I’ve used it myself for ‘real’ applications more than once.<sup>4</sup></p>
</section>
<section id="perlin-dungeon" class="level3">
<h3 class="anchored" data-anchor-id="perlin-dungeon">2. Perlin dungeon</h3>
<p>I made a toy <a href="https://en.wikipedia.org/wiki/Roguelike">roguelike</a> ‘game’ in <a href="https://www.rostrum.blog/index.html#category=r.oguelike">the {r.oguelike} package</a><sup>5</sup>. An important feature of games in this genre is a procedurally-generated tile-based dungeon map for your character to do an adventure in.</p>
<p>I came up with <a href="https://www.rostrum.blog/posts/2022-05-01-dungeon/">a basic system</a> to create convincing connected caverns, but there are many ways to create this kind of map. One method is to use <a href="https://en.wikipedia.org/wiki/Perlin_noise">Perlin noise</a>, which <a href="https://CRAN.R-project.org/package=ambient">the {ambient} package</a> can help you generate.</p>
<p>This <code>print_perlin_dungeon()</code> function never made it into the package, but it’s a pretty straightforward way of creating ‘dungeons’ with good balance between randomness and structure.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">print_perlin_dungeon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(</span>
<span id="cb5-2">    m,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matrix of perlin noise via ambient::noise_perlin()</span></span>
<span id="cb5-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">invert =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># flips tile positions (use set.seed before generating noise)</span></span>
<span id="cb5-4">) {</span>
<span id="cb5-5">  </span>
<span id="cb5-6">  tile_wall <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span></span>
<span id="cb5-7">  tile_floor <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span></span>
<span id="cb5-8">  </span>
<span id="cb5-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standardise noise values from 0 to 1</span></span>
<span id="cb5-10">  m_bin <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>((m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(m)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(m) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(m)))</span>
<span id="cb5-11">  </span>
<span id="cb5-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lay floor and wall tiles, flip if invert = TRUE</span></span>
<span id="cb5-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>invert) {</span>
<span id="cb5-14">    m_tiled <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(m_bin <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, tile_wall, tile_floor)</span>
<span id="cb5-15">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb5-16">    m_tiled <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(m_bin <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, tile_wall, tile_floor)</span>
<span id="cb5-17">  }</span>
<span id="cb5-18">  </span>
<span id="cb5-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Block off edges with wall tiles</span></span>
<span id="cb5-20">  m_tiled[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tile_wall</span>
<span id="cb5-21">  m_tiled[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(m_tiled)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tile_wall</span>
<span id="cb5-22">  m_tiled[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tile_wall</span>
<span id="cb5-23">  m_tiled[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(m_tiled), ] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tile_wall</span>
<span id="cb5-24">  </span>
<span id="cb5-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print to console, line-by-line</span></span>
<span id="cb5-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(m_tiled))) {</span>
<span id="cb5-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(m_tiled[i, ], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-28">  }</span>
<span id="cb5-29">  </span>
<span id="cb5-30">}</span></code></pre></div>
</div>
<p>The <code>noise_perlin()</code> function in the {ambient} package has lots of twiddly knobs for arguments. I can’t profess any science behind my choices here:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">noise_perlin</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">interpolator =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear"</span>,</span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fbm"</span>,</span>
<span id="cb6-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb6-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lacunarity =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb6-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gain =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb6-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pertubation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>,</span>
<span id="cb6-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pertubation_amplitude =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-11">)</span></code></pre></div>
</div>
<p>You can pass the matrix output from <code>noise_perlin()</code> to the <code>print_perlin_dungeon()</code> to print the map to the console.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print_perlin_dungeon</span>(m)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # . . # # # # # . . . . . . . # # . . . . # # . . . . . # 
# # # # # # # # # # # # # # # # # # # # # # # . . . . . . . . . . # # # # # # . . # 
# # # # # # # # # # # # # # # # # # # # # # # . . . . . . . . # # # # # # # # . . # 
# . # # # . # . . # # # # # # # # # # # # . . # . . . . . . . # # # # # # # # . . # 
# . # # # # . # # . # # # # # # # # # # # . # # . # # . . . # # # # # # # # # # # # 
# . . # # # # . . . . . # . # . # # # # . . . . . # # # # # # # # # # # # # # # # # 
# # # # # # # # # # . . . . # # # # # # # # # # # # # . . # # # # # # # # # # # # # 
# . # . # # # # # . . . . . . # # # # # # # # # # # # . . . # # # # # # # # # # # # 
# . . . . # # # # # # . . . . . # # # # . . . . # # # # # . . # # # # . . # # # # # 
# . . . . # # # # # # . . . # # # # # # # # . . . # . . . # # # # # # # . # # # # # 
# . # # . . # # # # # . . . . # # # # # # # # . . # # # # # # # # # # . . # # # . # 
# . # # . . # # # # # # # # . # # # # # . . . . . # # . . # # # # # # . . . . . # # 
# # # # # . . # # # # # # # . # # # # # . . . . . # # . . # # # # # # . . . . . # # 
# # # # # . . . # # # # # . . # # # # . . . . . . . # . . # # # # # # # . . . . . # 
# # # # # # . # # . # # # # # # # # # # # . . . . # # . . . # # # # # # . . . . # # 
# # # # # # # # # . . . . . # . # # # # # # # # # # . . . . . . # # # # # # # . # # 
# # # # # # # # # . . . . . # # # # # # # # # # # . . . . . . . # # # # # # # # # # 
# # # # # # # # # . . . . # # # # # # # # # # # . . . . . . . # # # # # # # # # # # 
# # # # # # # # # . . . # . . # # # # # # # . . # # # # . . . # # # # # # # # # # # 
# . . . # # # # # # # . # # # # # # # . # # . . # # # . . # # # # # # # # # # # # # 
# . . . . . . # # # # # # # # # # . . . . . . . . . . . . # # # # # # . # # # # # # 
# . . . . . # # # # # # # . . . # # # # . . . . . . . . # # # # # # # . . # # # # # 
# . . . . . . # # # # # # # . . . # # # . . . . . . . . # # # # # # # . . # # # # # 
# . . . . # . # # # # . # # # # . # # # . . . . . . # # . # # # # # # . . # # . # # 
# # . . . # . # # . # . # # . # # # # # # . . . . # # # # # # # # # # # . . . . # # 
# . . . . . . . . . # # # . . . # # # # # . . . # # # # # # # # # # # # # # . . . # 
# . . . # # . # # . # # . . . . # # # # # . . . # # # # # # # # # # # # # # . . . # 
# . . # # # . . . # # . . . . . # # # # # # . . # # # # # # # # # # # # # # . . . # 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # </code></pre>
</div>
</div>
<p>Of course, this will generate a new map every time you run it. I would say it’s major flaw is that it’s missing an open path between all the caverns, but otherwise it looks pretty cavelike to me. If I squint.</p>
<p>A version of this code is <a href="https://gist.github.com/matt-dray/fd5bf4b6560638e154353e4ec5c8b98a">in a GitHub Gist</a>. It might even have been in a tweet once.</p>
</section>
<section id="droplet-physics" class="level3">
<h3 class="anchored" data-anchor-id="droplet-physics">3. Droplet ‘physics’</h3>
<p>I experimented with this in support of a different (secret!) project that may never finish.</p>
<p>It’s a cross between the physics of water flowing under gravity and a pathfinding system. Except that description is way too grandiose. Basically, a droplet tile (<code>o</code>) ‘flows’ from top to bottom of a matrix defining a ‘map’ that you create, passing through empty tiles (<code>.</code>) and given ‘collisions’ with block tiles (<code>#</code>).</p>
<p>Here’s a basic map to start, defined as a matrix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">block <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span></span>
<span id="cb9-2">empty <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span></span>
<span id="cb9-3">drop  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span></span>
<span id="cb9-4"></span>
<span id="cb9-5">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb9-7">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb9-8">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb9-9">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb9-10">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb9-11">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb9-12">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb9-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,</span>
<span id="cb9-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb9-15">)</span>
<span id="cb9-16"></span>
<span id="cb9-17">m[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> block</span>
<span id="cb9-18">m[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> empty</span>
<span id="cb9-19">m[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> drop</span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(m)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,] "#"  "o"  "."  "."  "." 
[2,] "#"  "#"  "."  "."  "." 
[3,] "#"  "#"  "#"  "."  "." 
[4,] "."  "."  "."  "."  "#" 
[5,] "."  "."  "."  "#"  "#" 
[6,] "#"  "."  "#"  "#"  "#" 
[7,] "#"  "#"  "#"  "#"  "#" </code></pre>
</div>
</div>
<p>You can make this map more or less complicated. You can even use <a href="https://github.com/matt-dray/pixeltrix">{pixeltrix}</a> to make a map by interactively clicking squares in a plot window to receive back a matrix.</p>
<p>The code to run ‘the simulation’ is just a <code>repeat</code> loop that wipes and draws to the console following some basic <code>if</code>s. It will <code>break</code> when the droplet comes to a stop.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">repeat</span> {</span>
<span id="cb11-2">  </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\014</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-4">  </span>
<span id="cb11-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (row <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(m))) {</span>
<span id="cb11-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(m[row, ], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb11-7">  }</span>
<span id="cb11-8">  </span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-10">  </span>
<span id="cb11-11">  droplet_i      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> drop)</span>
<span id="cb11-12">  droplet_i_save <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> droplet_i</span>
<span id="cb11-13">  below_i        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> droplet_i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-14">  </span>
<span id="cb11-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (m[below_i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> empty) {</span>
<span id="cb11-16">    m[droplet_i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> empty</span>
<span id="cb11-17">    m[below_i]   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> drop</span>
<span id="cb11-18">  }</span>
<span id="cb11-19">  </span>
<span id="cb11-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (m[below_i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> block) {</span>
<span id="cb11-21">    </span>
<span id="cb11-22">    left_i  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> droplet_i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(m)</span>
<span id="cb11-23">    right_i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> droplet_i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(m)</span>
<span id="cb11-24">    </span>
<span id="cb11-25">    is_left_open  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb11-26">    is_right_open <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb11-27">    </span>
<span id="cb11-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (m[left_i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> empty)  is_left_open  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb11-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (m[right_i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> empty) is_right_open <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb11-30">    </span>
<span id="cb11-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (is_left_open <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> is_right_open) {</span>
<span id="cb11-32">      sampled_direction_i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(left_i, right_i), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-33">      m[droplet_i]           <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> empty</span>
<span id="cb11-34">      m[sampled_direction_i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> drop</span>
<span id="cb11-35">    }</span>
<span id="cb11-36">    </span>
<span id="cb11-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (is_left_open <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>is_right_open) {</span>
<span id="cb11-38">      m[droplet_i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> empty</span>
<span id="cb11-39">      m[left_i]    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> drop</span>
<span id="cb11-40">    }</span>
<span id="cb11-41">    </span>
<span id="cb11-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>is_left_open <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> is_right_open) {</span>
<span id="cb11-43">      m[droplet_i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> empty</span>
<span id="cb11-44">      m[right_i]   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> drop</span>
<span id="cb11-45">    }</span>
<span id="cb11-46">    </span>
<span id="cb11-47">  }</span>
<span id="cb11-48">  </span>
<span id="cb11-49">  droplet_i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> drop)</span>
<span id="cb11-50">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (droplet_i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> droplet_i_save) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb11-51">}</span></code></pre></div>
</div>
<p>Here’s a little gif showing how this basic example looks in the console:</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-09-08-trash-combing/resources/droplet.gif" class="img-fluid figure-img" style="width:25.0%" alt="Animation showing a text matrix of tiles representing empty space (a period mark), a block (a hashmark) or a droplet (the letter 'o'), which is falling from the top to the bottom of the matrix, given collisions with the block tiles. It coimes to rest near the bottom in a well made of surrounding blocks."></p>
</figure>
</div>
<p>Alas, I am an untrustworthy narrator! The droplet will scooch left and right forever on a flat surface. The animation only stops if the droplet is trapped at the lowest point, like in the gif above. No one really understands physics though, right, so it’s basically fine.</p>
<p>I think I wanted to have the droplet travel diagonally instead of across and down; try introducing tiles with different properties (e.g.&nbsp;angled, like <code>\</code> and <code>/</code>); and have the ability to add more than one droplet at a time. I’ll probably explain eventually about why I made this subpar toy<sup>6</sup>.</p>
<p>You can find a version of this code <a href="https://gist.github.com/matt-dray/0f4fba9a7e57bdb093d0b9433a983c61">in a GitHub gist</a> if you really must.</p>
</section>
</section>
<section id="now-wash-your-hands" class="level2">
<h2 class="anchored" data-anchor-id="now-wash-your-hands">Now wash your hands</h2>
<p>Nothing here is going to change your life; I just wanted to set these ideas free for purposes of spiritual atonement.</p>
<p>For fun toys and proper R noodlings you can always check out anything by Mike (<a href="https://coolbutuseless.github.io/">coolbutuseless</a>), or stuff like <a href="https://tomaztsql.wordpress.com/">Tomaz</a>‘s ’Little Useless-Useful’ series. Far more fruitful.</p>
<p>Beware: this may be the first post in a series. I’m not afraid to put my hand back in the waste disposal unit. Are you?</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-09-09 09:57:43 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     ambient_1.0.2    
 [5] cli_3.6.1         tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0
 [9] yaml_2.3.7        rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7   
[13] xfun_0.39         digest_0.6.33     rlang_1.1.1       evaluate_0.21    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Such as a fictitious <a href="https://en.wikipedia.org/wiki/Sodor_(fictional_island)">map of Sodor</a> or a chart over time over <a href="https://www.youtube.com/watch?v=yNaTZV8qS1I">Thomas the Tank mods</a> in popular videogames. Whatever you like.↩︎</p></li>
<li id="fn2"><p>This just looks like a screenshot of treasure locations from <em>The Legend of Zelda: The Windwaker</em>, which I assume I was replaying at the time.↩︎</p></li>
<li id="fn3"><p>I’ve reinvented the wheel more than once, like for <a href="https://github.com/matt-dray/coloratio">{coloratio}</a>/<a href="https://CRAN.R-project.org/package=savonliquide">{savonliquide}</a>, <a href="https://github.com/matt-dray/badgr">{badgr}</a>/<a href="https://CRAN.R-project.org/package=badger">{badger}</a> and <a href="https://github.com/matt-dray/trapinch">{trapinch}</a>/<a href="https://github.com/ashbaldry/pokeapi">{pokeapi}</a>.↩︎</p></li>
<li id="fn4"><p>*Breathes in deep breath of copium.*↩︎</p></li>
<li id="fn5"><p><a href="https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/">R is a game engine, fight me</a>.↩︎</p></li>
<li id="fn6"><p>Or not. You can’t tell me what to do.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>plunderplot</category>
  <category>r</category>
  <category>r.oguelike</category>
  <guid>https://www.rostrum.blog/posts/2023-09-08-trash-combing/index.html</guid>
  <pubDate>Fri, 08 Sep 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Autodetect Quarto formats with {quartostamp}. Or not.</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-09-01-quarto-yaml-detect/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-09-01-quarto-yaml-detect/resources/uno.png" class="img-fluid figure-img" style="width:60.0%" alt="Uno meme. On left, a card says 'think for 2 secs before coding or draw 25'. On the right is a man, labelled 'me' holding a huge number of cards."></p>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I wrote a cunning solution to fix an issue in <a href="https://matt-dray.github.io/quartostamp/">the {quartostamp} R package</a>. Spoiler: it was completely unnecessary. A lesson!</p>
</section>
<section id="put-it-on-my-tab" class="level2">
<h2 class="anchored" data-anchor-id="put-it-on-my-tab">Put it on my tab</h2>
<p>{quartostamp} is <a href="https://matt-dray.github.io/quartostamp/">an R package</a> that contains an RStudio Addin to <a href="https://www.rostrum.blog/posts/2022-08-11-quartostamp-snorkel/">help insert and modify code</a> in Quarto documents. I originally made it to help me write <a href="https://quarto.org/docs/presentations/">Quarto presentations</a>: I kept forgetting the correct syntax for things like inserting speaker notes and column layouts.<sup>1</sup></p>
<p>Zoë made a great, subtle point <a href="https://github.com/matt-dray/quartostamp/issues/10">in a GitHub issue</a>: the ‘Insert Tabset’ option uses level-3 Markdown headers (<code>###</code>) for its tab titles, but <a href="https://quarto.org/docs/interactive/layout.html#tabset-panel">shouldn’t they be level 2</a> (<code>##</code>)?</p>
<p>To illustrate, here’s what {quartostamp} was inserting for a tabset:</p>
<pre><code>::: {.panel-tabset}

### Tab A

Content for Tab A

### Tab B

Content for Tab B

:::</code></pre>
<p>Which would render like this:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Tab A</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Tab B</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p>Content for Tab A</p>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>Content for Tab B</p>
</div>
</div>
</div>
<p>So <code>### Tab A</code> in the YAML should be <code>## Tab A</code>, for example.</p>
<p>I think I’d used level 3 headers because second-level headers demarcate new slides in a Quarto presentation and <a href="https://quarto.org/docs/presentations/revealjs/#tabsets">the specific guidance for presentations</a> appears to suggest <code>###</code>.</p>
<p>So, obviously, an instance of <code>##</code> in a tabset header could break someone’s slides and I should come up with some convoluted solution, right? What could go wrong? (This is a literary technique called ‘foreshadowing’, dear reader.)</p>
</section>
<section id="a-stab-at-the-tabs" class="level2">
<h2 class="anchored" data-anchor-id="a-stab-at-the-tabs">A stab at the tabs</h2>
<p>So, what to do? It seemed as though there were three options:</p>
<ol type="1">
<li>Have two versions of the tabset function that insert <code>##</code> or <code>###</code>.</li>
<li>Switch to <code>##</code> only .</li>
<li>Retain only <code>###</code>.</li>
</ol>
<p>Each is a relatively easy change. But number 1 is a non-starter because it’s confusing from a user’s perspective. Number 2 would disrupt people making presentations; they’d have to manually add the extra <code>#</code> each time. Number 3 is probably the least worst, but might be surprising for general Quarto users.</p>
<p>So, a bonus idea:</p>
<ol start="4" type="1">
<li>Adapt the heading level automatically, based on the document format.</li>
</ol>
<p>That sounds complicated. Is it?</p>
</section>
<section id="a-dash-to-hash" class="level2">
<h2 class="anchored" data-anchor-id="a-dash-to-hash">A dash to hash</h2>
<p>Quarto docs start with a text-based ‘YAML header’. This contains a bunch of key-value metadata like the document title, author, etc, between ‘fences’ given by triple hyphens (<code>---</code>). At simplest:</p>
<pre><code>---
format: revealjs
---</code></pre>
<p>Or more likely, something nested like this:</p>
<pre><code>---
title: Chocolate Hobnobs
subtitle: The best biscuits
author: Matt Dray
format:
  revealjs: 
    theme: [default, biscuits.scss]
    menu: false
title-slide-attributes:
  data-background-image: hobnob.png
---</code></pre>
<p>So we have to somehow read the YAML header of the Quarto file we’re working on and then extract the format information to see if it’s a presentation or not.</p>
<p>So I ended up doing this:</p>
<ol type="1">
<li>Detect information about the active Quarto document in the RStudio script pane with <code>rstudioapi::getActiveDocumentContext()</code>.</li>
<li>Isolate the text content.</li>
<li>Detect the lower limit of the document’s YAML header (i.e.&nbsp;the second, closing instance of the <code>---</code> YAML fence).</li>
<li>Use <code>yaml::yaml.load()</code> to parse the YAML header.</li>
<li>Detect if a <code>format</code> key-value pair is present</li>
<li>Detect if at least one listed format is <code>revealjs</code> (the Javascript library Quarto uses to make presentations).</li>
<li>If yes, construct a level 3 header (<code>###</code>), otherwise level 2 (<code>##</code>).</li>
<li>Insert the tabset code into the Quarto file.</li>
</ol>
</section>
<section id="hash-in-the-trash" class="level2">
<h2 class="anchored" data-anchor-id="hash-in-the-trash">Hash in the trash</h2>
<p>Except guess what? The presence of <code>##</code> inside tabset code actually doesn’t create a new slide. I should’ve tested this before I started writing a solution. I think Quarto checks context: if Markdown is provided within <code>:::</code> fences then it’s evaluated in that context. That makes sense!</p>
<details>
<summary>
Click for a Quarto reprex
</summary>
<p>Pop this in a qmd file and hit ‘render’.</p>
<pre><code>---
title: "Testing tabset titles"
format: revealjs
---

## Using level 3

::: {.panel-tabset}

### Tab A

Content for Tab A

### Tab B

Content for Tab B

:::

## Using level 2

::: {.panel-tabset}

## Tab A

Content for Tab A

## Tab B

Content for Tab B

:::
</code></pre>
</details>
<p>On the plus side, I had fun solving the ‘problem’ and thinking creatively to extract and parse the YAML and write logic to handle each case. I don’t claim it’s optimised, but I’ve added it below for posterity.</p>
<p>First, a function that uses {rstudioapi} to read the active Quarto doc in the RStudio source pane and outputs <code>TRUE</code> if it’s a revealjs presentation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">.check_revealjs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb5-2"></span>
<span id="cb5-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch lines from the source</span></span>
<span id="cb5-4">  active_doc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rstudioapi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getActiveDocumentContext</span>()</span>
<span id="cb5-5">  contents <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> active_doc[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contents"</span>]]</span>
<span id="cb5-6"></span>
<span id="cb5-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify the lines that compose the YAML header</span></span>
<span id="cb5-8">  yaml_end_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(contents <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"---"</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb5-9">  yaml_only <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> contents[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(yaml_end_index)]</span>
<span id="cb5-10"></span>
<span id="cb5-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the YAML header, detect 'format' key</span></span>
<span id="cb5-12">  yaml_parsed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> yaml<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">yaml.load</span>(yaml_only)</span>
<span id="cb5-13">  has_format <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"format"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(yaml_parsed)</span>
<span id="cb5-14"></span>
<span id="cb5-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Detect if the format is revealjs</span></span>
<span id="cb5-16">  </span>
<span id="cb5-17">  is_revealjs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default</span></span>
<span id="cb5-18"></span>
<span id="cb5-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (has_format) {</span>
<span id="cb5-20"></span>
<span id="cb5-21">    formats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> yaml_parsed[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"format"</span>]]</span>
<span id="cb5-22"></span>
<span id="cb5-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format structure could differ, depends on YAML nesting</span></span>
<span id="cb5-24">    formats_is_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(formats, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>)</span>
<span id="cb5-25">    formats_is_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(formats, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>)</span>
<span id="cb5-26"></span>
<span id="cb5-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (formats_is_vec) {</span>
<span id="cb5-28">      is_revealjs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"revealjs"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> formats</span>
<span id="cb5-29">    }</span>
<span id="cb5-30"></span>
<span id="cb5-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (formats_is_list) {</span>
<span id="cb5-32">      is_revealjs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"revealjs"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(formats)</span>
<span id="cb5-33">    }</span>
<span id="cb5-34"></span>
<span id="cb5-35">  }</span>
<span id="cb5-36"></span>
<span id="cb5-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(is_revealjs)</span>
<span id="cb5-38"></span>
<span id="cb5-39">}</span></code></pre></div>
</div>
<p>The output from <code>.check_revealjs()</code> could then be used in a modified <code>stamp_tabset()</code> (the function that powers the ‘Insert Tabset’ option from the Addins menu) where <code>TRUE</code> inserts a level 3 header, otherwise a level 2 header.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">stamp_tabset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb6-2"></span>
<span id="cb6-3">  is_revealjs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.check_revealjs</span>()</span>
<span id="cb6-4"></span>
<span id="cb6-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set headers to level 2 by default</span></span>
<span id="cb6-6">  heading_level <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-7"></span>
<span id="cb6-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set as level 3 if the active doc is a revealjs presentation</span></span>
<span id="cb6-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (is_revealjs) {</span>
<span id="cb6-10">    heading_level <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb6-11">  }</span>
<span id="cb6-12"></span>
<span id="cb6-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate tabset header Markdown depending on doc format</span></span>
<span id="cb6-14">  tabset_heading_md <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>, heading_level), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb6-15"></span>
<span id="cb6-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Insert tabset code with appropriate heading level</span></span>
<span id="cb6-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.replace_text</span>(</span>
<span id="cb6-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pre =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb6-19">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"::: {.panel-tabset}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb6-20">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb6-21">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(tabset_heading_md, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab A</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb6-22">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-23">    ),</span>
<span id="cb6-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">body =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Content for Tab A</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb6-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">post =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb6-26">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb6-27">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(tabset_heading_md, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab B</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb6-28">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb6-29">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Content for Tab B</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb6-30">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb6-31">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":::</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-32">    )</span>
<span id="cb6-33">  )</span>
<span id="cb6-34">}</span></code></pre></div>
</div>
<p>You can see the actual current state of the code in <a href="https://github.com/matt-dray/quartostamp">the matt-dray/quartostamp GitHub repo</a>, which also has the source for the <code>.replace_text()</code> function show in the code block above.</p>
</section>
<section id="hash-and-burn" class="level2">
<h2 class="anchored" data-anchor-id="hash-and-burn">Hash and burn</h2>
<p>Which leads us to a bonus bonus idea:</p>
<ol start="5" type="1">
<li>Merge Zoë’s pull request that simply changes <code>###</code> to <code>##</code>.</li>
</ol>
<p>And so {quartostamp} version 0.1.1 is now available!</p>
<p>I look forward to further developments. But less so for ‘antidevelopments’ like these, lol.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-09-04 12:03:31 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        
 [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       
 [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        
[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The package got some great feature requests: <a href="https://github.com/matt-dray/quartostamp/issues/1">Indrajeet asked</a> for callout boxes and <a href="https://github.com/matt-dray/quartostamp/issues/6">Zoë suggested</a> that the package could modify existing text as well as insert skeleton code.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>quarto</category>
  <category>quartostamp</category>
  <category>r</category>
  <category>rstudio-addins</category>
  <category>yaml</category>
  <guid>https://www.rostrum.blog/posts/2023-09-01-quarto-yaml-detect/index.html</guid>
  <pubDate>Thu, 31 Aug 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Conscious uncoupling with {blogdown}</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-08-26-cheerio-blogdown/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2023-08-26-cheerio-blogdown/resources/bdq-homepages.png" class="img-fluid" style="width:100.0%" alt="A browser window containing the new Quarto version of this blog, overlaying a window with the old blogdown version."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>Here you go, the customary ‘i PoRtEd My R bLoG’ meta-post.</p>
</section>
<section id="quartoh-no" class="level2">
<h2 class="anchored" data-anchor-id="quartoh-no">Quartoh-no</h2>
<p>Yes, wow, porting {blogdown} to Quarto, such bravery.</p>
<p>The <a href="https://github.com/matt-dray/rostrum-blog">old source code</a> is now archived on GitHub. The new source code is in a <a href="https://github.com/matt-dray/rostrum-blog-2">separate repo</a>. There’s still <a href="https://github.com/matt-dray/rostrum-blog-2/issues">some issues</a> to sort out, but the site is now live on the worldwide web at <a href="https://www.rostrum.blog">doubleyoo double-doubleyoo full-stop rostrum full-stop blog</a><sup>1</sup>.</p>
<p>This post is not a tutorial and is not exhaustive; it’s just a grab-bag of notes for when I (absolutely inevitably) forget how I did certain things. I may add some other things later if there’s teething issues I haven’t uncovered yet.</p>
</section>
<section id="the-struggle-is-real" class="level2">
<h2 class="anchored" data-anchor-id="the-struggle-is-real">The struggle is real</h2>
<p>Things went pretty well, basically. It was just boring and slow<sup>2</sup> to go through over 150 posts and perform (mostly) little corrections here and there. Herefollows some minor struggles.</p>
<section id="load-bearing-posts" class="level3">
<h3 class="anchored" data-anchor-id="load-bearing-posts">Load-bearing posts</h3>
<p>You could copy-paste your old {blogdown} source code into the structure and style required by Quarto. But why spend 10 minutes doing that when I could spend many more minutes creating a package to do it?<sup>3</sup> This is a little manoeuvre I call ‘procrastination-driven development’. The outcome was my helper package <a href="https://github.com/matt-dray/bd2q">{bd2q}</a>, which I <a href="https://www.rostrum.blog/posts/2023-05-07-bd2q/">wrote about before</a>. It was useful for some big structural changes and also some specific line edits to the large number of posts I wanted to port and re-render.</p>
</section>
<section id="twtters-ex-api" class="level3">
<h3 class="anchored" data-anchor-id="twtters-ex-api">Tw*tter’s ex-API</h3>
<p>I have some posts that used the Twitter API, like one about <a href="https://www.rostrum.blog/posts/2022-01-14-wordle/">Wordle</a> and a bunch about <a href="https://www.rostrum.blog/index.html#category=londonmapbot">londonmapbot</a>. I ended up hardcoding the outputs in these posts because Twitter is utterly borked. One <a href="https://www.rostrum.blog/posts/2020-12-20-londonmapbot-leaflet/">bunglesome post</a> used API data for an interactive leaflet map, but I had failed to save the intermediate data set. To retrieve the data, I had to extract it from the rendered leaflet HTML (!) with some garish string manipulation. Never again.</p>
</section>
<section id="github-inactions" class="level3">
<h3 class="anchored" data-anchor-id="github-inactions">GitHub (In)Actions</h3>
<p>I have <a href="https://github.com/matt-dray/rostrum-blog-2/blob/main/README.md">a dynamic, stats-laden README</a> for the blog that re-renders <a href="https://www.rostrum.blog/posts/2021-04-14-gha-readme/">when I push to the repo</a>. Famously, GitHub Actions never works first time. This time it was because you have to go into Settings &gt; Actions &gt; General on GitHub and <a href="https://stackoverflow.com/a/75308228">set ‘Workflow permissions’ to ‘Read and write permissions’</a>. For some reason.</p>
</section>
<section id="trough-of-a-wav" class="level3">
<h3 class="anchored" data-anchor-id="trough-of-a-wav">Trough of a WAV</h3>
<p>I have some little HTML audio whatsits on some pages, like the one about <a href="https://www.rostrum.blog/posts/2021-02-02-sonify-covid/">sonifying covid data</a>. Despite putting .wav files in the appropriate directory, the sounds simply wouldn’t play. It’s because you need to specify <code>resources:</code> in your <a href="https://github.com/matt-dray/rostrum-blog-2/blob/main/posts/2021-02-02-sonify-covid/index.qmd#L10-L14">YAML header</a> and then list the path to each one (for me this would be like <code>- resources/roblox-oof.wav</code>). The file is then correctly copied over to the <code>_site/</code> folder for deployment.</p>
</section>
<section id="environmental-disaster" class="level3">
<h3 class="anchored" data-anchor-id="environmental-disaster">Environmental disaster</h3>
<p>To appease nerds, each post on the old blog had a record of the R and package versions used to render it. I did this by calling the session info in an expandable <code>&lt;details&gt;</code> block after a page divider (<code>---</code>). This looked a bit awkward when I tried it in Quarto.</p>
<p>Took me a while to realise: you can add arbitrary sections to each post’s appendix section with <code>{.appendix}</code> next to its heading. By default, my Quarto appendices have license information and footnotes, but I added an ‘environment’ section with the clickable session info in it. It’s written like this<sup>4</sup>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">## Environment {.appendix}</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;details&gt;&lt;summary&gt;</span>Session info<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/summary&gt;</span></span>
<span id="cb1-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r sessioninfo, eval=TRUE, echo=FALSE}</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Last rendered:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">usetz =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sessionInfo</span>()</span>
<span id="cb1-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;/details&gt;</span></span></code></pre></div>
<p>I also introduced a ‘last rendered’ time before the session info. You can add this to the top of the post along with the author and publish date, but I didn’t want to put so much emphasis on it.</p>
<p>You can see an example of this at the bottom of this post, of course.</p>
</section>
<section id="misdirection" class="level3">
<h3 class="anchored" data-anchor-id="misdirection">Misdirection</h3>
<p>The old blog had URLs in the form <code>rostrum.blog/YYYY/MM/DD/postname</code>. Quarto does it like <code>rostrum.blog/posts/YYYY-MM-DD-postname</code>. I thought each Quarto post might need to be placed in a folder structure like <code>/YYYY/MM/DD/postname.qmd</code> to achieve the old URL style. This would be awkward to work with.</p>
<p>Aha, actually you can write <a href="https://github.com/matt-dray/rostrum-blog-2/blob/main/_redirects">a little <code>_redirects</code> text file</a> with a line for each old-to-new path. Given the number of posts, I wrote a little script to generate this file<sup>5</sup>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">redirect_to <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.dirs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posts"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>))</span>
<span id="cb2-2"></span>
<span id="cb2-3">date_rx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d{4}-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d{2}-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d{2}"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># YYYY-MM-DD format</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract date from path to Quarto post</span></span>
<span id="cb2-6">date_portion <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regexpr</span>(date_rx, redirect_to) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regmatches</span>(redirect_to, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> _) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> _)</span>
<span id="cb2-9"></span>
<span id="cb2-10">name_portion <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posts/"</span>, date_rx, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, redirect_to)</span>
<span id="cb2-11"></span>
<span id="cb2-12">redirect_from <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>, date_portion, name_portion)</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'From' and 'to' paths on same line, separated by a space</span></span>
<span id="cb2-15">mapping <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb2-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(redirect_from, redirect_to, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>),</span>
<span id="cb2-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-18">)</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(mapping, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_redirects"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dyk cat() can save files?</span></span></code></pre></div>
</div>
<p>Originally I failed to include the leading slash in the <code>redirect_from</code> string, which would result in trying to redirect from the nonsense <code>rostrum.blogYYYY/MM/DD/postname</code> instead of <code>rostrum.blog/YYYY/MM/DD/postname</code>. Subtle.</p>
<p>In <a href="https://github.com/matt-dray/rostrum-blog-2/blob/main/index.qmd">the new site’s <code>index.qmd</code></a> I also added a snippet to copy over the <code>_redirects</code> file into the <code>_site/</code> folder on render, ready for deployment.</p>
</section>
<section id="cat-egg-or-rice" class="level3">
<h3 class="anchored" data-anchor-id="cat-egg-or-rice">Cat egg or rice?</h3>
<p>As I went through each old post, I removed all the ‘tags’ from the YAML and consolidated some of them into ‘categories’. I am still not happy with these categories. How can I extract them all for review? I’m sure there’s an easier way than regexing<sup>6</sup> them out, but this hacky thing works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">posts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posts"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".qmd"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4">get_categories <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(post_path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore_rx =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"resources"</span>) {</span>
<span id="cb3-5">  </span>
<span id="cb3-6">  post_lines <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(post_path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb3-7">  </span>
<span id="cb3-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract between the 'categories' YAML section and closing fence</span></span>
<span id="cb3-9">  cats_start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(post_lines <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"categories:"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-10">  cats_end <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(post_lines <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"---"</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-11">  </span>
<span id="cb3-12">  cats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb3-13">  </span>
<span id="cb3-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ignore other YAML sections and content after the categories</span></span>
<span id="cb3-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(cats_start) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(cats_end) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb3-16">    cats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  - "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, post_lines[cats_start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>cats_end])</span>
<span id="cb3-17">    cats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cats[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(ignore_rx, cats)]</span>
<span id="cb3-18">  }</span>
<span id="cb3-19">  </span>
<span id="cb3-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(cats)</span>
<span id="cb3-21">  </span>
<span id="cb3-22">}</span>
<span id="cb3-23"></span>
<span id="cb3-24">cats_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(posts, \(post) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_categories</span>(post)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dirname</span>(post_names))</span>
<span id="cb3-26"></span>
<span id="cb3-27">all_cats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(cats_list)</span>
<span id="cb3-28"></span>
<span id="cb3-29"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(all_cats) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decreasing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>Oof, mostly just an excuse to use ‘cats’ as a variable name I think, but maybe this would be easier with some Quarto command or with the {yaml} package or something?</p>
<div class="tip">
<p> <b>Note</b></p>
<p>Indeed. In <a href="https://www.rostrum.blog/posts/2023-09-01-quarto-yaml-detect/">a more recent blogpost</a> I ended up using {yaml} for extracting a Quarto doc’s format from its YAML.</p>
</div>
</section>
<section id="goated-netlify" class="level3">
<h3 class="anchored" data-anchor-id="goated-netlify">Goated Netlify</h3>
<p>I remember struggling a bit when setting up <a href="https://www.netlify.com/">Netlify</a> to deploy the blog five years ago, but it seemed easier when I later <a href="https://www.rostrum.blog/posts/2020-12-08-postcard/">set up my personal page</a>. I dithered a little before setting up this new Quarto version of the blog, though. What if I click the wrong thing and the site disappears forever? Ah well.</p>
<p>But actually it was straightforward. The old and new blog are separate sites in my Netlify account and I just had to remove the ‘rostrum.blog’ domain from the old one and activate it on the new, which is under Site configuration &gt; Domain management &gt; Domains.</p>
<p>It was also easy to re-add <a href="https://www.rostrum.blog/posts/2020-09-16-goatcounter-blogdown/">Goatcounter</a>—which counts but doesn’t track visitors—under Site configuration &gt; Build and deploy &gt; Post processing &gt; Snippet injection. I pasted in a Goatcounter-provided snippet so it’s injected before <code>&lt;/body&gt;</code>.</p>
</section>
</section>
<section id="selling-out" class="level2">
<h2 class="anchored" data-anchor-id="selling-out">Selling out</h2>
<p>I picked up a lot of miscellaneous tips and tricks from <a href="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/">Danielle Navarro</a>, <a href="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html">Albert Rapp</a> and <a href="https://quarto.org/docs/websites/website-blog.html">the Quarto docs</a> themselves. Do check those out.</p>
<p>Above all, thank you Yihui and contributors for {blogdown}. It felt cool to be a hipster {blogdown} user<sup>7</sup>. I held out for over five years, but the time has come and I have become… mainstream. The horror.</p>
<p>But how can I complain? A mid-life crisis precipitated by a blog transition is exactly where I saw this going, to be honest.</p>
<p>Hopefully I won’t be changing platforms again any time soon. But the posts are always ported first from my brain to the blog, so I could simplify the process by just… keeping them in my head? You’re preemptively welcome.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-09-04 11:59:19 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        
 [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       
 [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        
[13] digest_0.6.33     rlang_1.1.1       fontawesome_0.5.1 evaluate_0.21    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><a href="https://youtu.be/1NjTWvl8x-U?feature=shared&amp;t=119">CALL NOW</a>.↩︎</p></li>
<li id="fn2"><p>I began <a href="https://github.com/matt-dray/rostrum-blog-2/commits/main">in April 2023</a>. I took my sweet time because I knew it would be dull, but also because I recently fell down an <a href="https://www.youtube.com/@ActionButton">Action Button</a> YouTube rabbit hole. I also got into the geocaching scene, both IRL (9 caches found, legend) and digitally, in the form of Zelda TOTK (‘YA-HA!’).↩︎</p></li>
<li id="fn3"><p>Also check out Antoine’s <a href="https://github.com/moodymudskipper/editor">{editor} package</a> that can reach into a file and make alterations. I wish I’d had this before I bodged together some similar functionality in {bd2q}.↩︎</p></li>
<li id="fn4"><p>If you’re wondering how to show a verbatim chunk in a Quarto doc without rendering it, there’s <a href="https://quarto.org/docs/computations/execution-options.html#unexecuted-blocks">some documentation</a>.↩︎</p></li>
<li id="fn5"><p>I like the ‘modern base’ aesthetic of the <code>date_portion</code> object here. Holdup, brb, just going to add ‘Modern Base Core’ to the <a href="https://aesthetics.fandom.com/wiki/Aesthetics_Wiki">Aesthetics Wiki</a>.↩︎</p></li>
<li id="fn6"><p>I desperately wanted to spell this ‘regexxing’, but ‘x’ appearing twice makes it look illicit.↩︎</p></li>
<li id="fn7"><p>At least that’s how I felt. Please don’t shatter my precious illusions.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>blogdown</category>
  <category>quarto</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2023-08-26-cheerio-blogdown/index.html</guid>
  <pubDate>Fri, 25 Aug 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Object of type closure can shut up</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-08-19-find-bad-names/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2023-08-19-find-bad-names/resources/paste.png" class="img-fluid" style="width:100.0%" alt="A string of R code written in Comic Sans that says 'paste <- paste(paste)'."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I wrote an R function to help identify variable names that already exist as function names, like in <code>c &lt;- 1</code> or <code>head &lt;- "x"</code>.</p>
</section>
<section id="naming-and-shaming" class="level2">
<h2 class="anchored" data-anchor-id="naming-and-shaming">Naming and shaming</h2>
<p>Naming things is hard, yes, but <code>data</code> is a short and sensible choice for a dataframe, right?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">data[data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>column <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in data$column: object of type 'closure' is not subsettable</code></pre>
</div>
</div>
<p>Oh, silly me, I tried to subset a dataframe called <code>data</code> without actually, y’know, creating it first.</p>
<p>This is <a href="https://stackoverflow.com/search?q=%22object+of+type+%27closure%27+is+not+subsettable%22+%5Br%5D">a classic stumbling block</a> in R. In short, there’s already a function in base R called <code>data()</code> (!) and I ended up trying subset it. But you can’t subset a function, hence the error.</p>
<p>Here’s what happens if you subset a non-existent object that has a name that’s different to any existing functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">x[x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>column <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in eval(expr, envir, enclos): object 'x' not found</code></pre>
</div>
</div>
<p>‘Object not found’ is a much more helpful error message.</p>
</section>
<section id="whats-in-a-name" class="level2">
<h2 class="anchored" data-anchor-id="whats-in-a-name">What’s in a name?</h2>
<p>So it’s not a big deal, but using existing function names as variable names is a <a href="https://en.wikipedia.org/wiki/Code_smell">code smell</a>. Especially if they’re frequently used functions from base R like <code>head()</code>, <code>str()</code>, <code>paste()</code>, etc<sup>1</sup>.</p>
<p>But R doesn’t stop you from using these names. In general, R is pretty loose with variable naming, though you can’t use a small set of <a href="https://search.r-project.org/R/refmans/base/html/Reserved.html">reserved words</a> like <code>TRUE</code>, <code>if</code> or <code>NA</code> <sup>2</sup>.</p>
<p>For example, here we can call the <code>c()</code> function to see its (very short) definition. But using it as a variable name obscures the function definition.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">c  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this refers to the function</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function (...)  .Primitive("c")</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-2">c  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this now refers to the variable!</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(c)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tidy up by removing variable</span></span></code></pre></div>
</div>
<p>Can we write a generic function to identify if some code contains ‘bad’ variable names in this way?</p>
</section>
<section id="symbolic-gesture" class="level2">
<h2 class="anchored" data-anchor-id="symbolic-gesture">Symbolic gesture</h2>
<p>Of course. I’ve made a function called <code>find_var_names()</code>. I’m certain the functionality already exists; consider this a thought experiment.</p>
<p>You provide (a) a string of code to evaluate<sup>3</sup> and (b) a vector of names to avoid. The code is parsed with <code>getparsedata(parse())</code> to identify variable names<sup>4</sup>. It checks for a <code>SYMBOL</code> token followed by the assignment operators <code>&lt;-</code> or <code>=</code><sup>5</sup>, or preceded by an assignment operator in the case of <code>-&gt;</code><sup>6</sup> (i.e.&nbsp;<code>*_ASSIGN</code> tokens). These variable names are then compared to the set of names provided.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">find_var_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(code_string, names_to_find) {</span>
<span id="cb10-2">  </span>
<span id="cb10-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the string of code to identify R 'tokens'</span></span>
<span id="cb10-4">  parsed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getParseData</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> code_string, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keep.source =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb10-5">  parsed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> parsed[parsed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>text <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, ]</span>
<span id="cb10-6">  </span>
<span id="cb10-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify subsequent tokens (to help find 'x' in x &lt;- 1 and x = 1)</span></span>
<span id="cb10-8">  parsed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>next_token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb10-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(parsed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>token[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(parsed)], <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>)</span>
<span id="cb10-10">  </span>
<span id="cb10-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify prior token (to help find 'x' in 1 -&gt; x)</span></span>
<span id="cb10-12">  parsed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>last_token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb10-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>, parsed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>token[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(parsed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb10-14">  </span>
<span id="cb10-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify variable names with left-assignment</span></span>
<span id="cb10-16">  lassign <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb10-17">    parsed[parsed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>token <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SYMBOL"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ASSIGN"</span>, parsed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>next_token), ]</span>
<span id="cb10-18">  </span>
<span id="cb10-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify row index for variable names following right-assignment</span></span>
<span id="cb10-20">  rassign_i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb10-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(parsed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>token <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RIGHT_ASSIGN"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> parsed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>next_token <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SYMBOL"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-22">  </span>
<span id="cb10-23">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter for right-assigned variable names</span></span>
<span id="cb10-24">  rassign <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> parsed[rassign_i, ]</span>
<span id="cb10-25">  </span>
<span id="cb10-26">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine the results and sort by location</span></span>
<span id="cb10-27">  var_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(lassign, rassign)</span>
<span id="cb10-28">  var_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> var_names[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row.names</span>(var_names)), ]</span>
<span id="cb10-29">  </span>
<span id="cb10-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter for variable names that are in the provided names list</span></span>
<span id="cb10-31">  var_names[var_names<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>text <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> names_to_find, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_token"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(var_names))]</span>
<span id="cb10-32">  </span>
<span id="cb10-33">}</span></code></pre></div>
</div>
<p>So, let’s say we have this snippet of R code<sup>7</sup> below. It uses some variable names that are already function names, as well as each flavour of assignment.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">demo_code <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> r<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{</span></span>
<span id="cb11-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">data &lt;- "</span>x<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb11-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">head = head(chickwts)</span></span>
<span id="cb11-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>y<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" -&gt; df</span></span>
<span id="cb11-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">a &lt;- beaver1[1:3]</span></span>
<span id="cb11-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b &lt;- 2 -&gt; c</span></span>
<span id="cb11-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}"</span></span></code></pre></div>
</div>
<p>And here’s a function that grabs the base packages and the function names within. This is what we’ll use as our ‘no-go’ variable names. You could expand this to include other names, like function names from the tidyverse, for example.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">get_base_functions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb12-2">  base_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sessionInfo</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>basePkgs</span>
<span id="cb12-3">  base_pkgs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:"</span>, base_names)</span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(base_pkgs, ls) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>()</span>
<span id="cb12-5">}</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_base_functions</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "xyTable"    "xyz.coords" "xzfile"     "yinch"      "zapsmall"  
[6] "zip"       </code></pre>
</div>
</div>
<p>Aside: this function uses a little hack. It specifically grabs the attached base packages from the <code>sessionInfo()</code> listing. There are other base and ‘recommended’ packages that are actually not attached from the start of your session; see the <code>Priority</code> value from the output of <code>installed.packages()</code>.</p>
<p>Now we can run the function to check the code for the list of function names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">naughty_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_var_names</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">code_string =</span> demo_code,</span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to_find =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_base_functions</span>()</span>
<span id="cb14-4">)</span>
<span id="cb14-5"></span>
<span id="cb14-6">naughty_words</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   line1 col1 line2 col2 id parent  token terminal text
12     3    1     3    4 12     14 SYMBOL     TRUE head
3      2    1     2    4  3      5 SYMBOL     TRUE data
33     4    8     4    9 33     35 SYMBOL     TRUE   df
66     6   11     6   11 66     68 SYMBOL     TRUE    c</code></pre>
</div>
</div>
<p>The output is what you normally get from <code>getparsedata(parse())</code>, filtered for the illegal names. Helpfully it shows you the exact row and column indices for where the string exists in the code you provided.</p>
<p>And of course you can just isolate the offenders.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">naughty_words<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>text <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "c"    "data" "df"   "head"</code></pre>
</div>
</div>
<p>So the variable names <code>a</code> and <code>b</code> in <code>demo_code</code> were ignored because they’re not function names in base R. And the in-built data sets <code>beaver1</code> and <code>chickwts</code> were also ignored, because they’re not being used as variable names. And yes, <code>df</code>—a commonly-used variable name for dataframes—is also a function!</p>
</section>
<section id="seeking-closure" class="level2">
<h2 class="anchored" data-anchor-id="seeking-closure">Seeking closure</h2>
<p>I probably won’t use this function in real life, but maybe the concepts are interesting to you or you can tell me about a linter that does this already.</p>
<p>At least for now, object of type ‘Matthew’ is not upsettable.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-08-22 20:39:44 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        
 [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       
 [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        
[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Please note that this post is not a subtweet. I’ve read a bunch of code recently—including my own!—that uses variable names in this way.↩︎</p></li>
<li id="fn2"><p>Although the more nefarious among you will know you can put just about anything in backticks and it can be a legit variable name. So <code>`TRUE` &lt;- FALSE</code> will work, but you’ll have to supply <code>`TRUE`</code> with the backticks to use it.↩︎</p></li>
<li id="fn3"><p>Exercise for the reader: have the function accept script files from a connection, not just as a string. I didn’t bother for this silly demo.↩︎</p></li>
<li id="fn4"><p>If you can be parsed, I’ve <a href="https://www.rostrum.blog/2023/03/03/getparsedata/">written about this</a> before.↩︎</p></li>
<li id="fn5"><p>If you haven’t already <a href="https://www.rostrum.blog/2021/03/13/assign/">expunged</a> any files containing equals assignment.↩︎</p></li>
<li id="fn6"><p>I’ll have to update this in future to work with <a href="https://www.rostrum.blog/2022/06/07/assign-down/">down-assignment arrows</a>.↩︎</p></li>
<li id="fn7"><p>This is an ‘R string’, introduced in R version 4.0.0. It deals with escaping certain characters and quotes within quotes so that you don’t have to. So <code>"x &lt;- "y""</code> will error but <code>r"(x &lt;- "y")"</code> will return <code>"x &lt;- \"y\""</code>. You can use symbols other than parentheses, such as curly braces, if your expression already contains parentheses itself.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2023-08-19-find-bad-names/index.html</guid>
  <pubDate>Fri, 18 Aug 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>One weird trick to {monetize} your R package</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-08-01-monetize/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-08-01-monetize/resources/monetize-hats.png" class="img-fluid figure-img" style="width:40.0%" alt="Three green dollar symbols in Comic Sans, each with an emoji hat on."></p>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p><a href="https://github.com/matt-dray/monetize">The {monetize} R package</a> gives you inspiration for monetising your R package. Developers rise up!</p>
</section>
<section id="free-as-in-free" class="level2">
<h2 class="anchored" data-anchor-id="free-as-in-free">Free as in free</h2>
<p>There’s one good reason why SAS, SPSS and Stata<sup>1</sup> are such successful and beloved statistical tools: money.</p>
<p>For some reason, R remains free and open source. But what if <a href="https://en.wikipedia.org/wiki/R_(programming_language)">Ihaka &amp; Gentleman</a> originally wanted users to be charged a literal (New Zealand) dollar<sup>2</sup> every time they use the <code>$</code> symbol to access an element from an object? I’m just asking the question!</p>
<p>Us package developers should seize the initiative and harvest the sweet, sweet bounty of our labour. But how? I will tell you the secret!</p>
</section>
<section id="free-as-in-not-quite" class="level2">
<h2 class="anchored" data-anchor-id="free-as-in-not-quite">Free as in not quite</h2>
<p>Introducing the {monetize} R package! It will provide the inspiration you seek. Serious entrepreneurs can <a href="https://github.com/matt-dray/monetize">install from GitHub</a><sup>3</sup>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"remotes"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if not yet installed</span></span>
<span id="cb1-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matt-dray/monetize"</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(monetize)</span></code></pre></div>
</div>
<pre><code>Welcome to the monetize(TM) package FREE TRIAL version!
Try our EXCLUSIVE add_one() function!
Try watch_ad() to gain MEGA COINS and increase your MEMBER LEVEL for REWARDS!
And now a quick message from our sponsor:
  🧃 IMBIBE ACME(TM)-BRAND FRUIT PULP (7% FEWER INSECT COMPONENTS)! 🪳</code></pre>
<p>The package contains the exclusive <code>add_one()</code> function, which surprisingly doesn’t come pre-installed with base R. A gap in the market!</p>
<p>Users should speculate to accumulate, so there’s a small cost to use the function. In {monetize}, each use of a function costs 1 MEGA COIN.</p>
<p>Because I am so kind, I have chosen for users to receive a 30-day FREE TRIAL of the package and to receive 3 MEGA COINS as an exclusive NEW-MEMBER PERK.</p>
<p>One use of the function costs the low, low price of 1 MEGA COIN. Merely a small payment, or ‘micro transaction’, if you will.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_one</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<pre><code>📅 You have 30 days left of your FREE TRIAL!
🏅 Your MEMBER LEVEL is 1! Try watch_ad()!
💰 Your MEGA COIN balance is now 2! Try watch_ad()!
[1] 2</code></pre>
<p>Along with the result, the function helpfully prints the number of days left in your FREE TRIAL, your MEMBER LEVEL and the number of MEGA COINS you have left.</p>
<p>What’s a MEMBER LEVEL? Well, at MEMBER LEVEL 1, the function can’t guarantee a correct result. 20% of the time there’ll be an off-by-one error. But R users index from 1 anyway, so they’ll be used to that.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_one</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<pre><code>📅 You have 30 days left of your FREE TRIAL!
🏅 Your MEMBER LEVEL is 1! Try watch_ad()!
💰 Your MEGA COIN balance is now 1! Try watch_ad()!
[1] 3</code></pre>
<p>How can you get the correct result 100% of the time? That’s an exclusive for MEMBER LEVEL 2. How do you reach MEMBER LEVEL 2? What happens if you run out of MEGA COINS?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_one</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<pre><code>📅 You have 30 days left of your FREE TRIAL!
🏅 Your MEMBER LEVEL is 1! Try watch_ad()!
Error: 😭 You'll need more MEGA COINS to re-use this function! Try watch_ad()!</code></pre>
<p>Answer: simply watch some ads! I’ve managed to get an ad deal with the famous <a href="https://en.wikipedia.org/wiki/Acme_Corporation">Acme(TM) Corporation</a>. Maybe you could get a sponsorship deal from a third-party whose interests align with your users’ interests; maybe SAS, SPSS or Stata would be interested?</p>
<p>Anyway, the user can just <code>watch_ad()</code> in exchange for MEGA COINS: I’ve allowed the user to employ their FREE WILL to watch a <code>"short"</code> ad for 1 MEGA COIN or a <code>"long"</code> ad for 3 MEGA COINS.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">watch_ad</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"short"</span>)</span></code></pre></div>
</div>
<pre><code>🌭 CONSUME ACME(TM)-BRAND RECONSTITUTED MEAT-LIKE CYLINDERS! 🐕
🌭 CONSUME ACME(TM)-BRAND RECONSTITUTED MEAT-LIKE CYLINDERS! 🐕
🌭 CONSUME ACME(TM)-BRAND RECONSTITUTED MEAT-LIKE CYLINDERS! 🐕
🌭 CONSUME ACME(TM)-BRAND RECONSTITUTED MEAT-LIKE CYLINDERS! 🐕
🌭 CONSUME ACME(TM)-BRAND RECONSTITUTED MEAT-LIKE CYLINDERS! 🐕
Congratulations! Your new MEGA COIN total is 1!</code></pre>
<p>Reach MEMBER LEVEL 2 after gaining 10 all-time MEGA COINS and MEMBER LEVEL 3 after 20 MEGA COINS.</p>
<p>What’s the exclusive MEMBER LEVEL 3? Well, you get the perk of an actually-correct answer like in MEMBER LEVEL 2… plus the value gets a randomised FREE HAT!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_one</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<pre><code>📅 You have 30 days left of your FREE TRIAL!
🏅 Your MEMBER LEVEL is 3! Try watch_ad()!
💰 Your MEGA COIN balance is now 19! Try watch_ad()!
🎩 
 2 </code></pre>
<p>What a tease! Oh, and the stats are persistent, so your users can’t refresh their session and wipe the slate clean. Watch the cash roll in!</p>
</section>
<section id="free-as-in-absolutely-not" class="level2">
<h2 class="anchored" data-anchor-id="free-as-in-absolutely-not">Free as in absolutely not</h2>
<p>I hope this has been an inspirational eye-opener for you and that one day you can be as rich as me. Oh, you didn’t know I was rich? How else could I afford to keep this absolute juggernaut of a blog going?</p>
<p>To demonstrate how little I personally need them, here are some more ideas to maximise your financial rewards via R. You could try:</p>
<ul>
<li>releasing version updates as paid add-ons, like <a href="https://en.wikipedia.org/wiki/Downloadable_content">videogame DLC</a> (you could also make them take several hours to download, like videogame DLC, which would definitely heighten the tension)</li>
<li><a href="https://en.wikipedia.org/wiki/Loot_box#Criticism">loot boxes</a> to allow users to gamble—I mean, test their precognitive skills—for new functionality (<code>add_two()</code> could be a common drop, while <code>multiply_by_two()</code> is ultra rare)</li>
<li>using certified financial guru <a href="https://github.com/nacnudus/ggbillboard">Duncan Garmonsway’s {ggbillboard} package</a> (‘use vacant ggplot2 facets for advertising’)</li>
</ul>
<p>You are welcome. Don’t read the small print for nerds.</p>
<details>
<summary>
Small print for nerds.
</summary>
It’s a simple trick: up-to-date stats are stored on the user’s computer in the directory resolved by <code>tools::R_user_dir("monetize", "data")</code><sup>4</sup> and are updated each time you use the functions in the package. Easy to circumvent… if you know how.
</details>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-08-01 11:37:35 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] monetize_0.0.0.9000

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        
 [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       
 [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        
[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Curious why they all start with ‘S’? It’s in deference to ‘R’, which comes first in the alphabet and in being really cool.↩︎</p></li>
<li id="fn2"><p>Did you also know that the use of the New Zealand dollar is part of <a href="htpps://rostrum.blog/2021/07/15/dollar-dollar">a wider conspiracy</a>? The sheep dip goes deep on this one.↩︎</p></li>
<li id="fn3"><p>Don’t.↩︎</p></li>
<li id="fn4"><p>I consider this my hattrick of posts on <code>R_user_dir()</code>. I wrote about it as a way to <a href="https://rostrum.blog2023/02/02/trapinch">cache data from the PokéAPI in {trapinch}</a> and <a href="https://rostrum.blog/2022/11/13/tamrgo">store cyber pet blueprints in {tamRgo}</a>, the latter of which led to a post on <a href="https://rostrum.blog/2023/07/15/hiscore">saving high-score data with {hiscore}</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>monetize</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2023-08-01-monetize/index.html</guid>
  <pubDate>Mon, 31 Jul 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Save high scores for your R game</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-07-15-hiscore/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2023-07-15-hiscore/resources/hiscore.gif" class="img-fluid" alt="R code run in an RStudio window. The hiscore package is attached and the play_coinflip function is run. The user guesses heads, it's wrong, they score zero, which is the new high score. The user tries again, is reminded that the high score is currently zero and then scores 1. The session is restarted, but the get_save_data function proves that the top score has been saved."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>You can save your high score in games made with R. See <a href="https://github.com/matt-dray/hiscore">the package {hiscore}</a> for a demo.</p>
</section>
<section id="boot-up" class="level2">
<h2 class="anchored" data-anchor-id="boot-up">Boot up</h2>
<p>I wrote recently about how <a href="https://www.rostrum.blog/2023/04/02/splendid-r-games/">R is a game engine</a> and started <a href="https://github.com/matt-dray/splendid-r-games">a list of games written in R</a>.</p>
<p>All good game engines should let you save a high score, right?</p>
<p>So I’ve done exactly this for a tiny concept package called <a href="https://github.com/matt-dray/hiscore">{hiscore}</a><sup>1</sup> that contains a simple game of luck</p>
<p>The package runs code that saves your high score, which is retained between play sessions.</p>
</section>
<section id="install" class="level2">
<h2 class="anchored" data-anchor-id="install">Install</h2>
<p>You can install the package <a href="https://github.com/matt-dray/hiscore">from GitHub</a>. It has no dependencies, but you’ll need to be running R version 4, at least.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"remotes"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if not yet installed</span></span>
<span id="cb1-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matt-dray/hiscore"</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(hiscore)</span></code></pre></div>
</div>
<p>Of course, it’s just a concept and I’ve intentionally kept this as trivial as possible, but you can <a href="https://github.com/matt-dray/hiscore/issues">leave an issue</a> with bugs or ideas.</p>
</section>
<section id="play" class="level2">
<h2 class="anchored" data-anchor-id="play">Play</h2>
<p>For demonstration purposes, the inbuilt game is super simple: get the longest streak of correctly guessed coinflips.</p>
<p>To play, run <code>play_coinflip()</code> and type <kbd>H</kbd> or <kbd>T</kbd> and <kbd>Enter</kbd> when prompted. Basically, a coinflip is simulated with <code>sample(c("H", "T"), 1)</code> and then compared to the user’s input, supplied from the console following a <code>readline()</code> call.</p>
<p>Keep going until you get it wrong. If you get a new high score, it’ll be saved.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">play_coinflip</span>()</span></code></pre></div>
</div>
<pre><code>[H]eads or [T]ails? Answer: H
Correct! Current score: 1
[H]eads or [T]ails? Answer: H
Incorrect! Final score: 1
New high score!
New high score saved.</code></pre>
<p>You can retrieve the current high score with <code>get_save_data()</code>, which returns a little table.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_save_data</span>()</span></code></pre></div>
</div>
<pre><code>      game high_score
1 coinflip          1</code></pre>
<p>Of course, you could also set up the function so that it records different player names too. And you could add additional games that would get their own row in this table.</p>
</section>
<section id="memory" class="level2">
<h2 class="anchored" data-anchor-id="memory">Memory</h2>
<p>Note that the high score data is retained on your computer even if you restart your session or reboot your machine. How so?</p>
<p>This is thanks to <a href="https://rdrr.io/r/tools/userdir.html">the <code>tools::R_user_dir()</code> function</a>, which was added to R in version 4.0. It builds system-specific paths to ‘directories for storing R-related user-specific data, configuration and cache files’ where you can save package-related information.</p>
<p>{hiscore} records top scores in this fashion. On my machine, the save location resolves to the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R_user_dir</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hiscore"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/Users/mattdray/Library/Application Support/org.R-project.R/R/hiscore"</code></pre>
</div>
</div>
<p>Regular readers may remember that I used <code>R_user_dir()</code> in the {tamRgo} package (<a href="https://www.rostrum.blog/2022/11/13/tamrgo/">blog</a>, <a href="https://github.com/matt-dray/tamRgo">source</a>), which lets you look after a Tamagotchi-style cyber-pet in your console. I used the function to save a pet’s ‘blueprint’ (details such as name, age and hunger level) persistently.</p>
</section>
<section id="retry" class="level2">
<h2 class="anchored" data-anchor-id="retry">Retry</h2>
<p>Now imagine you want to retry to beat that incredible top score of 1. Since you last played, you probably restarted your session or computer.</p>
<pre><code>Restarting R session...</code></pre>
<p>But never fear: the high score was retained. You can see that when you run <code>play_coinflip()</code> again and are reminded of the current best.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(hiscore)</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">play_coinflip</span>()</span></code></pre></div>
</div>
<pre><code>Welcome. Your current high score is 1
[H]eads or [T]ails? Answer: h
Correct! Current score: 1
[H]eads or [T]ails? Answer: t
Correct! Current score: 2
[H]eads or [T]ails? Answer: h
Incorrect! Final score: 2
New high score!
New high score saved.</code></pre>
<p>Great job, you doubled the previous record!</p>
<p>When you get a game over, the <code>play_coinflip()</code> function checks the current high score and compares it to the final score for the current play session. The saved data is overwritten if the score is higher.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_save_data</span>()</span></code></pre></div>
</div>
<pre><code>      game high_score
1 coinflip          2</code></pre>
<p>I think it’s a good idea to make it easy for people to destroy the stored data if they want, which you can do easily with <code>delete_save_data()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delete_save_data</span>()</span></code></pre></div>
</div>
<pre><code>Really delete? [Y]es/[N]o: Y
High score data deleted.</code></pre>
</section>
<section id="game-over" class="level2">
<h2 class="anchored" data-anchor-id="game-over">Game over</h2>
<p>How else could this approach be used in an R gaming perspective? You could use this to save a game state, similar to what’s done for <a href="https://www.rostrum.blog/2022/11/13/tamrgo/">{tamRgo}</a>. The user could input <code>S</code>ave instead of performing a guess, which would record the current status of the game so the user can return later. But that would feel like cheating for a game like coinflip.</p>
<p>Speaking of, here’s a cheatcode as a bonus for reading this far:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">cheat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(game, new_score) {</span>
<span id="cb15-2">  user_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R_user_dir</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hiscore"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb15-3">  score_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(user_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score_table.rds"</span>)</span>
<span id="cb15-4">  score_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(score_path)</span>
<span id="cb15-5">  score_table[score_table[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"game"</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> game, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high_score"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> new_score</span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(score_table, score_path)</span>
<span id="cb15-7">}</span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cheat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coinflip"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e100</span>)</span>
<span id="cb15-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_save_data</span>()</span></code></pre></div>
</div>
<pre><code>      game high_score
1 coinflip     1e+100</code></pre>
<p>Heh heh heh.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-07-25 15:10:34 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] hiscore_0.0.0.9000

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        
 [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       
 [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        
[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>As in ‘high score’ not as in ‘his core’.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>hiscore</category>
  <category>r</category>
  <category>videogames</category>
  <guid>https://www.rostrum.blog/posts/2023-07-15-hiscore/index.html</guid>
  <pubDate>Fri, 14 Jul 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Convert a Word table to Markdown</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-06-21-wordup-tables/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2023-06-21-wordup-tables/resources/wordup.gif" class="img-fluid" style="width:100.0%" alt="A gif that shows a table of numbers being copied. Then  a function called table_to_govspeak is run in an RStudio window and the output is a special Markdown version of that copied table."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I made a function that shouldn’t need to exist in an ideal world: it takes a copied Microsoft Word table and outputs a Markdown version (well, a <a href="https://govspeak-preview.publishing.service.gov.uk/guide">Govspeak</a> version).</p>
</section>
<section id="govspeak-when-youre-spoken-to" class="level2">
<h2 class="anchored" data-anchor-id="govspeak-when-youre-spoken-to">Govspeak when you’re spoken to</h2>
<p>I’ve written about three painful things recently:</p>
<ol type="1">
<li>Forcing data scientists to <a href="https://www.rostrum.blog/2023/06/13/panic-in-the-toolshed/">expose their tools</a> so we can all use and learn from them.</li>
<li><a href="https://www.rostrum.blog/2023/06/13/panic-in-the-toolshed/">‘Rectangularising’ tables scraped out of a Word document</a> via the {officer} package.</li>
<li>Easier ways to <a href="https://www.rostrum.blog/2023/04/23/type-convert/">coerce dataframe columns to their ‘intended’ data type</a>.</li>
</ol>
<p>Today I bring you a terrible Cerberus with these three heads<sup>1</sup>.</p>
<p>The challenge: sometimes public sector statisticians produce Word documents that need to be converted to a special type of simplified plaintext Markdown, called <a href="https://govspeak-preview.publishing.service.gov.uk/guide">Govspeak</a>, before they can be uploaded for publication as HTML files on GOV.UK<sup>2</sup>.</p>
<p>This is fine: we have specific publishing specialists who can take care of it. It can be a little tedious, however. What if we could speed up and make more efficient the process of converting from Word to Govspeak?</p>
<p>There’s a specific <a href="https://govspeak-preview.publishing.service.gov.uk/">Govspeak converter</a> online that you can paste into. But it doesn’t have full coverage of the things that might appear in a Word doc, including tables. Other online converters exist, but I don’t think we should rely on third parties that are probably intended for producing general Markdown rather than Govspeak, specifically</p>
</section>
<section id="markdown-word-up." class="level2">
<h2 class="anchored" data-anchor-id="markdown-word-up.">Markdown? Word up.</h2>
<p>I’ve started an R package called <a href="https://github.com/matt-dray/wordup">{wordup}</a> that aims to take a Word document and convert it to Govspeak. It’s early days in the sense that it doesn’t yet do, well… very much. But I thought the package name was funny (if unoriginal) and worth squatting. Maybe I’ll never get around to developing it, who knows.</p>
<p>To install (which is really not worth it right now, unless you want to <a href="https://github.com/matt-dray/wordup/issues">raise an issue</a> or pull request):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"remotes"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if not yet installed</span></span>
<span id="cb1-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matt-dray/wordup"</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(wordup)</span></code></pre></div>
</div>
<p>For now, the principle is that you can unzip a Word document to expose a bunch of xml files (yet another thing I’ve been <a href="https://www.rostrum.blog/2023/06/11/apple-health-redux/">writing about recently</a>, lol) that contain all the information needed to build the Word document<sup>3</sup>. As such, you can read that xml and extract all the information, styles, etc, and massage it programmatically into Govspeak format.</p>
<p>Part of the process will involve taking a Word table, specifically, and converting it to a <a href="https://www.gov.uk/guidance/how-to-publish-on-gov-uk/markdown#tables">Govspeak-friendly form</a>. I figured this might be a nice standalone tool in its itself, so I had a stab at what it could look like.</p>
</section>
<section id="fantabulars" class="level2">
<h2 class="anchored" data-anchor-id="fantabulars">Fantabulars</h2>
<p>So right now the <code>wordup::table_to_govspeak()</code> function (whose name could change at any time) does three things:</p>
<ol type="1">
<li>Handles inputs.</li>
<li>Guesses data types.</li>
<li>Applies extra styles.</li>
</ol>
<p>You can either (a) copy-paste a Word table into the function, or (b) simply copy it to the clipboard, where it can be read by the function using <a href="http://matthewlincoln.net/clipr/">the {clipr} package</a>. The function will take the string—which is basically tabs (<code>\t</code>) to indicate gaps between cells and newlines (<code>\n</code>) to indicate rows—and reorient it initially into a dataframe.</p>
<p>Of course, all the columns will be character-class at this point. We can immediately run <code>type.convert()</code> over the whole dataframe to coerce each column to a more appropriate data type, if appropriate. So a character column composed of <code>c("10", "20", "30)</code> will become a numeric column of values <code>c(10, 20, 30)</code>. But this doesn’t work for numeric values that have symbols in them, like commas as thousands separators (<code>1,200</code>), per cent symbols (<code>82%</code>) and placeholder markers to indicate things like suppressed values (<code>[c]</code>)<sup>4</sup>. To get around this, we can strip the nuisance characters and then see if what remains looks like a number.</p>
<p>Finally, there’s some specific features of Govspeak tables that need attention. It’s acceptable to have row labels, where each value in every cell of the first column should be prefaced with an octothorpe (<code>#</code>), and totals columns, where the entire row should be emboldened with double-asterisks (<code>**</code>) either side of the cells’ values.</p>
<p>What results can be sort of… magic really. You copy a Word table in its entirety to your clipboard, run the function, and bang: the Govspeak Markdown is returned. You can see this in action in the gif at the top of this page.</p>
<p>So I can literally copy a table like this to my clipboard:</p>
<table class="table">
<thead>
<tr class="header">
<th>Column 1</th>
<th style="text-align: right;">Column 2</th>
<th style="text-align: right;">Column 3</th>
<th style="text-align: right;">Column 4</th>
<th style="text-align: right;">Column 5</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>X</td>
<td style="text-align: right;">100</td>
<td style="text-align: right;">1,000</td>
<td style="text-align: right;">1%</td>
<td style="text-align: right;">15</td>
</tr>
<tr class="even">
<td>Y</td>
<td style="text-align: right;">200</td>
<td style="text-align: right;">2,000</td>
<td style="text-align: right;">2%</td>
<td style="text-align: right;">12</td>
</tr>
<tr class="odd">
<td>Z</td>
<td style="text-align: right;">300</td>
<td style="text-align: right;">3,000</td>
<td style="text-align: right;">3%</td>
<td style="text-align: right;">[c]</td>
</tr>
<tr class="even">
<td>Totals</td>
<td style="text-align: right;">600</td>
<td style="text-align: right;">6,000</td>
<td style="text-align: right;">6%</td>
<td style="text-align: right;">[c]</td>
</tr>
</tbody>
</table>
<p>And run this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">wordup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table_to_govspeak</span>()</span></code></pre></div>
</div>
<p>To print this (and have it copied to your clipboard as the message says):</p>
<pre><code>| Column 1 | Column 2 | Column 3 | Column 4 | Column 5 |
| ------- | ------: | ------: | ------: | ------: |
| X | 100 | 1,000 | 1% | 15 |
| Y | 200 | 2,000 | 2% | 12 |
| Z | 300 | 3,000 | 3% | [c] |
| Totals | 600 | 6,000 | 6% | [c] |
The output table has been written to the clipboard.</code></pre>
<p>Boom. Note the crucial feature that the third, fourth and fifth columns are recognised as numeric—despite containing the strings <code>,</code>, <code>%</code> and <code>[c]</code>—and therefore right-aligned (<code>------:</code>). This is entirely due to the argument <code>ignore_regex</code>, which defaults to removing commas, percentage symbols or anything in square brackets before it guesses what data type the column is<sup>5</sup>.</p>
<p>And we can do fancy things like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">wordup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table_to_govspeak</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">has_row_titles =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">totals_rows =</span> 4L</span>
<span id="cb4-4">)</span></code></pre></div>
</div>
<p>Which outputs this thing:</p>
<pre><code>| Column 1 | Column 2 | Column 3 | Column 4 | Column 5 |
| ------- | ------: | ------: | ------: | ------: |
| # X | 100 | 1,000 | 1% | 15 |
| # Y | 200 | 2,000 | 2% | 12 |
| # Z | 300 | 3,000 | 3% | [c] |
| # **Totals** | **600** | **6,000** | **6%** | **[c]** |
The output table has been written to the clipboard.</code></pre>
<p>Of course, in practice this might get a little more complicated if you need to manually specify in the function declaration that there’s a column of row titles or some totals rows. Pish-posh. The point is that I think this is probably better than trying to (a) write the Govspeak table by hand or (b) trying to use the Govspeak converter, which just doesn’t work for this task. This also has mild, opinionated, Govspeak-related benefits over using a straightforward <code>knitr::kable()</code>.</p>
<p>Is this perfect? Ahaha, no. There’s a lot to add or improve, but I think this is a decent start and solves a (niche) problem for now<sup>6</sup>.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-07-04 09:56:28 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] wordup_0.0.0.9000

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        
 [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       
 [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        
[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Wrangling Word content with R is certainly a Herculean labour, amirite, classics fans? I know there are classicists who write R. Own up. There’s no shame. Adriana is one of you.↩︎</p></li>
<li id="fn2"><p>In case you were wondering: yes, this is a ‘solved’ problem where teams use <a href="https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/">Reproducible Analytical Pipelines (RAP)</a> to produce statistical publications. They can convert directly from R Markdown to Govspeak using something like <a href="https://github.com/moj-analytical-services/mojspeakr">{mojspeakr}</a>. But not every team is using R to produce their statistical publications. The wider R community on social media may be aware of <a href="https://rap4mads.eu/">Bruno’s recently-released book</a> on the principles of RAP. The RAP movement <a href="https://dataingovernment.blog.gov.uk/2017/03/27/reproducible-analytical-pipeline/">started in the UK government</a> but appears to be taking off internationally.↩︎</p></li>
<li id="fn3"><p>This technique is currently in the news (if you move in certain geeky circles, which you do, because you’re reading this), because an unzipped Excel file appeared to <a href="https://datacolada.org/109">expose a… suspicious sequence of formulae executions</a> that underpinned a published academic paper.↩︎</p></li>
<li id="fn4"><p>There’s specific <a href="https://analysisfunction.civilservice.gov.uk/policy-store/symbols-in-tables-definitions-and-help/">best-practice government guidance</a> for the symbols that should be used for this purpose, such as ‘[c]’ to mean that the data is suppressed due to reasons of confidentiality.↩︎</p></li>
<li id="fn5"><p>There are pre-existing functions that can parse numbers containing strings, like <code>readr::parse_number("10%")</code> returns <code>10</code>. But this particular function can’t handle arbitrary strings in your number, like the placeholder <code>[c]</code> used to represent suppressed values.↩︎</p></li>
<li id="fn6"><p>I think you might be used to that by now if you’ve read this blog more than once.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>clipr</category>
  <category>markdown</category>
  <category>ms-office</category>
  <category>public-sector</category>
  <category>quarto</category>
  <category>r</category>
  <category>wordup</category>
  <guid>https://www.rostrum.blog/posts/2023-06-21-wordup-tables/index.html</guid>
  <pubDate>Tue, 20 Jun 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Panic! In The Toolshed</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-06-13-panic-in-the-toolshed/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2023-06-13-panic-in-the-toolshed/resources/panik.png" class="img-fluid" style="width:50.0%" alt="Panik meme with three panels. First panel has a panicked face saying 'I have a laborious task to do'. Second panel has a calm face saying 'write an R package to do it'. Third panel has an even more panicked face saying 'Now I have to maintain an R package'."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I wrote <a href="https://matt-dray.github.io/government-toolshed/">some slides</a> to tell data scientists in the public sector what they already know: share the tools you’ve developed.</p>
</section>
<section id="an-axe-to-grind" class="level2">
<h2 class="anchored" data-anchor-id="an-axe-to-grind">An axe to grind</h2>
<p>I’m speaking today at an event for UK government data scientists with a theme of ‘the data science toolshed’. My plea is small: I want public sector workers to share the tools they make<sup>1</sup>.</p>
<p>We should build modular things like R packages that are easy to use and develop; make them available to everyone to minimise duplication and encourage collaboration; and maximise reach by telling everyone about it. This is how we improve quality and build our community. And save money for the taxpayer.</p>
<p>Handily, this is already expressed in the government’s <a href="https://www.gov.uk/guidance/the-technology-code-of-practice">Technology Code of Practice</a>:</p>
<blockquote class="blockquote">
<p>Share, reuse and collaborate: avoid duplicating effort and unnecessary costs by collaborating across government and sharing and reusing technology, data, and services.</p>
</blockquote>
<p>I’ve had a small experience with this: I made <a href="https://co-analysis.github.io/a11ytables/">the {a11ytables} R package</a> to help producers of stats publications automate the creation of best-practice, accessible spreadsheets. It’s now being used in several organisations and is referenced from <a href="https://analysisfunction.civilservice.gov.uk/policy-store/further-resources-for-releasing-statistics-in-spreadsheets/">the government’s best-practice guidance</a>.</p>
<p>Success? Maybe. But also PANIK: I’ve left the organisation where I made it; I was the sole developer; I worry that I should have thought about this sooner; that I should fork and update it; that updating users will be hard; that links to the old package will break; and so on. Hopefully people will learn something from these missteps.</p>
</section>
<section id="burying-the-hatchet" class="level2">
<h2 class="anchored" data-anchor-id="burying-the-hatchet">Burying the hatchet</h2>
<p>The slides are live <a href="https://matt-dray.github.io/government-toolshed/">on the internet</a> and embedded below, or you can view <a href="https://matt-dray.github.io/government-toolshed/#/section-1">the source on GitHub</a>. Press <kbd>s</kbd> to pop out the speaker notes, <kbd>o</kbd> for a slide overview and <kbd>f</kbd> for fullscreen.</p>
<div class="cell">
<div class="cell-output-display">
<div class="shareagain" style="min-width:300px;margin:1em auto;" data-exeternal="1">
<iframe src="https://matt-dray.github.io/government-toolshed/" width="1600" height="900" style="border:none;" loading="lazy" allowfullscreen=""></iframe>
<script>fitvids('.shareagain', {players: 'iframe'});</script>
</div>
</div>
</div>
<p>The slides were made with <a href="https://quarto.org/docs/presentations/revealjs/">Revealjs via Quarto</a>, because of course they were.</p>
</section>
<section id="clamp-down" class="level2">
<h2 class="anchored" data-anchor-id="clamp-down">Clamp down</h2>
<p>So, we should sustainabilise (not a word), centralise and advertise the useful things we make. Maybe we could have a list of tools we’ve produced collectively in the public sector? Something like <a href="https://github.com/sindresorhus/awesome">an ‘Awesome’ list</a> or a <a href="https://cran.r-project.org/web/views/">CRAN task view</a>. Maybe that would make it easier to find and develop existing solutions instead of building from scratch all the time.</p>
<p>Build a toolshed. They will come?</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-07-17 18:03:30 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2   compiler_4.3.1      fastmap_1.1.1      
 [4] cli_3.6.1           tools_4.3.1         htmltools_0.5.5    
 [7] xaringanExtra_0.7.0 rstudioapi_0.15.0   yaml_2.3.7         
[10] rmarkdown_2.23      knitr_1.43.1        jsonlite_1.8.7     
[13] xfun_0.39           digest_0.6.31       rlang_1.1.1        
[16] evaluate_0.21      </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I get that it’s not always possible to share things because of sensitivity issues. If you can’t open it up to the world, then what’s the highest level that you can release it? Organisation, division, team? If you can’t share the tool, then what can you tell people about the experience of developing and using it?↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>a11ytables</category>
  <category>event</category>
  <category>public-sector</category>
  <category>r</category>
  <category>talk</category>
  <guid>https://www.rostrum.blog/posts/2023-06-13-panic-in-the-toolshed/index.html</guid>
  <pubDate>Mon, 12 Jun 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Extract run data from Apple Health (redux)</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-06-11-apple-health-redux/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2023-06-11-apple-health-redux/resources/apple-run.png" class="img-fluid" style="width:100.0%" alt="A badly drawn cartoon apple running along and thinking about some XML data."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>You can use R to extract running details from a downloaded of your Apple Health data. The format of the data has changed since I last tried this, so I re-wrote my code.</p>
</section>
<section id="on-your-marks" class="level2">
<h2 class="anchored" data-anchor-id="on-your-marks">On your marks</h2>
<p>In 2021 <a href="https://www.rostrum.blog/2021/03/23/xml-health/">I extracted my running activities from my Apple Health data</a> using <a href="https://xml2.r-lib.org/">the {xml2} package</a>. You can read there for some theory and background.</p>
<p>At that point I’d been running for one year. I’m nearly at 500 runs, so I thought I would re-execute my code with the latest data. Alas, the original code no longer works because Apple seems to have updated the format of the XML file they provide.</p>
<div class="tip">
<p> <b>Note</b></p>
<p>I have since re-rendered this post after passing 500 runs.</p>
<div>

<p>So I’ve written a new function that takes a path to the zipped download of my Apple Health data and outputs a dataframe of time and distance data, with one row per run.</p>
</div></div></section>
<section id="get-set" class="level2">
<h2 class="anchored" data-anchor-id="get-set">Get set</h2>
<p>I followed <a href="https://www.rostrum.blog/2021/03/23/xml-health/#warm-up">the same steps as before</a> to get my Apple Health data off my phone.</p>
<p>I smashed together a quick function to unzip the file to a temporary location and then extract workout data using the <a href="https://xml2.r-lib.org/">the {xml2} package</a>. There’s a bit of base R wrangling to output a dataframe with a row per run workout, focusing on total time and distance.</p>
<details>
<summary>
Click to expand the function definition
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">get_run_distances <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(zip_path) {</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unzip Apple Health export to temporary location</span></span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unzipping and reading XML"</span>)</span>
<span id="cb1-5">  temp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempdir</span>()</span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unzip</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">zipfile =</span> zip_path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exdir =</span> temp)</span>
<span id="cb1-7">  xml_in <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_xml</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(temp, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple_health_export"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"export.xml"</span>))</span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlink</span>(temp)</span>
<span id="cb1-9">  </span>
<span id="cb1-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Isolate workouts only and convert to an R list object</span></span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Isolating workouts from XML"</span>)</span>
<span id="cb1-12">  wo_in <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_find_all</span>(xml_in, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//Workout"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_list</span>()</span>
<span id="cb1-13">  </span>
<span id="cb1-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-allocate a list to be filled with output data</span></span>
<span id="cb1-15">  wo_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(wo_in)</span>
<span id="cb1-16">  wo_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, wo_total)</span>
<span id="cb1-17">  </span>
<span id="cb1-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For each viable workout, extract the details</span></span>
<span id="cb1-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Iterating over workouts to extract run data"</span>)</span>
<span id="cb1-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (wo_n <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(wo_total)) {</span>
<span id="cb1-21">    </span>
<span id="cb1-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract details for current workout</span></span>
<span id="cb1-23">    wo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wo_in[[wo_n]]</span>
<span id="cb1-24">    wo_attrs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(wo)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the data is stored as attributes</span></span>
<span id="cb1-25">    is_run <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb1-26">      wo_attrs[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workoutActivityType"</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HKWorkoutActivityTypeRunning"</span></span>
<span id="cb1-27">    </span>
<span id="cb1-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the workout wasn't a run, then skip to the next workout</span></span>
<span id="cb1-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>is_run) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb1-30">    </span>
<span id="cb1-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if it is a run, then extract the data to a single-row dataframe</span></span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (is_run) {</span>
<span id="cb1-33">      </span>
<span id="cb1-34">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># There can be more than one element named 'WorkoutStatistics'. We want to </span></span>
<span id="cb1-35">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the one with distance information and extract the details.</span></span>
<span id="cb1-36">      wo_stats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wo[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WorkoutStatistics"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(wo))]</span>
<span id="cb1-37">      wo_stats_types <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(wo_stats, \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>)))</span>
<span id="cb1-38">      dist_type <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HKQuantityTypeIdentifierDistanceWalkingRunning"</span></span>
<span id="cb1-39">      dist_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(wo_stats_types <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> dist_type)</span>
<span id="cb1-40">      wo_dist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wo_stats[[dist_index]]</span>
<span id="cb1-41">      </span>
<span id="cb1-42">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare single-row dataframe and add to the pre-allocated list</span></span>
<span id="cb1-43">      wo_details <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-44">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">source =</span> wo_attrs[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sourceName"</span>]],</span>
<span id="cb1-45">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXct</span>(wo_attrs[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"startDate"</span>]]),</span>
<span id="cb1-46">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXct</span>(wo_attrs[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"endDate"</span>]]),</span>
<span id="cb1-47">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">distance_km =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(wo_dist, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-48">      )</span>
<span id="cb1-49">      wo_details[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration_s"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb1-50">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(wo_details[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> wo_details[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secs"</span>)</span>
<span id="cb1-51">      wo_out[[wo_n]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> wo_details</span>
<span id="cb1-52">      </span>
<span id="cb1-53">    }</span>
<span id="cb1-54">    </span>
<span id="cb1-55">  }</span>
<span id="cb1-56">  </span>
<span id="cb1-57">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to dataframe, select columns</span></span>
<span id="cb1-58">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Combining data"</span>)</span>
<span id="cb1-59">  wo_out_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, wo_out)</span>
<span id="cb1-60">  wo_out_df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration_s"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance_km"</span>)]</span>
<span id="cb1-61">  </span>
<span id="cb1-62">}</span></code></pre></div>
</div>
</details>
<p>I won’t go through it line by line, but there’s some commentary to explain what’s happening at each step. It does what I need it to do for now, but no doubt there’s some refactoring to be done.</p>
<p>There’s a few things to note:</p>
<ul>
<li>I’m more comfortable handling R objects, so I converted early to a list with <code>xml2::as_list()</code>. Awkwardly, the data in the list object was stored as <a href="https://xml2.r-lib.org/">attributes</a> to each element.</li>
<li>The distance data is stored in an element called ‘WorkoutStatistics’, but more than one element will have this name. We first have to isolate the element that is of the correct type, which has the name ‘HKQuantityTypeIdentifierDistanceWalkingRunning’.</li>
<li>I converted the start and end variables to datetime class (POSIXct) and subtracted one from the other to get the duration of the run. This yields the ‘difftime’ class that can be converted to seconds with <code>as.numeric()</code> and the argument <code>units = "secs"</code>.</li>
<li>There’s no input handling, because this was quick and for ‘fun’, lol.</li>
</ul>
</section>
<section id="go" class="level2">
<h2 class="anchored" data-anchor-id="go">Go</h2>
<p>So, to use the function you pass a path to where your zipped Apple Health export lives. Mine is in my ‘Documents’ folder.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">runs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_run_distances</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Documents/data/export.zip"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Unzipping and reading XML</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Isolating workouts from XML</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Iterating over workouts to extract run data</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Combining data</code></pre>
</div>
</div>
<p>I recorded all my runs with the Nike Run Club app, so I’ll filter out duplicates where I dual-recorded with Apple’s Workout app. I think I accidentally started the app by mistake a couple of times, so we’ll only grab runs of over 1 km. I’ll also convert the seconds to a friendlier-looking ‘period’ class using <a href="https://lubridate.tidyverse.org/">{lubridate}</a><sup>1</sup>.</p>
<p>Here’s the most recent few:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">runs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> runs[runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>source <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nike Run Club"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>distance_km <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ]</span>
<span id="cb7-2">runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>duration <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seconds_to_period</span>(runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>duration_s)</span>
<span id="cb7-3">runs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> runs[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance_km"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span>)]</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row.names</span>(runs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(runs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  start distance_km duration
497 2023-06-15 08:45:46        6.39  30M 36S
498 2023-06-17 11:07:03       10.52  50M 58S
499 2023-06-18 10:36:58       10.42  51M 29S
500 2023-06-22 08:14:51        6.34  30M 43S
501 2023-06-24 08:47:05       10.13  48M 43S
502 2023-06-25 09:20:20       12.12  59M 48S</code></pre>
</div>
</div>
<p>For my own tracking purposes, I’ve run:</p>
<ul>
<li>502 times</li>
<li>for a total distance of 4119 km</li>
<li>for a total duration of about 14 days</li>
</ul>
<p>And I can recreate a couple of the plots from the old post while we’re here. Here’s the ‘run barcode’, with one vertical line per run (the darker it is the greater the distance):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn.conflicts =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb9-3"></span>
<span id="cb9-4">run_days <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(</span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2020-03-23"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-06-25"</span>))),</span>
<span id="cb9-6">  runs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(start)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">km =</span> distance_km, duration) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2020-03-23"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-06-25"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">km =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(km), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.groups =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span>),</span>
<span id="cb9-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span></span>
<span id="cb9-12">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace_na</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">run =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb9-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(run_days<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>km), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grey.colors</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb9-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">box</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.rostrum.blog/posts/2023-06-11-apple-health-redux/index_files/figure-html/barcode-1.png" class="img-fluid" alt="A one-dimensional plot of days represented by vertical lines, with run distance coloured on a scale of white to black." width="960"></p>
</div>
</div>
<p>And of course, a simple distance over time plot:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb10-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start, </span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>distance_km, </span>
<span id="cb10-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">las =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rotate y-axis labels</span></span>
<span id="cb10-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Runs captured with Nike Run Club in Apple Health"</span>,</span>
<span id="cb10-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date"</span>,</span>
<span id="cb10-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distance (km)"</span></span>
<span id="cb10-8">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.rostrum.blog/posts/2023-06-11-apple-health-redux/index_files/figure-html/plot-1.png" class="img-fluid" alt="Run distance over time scatterplot, which shows a high frequency of 5 and 10 km runs." width="672"></p>
</div>
</div>
<p>Some patterns are obvious. For example, there’s lots of 5 km runs until about mid-2021, when it hops to more like 7 km. That’s when I started running for 30 mins at a time, rather than for 5 km specifically.</p>
<p>I’m pretty happy at 5 and 10 km, obviously, but maybe I should do more 21.1 km half-marathons. Or a full marathon? No no, that’s foolish: it would expand my y-axis too much and make it harder to observe patterns at shorter distances, amirite.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-07-21 19:29:55 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] tidyr_1.3.0     dplyr_1.1.2     lubridate_1.9.2

loaded via a namespace (and not attached):
 [1] vctrs_0.6.3       cli_3.6.1         knitr_1.43.1      rlang_1.1.1      
 [5] xfun_0.39         purrr_1.0.1       generics_0.1.3    jsonlite_1.8.7   
 [9] glue_1.6.2        htmltools_0.5.5   fansi_1.0.4       rmarkdown_2.23   
[13] evaluate_0.21     tibble_3.2.1      fontawesome_0.5.1 fastmap_1.1.1    
[17] yaml_2.3.7        lifecycle_1.0.3   compiler_4.3.1    htmlwidgets_1.6.2
[21] timechange_0.2.0  pkgconfig_2.0.3   rstudioapi_0.15.0 digest_0.6.33    
[25] R6_2.5.1          tidyselect_1.2.0  utf8_1.2.3        pillar_1.9.0     
[29] magrittr_2.0.3    tools_4.3.1       xml2_1.3.5       </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>{lubridate} is handy for time handling for many reasons. Here it’s helpful because it can resolve minutes and seconds (e.g.&nbsp;<code>21M 30S</code>) instead of the decimal minutes (e.g.&nbsp;<code>21.5</code>) in a difftime object.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>apple</category>
  <category>r</category>
  <category>sport</category>
  <category>xml</category>
  <category>xml2</category>
  <guid>https://www.rostrum.blog/posts/2023-06-11-apple-health-redux/index.html</guid>
  <pubDate>Sat, 10 Jun 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Rectangularise Word tables extracted by {officer}</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-06-07-rectangular-officer/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2023-06-07-rectangular-officer/resources/owl.png" class="img-fluid" style="width:100.0%" alt="The 'draw the rest of the owl' meme. The title is 'how to draw an owl' but it's been scribble dout and replaced with comic sans text that says 'How to extract an R data.frame from a Word table'. There are two steps: 'draw some circles' and then 'draw the rest of the owl'. The text for these has been replaced with Comic Sans that reads 'let officer do all the hard work' and then 'overengineer an unecessary new function.'"></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p><a href="https://davidgohel.github.io/officer/">{officer} is an R package</a> that lets you extract elements of a Word document, including tables, into a tidy dataframe. I’ve written a function to ‘re-rectangularise’ extracted Word tables into a list of R dataframes.</p>
<div class="tip">
<p> <b>Note</b></p>
<p>Turns out that <a href="https://elipousson.github.io/">Eli Pousson</a> has written the <a href="https://elipousson.github.io/officerExtras">{officerExtras} package</a> (<a href="https://github.com/elipousson/officerExtras/">install it from GitHub</a>), which already contains this functionality in <a href="https://elipousson.github.io/officerExtras/reference/officer_tables.html">the <code>officer_tables()</code> and <code>officer_table()</code> functions</a>. At least this proves my idea wasn’t too far-fetched!</p>
<p>Also you can just use <a href="https://github.com/hrbrmstr/docxtractr"><code>docxtractr::docx_extract_all_tbls()</code> by Bob Rudis</a> to extract all the tables in one go, lol.</p>
</div>
</section>
<section id="whats-the-officer-problem" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-officer-problem">What’s the officer, problem?</h2>
<p>Someone on Slack asked about some difficulty with scraping a table from a Word document. We’ve all been there.</p>
<p>My mind immediately went to <a href="https://davidgohel.github.io/officer/">{officer} by David Gohel</a>, which is part of <a href="https://ardata-fr.github.io/officeverse/">the ‘officeverse’</a> for reading, creating and manipulating common Microsoft documents with R<sup>1</sup>.</p>
<p>In particular, the function <code>officer::docx_summary()</code> extracts all the elements of a Word doc into a tidy dataframe<sup>2</sup>. Each row of that dataframe is a heading, or a paragraph, or the contents of a table cell<sup>3</sup>.</p>
<p>This means tables are ‘unstacked’, with a row per ‘cell’ of the original Word table. How could you convert these tidy Word tables into dataframes for further use in R? There’s <a href="https://ardata-fr.github.io/officeverse/extract-content.html#word-tables">a suggestion in the docs</a>, but I <a href="https://knowyourmeme.com/memes/how-to-draw-an-owl">drew the rest of the heckin’ owl</a> by creating a slightly overengineered function to do it<sup>4</sup>.</p>
</section>
<section id="allo-allo" class="level2">
<h2 class="anchored" data-anchor-id="allo-allo">’Allo ’allo</h2>
<p>First, you can download the {officer} package from CRAN:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"officer"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if not yet installed</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(officer)</span></code></pre></div>
</div>
<p>Let’s create a Word document to test with and save it to a temporary location:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a test docx file</span></span>
<span id="cb2-2">doc_test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_docx</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">body_add_par</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a test"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"heading 1"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">body_add_par</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Below is a table."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normal"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">body_add_table</span>(mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">body_add_par</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Below is another table"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normal"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">body_add_table</span>(airquality[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save docx to temp location</span></span>
<span id="cb2-10">temp_docx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".docx"</span>)</span>
<span id="cb2-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(doc_test, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">target =</span> temp_docx)</span></code></pre></div>
</div>
<p>The package has a nice system of pipeable functions for building up document. This code created a file with a heading, followed by two tables that each have a line of text above them.</p>
<p>We can read the document with <code>read_docx()</code> and extract the contents into a tidy dataframe:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the file from temp path</span></span>
<span id="cb3-2">doc_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempdir</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".docx$"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-3">doc_in <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_docx</span>(doc_path)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the content of the document as a dataframe</span></span>
<span id="cb3-6">doc_tidy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">docx_summary</span>(doc_in)</span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(doc_tidy)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   43 obs. of  11 variables:
 $ doc_index   : int  1 2 3 3 3 3 3 3 3 3 ...
 $ content_type: chr  "paragraph" "paragraph" "table cell" "table cell" ...
 $ style_name  : chr  "heading 1" "Normal" NA NA ...
 $ text        : chr  "This is a test" "Below is a table." "mpg" "21.0" ...
 $ level       : num  NA NA NA NA NA NA NA NA NA NA ...
 $ num_id      : int  NA NA NA NA NA NA NA NA NA NA ...
 $ row_id      : int  NA NA 1 2 3 4 1 2 3 4 ...
 $ is_header   : logi  NA NA TRUE FALSE FALSE FALSE ...
 $ cell_id     : num  NA NA 1 1 1 1 2 2 2 2 ...
 $ col_span    : num  NA NA 1 1 1 1 1 1 1 1 ...
 $ row_span    : int  NA NA 1 1 1 1 1 1 1 1 ...</code></pre>
</div>
</div>
<p>The <code>doc_in</code> object has ‘rdocx’ class that carries the extracted elements and associated style information. Running <code>docx_summary()</code> converts this to the single tidy dataframe that we’re after.</p>
<p>You can see we have information here about the content of our doc. For purposes of this post, we care about:</p>
<ul>
<li><code>text</code>, which is the actual written content</li>
<li><code>content_type</code>, which can tell us if we’re looking at table cells</li>
<li><code>doc_index</code>, which assigns an ID value so document elements stay together (e.g.&nbsp;cells of a table will all carry the same <code>doc_index</code>)</li>
<li><code>cell_id</code> and <code>row_id</code>, which tell us the x and y cell locations in tables</li>
<li><code>is_header</code>, which can tell us if the row contains a table header.</li>
</ul>
<p>Now to extract the table elements and ‘re-rectangularise’ back into a dataframe.</p>
</section>
<section id="cop-a-load-of-this" class="level2">
<h2 class="anchored" data-anchor-id="cop-a-load-of-this">Cop a load of this</h2>
<p>I’ve made two functions using base R:</p>
<ol type="1">
<li><code>rectangularise_tables()</code> (note the plural) takes the dataframe provided by <code>docx_summary()</code> and outputs a list of dataframes, one per table in the original Word file</li>
<li><code>.rectangularise_table()</code> (not pluralised and starts with a dot for disambiguation), which runs inside <code>rectangularise_tables()</code> to reformat the tidy representation of a single Word table into an R dataframe</li>
</ol>
<p>You’ll need to copy both of these into your session and run them. For convenience, <a href="https://gist.github.com/matt-dray/d4837f106bcee80ea39235b6465a7cac">I’ve added them to a GitHub gist</a>. I’ve added commentary so you can see what’s happening in each bit.</p>
<details>
<summary>
Click to expand the <code>rectangularise_tables()</code> definition.
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">rectangularise_tables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(</span>
<span id="cb5-2">    docx_summary,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output dataframe from docx_summary</span></span>
<span id="cb5-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">assume_headers =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assume headers in first row?</span></span>
<span id="cb5-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type_convert =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try to coerce columns to most likely data type?</span></span>
<span id="cb5-5">) {</span>
<span id="cb5-6">  </span>
<span id="cb5-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check inputs</span></span>
<span id="cb5-8">  </span>
<span id="cb5-9">  is_data.frame <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(docx_summary, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb5-10">  </span>
<span id="cb5-11">  docx_summary_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb5-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_index"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content_type"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"style_name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"level"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num_id"</span>, </span>
<span id="cb5-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_header"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cell_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col_span"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row_span"</span></span>
<span id="cb5-14">  )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># column names we can expect in the output from docx_summary</span></span>
<span id="cb5-15">  </span>
<span id="cb5-16">  is_docx_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(docx_summary) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> docx_summary_names)</span>
<span id="cb5-17">  </span>
<span id="cb5-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>is_data.frame <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>is_docx_summary) {</span>
<span id="cb5-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(</span>
<span id="cb5-20">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(</span>
<span id="cb5-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Argument 'docx_summary' must be a data.frame created with"</span>,</span>
<span id="cb5-22">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'officer::docx_summary'."</span></span>
<span id="cb5-23">      ),</span>
<span id="cb5-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb5-25">    )</span>
<span id="cb5-26">  }</span>
<span id="cb5-27">  </span>
<span id="cb5-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get only the rows that relate to Word tables</span></span>
<span id="cb5-29">  docx_summary_tables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb5-30">    docx_summary[docx_summary[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content_type"</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table cell"</span>, ]</span>
<span id="cb5-31">  </span>
<span id="cb5-32">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the ID value for each Word table</span></span>
<span id="cb5-33">  doc_indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(docx_summary_tables[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_index"</span>]])</span>
<span id="cb5-34">  </span>
<span id="cb5-35">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initiate an empty list to hold dataframe representations of the Word tables</span></span>
<span id="cb5-36">  tables_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(doc_indices))</span>
<span id="cb5-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(tables_out) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_index_"</span>, doc_indices)</span>
<span id="cb5-38">  </span>
<span id="cb5-39">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For each Word table, 'rectangularise' into a dataframe and add to the list</span></span>
<span id="cb5-40">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (doc_index <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> doc_indices) {</span>
<span id="cb5-41">    </span>
<span id="cb5-42">    docx_summary_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> </span>
<span id="cb5-43">      docx_summary_tables[docx_summary_tables[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_index"</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> doc_index, ]</span>
<span id="cb5-44">    </span>
<span id="cb5-45">    extracted_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.rectangularise_table</span>(docx_summary_table, assume_headers)</span>
<span id="cb5-46">    </span>
<span id="cb5-47">    list_element_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_index_"</span>, doc_index)</span>
<span id="cb5-48">    tables_out[[list_element_name]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> extracted_table</span>
<span id="cb5-49">    </span>
<span id="cb5-50">  }</span>
<span id="cb5-51">  </span>
<span id="cb5-52">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optionally convert columns to appropriate type (integer, etc)</span></span>
<span id="cb5-53">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (type_convert) {</span>
<span id="cb5-54">    tables_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(tables_out, type.convert, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as.is =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-55">  }</span>
<span id="cb5-56">  </span>
<span id="cb5-57">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tables_out)</span>
<span id="cb5-58">  </span>
<span id="cb5-59">}</span></code></pre></div>
</div>
</details>
<details>
<summary>
Click to expand the <code>.rectangularise_table()</code> definition.
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">.rectangularise_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(</span>
<span id="cb6-2">    table_cells,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># docx_summary output filtered for 'table cells' only</span></span>
<span id="cb6-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">assume_headers =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assume headers in first row?</span></span>
<span id="cb6-4">) {</span>
<span id="cb6-5">  </span>
<span id="cb6-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check inputs</span></span>
<span id="cb6-7">  </span>
<span id="cb6-8">  is_table_cells <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(table_cells[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content_type"</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table cell"</span>)</span>
<span id="cb6-9">  is_one_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(table_cells[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"doc_index"</span>]])) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-10">  </span>
<span id="cb6-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>is_table_cells <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>is_one_table) {</span>
<span id="cb6-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(</span>
<span id="cb6-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(</span>
<span id="cb6-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Argument 'table_cells' must be a dataframe created with"</span>,</span>
<span id="cb6-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'officer::docx_summary' where 'content_type' is filtered for"</span>,</span>
<span id="cb6-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'table cell' only."</span></span>
<span id="cb6-17">      ),</span>
<span id="cb6-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb6-19">    )</span>
<span id="cb6-20">  }</span>
<span id="cb6-21">  </span>
<span id="cb6-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split each Word table into a list element, isolate headers and cell contents</span></span>
<span id="cb6-23">  cell_id_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(table_cells, table_cells[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cell_id"</span>]])</span>
<span id="cb6-24">  headers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(cell_id_split, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x[x[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_header"</span>]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>])</span>
<span id="cb6-25">  content <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(cell_id_split, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>x[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_header"</span>]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>])</span>
<span id="cb6-26">  table_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(content)</span>
<span id="cb6-27">  </span>
<span id="cb6-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Column headers are identified by TRUE in the is_header column, but may not</span></span>
<span id="cb6-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># be marked up as such. Use them as dataframe headers if they exist.</span></span>
<span id="cb6-30">  has_headers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(headers)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-31">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (has_headers) {</span>
<span id="cb6-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(table_out) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> headers</span>
<span id="cb6-33">  }</span>
<span id="cb6-34">  </span>
<span id="cb6-35">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If headers are not identified by is_header, assume that the first row of the</span></span>
<span id="cb6-36">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Word table contains the headers. The user can control this behaviour with</span></span>
<span id="cb6-37">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the argument assume_headers.</span></span>
<span id="cb6-38">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>has_headers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> assume_headers) {</span>
<span id="cb6-39">    headers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> table_out[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assume first row is headers</span></span>
<span id="cb6-40">    table_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> table_out[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(table_out), ]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rest of table is content</span></span>
<span id="cb6-41">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(table_out) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> headers</span>
<span id="cb6-42">  }</span>
<span id="cb6-43">  </span>
<span id="cb6-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(table_out)</span>
<span id="cb6-45">  </span>
<span id="cb6-46">}</span></code></pre></div>
</div>
</details>
<p>You’ll notice the <code>assume_headers</code> argument. The headers for a Word table are marked by <code>TRUE</code> in the <code>is_header</code> column of the output from <code>docx_summary()</code>. Except when they aren’t. It’s possible that you’ll read a Word doc where the table headers aren’t identified. Set <code>assume_headers</code> to <code>TRUE</code> (the default) to allow <code>rectangularise_table()</code> to instead use the first row of the table as headers. The setting will apply to all tables; I reckon that it’s all or nothing whether table headers will be marked up in a given Word document.</p>
<p>You may also have seen the <code>type_convert</code> argument<sup>5</sup>. By default, the <code>text</code> column in the output from <code>docx_summary()</code> will be character class, but the actual data might be integers, for example. <a href="https://www.rostrum.blog/2023/04/23/type-convert/">As explained in a recent blog post</a>, the <code>type.convert()</code> function attempts to coerce a column to the appropriate data type if possible.</p>
<p>And now we can see that the dataset works using our test document:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">df_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rectangularise_tables</span>(doc_tidy)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(df_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 2
 $ doc_index_3:'data.frame':    3 obs. of  5 variables:
  ..$ mpg : num [1:3] 21 21 22.8
  ..$ cyl : int [1:3] 6 6 4
  ..$ disp: int [1:3] 160 160 108
  ..$ hp  : int [1:3] 110 110 93
  ..$ drat: num [1:3] 3.9 3.9 3.85
 $ doc_index_5:'data.frame':    3 obs. of  5 variables:
  ..$ Ozone  : int [1:3] 41 36 12
  ..$ Solar.R: int [1:3] 190 118 149
  ..$ Wind   : num [1:3] 7.4 8 12.6
  ..$ Temp   : int [1:3] 67 72 74
  ..$ Month  : int [1:3] 5 5 5</code></pre>
</div>
</div>
<p>Smashing. We have a list of two dataframes: one for each of the tables in the test document. I took the liberty of naming the list elements like <code>doc_index_*</code> so you can trace which <code>doc_index</code> they were in the original output from <code>docx_summary()</code>.</p>
</section>
<section id="prisonr" class="level2">
<h2 class="anchored" data-anchor-id="prisonr">PrisonR</h2>
<p>To summarise, this is absolutely not the worst code-related crime I’ve committed on this blog. Sorry guv! I’ll definitely be sentenced to the most severe punishment if caught and tried: several minutes of hard labour, or ‘refactoring’ as they call it on the inside.</p>
<p>At worst I’ll build an Andy-Dufresne-style tunnel out of my prison cell and hide the entrance behind years of accumulated hex stickers.</p>
<div class="tip">
<p> <b>Note</b></p>
<p>As a bonus, I later wrote a quick reproducible example that part-solves the original reason for this post. Here I’ve used {docxtractr} to extract tables from docx files in separate subfolders and then combine them.</p>
<details>
<summary>
Click to expand code.
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Attach packages (all are available from CRAN)</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(docxtractr)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to extract tables from docx files</span></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(officer)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to create dummy docx files</span></span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(charlatan)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to generate fake data</span></span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create multiple dummy docx files in separate temporary folders</span></span>
<span id="cb9-7"></span>
<span id="cb9-8">my_folder <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempdir</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># temporary locations to store the files</span></span>
<span id="cb9-9">n_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the number of dummy files to generate</span></span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(n_files)) {</span>
<span id="cb9-12">  </span>
<span id="cb9-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create subfolders</span></span>
<span id="cb9-14">  subfolder_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subfolder_"</span>, i)</span>
<span id="cb9-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(my_folder, subfolder_name))</span>
<span id="cb9-16">  </span>
<span id="cb9-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create dummy dataframe</span></span>
<span id="cb9-18">  </span>
<span id="cb9-19">  n_fake <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of fake data items to generate</span></span>
<span id="cb9-20">  </span>
<span id="cb9-21">  temp_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb9-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ch_name</span>(n_fake),</span>
<span id="cb9-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">job =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ch_job</span>(n_fake),</span>
<span id="cb9-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">phone =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ch_phone_number</span>(n_fake)</span>
<span id="cb9-25">  )</span>
<span id="cb9-26">  </span>
<span id="cb9-27">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add dummy dataframe to a docx file and save it</span></span>
<span id="cb9-28">  path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(my_folder, subfolder_name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"df_"</span>, i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".docx"</span>))</span>
<span id="cb9-29">  officer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_docx</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">body_add_table</span>(temp_df) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">target =</span> path)</span>
<span id="cb9-30">  </span>
<span id="cb9-31">}</span>
<span id="cb9-32"></span>
<span id="cb9-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file paths to all the docx files</span></span>
<span id="cb9-34">docx_paths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(</span>
<span id="cb9-35">  my_folder,</span>
<span id="cb9-36">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".docx$"</span>,</span>
<span id="cb9-37">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return full filepaths</span></span>
<span id="cb9-38">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># look in all subfolders</span></span>
<span id="cb9-39">)</span>
<span id="cb9-40"></span>
<span id="cb9-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preallocate a list to be filled with extracted tables, one element per file</span></span>
<span id="cb9-42">extracted_tables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, n_files)</span>
<span id="cb9-43"></span>
<span id="cb9-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract tables and add to the list (not tested: I think that read_docx will</span></span>
<span id="cb9-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read .doc files, but only if you have LibreOffice installed.</span></span>
<span id="cb9-46"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> docx_paths) {</span>
<span id="cb9-47">  tables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> docxtractr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_docx</span>(i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">docx_extract_all_tbls</span>()</span>
<span id="cb9-48">  extracted_tables[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(i)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tables</span>
<span id="cb9-49">}</span>
<span id="cb9-50"></span>
<span id="cb9-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In this simple demo, the dataframes in each list element can be appended</span></span>
<span id="cb9-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># because they all have the same column names and types.</span></span>
<span id="cb9-53"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, extracted_tables)</span></code></pre></div>
</div>
</details></div>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-07-17 18:05:37 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] officer_0.6.2

loaded via a namespace (and not attached):
 [1] digest_0.6.31     R6_2.5.1          fastmap_1.1.1     xfun_0.39        
 [5] fontawesome_0.5.1 knitr_1.43.1      htmltools_0.5.5   rmarkdown_2.23   
 [9] xml2_1.3.5        cli_3.6.1         zip_2.3.0         askpass_1.1      
[13] openssl_2.1.0     textshaping_0.3.6 systemfonts_1.0.4 compiler_4.3.1   
[17] rstudioapi_0.15.0 tools_4.3.1       ragg_1.2.5        evaluate_0.21    
[21] yaml_2.3.7        rlang_1.1.1       jsonlite_1.8.7    htmlwidgets_1.6.2
[25] uuid_1.1-0       </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Related: I have some experience with R-to-Excel: <a href="https://co-analysis.github.io/a11ytables/">my {a11ytables} package</a> generates best-practice spreadsheets <a href="https://ycphs.github.io/openxlsx/">using {openxlsx}</a>.↩︎</p></li>
<li id="fn2"><p>It would be wrong for me not to point out that you can extract Excel and ODS cells into ‘tidy’ dataframes with <a href="https://nacnudus.github.io/tidyxl/index.html">Duncan Garmonsway’s {tidyxl}</a> and <a href="https://mattkerlogue.github.io/tidyods/">Matt Kerlogue’s {tidyods}</a>. No, they haven’t sponsored this post (invoices in the mail, chaps).↩︎</p></li>
<li id="fn3"><p>Merged cells in the table end up being unmerged, with the upper- and left-most cells holding the content and the remianing cells being assigned <code>NA</code>.↩︎</p></li>
<li id="fn4"><p>I did this for my own curiosity, really. Just like everything else on this blog! As mentioned, check out <a href="https://github.com/hrbrmstr/docxtractr">{docxtractr}</a> and <a href="https://elipousson.github.io/officerExtras">{officerExtras}</a> for better implementations.↩︎</p></li>
<li id="fn5"><p>What a handy function. This was useful enough that Eli has now added it to <a href="https://elipousson.github.io/officerExtras/reference/officer_tables.html">{officerExtras}</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>ms-office</category>
  <category>officer</category>
  <category>officerExtras</category>
  <category>public-sector</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2023-06-07-rectangular-officer/index.html</guid>
  <pubDate>Tue, 06 Jun 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Recreating a dataviz with {ggplot2}</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-05-10-spear-ggplot2/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-05-10-spear-ggplot2/resources/corporate.png" class="img-fluid figure-img" style="width:100.0%" alt="The Office meme that says 'corporate needs you to find the difference between these two pictures. A crudely copy-pasted image of an original data visualisation by Mary Eleanor Spear is on the left and a recreation of it is on the right. They look pretty similar."></p>
<figcaption class="figure-caption">They’re the same picture. Nearly.</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>Two years ago I won <a href="https://rss.org.uk/news-publication/news-publications/2021/general-news/cottonviz-data-visualisation-challenge-winners-ann/">a data-viz recreation competition run by the Royal Statistical Society</a> (RSS) using base R’s plotting. I wrote a short {ggplot2} how-to for RSS’s ‘Significance’ magazine that was never published<sup>1</sup>, so here it is now.</p>
</section>
<section id="recreate" class="level2">
<h2 class="anchored" data-anchor-id="recreate">Recreate</h2>
<p>This short code walkthrough will get you started on recreating <a href="https://en.wikipedia.org/wiki/Mary_Eleanor_Spear">Mary Eleanor Spear</a>’s cotton plot (1952), as used in <a href="https://rss.org.uk/news-publication/news-publications/2021/general-news/cottonviz-data-visualisation-challenge-winners-ann/">the Royal Statistical Society’s #CottonViz challenge</a>. We’ll concentrate on the line chart for now.</p>
<p><img src="https://www.rostrum.blog/posts/2023-05-10-spear-ggplot2/resources/spear.jpg" class="img-fluid" style="width:100.0%" alt="Mary Eleanor Spear's original plot of cotton supplies in 1940s USA. On the left is a line plot showing that carry-over stocks fell from 1942 to 1948, while consumption dropped slightly and exports rose slightly. A bar plot to the right shows the same data as a stacked bar chart. There are titles and captions around the plots."></p>
<p><a href="https://ggplot2.tidyverse.org/">The {ggplot2} package in R</a> is a good choice, since we can build up the chart in steps: first, we’ll build a basic line chart, remove unneeded elements, fix the axes and finally add the labels. It won’t look perfectly like Spear’s original, but we’ll get close.</p>
<p>This isn’t a guide to learn {ggplot2}, so you may want to <a href="https://r4ds.had.co.nz/data-visualisation.html">learn the basics first</a>. Alternatively, <a href="https://www.rostrum.blog/2021/06/08/recreate-spear/">I wrote a blog post</a> about building Spear’s entire visualisation using base R only.</p>
</section>
<section id="requirements" class="level2">
<h2 class="anchored" data-anchor-id="requirements">Requirements</h2>
<p>First, some preparation. If you haven’t already, install the <a href="https://ggplot2.tidyverse.org/">{ggplot2}</a> package for plotting, <a href="https://tidyr.tidyverse.org/">{tidyr}</a> data reshaping and <a href="https://github.com/wch/extrafont">{extrafont}</a> for font handling.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"extrafont"</span>)</span></code></pre></div>
</div>
<p>You can download for free <a href="https://webonastick.com/fonts/routed-gothic/">the Routed Gothic font by Darren Embry</a>, which is a good approximation of the stencil lettering used by Spear. Installation will depend on your system, but in macOS you can simply drag the font files to the Font Book app. When you attach {extrafont} it’ll fetch automatically your installed fonts (including Routhed Gothic) so you can use them in R.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(extrafont)</span></code></pre></div>
</div>
</section>
<section id="tidying-up" class="level2">
<h2 class="anchored" data-anchor-id="tidying-up">Tidying up</h2>
<p>The cotton dataset is quite small, so we can create the dataframe ourselves. It provides information on the supply of cotton in the USA in the 1940s.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">cotton_raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year           =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1942</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1948</span>,</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">us_consumption =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9993</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9693</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9423</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10072</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9374</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7833</span>),</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exports        =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1480</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1139</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2007</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3613</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3545</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1968</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4785</span>),</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stocks         =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10657</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10744</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11164</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7326</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2530</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3080</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5283</span>),</span>
<span id="cb3-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_supply   =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23297</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21876</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22864</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20362</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16147</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14422</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17901</span>)</span>
<span id="cb3-7">)</span></code></pre></div>
</div>
<p>It’s preferable to make the data ‘tidy’ so that there’s one row per year and consumption type, and one column for each variable. The {tidyr} package can help us pivot the data to ‘long’ format from this ‘wide’ format.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb4-2"></span>
<span id="cb4-3">cotton <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cotton_raw <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(us_consumption, exports, stocks), </span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"consumption_type"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boles"</span></span>
<span id="cb4-7">  )</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(cotton, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># preview first few rows</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
   year total_supply consumption_type boles
  &lt;int&gt;        &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt;
1  1942        23297 us_consumption   11160
2  1942        23297 exports           1480
3  1942        23297 stocks           10657
4  1943        21876 us_consumption    9993</code></pre>
</div>
</div>
</section>
<section id="how-to" class="level2">
<h2 class="anchored" data-anchor-id="how-to">How-to</h2>
<section id="step-1-line-chart" class="level3">
<h3 class="anchored" data-anchor-id="step-1-line-chart">Step 1: line chart</h3>
<p>Now we can create a basic line chart of the data with <code>geom_line()</code> and set with <code>scale_linetype_manual()</code> a unique dashed line per group. Further arguments set the title and the typeface to be used throughout the plot, while a small tweak to <code>theme()</code> adjusts the title’s position.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb6-2"></span>
<span id="cb6-3">p1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(</span>
<span id="cb6-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> cotton,</span>
<span id="cb6-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> year, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> boles <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> consumption_type),</span>
<span id="cb6-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span></span>
<span id="cb6-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_linetype_manual</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longdash"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"solid"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Millions of Boles"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb6-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb6-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Routed Gothic"</span>)</span>
<span id="cb6-14">  )</span>
<span id="cb6-15"></span>
<span id="cb6-16">p1</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.rostrum.blog/posts/2023-05-10-spear-ggplot2/index_files/figure-html/plot-start-1.png" class="img-fluid" width="480"></p>
</div>
</div>
</section>
<section id="step-2-remove-features" class="level3">
<h3 class="anchored" data-anchor-id="step-2-remove-features">Step 2: remove features</h3>
<p>Let’s clear away the unneeded features: the background panel, the axes titles and the legend. You can empty these with <code>element_blank()</code> in the <code>theme()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">p2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb7-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb7-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span></span>
<span id="cb7-6">  )</span>
<span id="cb7-7"></span>
<span id="cb7-8">p2</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.rostrum.blog/posts/2023-05-10-spear-ggplot2/index_files/figure-html/plot-theme-1.png" class="img-fluid" width="480"></p>
</div>
</div>
</section>
<section id="step-3-correct-the-axes" class="level3">
<h3 class="anchored" data-anchor-id="step-3-correct-the-axes">Step 3: correct the axes</h3>
<p>Now we can address the axes. Use the <code>scale_*_continuous()</code> functions to set the axes values, limits, origin and labels. With <code>sec.axis</code> you can create a secondary y-axis that mirrors the first, then remove the tick labels in the <code>theme()</code> function. You can also put a box around the chart area with the <code>panel.border</code> argument.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">p3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(</span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1942</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1948</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1942"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>)),</span>
<span id="cb8-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-6">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(</span>
<span id="cb8-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb8-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>),</span>
<span id="cb8-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb8-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sec.axis =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dup_axis</span>()</span>
<span id="cb8-12">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb8-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)),</span>
<span id="cb8-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lines"</span>),</span>
<span id="cb8-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y.right =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb8-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.border =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-18">  )</span>
<span id="cb8-19"></span>
<span id="cb8-20">p3</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.rostrum.blog/posts/2023-05-10-spear-ggplot2/index_files/figure-html/plot-axes-1.png" class="img-fluid" width="480"></p>
</div>
</div>
</section>
<section id="step-4-labels" class="level3">
<h3 class="anchored" data-anchor-id="step-4-labels">Step 4: labels</h3>
<p>The only missing features are the labels and arrows, which can be added with the <code>annotate()</code> and <code>geom_segment()</code>, respectively. A bit of trial-and-error will help you find the correct coordinates to place these elements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">p4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p3 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(</span>
<span id="cb9-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">geom =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb9-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1946.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1945.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1943.75</span>),</span>
<span id="cb9-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>),</span>
<span id="cb9-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U. S. Consumption"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carry – over</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Stocks"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exports"</span>),</span>
<span id="cb9-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Routed Gothic"</span></span>
<span id="cb9-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb9-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb9-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1945.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1945.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1944.2</span>),</span>
<span id="cb9-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.1</span>),</span>
<span id="cb9-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1945</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1945.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1944.4</span>), </span>
<span id="cb9-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.8</span>)</span>
<span id="cb9-15">    ),</span>
<span id="cb9-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrow</span>(</span>
<span id="cb9-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mm"</span>),</span>
<span id="cb9-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"closed"</span></span>
<span id="cb9-19">    )</span>
<span id="cb9-20">  )</span>
<span id="cb9-21"></span>
<span id="cb9-22">p4</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.rostrum.blog/posts/2023-05-10-spear-ggplot2/index_files/figure-html/plot-segments-1.png" class="img-fluid" width="480"></p>
</div>
</div>
</section>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next steps</h2>
<p>Finally we’ve got a lineplot that looks pretty close to Spear’s visualisation. What subtle differences do you notice, though? Try to find ways to improve them.</p>
<p>Next, try to recreate the stacked-barchart from Spear’s original and then arrange the plots with a main title and surrounding text labels. <a href="https://coolbutuseless.github.io/package/ggpattern/index.html">The {ggpattern} package</a> may help you recreate the hatchlines on the bars and <a href="https://patchwork.data-imaginist.com/">{patchwork}</a> could help with the arrangement of the plot and text elements.</p>
</section>
<section id="full-base-r-alternative" class="level2">
<h2 class="anchored" data-anchor-id="full-base-r-alternative">Full base R alternative</h2>
<p>For the original challenge I used only base R’s plotting system rather than {ggplot2}. This is what my submitted image looked like:</p>
<p><img src="https://www.rostrum.blog/posts/2023-05-10-spear-ggplot2/resources/recreation.png" class="img-fluid" style="width:100.0%" alt="The recreated plot in progress: the recreation is complete, with both the line and bar plots completed and the titles and captions added."></p>
<p>You can read more about it in <a href="https://www.rostrum.blog/2021/06/08/recreate-spear/">the accompanying blog post</a> and you can find <a href="https://github.com/matt-dray/viz-recreation/tree/main/2021-06-08_cottonviz_spear">the original code on GitHub</a>.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-07-06 19:27:43 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] ggplot2_3.4.2 tidyr_1.3.0  

loaded via a namespace (and not attached):
 [1] vctrs_0.6.3       cli_3.6.1         knitr_1.43.1      rlang_1.1.1      
 [5] xfun_0.39         purrr_1.0.1       generics_0.1.3    jsonlite_1.8.7   
 [9] labeling_0.4.2    glue_1.6.2        colorspace_2.1-0  htmltools_0.5.5  
[13] scales_1.2.1      fansi_1.0.4       rmarkdown_2.23    grid_4.3.1       
[17] munsell_0.5.0     evaluate_0.21     tibble_3.2.1      fastmap_1.1.1    
[21] yaml_2.3.7        lifecycle_1.0.3   compiler_4.3.1    dplyr_1.1.2      
[25] htmlwidgets_1.6.2 pkgconfig_2.0.3   rstudioapi_0.14   farver_2.1.1     
[29] digest_0.6.31     R6_2.5.1          tidyselect_1.2.0  utf8_1.2.3       
[33] pillar_1.9.0      magrittr_2.0.3    gtable_0.3.3      tools_4.3.1      
[37] withr_2.5.0      </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>At least I don’t think so. I can’t find it by searching on the website, anyway. Also, enough time has passed that certain bits of the original code have since been deprecated in {ggplot2}, lol.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>data-viz</category>
  <category>history</category>
  <category>ggplot2</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2023-05-10-spear-ggplot2/index.html</guid>
  <pubDate>Tue, 09 May 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Automate {blogdown} to Quarto</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-05-07-bd2q/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-05-07-bd2q/resources/rostrum-blog-2.png" class="img-fluid figure-img" style="width:100.0%" alt="A screenshot of a version of this blog designed with Quarto. The style is very similar, using green and black and the blog logo, which is a 16 by 16 pixel picture of an insect. There are new sections for 'About', 'RSS' and 'Source', as well as s search button. The posts are displayed as 'cards' rather than in a list."></p>
<figcaption class="figure-caption">gRaPhIc DeSiGn Is My PaSsIoN.</figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I’ve written a quick R package, <a href="https://github.com/matt-dray/bd2q">{bd2q}</a>, to help me convert my <a href="https://pkgs.rstudio.com/blogdown/">{blogdown}</a> blog to <a href="https://quarto.org/">Quarto</a>. Whether I’ll actually complete the conversion is another story.</p>
</section>
<section id="upside-blogdown" class="level2">
<h2 class="anchored" data-anchor-id="upside-blogdown">Upside blogdown</h2>
<p>It is destiny: no-one is ever completely happy with their blog.</p>
<p>This site was built five years ago<sup>1</sup> with <a href="https://pkgs.rstudio.com/blogdown/">{blogdown}</a>, which lets you write R Markdown files and have them knitted into a blog. I ignored <a href="https://rstudio.github.io/distill/">the newer {distill} package</a><sup>2</sup>, but <a href="https://quarto.org/">Quarto</a> may be worth the switch. It’ll let me simplify the blog’s structure<sup>3</sup> and take advantage of Quarto’s snazzy features<sup>4</sup>.</p>
<p>But I didn’t fancy transferring and editing ~150 posts by hand, so I’ve written a few functions to help out.</p>
</section>
<section id="when-in-doubt-make-a-package" class="level2">
<h2 class="anchored" data-anchor-id="when-in-doubt-make-a-package">When in doubt, make a package</h2>
<p>And so the {bd2q} R package<sup>5</sup> is <a href="https://github.com/matt-dray/bd2q">available from GitHub</a>. It does what I need it to do for now, but note it only has basic error checking, has no unit tests, etc. Use at own risk, etc. It’s likely to remain unpolished forever, but feel free to add issues or pull requests. To install:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"remotes"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if not yet installed</span></span>
<span id="cb1-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matt-dray/bd2q"</span>)</span></code></pre></div>
</div>
<p>Three things were in scope for this package:</p>
<ol type="1">
<li>Create a template Quarto blog.</li>
<li>Create the necessary Quarto folder structure for posts, then transfer posts and resources from the old {blogdown} blog.</li>
<li>Tweak the posts to remove or replace selected lines.</li>
</ol>
<section id="quarto-blog-template" class="level3">
<h3 class="anchored" data-anchor-id="quarto-blog-template">1. Quarto blog template</h3>
<p>I assume someone has already written a version of <code>usethis::create_project()</code> for creating a Quarto blog. Regardless, I’ve written <code>bd2q::create_template()</code> to generate a folder with the minimal structure required, which makes my life easier for testing purposes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">bd2q<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_template</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q_path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/new-quarto-blog"</span>)</span></code></pre></div>
</div>
<pre><code>✔ Created template Quarto blog at /Users/mattdray/new-quarto-blog</code></pre>
<p>The skeleton content is opinionated and differs a bit to the one generated through RStudio’s ‘new project’ menu, for example, but the structure is the same:</p>
<pre><code>blog
├── about.qmd
├── index.qmd
├── posts/
│   └── metadata.yml
├── styles.css
└── blog.rproj</code></pre>
<p>Of course, now we need to pull in the posts from the old {blogdown} blog.</p>
</section>
<section id="transfer-posts-and-resources" class="level3">
<h3 class="anchored" data-anchor-id="transfer-posts-and-resources">2. Transfer posts and resources</h3>
<p>Typically in a {blogdown} blog, all R Markdown posts and their rendered HTML files are stored together in <code>content/post/</code> in the form <code>YYYY-MM-DD-post-name.Rmd</code> and <code>YYYY-MM-DD-post-name.html</code>. Resources, like images, live separately in <code>static/post/</code> with a folder per post in the form <code>YYYY-MM-DD-post-name_files/</code>.</p>
<p>Here’s a simplified folder structure that focuses on a single post and its resources:</p>
<pre><code>blog/
├── content/
│   └── post/
│       ├── YYYY-MM-DD-post-name.Rmd
│       └── YYYY-MM-DD-post-name.html
└── static/
    └── post/
        └── YYYY-MM-DD-post-name_files/
            └── image.png</code></pre>
<p>Quarto simplifies this structure. Each post gets its own folder in <code>posts/</code>, like <code>YYYY-MM-DD-post-name</code>, which contains the post as <code>index.qmd</code> and a folder of resources. This means the post and all its content are stored together in one containing folder.</p>
<pre><code>blog/
└── posts/
    └── YYYY-MM-DD-post-name/
        ├── index.qmd
        └── resources/
            └── image.png</code></pre>
<p>To do the conversion, <code>bd2q::transfer_posts()</code> copies posts from a {blogdown} blog structure to a Quarto blog structure, setting up the required folders and renaming each post to <code>index.qmd</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transfer_posts</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bd_path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/old-blogdown-blog"</span>,</span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q_path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/new-quarto-blog"</span></span>
<span id="cb7-4">)</span></code></pre></div>
</div>
<pre><code>✔ Created posts/ directory structure.
ℹ Copying posts.
✔ Copied 148 posts to /Users/mattdray/new-quarto-blog.</code></pre>
<p>Once that’s been run, <code>bd2q::transfer_resources()</code> can copy each post’s resources into an accompanying subfolder, which defaults to the name ‘resources’. You can choose which file types you want transfer with the <code>exts_keep</code> argument.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transfer_resources</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bd_path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/old-blogdown-blog"</span>,</span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q_path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/new-quarto-blog"</span>,</span>
<span id="cb9-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">resources_dir =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"resources"</span>,</span>
<span id="cb9-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exts_keep =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gif"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jpg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jpeg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"png"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svg"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wav"</span>),</span>
<span id="cb9-6">)</span></code></pre></div>
</div>
<pre><code>ℹ Copying resources.
✔ Copied 455 resources to each post's resources/ folder in Users/mattdray/new-quarto-blog/posts.</code></pre>
<p>Of course this doesn’t account for everything, like bits of JavaScript and CSS related to the use of <a href="https://www.htmlwidgets.org/">htmlwidgets</a>. I’m not really bothered about this, because these should be recreated when I re-render each post.</p>
<p>Note that you can use <code>bd2q::create_and_transfer()</code> if you want to run <code>create_template()</code>, <code>transfer_posts()</code> and <code>transfer_resources()</code> all at once. Regardless, once you’ve got the structure sorted, you can begin to adjust the posts if you need to.</p>
</section>
<section id="tweak-post-content" class="level3">
<h3 class="anchored" data-anchor-id="tweak-post-content">3. Tweak post content</h3>
<p>There’s content in the body of each post that I want to get rid of or make more Quarto-like. I made a few functions that iterate over all the <code>index.qmd</code> files and replace or remove certain content.</p>
<p>One obvious necessity is to rebuild the resource paths (to images, sound files, etc), which can be done specifically with <code>bd2q::update_resource_paths()</code>. It defaults to creating paths to each post’s ‘resources’ subfolder, as generated by <code>bd2q::transfer_resources()</code>. For example, you could use a regular expression to match rows you know will contain a resource path and have them updated for the new Quarto folder structure (I tend to insert images with HTML rather than Markdown, hence the <code>&lt;img&gt;</code> tag in the example below).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update_resource_paths</span>(</span>
<span id="cb11-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q_path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/new-quarto-blog"</span>,</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">resources_dir =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"resources"</span>,</span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">resource_rx =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;img src="</span></span>
<span id="cb11-5">)</span></code></pre></div>
</div>
<pre><code>ℹ Updating posts.
✔ 148 posts updated.  </code></pre>
<p>I also added two replace/remove functions that are a little more generic.</p>
<p>The first is <code>bd2q::remove_line()</code>, which deletes a single line from each post based on a provided regular expression. When I was messing around with converting the blog to Quarto manually, I found that the presence of the ‘draft’ status in the YAML header would prevent the post from appearing on the homepage, even if was set to ‘no’. As a result, you can run something like this to find and remove the lines that start with ‘draft’:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">bd2q<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove_line</span>(</span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q_path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/new-quarto-blog"</span>,</span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">detect_rx =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^draft:"</span></span>
<span id="cb13-4">)</span></code></pre></div>
</div>
<pre><code>ℹ Making corrections.
✔ Removed lines matching the regular expression '^draft:' from 128 out of 148 posts.</code></pre>
<p>That’s fine for individual lines, but what if you have a sequence of <em>consecutive</em> lines that you want to find and remove, or replace with some other text?</p>
<p>That’s what <code>bd2q::replace_lines()</code> does. Provide a vector of strings that exactly match some consecutive lines in each post, then provide a vector of strings to replace them with (or NULL to simply remove them)<sup>6</sup>.</p>
<p>This addresses another specific problem I was having. I wanted to update my custom session-info blocks at the bottom of each post so that they instead appear as <a href="https://quarto.org/docs/authoring/appendices.html">a Quarto ‘appendix’</a>. That can be done like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">old_lines <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb15-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"---"</span>,</span>
<span id="cb15-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;details&gt;&lt;summary&gt;Session info&lt;/summary&gt;"</span>,</span>
<span id="cb15-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```{r eval=TRUE, sessioninfo, echo=FALSE}"</span>,</span>
<span id="cb15-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sessioninfo::session_info()"</span>,</span>
<span id="cb15-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```"</span>,</span>
<span id="cb15-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/details&gt;"</span></span>
<span id="cb15-8">)</span>
<span id="cb15-9"></span>
<span id="cb15-10">new_lines <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb15-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"## Details {.appendix}"</span>,</span>
<span id="cb15-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;details&gt;&lt;summary&gt;Session info&lt;/summary&gt;"</span>,</span>
<span id="cb15-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```{r}"</span>,</span>
<span id="cb15-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#' eval = TRUE,"</span>,</span>
<span id="cb15-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#' echo = FALSE"</span>,</span>
<span id="cb15-16">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cat("Date:", cat(format(Sys.time(), format = "%Y-%m-%d")), "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"); sessionInfo()'</span>,</span>
<span id="cb15-17">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```"</span></span>
<span id="cb15-18">)</span>
<span id="cb15-19"></span>
<span id="cb15-20">bd2q<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace_lines</span>(</span>
<span id="cb15-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q_path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/new-quarto-blog"</span>,</span>
<span id="cb15-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">match_str =</span> old_lines,</span>
<span id="cb15-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement_str =</span> new_lines</span>
<span id="cb15-24">)</span></code></pre></div>
</div>
<pre><code>ℹ Making corrections.
✔ Removed lines matching the provided string vector from 9 out of 148 posts.   </code></pre>
<p>Haha, uhoh, I was expecting to have fixed more posts than that! Looks like I might have written my custom session-info block slightly differently in each post (maybe an extra space or empty line?), so I’ll have to run the <code>bd2q::replace_lines()</code> multiple times to make sure I can replace it in each post that it appears.</p>
</section>
</section>
<section id="actually-use-the-package-pfft" class="level2">
<h2 class="anchored" data-anchor-id="actually-use-the-package-pfft">Actually use the package? Pfft!</h2>
<p>So, is {bd2q} objectively good? No.&nbsp;Does it do what I personally want it to do? Absolutely. Mostly. Yeah?</p>
<p>Of course, transferring files into a new structure is the easy part. The hard part is to see if each post will still re-render after all these years. It’s unlikely! There’s no dependency management in this blog because there was no easy easy to do it. Quarto, meanwhile, has <a href="https://quarto.org/docs/projects/code-execution.html#freeze">the ability to ‘freeze’ posts</a> and <a href="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html#make-posts-robust-with-renv">link each post to a {renv} lockfile</a> (thanks Albert) that captures each post’s package dependencies.</p>
<p>There are some other dependencies outside of packages though. For example, I have posts that use <a href="https://docs.ropensci.org/rtweet/">the {rtweet} package</a> to fetch tweets from Twitter, but Twitter is a garbage fire and I may never be able to fetch tweets from the API in future. I may have to just copy-paste the outputs that were created when the post was originally rendered, oh well.</p>
<p>To be clear: this is hard work. I may not be brave enough to do it any time soon. I’ve set up <a href="https://github.com/matt-dray/rostrum-blog-2">a GitHub repo for ‘rostrum-blog-2’</a> where I’ve been experimenting with styles and structure, so if I ever get round to this task then that’s where the fireworks will be happening.</p>
<p>And hey, at worst I got more familiar with the <a href="https://fs.r-lib.org/">{fs}</a> and <a href="https://cli.r-lib.org/">{cli}</a> packages when making {bd2q}, which are for ‘tidy’ path handling and nice user interfaces. A convoluted way to learn!</p>
<p>But that’s what this blog is all about, amirite.</p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-06-29 15:25:33 CEST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/Zurich
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] bd2q_0.0.0.9000

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        
 [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       
 [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        
[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Actually, we began this blog on WordPress in 2013. But WordPress doesn’t evaluate R code, so code outputs had to be pasted in manually. The original blog was meant to be more about general ecology, hence the name ‘rostrum’, which refers to the snouty bit of an insect and also the platform a speaker talks from. Seemed like a neat pun at the time, but the joke is kinda lost on an audience that’s no longer comprised mostly of entomologists. But the audience is mostly me, so I can live with it.↩︎</p></li>
<li id="fn2"><p>Although I did use it to <a href="https://www.rostrum.blog/2022/03/15/renv-profiles/">investigate a method with {renv}</a> for managing dependencies on a post-by-post basis.↩︎</p></li>
<li id="fn3"><p>In particular, {blogdown} <a href="https://gohugo.io/">depends on Hugo</a>, a ‘framework for building websites’. Quarto blogs are just… built on Quarto.↩︎</p></li>
<li id="fn4"><p>Especially things like <a href="https://github.com/coatless/quarto-webr">WebR for Quarto</a> that helps you embed interactive R chunks into your posts, which <a href="https://www.rostrum.blog/2023/03/16/webr-quarto/">I wrote about recently</a>.↩︎</p></li>
<li id="fn5"><p>‘bd2q’ as in ‘{blogdown} to Quarto’. Which is a boring name, I know.↩︎</p></li>
<li id="fn6"><p>This was actually more painful than I was hoping. There’s no easy way to match consecutive strings between vectors. In other words, try to extract the sequence <code>c("a", "b", "c")</code>, in that order, from the vector <code>c("a", "b", "d", "a", "b", "c", "d")</code>. Surely there’s an R function that will do this? Anyway, I fudged it by collapsing all the lines of a post into a single string and then finding the matching (collapsed) string provided by the user. Of course, the string will have to be ‘uncollapsed’ to get a string per line, so you can use <code>paste()</code> with a string provide to the <code>collapse</code> argument. But this separator will need to be a string that doesn’t appear in any of your posts, otherwise the uncollapsing process will break a line that you didn’t intend to be broken! I went with <code>///</code> by default, but the user can change this with the <code>collapse_str</code> argument in <code>bd2q::replace_lines()</code>. Sheesh.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>bd2q</category>
  <category>blog-meta</category>
  <category>blogdown</category>
  <category>quarto</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2023-05-07-bd2q/index.html</guid>
  <pubDate>Sat, 06 May 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Matt Dray Teaches (Data) Typing</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-04-23-type-convert/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-04-23-type-convert/resources/unown.png" class="img-fluid figure-img" style="width:100.0%" alt="A crudely drawn picture of three Pokémon as elements of a vector being constructed using R's 'c' function. All three are the Pokémon called Unown, which can be found in multiple forms that represent letters of the alphabet."></p>
<figcaption class="figure-caption">Confirmed: <a href="https://bulbapedia.bulbagarden.net/wiki/Unown_(Pok%C3%A9mon)">Unown</a> is character type.<sup>1</sup></figcaption>
</figure>
</div>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>I forgot that the base R function <code>type.convert()</code> exists. Handy for ‘simplifying’ all the columns of a dataframe to appropriate data types.</p>
</section>
<section id="suppression-depression" class="level2">
<h2 class="anchored" data-anchor-id="suppression-depression">Suppression depression</h2>
<p><a href="https://co-analysis.github.io/a11ytables/">{a11ytables}</a> is an R package that lets you generate publishable spreadsheets that follow the UK government’s <a href="https://analysisfunction.civilservice.gov.uk/policy-store/releasing-statistics-in-spreadsheets/">best practice guidance</a>.</p>
<p>One requirement is to replace missing values with placeholder symbols. For example, suppressed data can be replaced with the string <code>"[c]"</code> (‘confidential’).</p>
<p>Of course, R’s behaviour means it can store only one data type per column, so a numeric-type column will be automatically converted to character when you introduce at least one string value (i.e.&nbsp;something in <code>"quotes"</code>).<sup>2</sup></p>
<p>For example, this vector is type ‘double’ (i.e.&nbsp;decimals and not ‘whole-number’ integers) and has the more general ‘numeric’ class:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">nums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(nums); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(nums)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "double"</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
</div>
<p>The whole thing is converted to character type if you append just one character value.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(nums, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[c]"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
</div>
<p>This is known behaviour, yes, but it causes a minor annoyance in the xlsx files output from an {a11ytables} workflow: Excel puts a warning marker in the corner of any cell in a text column that contains a numeric value.<sup>3</sup></p>
<p><img src="https://www.rostrum.blog/posts/2023-04-23-type-convert/resources/number-text.png" class="img-fluid" style="width:100.0%" alt="Screenshot of an Excel worksheet. A cell containing a number has a warning that reads 'number stored as text'."></p>
<p><a href="https://github.com/co-analysis/a11ytables/issues/93">Cat left a GitHub issue</a> related to this: columns entirely made of numbers were being marked by Excel with the ‘number in a text column’ warning. In this case, it was because Cat’s suppression process resulted in <em>all</em> columns being converted to character.</p>
<p>It would be great to convert back to numeric any columns that did not receive a placeholder symbol during the wrangling process. How can you do this?</p>
</section>
<section id="type-specimen" class="level2">
<h2 class="anchored" data-anchor-id="type-specimen">Type specimen</h2>
<p>Let’s consider a demo example. First I’ll attach {dplyr}, which is commonly used by stats producers in the UK government.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressPackageStartupMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr))</span></code></pre></div>
</div>
<p>Here’s a very simple dataframe, <code>tbl</code>, to use as a demo. Column <code>x</code> contains values that will need to be suppressed because they’re lower than 5. There are no such values in column <code>y</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1337</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3">tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb7-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> LETTERS[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="cb7-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb7-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-7">)</span>
<span id="cb7-8"></span>
<span id="cb7-9">tbl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 3
  id        x     y
  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;
1 A      5.76  7.33
2 B      5.65  9.79
3 C      0.74  7.12
4 D      4.54  6.98
5 E      3.73  6.58</code></pre>
</div>
</div>
<p>So, to borrow and simplify Cat’s approach: for each numeric column in <code>tbl</code> (i.e.&nbsp;<code>x</code> and <code>y</code>), replace any value of less than 5 with the placeholder string <code>"[c]"</code>, otherwise retain the original value.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">tbl_supp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb9-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric),</span>
<span id="cb9-5">      \(value) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(</span>
<span id="cb9-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb9-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">true      =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[c]"</span>,</span>
<span id="cb9-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">false     =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(value)</span>
<span id="cb9-9">      )</span>
<span id="cb9-10">    )</span>
<span id="cb9-11">  )</span>
<span id="cb9-12"></span>
<span id="cb9-13">tbl_supp</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 3
  id    x     y    
  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;
1 A     5.76  7.33 
2 B     5.65  9.79 
3 C     [c]   7.12 
4 D     [c]   6.98 
5 E     [c]   6.58 </code></pre>
</div>
</div>
<p>So column <code>x</code> now contains text values and has predictably been converted to character, which you can see as <code>&lt;chr&gt;</code> in the tibble header. But notice that <code>y</code> is also character type despite all the numeric values being retained.</p>
<p>This happened because the <code>if_else()</code> we used to create <code>tbl_supp</code> required the <code>true</code> and <code>false</code> arguments to resolve to the same type. The <code>false</code> argument must use <code>as.character()</code> because <code>true</code> resolves to the character value <code>"[c]"</code>.</p>
<p>Ideally we’d perform our suppression step but column <code>x</code> would end up as character and <code>y</code> as numeric. How can we achieve this?</p>
</section>
<section id="adjust-my-type" class="level2">
<h2 class="anchored" data-anchor-id="adjust-my-type">Adjust my type</h2>
<p>In this section are some methods to fix the problem by:</p>
<ol type="1">
<li>Causing yourself further brainache</li>
<li>Using a (relatively little known?) base R function</li>
<li>Doing it ‘properly’ from the outset</li>
</ol>
<section id="type-1-nah" class="level3">
<h3 class="anchored" data-anchor-id="type-1-nah">Type 1: nah</h3>
<p>Of course, we could run <code>tbl_supp |&gt; mutate(y = as.numeric(y))</code> to convert that specific column back to numeric. But imagine if you have a lot more columns and you can’t be sure which ones need to be converted.</p>
<p>Maybe you could apply <code>as.numeric()</code> across <em>all</em> columns? Columns of numbers stored as text will then be converted entirely to numeric:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3</code></pre>
</div>
</div>
<p>But this causes a problem for character columns that contain text, like our placeholder symbol:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[c]"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: NAs introduced by coercion</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  1 NA</code></pre>
</div>
</div>
<p>So <code>"1"</code> becomes <code>1</code>, but we’re warned that <code>"[c]"</code> has been converted to <code>NA</code> (well, <code>NA_real_</code>, which is the numeric form of <code>NA</code>).</p>
<p>We could do something convoluted, like see which columns didn’t gain <code>NA</code> values and should be retained as numeric. But that’s bonkers. This approach ultimately makes things worse because we’ve actually lost information!</p>
<p>Really we want to check each column to see if it contains numbers only and then convert it to numeric. How?</p>
</section>
<section id="type-2-better" class="level3">
<h3 class="anchored" data-anchor-id="type-2-better">Type 2: better</h3>
<p>There’s a handy base R function that I had forgotten about: <code>type.convert()</code>.</p>
<p>It takes a vector and, in turn, tries to coerce it to each data type. The process stops when coercion occurs without error. As the help file (<code>?type.convert</code>) puts it:</p>
<blockquote class="blockquote">
<p>Given a vector, the function attempts to convert it to logical, integer, numeric or complex, and when additionally as.is = FALSE… converts a character vector to factor. The first type that can accept all the non-missing values is chosen.</p>
</blockquote>
<p>And handily:</p>
<blockquote class="blockquote">
<p>When the data object x is a data frame or list, the function is called recursively for each column or list element.</p>
</blockquote>
<p>So we can pass our entire dataframe to <code>type.convert()</code> and it’ll check them all for us:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">tbl_supp_conv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type.convert</span>(tbl_supp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as.is =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb16-2"></span>
<span id="cb16-3">tbl_supp_conv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 3
  id    x         y
  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;
1 A     5.76   7.33
2 B     5.65   9.79
3 C     [c]    7.12
4 D     [c]    6.98
5 E     [c]    6.58</code></pre>
</div>
</div>
<p>As we wanted, our character column <code>y</code> has become numeric type (<code>&lt;dbl&gt;</code>) while <code>x</code> remains as character. Neato.</p>
</section>
<section id="type-3-betterer" class="level3">
<h3 class="anchored" data-anchor-id="type-3-betterer">Type 3: betterer</h3>
<p>There are probably better approaches to this problem from the outset, rather than after-the-fact application of <code>type.convert()</code>.</p>
<p>As <a href="https://www.hiddenelephants.co.uk/">Tim</a> has pointed out, you could actually just use the base R form of <code>ifelse()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb18-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb18-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric),</span>
<span id="cb18-5">      \(value) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(</span>
<span id="cb18-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">test =</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb18-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yes  =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[c]"</span>,</span>
<span id="cb18-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">no   =</span> value</span>
<span id="cb18-9">      )</span>
<span id="cb18-10">    )</span>
<span id="cb18-11">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 3
  id    x         y
  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;
1 A     5.76   7.33
2 B     5.65   9.79
3 C     [c]    7.12
4 D     [c]    6.98
5 E     [c]    6.58</code></pre>
</div>
</div>
<p>I think people use <code>dplyr::if_else()</code> for (a) consistency if they’re already using tidyverse in the script and (b) it’s ‘strictness’ compared to <code>ifelse()</code>. <code>if_else()</code> will force you to declare the <code>true</code> and <code>false</code> arguments so they resolve to the same type, whereas <code>ifelse()</code> will silently force type coercion, which may be undesirable in some cases.</p>
<p>Another method would be to iterate the suppression over only the columns that need it. For example, you could do that with a simple <code>for</code> and <code>if</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">cols_numeric <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tbl, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric)))</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (col <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_numeric) {</span>
<span id="cb20-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(tbl[col] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) {</span>
<span id="cb20-5">    tbl[col] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(</span>
<span id="cb20-6">      tbl[col] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb20-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[c]"</span>,</span>
<span id="cb20-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(tbl[[col]])</span>
<span id="cb20-9">    )</span>
<span id="cb20-10">  }</span>
<span id="cb20-11">}</span>
<span id="cb20-12"></span>
<span id="cb20-13">tbl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 3
  id    x         y
  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;
1 A     5.76   7.33
2 B     5.65   9.79
3 C     [c]    7.12
4 D     [c]    6.98
5 E     [c]    6.58</code></pre>
</div>
</div>
<p>This reads as ‘for each numeric column that contains at least one value less than 5, replace those values with the placeholder symbol <code>"[c]"</code>.’</p>
</section>
</section>
<section id="preach-to-the-converted-types" class="level2">
<h2 class="anchored" data-anchor-id="preach-to-the-converted-types">Preach to the converted types</h2>
<p>It’s almost like this post could have just been a tweet saying ‘😮 yo, <code>type.convert()</code> is 🪄magic🪄 y’all’. But this post is now a handy reference in case anyone has the same problems with Excel’s handling of {a11ytables} outputs in future.</p>
<p>Also I needed to hit my pun quota for the month.<sup>4</sup></p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-07-17 18:06:53 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] dplyr_1.1.2

loaded via a namespace (and not attached):
 [1] digest_0.6.31     utf8_1.2.3        R6_2.5.1          fastmap_1.1.1    
 [5] tidyselect_1.2.0  xfun_0.39         magrittr_2.0.3    glue_1.6.2       
 [9] tibble_3.2.1      knitr_1.43.1      pkgconfig_2.0.3   htmltools_0.5.5  
[13] generics_0.1.3    rmarkdown_2.23    lifecycle_1.0.3   cli_3.6.1        
[17] fansi_1.0.4       vctrs_0.6.3       withr_2.5.0       compiler_4.3.1   
[21] rstudioapi_0.15.0 tools_4.3.1       pillar_1.9.0      evaluate_0.21    
[25] yaml_2.3.7        rlang_1.1.1       jsonlite_1.8.7    htmlwidgets_1.6.2</code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This is a Pokémon joke. I could have gone with <a href="https://bulbapedia.bulbagarden.net/wiki/Type:_Null_(Pok%C3%A9mon)">Type: Null</a>, but it’s too hard to draw.↩︎</p></li>
<li id="fn2"><p>There’s a sort of ‘coercion hierarchy’ in R. The order is like logical &gt; integer &gt; numeric &gt; character, where the latter are ‘dominant’ to those prior (massive oversimplification). As an aside, this results in some oddities to the untrained eye: <code>sum(2, TRUE)</code> resolves to <code>3</code>, because <code>TRUE</code> is coerced to the numeric value <code>1</code> (<code>FALSE</code> is <code>0</code>) and so we get 2 + 1 = 3.↩︎</p></li>
<li id="fn3"><p>You can dismiss these warning markers in the Excel GUI, but I don’t think it’s possible to suppress these markers programmatically and proactively in {a11ytables}. Note also that {a11ytables} cheats a bit here for sake of presentation. The <code>generate_workbook()</code> function guesses that the column was intended to be numeric and adds style information to right-align the values in the output xlsx, which is how numeric values are normally treated in Excel.↩︎</p></li>
<li id="fn4"><p>Turns out there’s literally such a thing as <a href="https://en.wikipedia.org/wiki/Type_punning">type punning</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>a11ytables</category>
  <category>base</category>
  <category>ms-office</category>
  <category>r</category>
  <guid>https://www.rostrum.blog/posts/2023-04-23-type-convert/index.html</guid>
  <pubDate>Sat, 22 Apr 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>R is a game engine, fight me</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/resources/snes-r.png" class="img-fluid" style="width:100.0%" alt="A crudely drawn image of the buttons from a Nintendo SNES controller, but the A, B, X and Y labels have all been changed to R."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p>R is ‘<a href="https://www.r-project.org/">a free software environment for statistical computing and graphics</a>’. Ahahaha, no it’s not, it’s a game engine. I’ve created <a href="https://github.com/matt-dray/awesome-r-games">a ‘splendid’ list of games</a> you can play—written in R—to prove it. <a href="https://github.com/matt-dray/splendid-r-games/issues">Help expand it</a>.</p>
</section>
<section id="stats-only" class="level2">
<h2 class="anchored" data-anchor-id="stats-only">Stats only!</h2>
<p>R is not a general, multi-purpose programming language. It was written to do statistical analysis and make charts. You are literally not allowed to do anything else with it. You should use &lt;LANGUAGE&gt; instead, which is much more suited to your specific use case. R is a joke language for nerds.</p>
<p>You should not read beyond this point if you think, quite rightly, that mirth and frivolity are unsuited to an R session.</p>
</section>
<section id="stats-only-1" class="level2">
<h2 class="anchored" data-anchor-id="stats-only-1">Stats only?</h2>
<p>Unity. Unreal. GameMaker. Godot. All of these videogame engines are now obsolete.</p>
<p>It is R—humble R!—that represents the future of gaming.</p>
<p>To prove it, I’ve created <a href="https://github.com/matt-dray/awesome-r-games">a list of ‘splendid R games’ in a GitHub repo</a><sup>1</sup> that you are welcome to contribute to.<sup>2</sup></p>
<p>Yes, R can be used for fun. Do not tell R Core.</p>
</section>
<section id="wait-hes-serious" class="level2">
<h2 class="anchored" data-anchor-id="wait-hes-serious">Wait, he’s serious?</h2>
<p>I think there’s three kinds of ‘platform’ for games written in R:</p>
<ol type="1">
<li>For the console</li>
<li>In Shiny</li>
<li>Ported</li>
</ol>
<p>Games played in the console are pretty straightforward and probably most common. You can run some code, or a function from a package, to launch some code in the R console that you can interact with. A simple option for this might involve use of <code>readline()</code> to receive user input, for example, like <a href="https://www.giorasimchoni.com/">Giora Simchoni</a>’s excellent text-based puzzler, <a href="https://github.com/gsimchoni/CastleOfR">Castle of R</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/resources/castle.png" class="img-fluid figure-img" style="width:100.0%" alt="Screenshot of R running in the terminal. A text interface asks the user to identify their skill in R. The user has typed option '4', which corresponds to the text 'what is R?'. The resulting text says 'welcome to the Castle of R' and explains its purpose."></p>
<figcaption class="figure-caption">Giora’s Castle of R running in the terminal.</figcaption>
</figure>
</div>
<p>Shiny can give you a little more flexibility when it comes to graphics and user input, at the expense of needing to host the app and maybe some extra JavaScript skills. A great example of this is <a href="https://www.pedrocsilva.com/">Pedro Silva</a>’s winning entry (<a href="https://sparktuga.shinyapps.io/ShinyDecisions/">app</a>, <a href="https://github.com/pedrocoutinhosilva/shiny.decisions">source</a>) to <a href="https://posit.co/blog/winners-of-the-2nd-shiny-contest/">the Posit Shiny contest in 2020</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/resources/decisions.png" class="img-fluid figure-img" style="width:100.0%" alt="A screenshot of a game that shows a world map with face, building and tree emojis on it. There are meters labelled 'wealth', 'opinion' and 'environment' and another with a halo on one end and devil horns the other. Text at the bottom says 'swipe left or right on the card to start'."></p>
<figcaption class="figure-caption">A still from Pedro’s Shiny Decisions app.</figcaption>
</figure>
</div>
<p>The third category is a little more boundary-pushing. Imagine if R was powerful enough to let you port existing games. Well, surprise, ya boi <a href="https://coolbutuseless.github.io/">Mike Cheng</a> (aka coolbutuseless) has pushed hard on expanding the capabilities of R to run fast enough and with realtime user input,<sup>3</sup> porting the classic <a href="https://en.wikipedia.org/wiki/Another_World_(video_game)"><em>Another World</em></a> (1991) to R, which was showcased at 2022’s Posit conference (<a href="https://github.com/coolbutuseless/anotherworld">source</a>, <a href="https://www.youtube.com/watch?v=LPotWAJnE_s">video</a>, <a href="https://coolbutuseless.github.io/2022/07/29/anotherworld-game-written-playable-in-r-with-nara-and-eventloop/">blog</a>).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/resources/another-world.png" class="img-fluid figure-img" style="width:100.0%" alt="A screenshot of the game with the main character apparently waving to a shadowy silhouette in the foreground. The overalid title says 'moonshot' and text at the bottom is a quote by Mike Cheng saying 'i will commit myself to achieving the goal, before the year is out, of writing and playing a videogame in R'."></p>
<figcaption class="figure-caption">A still from Mike’s rstudio::conf(2022) presentation, featuring Another World.</figcaption>
</figure>
</div>
<p>Of course, within these ‘platforms’ are genres like word games, arcade games, puzzle games, etc. Will you be the first to create an MMORPG (a massively-multiplayer online R-powered game)?</p>
</section>
<section id="i-am-an-indie-game-dev-now" class="level2">
<h2 class="anchored" data-anchor-id="i-am-an-indie-game-dev-now">I am an indie game dev now</h2>
<p>I’ve always been interested in how videogames are coded,<sup>4</sup> wishing that I could do the same myself. Of course I could simply learn ‘real’ programming languages.</p>
<p>Except that’s blasphemy. Of course I’d rather break my own mind and spirit in an attempt to make R achieve 0.1% of what might be possible in P*thon.</p>
<p>Case in point, I’ve made a few R packages containing some little toys (in order of gooddest to baddest):</p>
<ul>
<li>{r.oguelike} (<a href="https://github.com/matt-dray/r.oguelike">source</a>, <a href="https://www.rostrum.blog/tags/r.oguelike/">blogs</a>) for a procedural-dungeon explorer with enemy pathfinding and inventory</li>
<li>{tamRgo} (<a href="https://github.com/matt-dray/tamRgo">source</a>, <a href="https://github.com/matt-dray/tamRgo">blog</a>) for a cyber pet in your R console that persists between sessions</li>
<li>{safar6} (<a href="https://github.com/matt-dray/safar6">source</a>, <a href="https://github.com/matt-dray/safar6">blog</a>) for a text-based re-make of the Safari Zone from the first generation of Pokémon games</li>
<li>{ActionSquirrel} (<a href="https://www.rostrum.blog/2021/10/03/squirrel/">source</a>, <a href="https://github.com/matt-dray/ActionSquirrel">blog</a>) for a tile-based, turn-based minigame in the R console</li>
<li>{hokey} (<a href="https://github.com/matt-dray/hokey">source</a>, <a href="https://www.rostrum.blog/2022/01/19/keypress/">blog</a>) for minigames that use <a href="https://github.com/gaborcsardi/keypress">direct keypress inputs with {keypress}</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/resources/kevin.png" class="img-fluid figure-img" style="width:100.0%" alt="Screenshot of R running in the terminal. The get_stats and see_pet functions from the tamRgo package have been run. The first prints some output showing characteristics and status of a cyber pet. The latter prints an image of the pet to the browser. The pet is called Kevin and is 139 in age. It appears to be unalive."></p>
<figcaption class="figure-caption">Hint when playing {tamRgo}: do not forget about your pet for 138 days. RIP Kevin XVIII.</figcaption>
</figure>
</div>
<p>I’ve got something in the pipeline that involves extremely rudimentary physics in the R console. Wow! For release in 2023 (because game launches never go wrong).</p>
</section>
<section id="ready-player-2" class="level2">
<h2 class="anchored" data-anchor-id="ready-player-2">Ready Player 2</h2>
<p>The splendid list must be missing a bunch of games. Please leave an issue or pull request <a href="https://github.com/matt-dray/splendid-r-games">in the splendid-r-games repo</a> to add more examples.</p>
<p>Next stop: letting people run R games in the browser without an installed copy of R. This is already possible with a service like <a href="https://mybinder.org/">Binder</a>, which can spin up an instance of RStudio with packages pre-installed <a href="https://github.com/matt-dray/play-r.oguelike">I did this for {r.oguelike}</a>).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/resources/mobile-r.oguelike.png" class="img-fluid figure-img" style="width:100.0%" alt="RStudio running a browser on a mobile phone playing the tile-based game from the r.oguelike package."></p>
<figcaption class="figure-caption">Just like <a href="https://en.wikipedia.org/wiki/N-Gage_(device)">the Nokia N-Gage</a>, amirite?</figcaption>
</figure>
</div>
<p>But soon you might be able to <a href="https://github.com/r-wasm/webr">use WebR to play games in the browser</a> without even spinning up RStudio, ooh. So look out for an R version of <a href="https://itch.io/">itch.io</a> in future, lol.</p>
<p><img src="https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/resources/always-has-been.jpg" class="img-fluid" style="width:100.0%" alt="Meme. Person in spacesuit is looking at Earth from space, saying 'wait, R is a language for making and playing games?' Behind them is another spacesuited person, pointing a gun at them and saying 'always has been'."></p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-10-11 12:51:08 CEST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/Rome
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        
 [5] tools_4.3.1       htmltools_0.5.6.1 rstudioapi_0.15.0 yaml_2.3.7       
 [9] rmarkdown_2.25    knitr_1.44        jsonlite_1.8.7    xfun_0.40        
[13] digest_0.6.33     rlang_1.1.1       evaluate_0.22    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I originally labelled the GitHub repo as <a href="https://github.com/sindresorhus/awesome">an ‘awesome’ repo</a>, which I later learned has <a href="https://github.com/matt-dray/splendid-r-games/issues/4#issuecomment-1205015274">a very specific meaning</a>. You might have seen awesome lists before, like the <a href="https://github.com/mcanouil/awesome-quarto">awesome-quarto repo</a> by <a href="https://github.com/mcanouil">Mickaël</a>, or the new <a href="https://github.com/nanxstats/awesome-webr">awesome-webr list</a> by <a href="https://nanx.me/">Nan Xiao</a>. ‘Splendid’ is much more of a Bri’ish word than ‘awesome’, so it feels more natural anyway.↩︎</p></li>
<li id="fn2"><p>Note that I have carefully released this post just after April fool’s day, which means I am super, super serious. As usual.↩︎</p></li>
<li id="fn3"><p>See the <a href="https://coolbutuseless.github.io/package/nara/index.html">{nara}</a> and <a href="https://coolbutuseless.github.io/package/eventloop/index.html">{eventloop}</a> packages in particular.↩︎</p></li>
<li id="fn4"><p>I like YouTube devlogs by folks like <a href="https://www.youtube.com/c/SebastianLague">Seb Lague</a>, <a href="https://www.youtube.com/@ThinMatrix">ThinMatrix</a>, <a href="https://www.youtube.com/@SquidGodDev">SquidGod</a>, <a href="https://www.youtube.com/c/jonastyroller">Jonas</a>, <a href="https://www.youtube.com/@Tantandev">TanTan</a> and others. R can never achieve what they’re up to, but I like listening through the logic of what they’re doing.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>r</category>
  <category>shiny</category>
  <category>videogames</category>
  <guid>https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/index.html</guid>
  <pubDate>Sat, 01 Apr 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Playgrounds with WebR and Quarto</title>
  <dc:creator>Matt Dray</dc:creator>
  <link>https://www.rostrum.blog/posts/2023-03-16-webr-quarto/index.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rostrum.blog/posts/2023-03-16-webr-quarto/resources/webr-quarto-test.png" class="img-fluid" style="width:100.0%" alt="A screenshot of a webpage that has an embedded R code block. Some text asks the user to adjust the code and then click a button that says 'run code'. A shocked Pikachu appears in the corner."></p>
<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">tl;dr</h2>
<p><a href="https://docs.r-wasm.org/webr/latest/">WebR</a> lets you run R in the browser(!). Now you can <a href="https://github.com/coatless/quarto-webr">make WebR chunks in Quarto</a> that render to editable, executable blocks(!).</p>
</section>
<section id="sliding-into-tedium" class="level2">
<h2 class="anchored" data-anchor-id="sliding-into-tedium">Sliding into tedium</h2>
<p>I wrote recently <a href="https://www.rostrum.blog/2023/03/03/getparsedata/">a simple introduction to how R parses code</a>. I provided a function that I said the reader could go away and run themselves.</p>
<p>As in… copy-paste it into an instance of R running on their machine. Gross.</p>
<p>Wouldn’t it be better if people could just tinker with the code right there in the post? This kind of ‘playground’ could be great for explaining concepts and teaching.<sup>1</sup></p>
</section>
<section id="i-seesaw-a-solution" class="level2">
<h2 class="anchored" data-anchor-id="i-seesaw-a-solution">I seesaw a solution</h2>
<p>WebR lets you run R in the browser. Read that again! This is a landmark piece of work from George Stagg and Lionel Henry.</p>
<p>I won’t go into technicals and limitations here. For more information, see:</p>
<ul>
<li><a href="https://docs.r-wasm.org/webr/latest/">the docs</a></li>
<li><a href="https://www.tidyverse.org/blog/2023/03/webr-0-1-0/">the v0.1 launch post</a></li>
<li><a href="https://github.com/nanxstats/awesome-webr">an ‘awesome’ list of resources</a></li>
</ul>
<p>Crucially for my needs, you can now <a href="https://github.com/coatless/quarto-webr">run WebR chunks in a Quarto document</a>, thanks to James J Balamuta. This renders interactive blocks of R code that the reader can adjust and execute with button-click:</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.rostrum.blog/posts/2023-03-16-webr-quarto/resources/webr-demo.gif" class="img-fluid figure-img" style="width:40.0%" alt="Animated gif showing a code block with R code inside that sets the value of 'x' to 'world' then pastes it together with the string 'hello'. A 'run code' button is clicked and the string 'hello world' is printed. The word 'hello' is then changed to 'ahoy' and the code is re-run and the printout changes to 'ahoy world'."></p>
<figcaption class="figure-caption">Beware: this is a gif, not an embedded demo!</figcaption>
</figure>
</div>
<p>Check out James’s <a href="https://github.com/coatless/quarto-webr">coatless/quarto-webr</a> GitHub repo for the source. There’s also <a href="https://rd.thecoatlessprofessor.com/webR-quarto-demos/webr-quarto-html-demo.html">a live demo</a> and <a href="https://github.com/coatless-r-n-d/webR-quarto-demos/blob/main/webr-quarto-html-demo.qmd">its source</a>.</p>
</section>
<section id="swinging-into-action" class="level2">
<h2 class="anchored" data-anchor-id="swinging-into-action">Swinging into action</h2>
<p>To have a go yourself, do follow <a href="https://github.com/coatless/quarto-webr">the setup steps</a> in James’s quarto-webr README and look at <a href="https://github.com/coatless-r-n-d/webR-quarto-demos/blob/main/webr-quarto-html-demo.qmd">the source of his demo</a>.</p>
<p>Ultimately you can:</p>
<ol type="1">
<li>Install the extension to your project folder by running <code>quarto add coatless/quarto-webr</code> in the terminal</li>
<li>Set <code>filter: webr</code> in the YAML of your qmd file<sup>2</sup></li>
<li>Write code chunks in the qmd using the <code>{webr}</code> engine</li>
</ol>
<p>This made it straightforward to prepare a little Quarto doc with chunks powered by the ‘webr’ engine, which I deployed to the web via <a href="https://www.netlify.com/">Netlify</a>.<sup>3</sup></p>
<p>You can <a href="https://webr-parse-test.netlify.app/">visit that live page</a> or see the underlying <a href="https://github.com/matt-dray/webr-parse-test">source on GitHub</a>.<sup>4</sup></p>
<p>So now you <em>can</em> tinker with the example I gave in the original blogpost about parsing R code. Unfortunately I can’t add this directly to the post, since this blog is not made with Quarto.</p>
</section>
<section id="a-blog-platform-merry-go-round" class="level2">
<h2 class="anchored" data-anchor-id="a-blog-platform-merry-go-round">A blog-platform merry-go-round</h2>
<p>I’ve written this quick demo and post because I was excited about what George &amp; Lionel and James have put together. There’s so many system-independent applications of this approach that could help with teaching and learning, or explaining simple ideas in a blog post.</p>
<p>In fact, this blog may eventually switch from {blogdown} to Quarto to take advantage of WebR. It’ll be a pain to convert old posts, but luckily I already missed the earlier {blogdown}-to-{distill} bandwagon, lol.<sup>5</sup></p>
</section>



<div id="quarto-appendix" class="default"><section id="environment" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Environment</h2><div class="quarto-appendix-contents">

<details>
<summary>
Session info
</summary>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Last rendered: 2023-07-21 18:39:33 BST</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.3.1 (2023-06-16)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Ventura 13.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: Europe/London
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
 [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        
 [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       
 [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        
[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    </code></pre>
</div>
</div>
</details>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>A nice example of this in a teaching context is W3 Schools, who have a <a href="https://www.w3schools.com/html/tryit.asp?filename=tryhtml_intro">‘Try It Yourself’</a> space that lets you take code from the lessons and tinker with it yourself in the browser.↩︎</p></li>
<li id="fn2"><p>Set also <code>engine: knitr</code> in the YAML to use {knitr} instead of Jupyter to handle the conversion. You can add <code>format: html</code> to ensure that the output is rendered to HTML.↩︎</p></li>
<li id="fn3"><p>Self-deployment and Netlify are viable for now, GitHub Pages is coming later. Netlify is how this blog is deployed.↩︎</p></li>
<li id="fn4"><p>Originally I tried to embed the Quarto demo in an iframe, but WebR failed to load inside it when the blog was rendered. That’s interesting.↩︎</p></li>
<li id="fn5"><p>But came close when I thought I’d found <a href="https://www.rostrum.blog/2022/03/15/renv-profiles/">a system for making individual posts reproducible</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div id="quarto-reuse" class="quarto-appendix-contents"><div>CC BY-NC-SA 4.0</div></div></section></div> ]]></description>
  <category>quarto</category>
  <category>r</category>
  <category>webr</category>
  <guid>https://www.rostrum.blog/posts/2023-03-16-webr-quarto/index.html</guid>
  <pubDate>Thu, 16 Mar 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
