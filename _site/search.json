[
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "rostrum.blog (test)",
    "section": "",
    "text": "Creative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\n\n\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n\nConsiderations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. More considerations for licensors.\nConsiderations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor’s permission is not necessary for any reason–for example, because of any applicable exception or limitation to copyright–then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public.\n\n\n\n\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\n\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-NC-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution, NonCommercial, and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nNonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\n\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nA. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and\nB. produce, reproduce, and Share Adapted Material for NonCommercial purposes only.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nB. Additional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nC. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes.\n\n\n\n\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\nA. retain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nB. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nC. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\n\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-NC-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\n\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\n\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\n\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\n\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\n\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org"
  },
  {
    "objectID": "posts/2023-01-06-remorse/index.html",
    "href": "posts/2023-01-06-remorse/index.html",
    "title": ".-././–/—/.-./…/.",
    "section": "",
    "text": "You may not believe it, but I am releasing this art under CC0.\n\n\ntl;dr\n{remorse} is a tiny R package that converts text to Morse Code to audio.\n\n\nBeat a dead morse\nIn the last post I mentioned {sonify} for making R do little audible beeps and boops.\nIt reminded me of one (of many) unwritten micro-projects I’ve got kicking around in my brain: obviously you could use {sonify} to communicate Morse Code. And why not translate from text to Morse (and back) while you’re at it?1\nTo be honest this was a classic case of name-driven development (NDD): I thought {remorse} was a funny name for a package and worked backwards from there.\nObviously it says ‘Morse’ in the name, but also ‘remorse’ is usually what I feel after putting together a small pointless package; pointless-package existentialism (PPE) is something I have a track history with.\nBut of course, the true remorse is that I didn’t find the better package-name pun: {morseinspector}. But maybe that’s too long of a name and maybe non-Brits wouldn’t understand the reference. Maybe I’m thinking too hard.2\n\n\nOh dit-dit-dahling\nConsider this highly plausible scenario: it’s 20XX, the apocalypse has come, and the remaining humans on planet Earth communicate by Morse Code. For some reason.3\nWow, wouldn’t it be handy to have a text-to-Morse translator?\nWell friend, if you’ve managed to find an electronic thinking box in the apocalyptic barren wastelands (assuming electricity is still available (and the machine has R installed (and the {remorse} package was downloaded before the world’s internet cut out (and you know how to use R (and you don’t own a simpler, more portable Morse Code translation pamphlet))))), then you will have this incredible power at your fingertips.\nOr maybe you’d rather risk it? Pfft.\n\n\nUse the Morse…\nThat’s an awful lot of build-up for a very simple package. Let’s take a look at what little it does.\nAs usual, {remorse} lives on GitHub4, so it can be downloaded with a little help from the typographically-adjacent {remotes} package:\n\ninstall.github(\"remotes\")\nremotes::install_github(\"matt-dray/remorse\")  # v0.1.1 here\n\nThat’ll install {sonify} as well, which is needed for the audio.\nRight so: text to Morse Code.\n\ntext_in <- \"Ahoy pal!\"\nmorse <- remorse::txt2morse(text_in)\nmorse\n\n[1] \".-/..../---/-.-- .--./.-/.-../-.-.--\"\n\n\nSo each letter has been translated to the relevant string of ‘dits and dahs’ (‘dots’ and ‘dashes’) that make up Morse Code. I’ve used a period (.) and hyphen (-) to represent these in {remorse}, with forward slashes (/) between Morse groups that represent individual characters, and a space for the spaces between words.\nNote that not all characters can be converted to Morse Code. I did some research (Wikipedia) to discover the mappings from letters, numbers and punctuation to Morse Code. This information is used internally as a lookup, but is also exported in morse_lookup:\n\nremorse::morse_lookup\n\n       A        B        C        D        E        F        G        H \n    \".-\"   \"-...\"   \"-.-.\"    \"-..\"      \".\"   \"..-.\"    \"--.\"   \"....\" \n       I        J        K        L        M        N        O        P \n    \"..\"   \".---\"    \"-.-\"   \".-..\"     \"--\"     \"-.\"    \"---\"   \".--.\" \n       Q        R        S        T        U        V        W        X \n  \"--.-\"    \".-.\"    \"...\"      \"-\"    \"..-\"   \"...-\"    \".--\"   \"-..-\" \n       Y        Z        0        1        2        3        4        5 \n  \"-.--\"   \"--..\"  \"-----\"  \".----\"  \"..---\"  \"...--\"  \"....-\"  \".....\" \n       6        7        8        9        &        '        @        ) \n \"-....\"  \"--...\"  \"---..\"  \"----.\"  \".-...\" \".----.\" \".--.-.\" \"-.--.-\" \n       (        :        ,        =        !        .        -        * \n \"-.--.\" \"---...\" \"--..--\"  \"-...-\" \"-.-.--\" \".-.-.-\" \"-....-\"   \"-..-\" \n       +        \"        ?        /          \n \".-.-.\" \".-..-.\" \"..--..\"  \"-..-.\"      \" \" \n\n\nOf course, this means we can map backwards from Morse Code to letters, numbers and punctuation:\n\ntext_out <- remorse::morse2txt(morse)\ntext_out\n\n[1] \"AHOY PAL!\"\n\n\nMorse Code has no sense of case, so it just converts it all to uppercase. Like you’re shouting; the most clear form of communication.\nSo, you can argue justifiably that txt2morse(\"yo\") |> morse2txt() is just a worse version of toupper() that strips out certain unmappable characters.\nBut of course it does so much more. Well, one thing more. Let’s go from Morse to audio.\nFirst a reminder of the code from earlier:\n\nmorse\n\n[1] \".-/..../---/-.-- .--./.-/.-../-.-.--\"\n\n\nAnd to generate audio you just:\n\nremorse::morse2sfx(morse)\n\nThe output sounds like this:\n\n\n\n\n\nWow. It plays audible dits (one ‘time unit’, default is dit_length = 0.05 in seconds), dahs (three), spaces between dits and dahs (one), spaces between Morse character groupings (three) and spaces between words (seven). Tell all your friends.\nSo, do I still feel remorse for writing {remorse}, even after demonstrating its incredible power? Yes. All I ask is that you think of me in those apocalyptic wastelands.\n\n Update\nI just realised you can turn Morse Code into… Morse Code. Mind blown.\n\nremorse::txt2morse(\"hi\") |>\n  remorse::txt2morse()\n\n[1] \".-.-.-/.-.-.-/.-.-.-/.-.-.-/-..-./.-.-.-/.-.-.-\"\n\n\n‘Morsest Code’. Why? Absolutely.\nMaybe I’ve been watching too much Tom7 recently.\n\n\n\n\nSession info\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Big Sur/Monterey 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-04-10\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.0   2023-01-09 [1] CRAN (R 4.2.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.2.0)\n evaluate      0.20    2023-01-17 [1] CRAN (R 4.2.0)\n fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.0)\n fontawesome   0.2.2   2021-07-02 [1] CRAN (R 4.2.0)\n htmltools     0.5.2   2021-08-25 [1] CRAN (R 4.2.0)\n htmlwidgets   1.5.4   2021-09-08 [1] CRAN (R 4.2.0)\n jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.2.0)\n knitr         1.42    2023-01-25 [1] CRAN (R 4.2.0)\n remorse       0.1.1   2023-01-06 [1] Github (matt-dray/remorse@4540098)\n rlang         1.0.6   2022-09-24 [1] CRAN (R 4.2.0)\n rmarkdown     2.14    2022-04-25 [1] CRAN (R 4.2.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n xfun          0.37    2023-01-31 [1] CRAN (R 4.2.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\nFootnotes\n\n\nWhich completes my hattrick of ‘R translation’ packages, I suppose. The {r2eng} package attempts to translate R code to spoken English and have your computer speak it out loud. The {dialga} package takes R code and translates it to cron strings and those cron strings to English.↩︎\nNot to mention that it’s a bad pun: the package doesn’t ‘inspect’ Morse; it translates it. Yep, definitely I’m thinking too hard about this.↩︎\nPersonally I’d rather see telegraphy make a comeback.↩︎\nWow, how edgy, maybe he’s had a bad run in with the CRAN maintainers, or perhaps he’s read the bit of the CRAN repository policy that says ‘a package’s contribution has to be non-trivial’ (whatever that means). Or he’s just lazy.↩︎\n\nReuseCC BY-NC-SA 4.0"
  },
  {
    "objectID": "posts/2023-01-07-petrov/index.html",
    "href": "posts/2023-01-07-petrov/index.html",
    "title": "Stiliyan Petrov: Jesus?",
    "section": "",
    "text": "tl;dr\nIn which I prove wrong a tweeted Opta football statistic, using R and Transfermarkt data. Oh wait, actually Opta were right. Ah, heck.\n\n\nPetrov Rescue\nBasically, for little reason, I dislike the style of the tweets on the Twitter feed for Opta1 (the company who do all the football stats).\nWhat is so outrageous? Each tweet always ends in a single, summary word that makes me cringe.\nWait, what? Let’s take a look at their most recent tweet at time of writing:\n\n14 - Harry Kane has scored 14 goals in his last 14 appearances in the FA Cup, averaging a goal every 63 minutes in the competition in this period. Guarantee.\n\n‘Guarantee’. Gah.\nOr this tweet:\n\n16 - Since his first appearance in the competition in January 2016, Leicester’s Kelechi Iheanacho has scored more FA Cup goals than any other player (16). Specialist.\n\n‘Specialist’. Sigh.\nA completely small and pointless thing to be annoyed by, right?\nBut here’s the scenario. Over the yuletide period (on Christmas day!) they ran this tweet:\n\n1 - Stiliyan Petrov (@StanPetrov19) is the only player to have played in the Premier League whose name contains all the letters in the word ‘Nativity’. Star.\n\nObviously, I have absolutely nothing against ‘Big Stan’. He’s a legend; a ‘star’, if you will. Captain of Aston Villa! Bulgaria! Battled leukaemia and still made it to nearly 600 games. One of the best Bulgarian/Premier League ‘Petrovs’, along with cult legend Martin.\nBut could this stat possibly be true? Surely there’s at least one other player. Perhaps a window of opportunity for me to avenge my feelings of cringe?\nOh, and obviously you can ignore the candid dismissals in the tweet’s replies, for example:\n\nWhat are we supposed to do with this information? [Picture of wryly-smiling duck.]\n\nNo, this is more important than any Opta tweet ever: what if it’s… wrong?\n\n\nStan in R, but not {rstan}\nSo I looked into it using R, of course.\nTurns out it’s pretty straightforward with the excellent {worldfootballR} package by Jason Zivkovic, which helps fetch player data from Transfermarkt (among other suppliers).\nBasically, we can fetch data about footballers from every team in a given league’s season since its inception. So, aha, you cannot escape, Opta!\nMy little {soccercolleagues} package that I wrote about in early 2022 is built heavily (heavily!) around {worldfootballR} and has a convenience function we can use.\nThe niche2 primary objective of {soccercolleagues} is to let you find pairs of football players that were colleagues at some point. Like: ‘which current Premier League footballer has been team mates with each of the following: Kevin Phillips, Mark Viduka, Dejan Lovren, Danny Ings and Nicky Butt?’3\nFollow along. As ever, you can install the {soccercolleagues} package from GitHub:\n\nif(!require(remotes)) install.packages(\"remotes\")\nremotes::install_github(\"matt-dray/soccercolleagues\")\n\nWe’ll also use the {tidyverse} for wrangling.\n\nlibrary(soccercolleagues)\nlibrary(tidyverse)\n\nSo we can ask Transfermarkt for all the years of the English Premier League, which began in 1992:\n\n# This will take quite a long time...\nepl_players <- soccercolleagues::get_players(\n  seasons = 1992:2022,\n  country = \"England\"\n)\n\nAnd now we can look for the players whose names contain the letters in ‘nativity’:\n\nepl_players |>\n  distinct(player_name) |>\n  mutate(\n    player_name = str_remove_all(tolower(player_name), \" \"),\n    n_count = str_count(player_name, \"n\"),\n    a_count = str_count(player_name, \"a\"),\n    t_count = str_count(player_name, \"t\"),\n    i_count = str_count(player_name, \"i\"),\n    v_count = str_count(player_name, \"v\"),\n    y_count = str_count(player_name, \"y\")\n  ) |>\n  filter(\n    n_count >= 1 &\n      a_count >= 1 &\n      t_count >= 2 &\n      i_count >= 2 &\n      v_count >= 1 &\n      y_count >= 1\n  )\n## # A tibble: 1 × 7\n##   player_name    n_count a_count t_count i_count v_count y_count\n##   <chr>            <int>   <int>   <int>   <int>   <int>   <int>\n## 1 stiliyanpetrov       1       1       2       2       1       1\n\nOof… they were right. He is the only one.\nWow, this humble pie is so delicious, thank you so much Opta for unintentionally spoonfeeding it to me.\nTo be clear: Opta’s data analysts have a good track record, as far as I know. But I’ve got my eye on you! You’ll slip up one day!\n…But wait. Opta were misnaming Stan as ‘Stylian Petrov’ in tweets as late as 2012. Get rekt! You missed the extra ‘i’ you need in ‘nativity’, fools! Put respect on Stiliyan’s name!\n‘Result’.4\n\n\n\nSession info\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Big Sur/Monterey 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-04-10\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.0   2023-01-09 [1] CRAN (R 4.2.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.2.0)\n evaluate      0.20    2023-01-17 [1] CRAN (R 4.2.0)\n fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.0)\n htmltools     0.5.2   2021-08-25 [1] CRAN (R 4.2.0)\n htmlwidgets   1.5.4   2021-09-08 [1] CRAN (R 4.2.0)\n jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.2.0)\n knitr         1.42    2023-01-25 [1] CRAN (R 4.2.0)\n rlang         1.0.6   2022-09-24 [1] CRAN (R 4.2.0)\n rmarkdown     2.14    2022-04-25 [1] CRAN (R 4.2.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n xfun          0.37    2023-01-31 [1] CRAN (R 4.2.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\nFootnotes\n\n\nThis post is not guerilla marketing for Opta. It would be extremely guerilla if they wanted to advertise on this blog.↩︎\nThere is definitely a burgeoning crossover of football stats and R users, see Ryo, Ben and Tony, for example.↩︎\nHint: it’s a very ‘boring’ footballer, lol.↩︎\nBy which I mean I lost 1-0.↩︎\n\nReuseCC BY-NC-SA 4.0"
  },
  {
    "objectID": "posts/2023-02-09-londmapbotstodon/index.html#set-up-mastodon",
    "href": "posts/2023-02-09-londmapbotstodon/index.html#set-up-mastodon",
    "title": "London from space via botsin.space",
    "section": "Set up Mastodon",
    "text": "Set up Mastodon\nIt’s easier to set yourself up with API access for Mastodon compared to Twitter:\n\nSet up a Mastodon account on the dedicated bot server botsin.space (londonmapbot is @londonmapbot@botsin.space).2\nInstall the {rtoot} package.\nAuthorise yourself with Mastodon and get an API token.\n???\nAbsolutely do not profit whatsoever.\n\nSteps 2 and 3 look like this:\n\ninstall.packages(\"rtoot\")  # on CRAN\n\nrtoot::auth_setup(\n  instance  = \"botsin.space\",  # the Mastodon server the account is on\n  type      = \"user\",          # i.e. for posting from R\n  name      = \"londonmapbot\",  # name the token file\n  clipboard = TRUE             # copy to clipboard\n)\n\nThis process interrupts you to interactively authorise the {rtoot} package in a browser window and copy a big long code to a dialogiue box that appears in your R session.\n\n\n\nIt’ll then return:\n## Token of type \"user\" for instance botsin.space is valid\n## Token (in environment variable format) has been copied to clipboard.\n## <mastodon bearer token> for instance: botsin.space of type: user \nI pasted this API token to a safe place and also stored it as a GitHub repo secret in the londonmapbot GitHub repo so it could be referred to while the GitHub Action was running."
  },
  {
    "objectID": "posts/2023-02-09-londmapbotstodon/index.html#post-to-mastodon",
    "href": "posts/2023-02-09-londmapbotstodon/index.html#post-to-mastodon",
    "title": "London from space via botsin.space",
    "section": "Post to Mastodon",
    "text": "Post to Mastodon\nNow we can use the post_toot() function to… toot a post. Publish a toot? Entoot a noote. It requires a token argument that takes a special ‘bearer token’ with a particular structure that’s not too dissimilar from what the rtweet package expects of the object passed to its own token function.\nAside: token setup is made easy in {rtweet} thanks to the rtweet_bot() function, to which you can pass your API keys and secrets. It’s a little less obvious in {rtoot}, which was initially built with the intention of running API calls from your personal machine, so you could just store your keys in your .Renviron file or whatever.\nBut actually you can just mimic how {rtweet} accepts the token. To do this, I did not use my brain at all and simply ripped-off Matt Kerlogue’s post.3 My updated R script now contains this:4\n\nmastodon_token <- structure(\n  list(  # it's just a list\n    bearer   = Sys.getenv(\"RTOOT_DEFAULT_TOKEN\"),\n    type     = \"user\",  # i.e. to post from R\n    instance = \"botsin.space\"  # the server\n  ),\n  class = \"rtoot_bearer\"  # special token class\n)\n\nWhere RTOOT_DEFAULT_TOKEN is that API token from earlier, which is required for accessing Mastodon. As mentioned, it’s stored as a GitHub repo secret and called into the GitHub Action environment thanks to the env: RTOOT_DEFAULT_TOKEN: ${{ secrets.RTOOT_DEFAULT_TOKEN }} call in the YAML file.\nThis object can be passed quite happily to the post_toot() function.\n\nrtoot::post_toot(\n  status   = latlon_details,\n  media    = temp_file,\n  alt_text = alt_text,\n  token    = mastodon_token\n)\n\nWhere the status (body text), media (image file) and alt_text (alternative text for the image) objects have been generated already (see the R script for details).\nThis is then executed on schedule according to the cron string5 specified in the YAML file (currently twice a day at 0914 and 1714) to publish stuff like this:"
  },
  {
    "objectID": "posts/2023-02-09-londmapbotstodon/index.html#await-twitter-implosion",
    "href": "posts/2023-02-09-londmapbotstodon/index.html#await-twitter-implosion",
    "title": "London from space via botsin.space",
    "section": "Await Twitter implosion",
    "text": "Await Twitter implosion\nI want the bot to keep posting to Twitter for as long as I’m allowed to. In other words, we should try to post a tweet and catch any error silently, without disrupting the GitHub Action. So naturally I wrapped post_tweet() in a tryCatch() statement, yes? No, actually I used purrr::possibly() instead.\nWhy? Basically because the syntax is easy to remember, lol. And what difference does it make to have one extra dependency for this task? To use it, you wrap your function of interest in possibly() and then it can fail without erroring-out the whole function.\n\npossibly_post_tweet <- purrr::possibly(rtweet::post_tweet)\n\npossibly_post_tweet(\n  status         = latlon_details,\n  media          = temp_file,\n  media_alt_text = alt_text,\n  token          = twitter_token\n)"
  },
  {
    "objectID": "posts/2023-02-09-londmapbotstodon/index.html#fiddle-while-frisco-burns",
    "href": "posts/2023-02-09-londmapbotstodon/index.html#fiddle-while-frisco-burns",
    "title": "London from space via botsin.space",
    "section": "Fiddle while Frisco burns",
    "text": "Fiddle while Frisco burns\nWhile I was messing about with the londonmapbot code, I made a few things in the repo a bit more generic. For example, I altered the name of the GitHub Actions YAML file and the R script to be called ‘post-image’. This is more descriptive and it removes the need for someone forking the repo to have to manually change the name away from ‘londonmapbot’. You are so welcome."
  },
  {
    "objectID": "posts/2023-03-16-webr-test/index.html",
    "href": "posts/2023-03-16-webr-test/index.html",
    "title": "Playgrounds with WebR and Quarto",
    "section": "",
    "text": "tl;dr\nWebR lets you run R in the browser(!). Now you can make WebR chunks in Quarto that render to editable, executable blocks(!).\n\n\nSliding into tedium\nI wrote recently a simple introduction to how R parses code. I provided a function that I said the reader could go away and run themselves.\nAs in… copy-paste it into an instance of R running on their machine. Gross.\nWouldn’t it be better if people could just tinker with the code right there in the post? This kind of ‘playground’ could be great for explaining concepts and teaching.1\n\n\nI seesaw a solution\nWebR lets you run R in the browser. Read that again! This is a landmark piece of work from George Stagg and Lionel Henry.\nI won’t go into technicals and limitations here. For more information, see:\n\nthe docs\nthe v0.1 launch post\nan ‘awesome’ list of resources\n\nCrucially for my needs, you can now run WebR chunks in a Quarto document, thanks to James J Balamuta. This renders interactive blocks of R code that the reader can adjust and execute with button-click:\n\n\n\nBeware: this is a gif, not an embedded demo!\n\n\nCheck out James’s coatless/quarto-webr GitHub repo for the source. There’s also a live demo and its source.\n\n\nSwinging into action\nTo have a go yourself, do follow the setup steps in James’s quarto-webr README and look at the source of his demo.\nUltimately you can:\n\nInstall the extension to your project folder by running quarto add coatless/quarto-webr in the terminal\nSet filter: webr in the YAML of your qmd file2\nWrite code chunks in the qmd using the {webr} engine\n\nThis made it straightforward to prepare a little Quarto doc with chunks powered by the ‘webr’ engine, which I deployed to the web via Netlify.3\nYou can visit that live page or see the underlying source on GitHub.4\nSo now you can tinker with the example I gave in the original blogpost about parsing R code. Unfortunately I can’t add this directly to the post, since this blog is not made with Quarto.\n\n\nA blog-platform merry-go-round\nI’ve written this quick demo and post because I was excited about what George & Lionel and James have put together. There’s so many system-independent applications of this approach that could help with teaching and learning, or explaining simple ideas in a blog post.\nIn fact, this blog may eventually switch from {blogdown} to Quarto to take advantage of WebR. It’ll be a pain to convert old posts, but luckily I already missed the earlier {blogdown}-to-{distill} bandwagon, lol.5\n\n\n\nSession info\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Big Sur/Monterey 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-04-10\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.0   2023-01-09 [1] CRAN (R 4.2.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.2.0)\n evaluate      0.20    2023-01-17 [1] CRAN (R 4.2.0)\n fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.0)\n htmltools     0.5.2   2021-08-25 [1] CRAN (R 4.2.0)\n htmlwidgets   1.5.4   2021-09-08 [1] CRAN (R 4.2.0)\n jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.2.0)\n knitr         1.42    2023-01-25 [1] CRAN (R 4.2.0)\n rlang         1.0.6   2022-09-24 [1] CRAN (R 4.2.0)\n rmarkdown     2.14    2022-04-25 [1] CRAN (R 4.2.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n xfun          0.37    2023-01-31 [1] CRAN (R 4.2.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\nFootnotes\n\n\nA nice example of this in a teaching context is W3 Schools, who have a ‘Try It Yourself’ space that lets you take code from the lessons and tinker with it yourself in the browser.↩︎\nSet also engine: knitr in the YAML to use {knitr} instead of Jupyter to handle the conversion. You can add format: html to ensure that the output is rendered to HTML.↩︎\nSelf-deployment and Netlify are viable for now, GitHub Pages is coming later. Netlify is how this blog is deployed.↩︎\nOriginally I tried to embed the Quarto demo in an iframe, but WebR failed to load inside it when the blog was rendered. That’s interesting.↩︎\nBut came close when I thought I’d found a system for making individual posts reproducible.↩︎\n\nReuseCC BY-NC-SA 4.0"
  },
  {
    "objectID": "posts/2023-01-30-trapinch-begin/index.html#gotta-get-em-all",
    "href": "posts/2023-01-30-trapinch-begin/index.html#gotta-get-em-all",
    "title": "Wrapping PokéAPI with {trapinch}",
    "section": "Gotta GET ’em all",
    "text": "Gotta GET ’em all\nThere’s a generic low-level function, get_pokeapi(), to which you pass the endpoint and resource ID (numeric) or name (character) of interest. Each endpoint also has its own dedicated function, like get_item() or get_move() that calls get_pokeapi() under the hood.\nYou can look at the inbuilt resource_lookups list to get a dataframe of resource IDs and names for each endpoint, as well as the full URL needed to query the API. Here’s the first few:\n\nhead(names(resource_lookups))\n\n\n## [1] \"ability\"        \"berry\"          \"berry-firmness\" \"berry-flavor\"  \n## [5] \"characteristic\" \"contest-effect\"\n\nSo here’s the first few rows of the resource dataframe for the ‘pokemon’ endpoint:\n\nhead(resource_lookups[[\"pokemon\"]])\n\n\n##   id       name                                  url\n## 1  1  bulbasaur https://pokeapi.co/api/v2/pokemon/1/\n## 2  2    ivysaur https://pokeapi.co/api/v2/pokemon/2/\n## 3  3   venusaur https://pokeapi.co/api/v2/pokemon/3/\n## 4  4 charmander https://pokeapi.co/api/v2/pokemon/4/\n## 5  5 charmeleon https://pokeapi.co/api/v2/pokemon/5/\n## 6  6  charizard https://pokeapi.co/api/v2/pokemon/6/\n\nOne of these resource names is ‘mew’, the legendary first-generation Pokémon.5 You could use get_pokeapi(\"pokemon\", \"mew\") to retrieve its data, or more simply:\n\nmew <- get_pokemon(\"mew\")\n\nThe function returns a list of lists, which is parsed from the JSON response returned by the API. So for the ‘pokemon’ endpoint we get 18 different elements of various classes:\n\nstr(mew, max.level = 1)\n\n\n## List of 18\n##  $ abilities               :List of 1\n##  $ base_experience         : int 300\n##  $ forms                   :List of 1\n##  $ game_indices            :List of 20\n##  $ height                  : int 4\n##  $ held_items              :List of 1\n##  $ id                      : int 151\n##  $ is_default              : logi TRUE\n##  $ location_area_encounters: chr \"https://pokeapi.co/api/v2/pokemon/151/encounters\"\n##  $ moves                   :List of 363\n##  $ name                    : chr \"mew\"\n##  $ order                   : int 248\n##  $ past_types              : list()\n##  $ species                 :List of 2\n##  $ sprites                 :List of 10\n##  $ stats                   :List of 6\n##  $ types                   :List of 1\n##  $ weight                  : int 40\n\nI’ve shown only the top level structure to hide some of the complexity. For example, the ‘moves’ item contains all the moves a Pokémon can learn, at what level it can learn them, in which game it learns them, and so on. Grabbing the first of the 363 ‘moves’ items (!) listed for Mew looks like this (oof):\n\nmew[[\"moves\"]][[1]][[\"move\"]][[\"name\"]]\n\n\n## [1] \"pound\"\n\nA future task might be to simplify some of this complexity by collapsing deep lists into dataframes where possible."
  },
  {
    "objectID": "posts/2023-01-30-trapinch-begin/index.html#thumbing-the-pokédex",
    "href": "posts/2023-01-30-trapinch-begin/index.html#thumbing-the-pokédex",
    "title": "Wrapping PokéAPI with {trapinch}",
    "section": "Thumbing the Pokédex",
    "text": "Thumbing the Pokédex\nThe API responses are ‘paged’, meaning that you must make successive requests of a set size to retrieve all the data for a given endpoint. The get_*() functions automatically expand the request to ask for all the items in one go.\nWe know the maximum number of items to be returned from an endpoint because the stored in the resource_lookups object, so this can be appended automatically to the request string."
  },
  {
    "objectID": "posts/2023-01-30-trapinch-begin/index.html#bills-pc",
    "href": "posts/2023-01-30-trapinch-begin/index.html#bills-pc",
    "title": "Wrapping PokéAPI with {trapinch}",
    "section": "BILL’s PC",
    "text": "BILL’s PC\nResponses are cached, which means that the data is saved on your computer. If you make the same request, the data will be retrieved first from the cache rather than calling the API again. That means there’s one less request for the API to deal with.\nThe cache is the path resolved by R_user_dir(\"trapinch\", \"cache\"). This function was introduced in R v4.0 for platform-independent storage of package-related data on a user’s machine.6 You can delete everything from the cache with clear_cache()."
  },
  {
    "objectID": "posts/2023-01-30-trapinch-begin/index.html#substitute",
    "href": "posts/2023-01-30-trapinch-begin/index.html#substitute",
    "title": "Wrapping PokéAPI with {trapinch}",
    "section": "Substitute",
    "text": "Substitute\n{httptest2} is a handy package that lets you test code written with {httr2}, specifically.\nWhy would you need special testing for API calls? The idea is that you should be able to test your package without the need for an active internet connection. {httptest2} ‘records’ the calls you make when you run your tests, then chooses when testing between this ‘mock’ response and a ‘live’ response.\nThe approach is pretty simple if you’ve tested before with {testthat}: you wrap your normal test_that() call with httr2::with_mock_dir(). Here’s an example of a test that make sure we get a list back from the API when we use get_pokeapi():\n\nwith_mock_dir(\"endpoint\", {\n  test_that(\"a list is returned\", {\n    expect_type(get_pokeapi(\"move-battle-style\"), \"list\")\n  })\n})\n\nBy wrapping the test in with_mock_dir(), {httptest2} creates the directory tests/endpoint/ that stores a copy of the JSON returned for this call when an internet connection was live.\nAs an aside, I learnt about curl::has_internet() in Colin’s blogpost, which can stop() the get_*() functions if there’s no internet connection. But has_internet() will trigger if you’re offline when you test, defeating the purpose of {httptest2}! Luckily, I saw a timely post by Maëlle about integrating this type of check into an ‘escape hatch’ so your unit tests can be run successfully in this scenario.\nThe rOpenSci HTTP Testing book is a good general port of call as well."
  },
  {
    "objectID": "posts/2023-04-02-splendid-r-games/index.html",
    "href": "posts/2023-04-02-splendid-r-games/index.html",
    "title": "R is a game engine, fight me",
    "section": "",
    "text": "tl;dr\nR is ‘a free software environment for statistical computing and graphics’. Ahahaha, no it’s not, it’s a game engine. I’ve created a ‘splendid’ list of games you can play—written in R—to prove it. Help expand it.\n\n\nStats only!\nR is not a general, multi-purpose programming language. It was written to do statistical analysis and make charts. You are literally not allowed to do anything else with it. You should use <LANGUAGE> instead, which is much more suited to your specific use case. R is a joke language for nerds.\nYou should not read beyond this point if you think, quite rightly, that mirth and frivolity are unsuited to an R session.\n\n\nStats only?\nUnity. Unreal. GameMaker. Godot. All of these videogame engines are now obsolete.\nIt is R—humble R!—that represents the future of gaming.\nTo prove it, I’ve created a list of ‘splendid R games’ in a GitHub repo1 that you are welcome to contribute to.2\nYes, R can be used for fun. Do not tell R Core.\n\n\nWait, he’s serious?\nI think there’s three kinds of ‘platform’ for games written in R:\n\nFor the console\nIn Shiny\nPorted\n\nGames played in the console are pretty straightforward and probably most common. You can run some code, or a function from a package, to launch some code in the R console that you can interact with. A simple option for this might involve use of readline() to receive user input, for example, like Giora Simchoni’s excellent text-based puzzler, Castle of R.\n\n\n\nGiora’s Castle of R running in the terminal.\n\n\nShiny can give you a little more flexibility when it comes to graphics and user input, at the expense of needing to host the app and maybe some extra JavaScript skills. A great example of this is Pedro Silva’s winning entry (app, source) to the Posit Shiny contest in 2020.\n\n\n\nA still from Pedro’s Shiny Decisions app.\n\n\nThe third category is a little more boundary-pushing. Imagine if R was powerful enough to let you port existing games. Well, surprise, ya boi Mike Cheng (aka coolbutuseless) has pushed hard on expanding the capabilities of R to run fast enough and with realtime user input,3 porting the classic Another World (1991) to R, which was showcased at 2022’s Posit conference (source, video, blog).\n\n\n\nA still from Mike’s rstudio::conf(2022) presentation, featuring Another World.\n\n\nOf course, within these ‘platforms’ are genres like word games, arcade games, puzzle games, etc. Will you be the first to create an MMORPG (a massively-multiplayer online R-powered game)?\n\n\nI am an indie game dev now\nI’ve always been interested in how videogames are coded,4 wishing that I could do the same myself. Of course I could simply learn ‘real’ programming languages.\nExcept that’s blasphemy. Of course I’d rather break my own mind and spirit in an attempt to make R achieve 0.1% of what might be possible in P*thon.\nCase in point, I’ve made a few R packages containing some little toys (in order of gooddest to baddest):\n\n{r.oguelike} (source, blogs) for a procedural-dungeon explorer with enemy pathfinding and inventory\n{tamRgo} (source, blog) for a cyber pet in your R console that persists between sessions\n{safar6} (source, blog) for a text-based re-make of the Safari Zone from the first generation of Pokémon games\n{ActionSquirrel} (source, blog) for a tile-based, turn-based minigame in the R console\n{hokey} (source, blog) for minigames that use direct keypress inputs with {keypress}\n\n\n\n\nHint when playing {tamRgo}: do not forget about your pet for 138 days. RIP Kevin XVIII.\n\n\nI’ve got something in the pipeline that involves extremely rudimentary physics in the R console. Wow! For release in 2023 (because game launches never go wrong).\n\n\nReady Player 2\nThe splendid list must be missing a bunch of games. Please leave an issue or pull request in the splendid-r-games repo to add more examples.\nNext stop: letting people run R games in the browser without an installed copy of R. This is already possible with a service like Binder, which can spin up an instance of RStudio with packages pre-installed I did this for {r.oguelike}).\n\n\n\nJust like the Nokia N-Gage, amirite?\n\n\nBut soon you might be able to use WebR to play games in the browser without even spinning up RStudio, ooh. So look out for an R version of itch.io in future, lol.\n\n\n\nSession info\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Big Sur/Monterey 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-04-10\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.0   2023-01-09 [1] CRAN (R 4.2.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.2.0)\n evaluate      0.20    2023-01-17 [1] CRAN (R 4.2.0)\n fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.0)\n htmltools     0.5.2   2021-08-25 [1] CRAN (R 4.2.0)\n htmlwidgets   1.5.4   2021-09-08 [1] CRAN (R 4.2.0)\n jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.2.0)\n knitr         1.42    2023-01-25 [1] CRAN (R 4.2.0)\n rlang         1.0.6   2022-09-24 [1] CRAN (R 4.2.0)\n rmarkdown     2.14    2022-04-25 [1] CRAN (R 4.2.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n xfun          0.37    2023-01-31 [1] CRAN (R 4.2.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\nFootnotes\n\n\nI originally labelled the GitHub repo as an ‘awesome’ repo, which I later learned has a very specific meaning. You might have seen awesome lists before, like the awesome-quarto repo by Mickaël, or the new awesome-webr list by Nan Xiao. ‘Splendid’ is much more of a Bri’ish word than ‘awesome’, so it feels more natural anyway.↩︎\nNote that I have carefully released this post just after April fool’s day, which means I am super, super serious. As usual.↩︎\nSee the {nara} and {eventloop} packages in particular.↩︎\nI like YouTube devlogs by folks like Seb Lague, ThinMatrix, SquidGod, Jonas, TanTan and others. R can never achieve what they’re up to, but I like listening through the logic of what they’re doing.↩︎\n\nReuseCC BY-NC-SA 4.0"
  },
  {
    "objectID": "posts/2023-01-03-r.oguelike-sfx/index.html",
    "href": "posts/2023-01-03-r.oguelike-sfx/index.html",
    "title": "Ding! Sound effects in {r.oguelike}",
    "section": "",
    "text": "new wr — r.oguelike any% tenkeyless noglitch"
  },
  {
    "objectID": "posts/2023-01-03-r.oguelike-sfx/index.html#move",
    "href": "posts/2023-01-03-r.oguelike-sfx/index.html#move",
    "title": "Ding! Sound effects in {r.oguelike}",
    "section": "Move",
    "text": "Move\nStep onto unoccupied floor tile (.) and you’ll hear the very quick tap of your boot.\nClick to play the sound:\n\n\n\n\n\nAnd here’s the corresponding code to reproduce it:\n\nsonify(1, 1, duration = 0.001)\n\nBut bump into the dungeon wall (#) and you’ll get a dull thud, you absolute clod.\n\n\n\n\n\n\nsonify(1, 1, duration = 0.01, flim = c(100, 110))\n\nYes, flim, as in: ‘this post is absolute flimflam’."
  },
  {
    "objectID": "posts/2023-01-03-r.oguelike-sfx/index.html#food",
    "href": "posts/2023-01-03-r.oguelike-sfx/index.html#food",
    "title": "Ding! Sound effects in {r.oguelike}",
    "section": "Food",
    "text": "Food\nWould you pick up an apple (a) you found on the floor of a cave? Here’s what it might sound like as it pops into your inventory.\n\n\n\n\n\n\nsonify(0:1, c(0, 1), duration = 0.05),\n\nMore importantly, would you eat an apple (a) you found on the floor of a cave? Here’s how it would sound as it rolls down your gullet.\n\n\n\n\n\n\nsonify(0:1, c(1, 0), duration = 0.05)"
  },
  {
    "objectID": "posts/2023-01-03-r.oguelike-sfx/index.html#gold",
    "href": "posts/2023-01-03-r.oguelike-sfx/index.html#gold",
    "title": "Ding! Sound effects in {r.oguelike}",
    "section": "Gold",
    "text": "Gold\nCollecting gold ($) grants you a celebratory chirp of excitement. Although there’s not actually anything in the dungeon to spend it on, sorry.\n\n\n\n\n\n\nsonify(1, 1, duration = 0.05, flim = c(800, 800))\nsonify(1, 1, duration = 0.05, flim = c(1000, 1000))"
  },
  {
    "objectID": "posts/2023-01-03-r.oguelike-sfx/index.html#defeat-enemy",
    "href": "posts/2023-01-03-r.oguelike-sfx/index.html#defeat-enemy",
    "title": "Ding! Sound effects in {r.oguelike}",
    "section": "Defeat enemy",
    "text": "Defeat enemy\nA powerful victory ditty after you crush your enemies (E).\n\n\n\n\n\n\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600))\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600))\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(800, 800))"
  },
  {
    "objectID": "posts/2023-01-03-r.oguelike-sfx/index.html#lose",
    "href": "posts/2023-01-03-r.oguelike-sfx/index.html#lose",
    "title": "Ding! Sound effects in {r.oguelike}",
    "section": "Lose",
    "text": "Lose\nConversely, a sad lament for being crushed by your enemies (E) or running out of turns (T).\n\n\n\n\n\n\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600))\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600))\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(400, 400))"
  },
  {
    "objectID": "posts/2023-03-11-in-a-dungeon/index.html",
    "href": "posts/2023-03-11-in-a-dungeon/index.html",
    "title": "Fun and learning. In a dungeon.",
    "section": "",
    "text": "Learn hard and you too can be a mobile gamedev like me.\n\n\n\ntl;dr\nToday I spoke at a public sector1 event for data scientists2. I said that learning is best when focused into little projects that are fun.\n\n\nTo the point\nThe abstract sums it up, obviously:\n\nEver done a technical training module and then immediately forgot what you learnt? Do you sometimes feel like you’re ticking boxes instead of actually developing your skills? Yeah, me too. Luckily, more active styles of learning are available. Maybe you can try working on a small, focused project where you can make mistakes and have fun. I’ve had success with this and, as a bonus, accidentally learnt more than I had planned to. I’ll give you an example of my experience and some ideas for how you might be able to do it yourself. The talk will involve a detour to an underground cave, but you won’t need any extra equipment.3\n\nYes, a cheeky teaser there to pique the interest. But everyone came to my talk anyway because it was the only one at that timeslot.\nYou can just look at the slides below if you want (direct link, source). Press ‘s’ to pop out the speaker notes.\n\n\nThese were made with Revealjs via Quarto, of course.\n\n\nOn my soapbox\nSo what incredible insight did I bring to the event?\nBasically, I think ‘module-based’ learning—often passive video walkthroughs with comprehension exercises—are too generic and I usually struggle to remember anything from them.\nI think ‘project-based’ learning is preferable. Think about what you actually want to learn and develop a small-scope, discrete project around it. Make the subject matter fun. Fail meaningfully by be being open, recording what you’ve found, and involving your community.\nMy contrived soundbite is that module-based is done to you and project-based is done by you.\nIs this a new thought technology? No. Is it always true and applicable to everyone in every conceivable scenario and with every learning need? No. What’s my expertise? None, really. I’ve just spent a long time in lots of different departments and I can tell you what has worked for me4 as someone who entered the public sector with little computing or coding ability.\nAm I all too aware of how self-indulgent this all sounds? Yes. Did I need a whole talk to explain this? No, probably not. I’m happy if just one person stops to think about this next time they want to learn something. I’m also content if one person panicked slightly when they realised that R is a game engine now.\n\n\n\nSession info\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Big Sur/Monterey 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-04-10\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.0   2023-01-09 [1] CRAN (R 4.2.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.2.0)\n evaluate      0.20    2023-01-17 [1] CRAN (R 4.2.0)\n fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.0)\n htmltools     0.5.2   2021-08-25 [1] CRAN (R 4.2.0)\n htmlwidgets   1.5.4   2021-09-08 [1] CRAN (R 4.2.0)\n jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.2.0)\n knitr         1.42    2023-01-25 [1] CRAN (R 4.2.0)\n rlang         1.0.6   2022-09-24 [1] CRAN (R 4.2.0)\n rmarkdown     2.14    2022-04-25 [1] CRAN (R 4.2.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n xfun          0.37    2023-01-31 [1] CRAN (R 4.2.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\nFootnotes\n\n\nOn the same day as train and public sector strikes, oof.↩︎\nI’m becoming more convinced that I don’t know what ‘data scientist’ means anymore. ‘Old man yells at cloud (computing)’, etc.↩︎\nA reference of, course, to my little toy {r.oguelike} project. This is an R package I wrote to achieve some learning goals and also to have some fun; it contains a novelty tile- and turn-based game that the player interacts with in the console. This also fit the themes of the conference—connectivity and patterns—because it contains a procedural dungeon generator and enemy pathfinding.↩︎\nWould’ve been smarter to bring, y’know, actual evidence rather than anecdotes to a data science conference, eh?↩︎\n\nReuseCC BY-NC-SA 4.0"
  },
  {
    "objectID": "posts/2023-02-23-nook-s7/index.html",
    "href": "posts/2023-02-23-nook-s7/index.html",
    "title": "Repaying Tom Nook with {S7}",
    "section": "",
    "text": "tl;dr\nThe R7 S7 object-oriented system is coming to R. I’ve done a little R6-to-S7 translation on an old project to get a very cursory feel for it, featuring Animal Crossing New Horizons.\n\n Update\nThe S7 system and package are under development and could change at any time, rendering everything in this post useless.1 Heck, last time I checked, the system was called ‘R7’. There’s also a chance that S7 elements may have been integrated into base R itself by the time you read this.\n\n\n\n2020 again, oh no\nAnimal Crossing New Horizons (ACNH) was the perfect pandemic game. And the pandemic was the perfect time to build an ersatz version of the ACNH in-game banking system to solve an exercise in the Advanced R book using the {R6} package for object-oriented programming (OOP) in R.\nThe exercise helped me fantasize about defeating the game’s main boss, the predatory loanshark (loanraccoon?) Tom Nook, via endless wire transfers of hard-earned in-game currency, called ‘Bells’.\nOf course, a lot has changed since 2020. Most importantly, a new OOP system for R is being developed. Conversely, Tom Nook has not changed. He is still a scourge.\nAnyway, maybe this is a chance to twitch my OOP muscles with this new system.\n\n\nOOP they did it again\nThe R Consortium’s OOP working group has been beavering (raccooning?) away to develop a new OOP system from the ground up: S72 (S3 + S4, geddit?).\nThe idea is to take the best elements of the existing and in-built S3 and S4 systems, interface with them and improve on them.\nYou can read various design docs and meeting minutes on their documentation site, which is housed in their ‘OOP-WG’ GitHub repo, and try out the current iteration of the associated package, fittingly called {S7}.\nYou should refer to their docs in the first instance, or a useful third party review. For example, Jumping Rivers have… jumped the river on this one and produced a handy intro.\n\n\nA new horizon for OOP\nNaturally, I should revisit my post on Repaying Tom Nook with {R6} by replicating it with {S7}. Naturally.\nAha, but actually the {S7} package is more like a development of S3 and S4 objects, and is not a ‘new version’ of {R6}! Ah well. I’m noodling around with {S7} for my own devices and thought I’d post it here so I can refer back to it later.\nBasically I’m recycling content from a previous post to get a feel for the new system. But only in the most superficial, basic way. I spent about 15 minutes on this. Look elsewhere for actually-usefully material. You have been warned.\n\n\nInstall\nFor now, the {S7} package is in the R Consortium’s OOP-WG GitHub repo.\n\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"RConsortium/OOP-WG\")\n\nAnd for some glamour we’ll also use the quintessential {emoji} package3\n\ninstall.packages(\"emoji\")  # if not yet installed\nlibrary(emoji)\n\n\n\nThat is class\nA new class is constructed with… new_class()\nWe can give it a name. We can also give it properties: fields that contain data and can be provided a type check and default value. It’s possible to build validators for these as well, which ensure that certain conditions are met when the properties are adjusted. I’ll keep this simple for now: I just want the values to remain equal or greater than zero.\n\nABD <- new_class(\n  name = \"ABD\",\n  properties = list(\n    savings = new_property(class_integer, default = 0L),\n    loan = new_property(class_integer, default = 2498000L)\n  ),\n  validator = function(self) {\n    if (self@savings < 0L) {\n      \"@savings must be zero or more\"\n    } else if (self@loan < 0L) {\n      \"@loan must be zero or more\"\n    }\n  }\n)\n\nFor new methods, you can create a new ‘generic’ and define a function for it. For example, the ‘deposit’ method is pretty straightforward: it just adds an amount to the current savings value.\n\ndeposit <- new_generic(\"deposit\", \"x\")\n\nmethod(deposit, ABD) <- function(x, amount) {\n  x@savings <- x@savings + amount\n  x\n}\n\nI specified some other methods, but I hid them because they’re not much more complicated.\n\n\nClick for more methods\n\nThe ‘withdraw’ method subtracts a specified amount from the savings property. You’re warned if you specify an amount greater than the amount available.\n\nwithdraw <- new_generic(\"withdraw\", \"x\")\n\nmethod(withdraw, ABD) <- function(x, amount) {\n  \n  if (x@savings - amount < 0L) {\n    warning(\n      \"Withdrew all savings: \", x@savings, \" Bells.\\n\", \n      call. = FALSE\n    )\n    x@savings <- 0L\n  } else {\n    x@savings <- x@savings - amount\n  }\n  \n  x\n  \n}\n\nThe ‘pay’ method moves funds from savings to loan. You’re warned if the loan is already paid, if you specify a greater amount than there are savings, or if you pay a greater amount than the loan remaining. You’ll get a victory message if you pay off the whole loan.\n\npay <- new_generic(\"pay\", \"x\")\n\nmethod(pay, ABD) <- function(x, amount) {\n  \n  if (x@loan == 0L) {\n    stop(\"You already finished paying your loan!\\n\", call. = FALSE)\n  }\n  \n  if (x@savings - amount < 0L) {\n    warning(\n      \"Paid total amount from savings instead: \", x@savings, \" Bells.\\n\",\n      call. = FALSE\n    )\n    x@loan <- x@loan - x@savings\n    x@savings <- 0L\n  } else if (x@loan - amount < 0L) {\n    warning(\n      \"Paid total remaining loan instead: \", x@loan, \" Bells.\\n\",\n      call. = FALSE\n    )\n    x@savings <- x@savings - x@loan \n    x@loan <- 0L\n  } else {\n    x@savings <- x@savings - amount\n    x@loan <- x@loan - amount\n  }\n  \n  if (x@loan == 0L) {\n    cat(\n      emoji(\"smiley\"),\n      \"Sweet! I finally finished paying off my very last home loan!\",\n      emoji(\"tada\"), \"\\n\\n\"\n    )\n  }\n  \n  x\n  \n}\n\nThe check method is basically a print method. It reports the loan and savings amounts currently stored in the bank.\n\ncheck <- new_generic(\"check\", \"x\")\n\nmethod(check, ABD) <- function(x) {\n\n  loan_formatted <- format(x@loan, big.mark = \",\", scientific = FALSE)\n\n  savings_formatted <- format(x@savings, big.mark = \",\", scientific = FALSE)\n\n  cat(\"Automatic Bell Dispenser (ABD)\\n\\n\")\n  cat(emoji(\"bell\"), \"Loan Balance:\", loan_formatted, \"Bells\\n\")\n  cat(emoji(\"pig2\"), \"Savings Balance:\", savings_formatted, \"Bells\\n\\n\")\n  cat(\n    \"Please make a selection from the menu below\\n\\n\",\n    emoji(\"house\"), \"pay()\\n\",\n    emoji(\"arrow_up\"), \"deposit()\\n\",\n    emoji(\"arrow_down\"), \"withdraw()\"\n  )\n\n}\n\n\nYou can start a new instance of the ABD class by, y’know, calling it.\n\nbank <- ABD()\n\nWhen you check the class of this object, you’ll see both the custom class name and a reminder that it has the ‘S7’ class.\n\nclass(bank)\n\n[1] \"ABD\"       \"S7_object\"\n\n\nThe vanilla print method exposes the properties and their startup values:\n\nbank\n\n<ABD>\n @ savings: int 0\n @ loan   : int 2498000\n\n\nNote that the properties are prepended with @. This indicates that we can use the ‘at’ symbol to access these ‘slots’ (like S4) from the object, like:\n\nbank@loan\n\n[1] 2498000\n\n\nWhile we’re printing stuff, we can use the check() method (that I’ve pre-specified) to see the properties in a manner that more closely resembles the game.\n\ncheck(bank)\n\nAutomatic Bell Dispenser (ABD)\n\n🔔 Loan Balance: 2,498,000 Bells\n🐖 Savings Balance: 0 Bells\n\nPlease make a selection from the menu below\n\n 🏠 pay()\n ⬆️ deposit()\n ⬇️ withdraw()\n\n\nYou can easily and directly change the properties. To add 10 Bells:\n\nbank@savings <- 9.99\n\nError: <ABD>@savings must be <integer>, not <double>\nHaha, whoops. Remember I specified that the property can only be an integer, so we need to provide an integer value instead of a double value. In other words, we can only provide whole numbers of Bells. Remember that the L suffix is used in R to signify an integer.4\n\nbank@savings <- 10L\n\nIs there an overdraft? Tom Nook would probably love that and would ask for massive overdraft fees, but it’s not programmed into the game. This is where our validator comes in handy. We specified that you can’t have a negative amount of savings, so this causes an error:\n\nbank@savings <- -11L\n\nError: <ABD> object is invalid:\n- @savings must be zero or more\nThat’s fine, but I have sometimes I have extra logic I want to evaluate when I adjust the properties. That’s why I created new methods earlier on. It means I can use a function to add to the savings property instead, for example.\n\nbank <- deposit(bank, 10L)\nbank@savings\n\n[1] 10\n\n\nWe can retrieve Bells in this fashion too:\n\nbank <- withdraw(bank, 10L)\nbank@savings\n\n[1] 0\n\n\nWhat if we deposit enough Bells to pay the loan?\n\nbank <- deposit(bank, 2500000L)\nbank <- pay(bank, 2500000L)\n\nWarning: Paid total remaining loan instead: 2498000 Bells.\n\n\n😃 Sweet! I finally finished paying off my very last home loan! 🎉 \n\n\nThe method warns us when we try to pay off a value greater than the remaining loan and prints a nice congratulatory message if we’ve cleared the whole debt.\nAnd so we end up with this view:\n\ncheck(bank)\n\nAutomatic Bell Dispenser (ABD)\n\n🔔 Loan Balance: 0 Bells\n🐖 Savings Balance: 2,000 Bells\n\nPlease make a selection from the menu below\n\n 🏠 pay()\n ⬆️ deposit()\n ⬇️ withdraw()\n\n\nHuzzah. Get rekt, raccoon dog. More like Tom Crook amirite.\n\n\n\n\n\n\nSession info\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Big Sur/Monterey 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-04-10\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n cli           3.6.0      2023-01-09 [1] CRAN (R 4.2.0)\n digest        0.6.31     2022-12-11 [1] CRAN (R 4.2.0)\n emoji       * 15.0       2022-11-03 [1] CRAN (R 4.2.0)\n evaluate      0.20       2023-01-17 [1] CRAN (R 4.2.0)\n fastmap       1.1.0      2021-01-25 [1] CRAN (R 4.2.0)\n fontawesome   0.2.2      2021-07-02 [1] CRAN (R 4.2.0)\n glue          1.6.2      2022-02-24 [1] CRAN (R 4.2.0)\n htmltools     0.5.2      2021-08-25 [1] CRAN (R 4.2.0)\n htmlwidgets   1.5.4      2021-09-08 [1] CRAN (R 4.2.0)\n jsonlite      1.8.4      2022-12-06 [1] CRAN (R 4.2.0)\n knitr         1.42       2023-01-25 [1] CRAN (R 4.2.0)\n lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.2.0)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.2.0)\n rlang         1.0.6      2022-09-24 [1] CRAN (R 4.2.0)\n rmarkdown     2.14       2022-04-25 [1] CRAN (R 4.2.0)\n rstudioapi    0.14       2022-08-22 [1] CRAN (R 4.2.0)\n S7          * 0.0.0.9000 2023-02-23 [1] Github (RConsortium/OOP-WG@f2db260)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.2.0)\n stringi       1.7.8      2022-07-11 [1] CRAN (R 4.2.0)\n stringr       1.5.0      2022-12-02 [1] CRAN (R 4.2.0)\n xfun          0.37       2023-01-31 [1] CRAN (R 4.2.0)\n yaml          2.3.7      2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\nFootnotes\n\n\n‘Useless’ is an extremely relative term with regard to this blog.↩︎\n95% certain that ‘S7’ is pronounced how a snake might say ‘seven’: like ‘sseven’.↩︎\n{emo} is dead, long live {emoji}. Haha, joke’s on you, emo will never die. I know this because ‘emo’ was in my top 5 genres on Spotify Wrapped 2022, lololol.↩︎\nWhy L? Shrug. Just take the L.↩︎\n\nReuseCC BY-NC-SA 4.0"
  },
  {
    "objectID": "posts/2023-02-28-getparsedata/index.html",
    "href": "posts/2023-02-28-getparsedata/index.html",
    "title": "I can’t be parsed, mate",
    "section": "",
    "text": "Image by Keith Johnston from Pixabay. Deep fried by Matt Dray.1\n\n\n\ntl;dr\nR is capable of reading R code. Obviously. You can use getParseData(parse()) to see what’s going on. A very naive intro.\n\n\nAt an imparse\nThere’s many things that delight me about R coding.2 One meta thing I like is the idea that R has to recognise the code that you give it as… R code.\nFor example, does x<-1 mean ‘x is less than minus-one’? Hm, actually R recognises <- as a ‘left-assignment operator’—a special ‘token’—that gives the name x the value of 1. Subtle, but important.\nAnother example: the tokens <- and = have an equivalent role in x <- 1 and x = 1. For style reasons, you’ll probably want to replace = with <-.3 But don’t just ‘find and replace’ because = is context dependent. Consider:\n\nx = subset(mtcars, subset = carb == 8)\n\nHere, = is used to assign (=), to set a function argument (=) and as part of the equivalence operator (==). Oof.\nHow can a mere human understand this better?\n\n\nParsed tense\nThe cool (‘cool’) thing is that R gives you tools to be able to see the world as R sees it.\nThis is sometimes called ‘static code analysis’, in that you can interrogate the code for syntax errors before it executes. Packages like {lintr} can even help tidy up (‘lint’) your code by adjusting or replacing the tokens.4\nI’ve used this approach before to:\n\ncreate the {r2eng} package, which matches tokens against words so an expression can be translated to English (e.g. <- is matched to the word ‘gets’)\nwrite an RStudio addin that auto-labels closing parentheses with the name of the function they belong to (known cutely as a ‘biscuit’)\nidentify and destroy files that contain equals assignment (x = 1), rather than the superior assignment arrow (x <- 1)\n\nHow might you tinker about with this yourself? Read on for a quickstart.\n\n\nParse the parcel\nI’ll talk about two main functions: parse() and getParseData(), which are both part of base R.\nYou can pass a string of R code to parse() for it to be recognised as an ‘expression’. Let’s use the equals-rich subset() example from above.\n\ncode_str <- \"x = subset(mtcars, subset = carb == 8)\"\ncode_expr <- parse(text = code_str)\ncode_expr\n\nexpression(x = subset(mtcars, subset = carb == 8))\n\nclass(code_expr)\n\n[1] \"expression\"\n\n\nSo the string is recognised as R code at this point, which will allow us to break it down into its individual tokens. You could jump ahead here and just eval()uate this expression object.\n\neval(code_expr)\nx\n\n              mpg cyl disp  hp drat   wt qsec vs am gear carb\nMaserati Bora  15   8  301 335 3.54 3.57 14.6  0  1    5    8\n\n\nAs a result, the dataframe x is now in our environment and, as expected, contains only rows of the mtcars that have 8 carburetors.5\nSo we have the power to delay code execution, like some kind of wizard. Jeepers! That’s great, but now lets pick apart the frozen expression into its constituent tokens. This is where getParseData() comes in.\nThe function takes an expression object as the input and returns a dataframe with one token per row and several columns of handy information related to positioning and the relatedness between the tokens.\nFor now I’m going to simplify the output to show only the units of text that have been recognised as tokens, along with the name that R gives to each token under the hood (e.g. <- is recognised as LEFT_ASSIGN).6\n\ncode_parsed <- getParseData(parse(text = code_str, keep.source = TRUE))\ncode_parsed[code_parsed$text != \"\", c(\"text\", \"token\")]\n\n     text                token\n1       x               SYMBOL\n2       =            EQ_ASSIGN\n5  subset SYMBOL_FUNCTION_CALL\n6       (                  '('\n8  mtcars               SYMBOL\n9       ,                  ','\n14 subset           SYMBOL_SUB\n15      =               EQ_SUB\n16   carb               SYMBOL\n17     ==                   EQ\n19      8            NUM_CONST\n21      )                  ')'\n\n\nOh neato, so you can see = is indeed recognised as the token EQ_ASSIGN (‘equals assign’), = as EQ_SUB (equals in the context of supplying function arguments) and == as in EQ (the equivalence operator).\nIf you’re wondering, the keep.source = TRUE bit was needed to encourage parse() to return its output, which is a necessary step within this non-interactive blog post.\n\n\nParseltongue\nWant to take a look at the tokens in a given string of R code yourself? You can use this little function that contains parse() and getParseData() and returns you the simplified dataframe I showed above if simplify = TRUE, otherwise it gives the full read out.7\n\nparse_out <- function(string, simplify = TRUE) {\n  p <- parse(text = string, keep.source = TRUE)\n  pd <- getParseData(p)\n  if (simplify) {\n    keep_cols <- c(\"token\", \"text\")\n    pd <- pd[pd$text != \"\", keep_cols]\n  }\n  pd\n}\n\nSo you could use it like:\n\nparse_out(\n  \"mean(CO2[CO2$Plant == 'Qn1', CO2$uptake]) -> mean_uptake\"\n)\n\n                  token        text\n1  SYMBOL_FUNCTION_CALL        mean\n2                   '('           (\n4                SYMBOL         CO2\n5                   '['           [\n7                SYMBOL         CO2\n8                   '$'           $\n10               SYMBOL       Plant\n12                   EQ          ==\n13            STR_CONST       'Qn1'\n14                  ','           ,\n20               SYMBOL         CO2\n21                  '$'           $\n23               SYMBOL      uptake\n25                  ']'           ]\n30                  ')'           )\n35         RIGHT_ASSIGN          ->\n36               SYMBOL mean_uptake\n\n\n\n Update\nSince I wrote this post, it’s become possible to include editable R blocks in a rendered Quarto document, which can be run in the browser thanks to WebR(!). I’ve made a quick demo and post so you can play around with a simplified version of the parsing function above.\n\n\n\nLateral parse\nI’ll leave you with another interesting thing that shows you the inner workings of R, which you might not realise as you run your code. We can look at how the code is actually executed, not just the tokens that it’s composed of.\nConsider how the {magrittr} pipe %>% is used. Here I’ve slightly adjusted the input to filter for 6 and 8 carburetors; you’ll see why in a second.\n\nparse_out(\"mtcars %>% subset(carb %in% c(6, 8))\")\n\n                  token   text\n1                SYMBOL mtcars\n2               SPECIAL    %>%\n4  SYMBOL_FUNCTION_CALL subset\n5                   '('      (\n7                SYMBOL   carb\n8               SPECIAL   %in%\n10 SYMBOL_FUNCTION_CALL      c\n11                  '('      (\n13            NUM_CONST      6\n15                  ','      ,\n19            NUM_CONST      8\n21                  ')'      )\n26                  ')'      )\n\n\nOkay yeah, %>% is recognised as a token called SPECIAL between the left-hand side of mtcars and the right-hand side of subset(carb %in% c(6, 8)). Notice also that %in% is also recognised as SPECIAL.\nIn fact, this is how R recognises ‘infix operators’ that are bound by percent symbols. This is some special syntactical magic that lets you put the function name between two arguments. So x %>% head is equivalent to `%>%`(mtcars, head). Perhaps SPECIAL instead of a more specific name because infix operators can be created on the fly?\nIf %>% is SPECIAL, how do you think the base pipe is recognised in this simpler example?\n\nparse_out(\"mtcars |> head()\")\n\n                 token   text\n1               SYMBOL mtcars\n2                 PIPE     |>\n4 SYMBOL_FUNCTION_CALL   head\n5                  '('      (\n7                  ')'      )\n\n\nNot that surprising: it’s recognised as PIPE and not a SPECIAL, since it’s a proper base R token in its own right (as of R v4.1) .\nOkay, so we’ve seen how R parses these tokens, what about how it actually executes the code? One way to see this is to look at an ‘abstract syntax tree’ with the {lobstr} package.8 A ‘tree’ to show the nested structure of code and variables and so on.\n\nlibrary(lobstr)    # install from CRAN\nlibrary(magrittr)  # install from CRAN\nast(mtcars %>% head())\n\n█─`%>%` \n├─mtcars \n└─█─head \n\n\nYeah, like I said: x %>% head() is ultimately executed by R like a normal function (block symbol in the output from ast() above), in the form `%>%`(mtcars, head). You can see how the `%>%` is a parent to mtcars and head() below it.\nSo the same happens for the base pipe, right?\n\nast(mtcars |> head())\n\n█─head \n└─mtcars \n\n\nSurprise! mtcars |> head is not executed like `|>`(mtcars, head). It’s literally executed like head(mtcars). The base pipe is so special because it’s baked right into the R source code as a separate type of token that is recognised to have a job distinct from a basic SPECIAL. This should make it a little faster to run compared to %>% as well.\n\n\nParse away\nWell, ‘cool’ I guess. Now it’s up to you: you can either parse on this knowledge, or leave it in the parsed.9\n\n\n\nSession info\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Big Sur/Monterey 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-04-10\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.0   2023-01-09 [1] CRAN (R 4.2.0)\n crayon        1.5.2   2022-09-29 [1] CRAN (R 4.2.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.2.0)\n evaluate      0.20    2023-01-17 [1] CRAN (R 4.2.0)\n fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.0)\n fontawesome   0.2.2   2021-07-02 [1] CRAN (R 4.2.0)\n htmltools     0.5.2   2021-08-25 [1] CRAN (R 4.2.0)\n htmlwidgets   1.5.4   2021-09-08 [1] CRAN (R 4.2.0)\n jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.2.0)\n knitr         1.42    2023-01-25 [1] CRAN (R 4.2.0)\n lobstr      * 1.1.2   2022-06-22 [1] CRAN (R 4.2.0)\n magrittr    * 2.0.3   2022-03-30 [1] CRAN (R 4.2.0)\n rlang         1.0.6   2022-09-24 [1] CRAN (R 4.2.0)\n rmarkdown     2.14    2022-04-25 [1] CRAN (R 4.2.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n xfun          0.37    2023-01-31 [1] CRAN (R 4.2.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\nFootnotes\n\n\nYou too can use R to deep fry a meme.↩︎\nThings that I’m sure are quite trivial to gatekeepers. I learnt minimal amounts of R to help me wrangle ecological data and ‘do statistics’. I’m not a computer scientist, nor was I trained as a programmer.↩︎\nOf course, I’m not mentioning right assignment (->) here, nor the plucky upstart of down-asignment, which is certain to be the future for assignment in R.↩︎\nYou may also enjoy a post by Kun Ren about how this approach is useful for static analysis in the {languageserver} package, which is a handy download for using R in VS Code.↩︎\nNot carbohydrates. ‘Non-car people’ should take a look at the ‘Format’ section of ?mtcars. I mean, drat means ‘rear axle ratio’, what?↩︎\nYou can see a list of these with English translations in Winston Chang’s GitHub copy of R’s source code. So NUM_CONST is ‘numeric constant’, for example.↩︎\nAn exercise for the reader is to alter this function to accept an R script file rather than a string (hint: parse() takes a file argument).↩︎\nA package with one of my favourite names and hex logos. The ‘str’ is from ‘structure’, as in ‘the structure of code’. The logo is a lobster snipping apart the ‘lob’ from ‘str’ text. I mean, *(lobster) chef’s kiss* on that one. 🦞↩︎\nYeah, I’m hoping you didn’t read this far. Obviously I didn’t know how to end the post, sorry.↩︎\n\nReuseCC BY-NC-SA 4.0"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "rostrum.blog (test)",
    "section": "",
    "text": "R is a game engine, fight me\n\n\n\n2023-04-02\n\n\n\n\n\n\n\n\n\n\n\nPlaygrounds with WebR and Quarto\n\n\n\n2023-03-16\n\n\n\n\n\n\n\n\n\n\n\nFun and learning. In a dungeon.\n\n\n\n2023-03-15\n\n\n\n\n\n\n\n\n\n\n\nI can’t be parsed, mate\n\n\n\n2023-03-03\n\n\n\n\n\n\n\n\n\n\n\nRepaying Tom Nook with {S7}\n\n\n\n2023-02-26\n\n\n\n\n\n\n\n\n\n\n\nLondon from space via botsin.space\n\n\n\n2023-02-09\n\n\n\n\n\n\n\n\n\n\n\nWrapping PokéAPI with {trapinch}\n\n\n\n2023-02-02\n\n\n\n\n\n\n\n\n\n\n\nStiliyan Petrov: Jesus?\n\n\n\n2023-01-08\n\n\n\n\n\n\n\n\n\n\n\n.-././–/—/.-./…/.\n\n\n\n2023-01-06\n\n\n\n\n\n\n\n\n\n\n\nDing! Sound effects in {r.oguelike}\n\n\n\n2023-01-04\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html#tldr",
    "href": "about.html#tldr",
    "title": "About",
    "section": "tl;dr",
    "text": "tl;dr\nFun and learning with R, usually off-piste. It’s a bonus if you find any of it useful and/or amusing. All views belong to us.\nCheck out R Weekly for more R content."
  },
  {
    "objectID": "about.html#creators",
    "href": "about.html#creators",
    "title": "About",
    "section": "Creators",
    "text": "Creators\n\nMatt Dray\nPersonal site | Github | Twitter | Mastodon\nI use R professionally for analysis and reproducibility, and as an amateur for memes and ironic trolling. I make R do odd things, often with the aid of important pop-culture references like Pokémon and Dawson’s Creek.\n\n\nAdriana De Palma\nTwitter | academia.edu | Google Scholar | NHM\nI’m a Postdoctoral Researcher at the Natural History Museum, London. I have a PhD in Ecology and an MRes in Entomology from Imperial College London, and a BSc in Biology from the University of Sussex.\nIn terms of my research, I am particularly interested in using large scale ecological datasets to answer policy relevant questions. I work on the PREDICTS project with Andy Purvis, looking at how biodiversity responds over time to land-use change and related pressures. My more general interests lie with science policy, statistics and weird and wonderful invertebrates (my favourite being Collembola – the beautiful springtails)."
  },
  {
    "objectID": "about.html#meta",
    "href": "about.html#meta",
    "title": "About",
    "section": "Meta",
    "text": "Meta\n\nFind the source on GitHub\nMade with Quarto\nDeployed with Netlify\nVisitors counted using GoatCounter by Martin Tournoij"
  }
]