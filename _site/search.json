[
  {
    "objectID": "about.html#tldr",
    "href": "about.html#tldr",
    "title": "About",
    "section": "tl;dr",
    "text": "tl;dr\nFun and learning with R, usually off-piste. It’s a bonus if you find any of it useful and/or amusing. All views belong to us.\nCheck out R Weekly for more R content."
  },
  {
    "objectID": "about.html#creators",
    "href": "about.html#creators",
    "title": "About",
    "section": "Creators",
    "text": "Creators\n\nMatt Dray\nPersonal site | Github | Mastodon\nI use R professionally for analysis and reproducibility, and as an amateur for memes and ironic trolling. I make R do odd things, often with the aid of important pop-culture references like Pokémon and Dawson’s Creek.\n\n\nAdriana De Palma\nacademia.edu | Google Scholar | NHM\nI’m a Postdoctoral Researcher at the Natural History Museum, London. I have a PhD in Ecology and an MRes in Entomology from Imperial College London, and a BSc in Biology from the University of Sussex.\nIn terms of my research, I am particularly interested in using large scale ecological datasets to answer policy relevant questions. I work on the PREDICTS project with Andy Purvis, looking at how biodiversity responds over time to land-use change and related pressures. My more general interests lie with science policy, statistics and weird and wonderful invertebrates (my favourite being Collembola – the beautiful springtails)."
  },
  {
    "objectID": "about.html#meta",
    "href": "about.html#meta",
    "title": "About",
    "section": "Meta",
    "text": "Meta\n\nFind the source on GitHub\nMade with Quarto\nDeployed with Netlify\nVisitors counted using GoatCounter by Martin Tournoij"
  },
  {
    "objectID": "posts/2023-05-10-spear-ggplot2/index.html",
    "href": "posts/2023-05-10-spear-ggplot2/index.html",
    "title": "Recreating a dataviz with {ggplot2}",
    "section": "",
    "text": "They’re the same picture. Nearly."
  },
  {
    "objectID": "posts/2023-05-10-spear-ggplot2/index.html#tldr",
    "href": "posts/2023-05-10-spear-ggplot2/index.html#tldr",
    "title": "Recreating a dataviz with {ggplot2}",
    "section": "tl;dr",
    "text": "tl;dr\nTwo years ago I won a data-viz recreation competition run by the Royal Statistical Society (RSS) using base R’s plotting. I wrote a short {ggplot2} how-to for RSS’s ‘Significance’ magazine that was never published1, so here it is now."
  },
  {
    "objectID": "posts/2023-05-10-spear-ggplot2/index.html#recreate",
    "href": "posts/2023-05-10-spear-ggplot2/index.html#recreate",
    "title": "Recreating a dataviz with {ggplot2}",
    "section": "Recreate",
    "text": "Recreate\nThis short code walkthrough will get you started on recreating Mary Eleanor Spear’s cotton plot (1952), as used in the Royal Statistical Society’s #CottonViz challenge. We’ll concentrate on the line chart for now.\n\nThe {ggplot2} package in R is a good choice, since we can build up the chart in steps: first, we’ll build a basic line chart, remove unneeded elements, fix the axes and finally add the labels. It won’t look perfectly like Spear’s original, but we’ll get close.\nThis isn’t a guide to learn {ggplot2}, so you may want to learn the basics first. Alternatively, I wrote a blog post about building Spear’s entire visualisation using base R only."
  },
  {
    "objectID": "posts/2023-05-10-spear-ggplot2/index.html#requirements",
    "href": "posts/2023-05-10-spear-ggplot2/index.html#requirements",
    "title": "Recreating a dataviz with {ggplot2}",
    "section": "Requirements",
    "text": "Requirements\nFirst, some preparation. If you haven’t already, install the {ggplot2} package for plotting, {tidyr} data reshaping and {extrafont} for font handling.\n\ninstall.packages(\"ggplot2\", \"tidyr\", \"extrafont\")\n\nYou can download for free the Routed Gothic font by Darren Embry, which is a good approximation of the stencil lettering used by Spear. Installation will depend on your system, but in macOS you can simply drag the font files to the Font Book app. When you attach {extrafont} it’ll fetch automatically your installed fonts (including Routhed Gothic) so you can use them in R.\n\nlibrary(extrafont)"
  },
  {
    "objectID": "posts/2023-05-10-spear-ggplot2/index.html#tidying-up",
    "href": "posts/2023-05-10-spear-ggplot2/index.html#tidying-up",
    "title": "Recreating a dataviz with {ggplot2}",
    "section": "Tidying up",
    "text": "Tidying up\nThe cotton dataset is quite small, so we can create the dataframe ourselves. It provides information on the supply of cotton in the USA in the 1940s.\n\ncotton_raw &lt;- data.frame(\n  year           = 1942:1948,\n  us_consumption = c(11160, 9993,  9693,  9423,  10072, 9374,  7833),\n  exports        = c(1480,  1139,  2007,  3613,  3545,  1968,  4785),\n  stocks         = c(10657, 10744, 11164, 7326,  2530,  3080,  5283),\n  total_supply   = c(23297, 21876, 22864, 20362, 16147, 14422, 17901)\n)\n\nIt’s preferable to make the data ‘tidy’ so that there’s one row per year and consumption type, and one column for each variable. The {tidyr} package can help us pivot the data to ‘long’ format from this ‘wide’ format.\n\nlibrary(tidyr)\n\ncotton &lt;- cotton_raw %&gt;% \n  pivot_longer(\n    c(us_consumption, exports, stocks), \n    names_to = \"consumption_type\", values_to = \"boles\"\n  )\n\nhead(cotton, 4)  # preview first few rows\n\n# A tibble: 4 × 4\n   year total_supply consumption_type boles\n  &lt;int&gt;        &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt;\n1  1942        23297 us_consumption   11160\n2  1942        23297 exports           1480\n3  1942        23297 stocks           10657\n4  1943        21876 us_consumption    9993"
  },
  {
    "objectID": "posts/2023-05-10-spear-ggplot2/index.html#how-to",
    "href": "posts/2023-05-10-spear-ggplot2/index.html#how-to",
    "title": "Recreating a dataviz with {ggplot2}",
    "section": "How-to",
    "text": "How-to\n\nStep 1: line chart\nNow we can create a basic line chart of the data with geom_line() and set with scale_linetype_manual() a unique dashed line per group. Further arguments set the title and the typeface to be used throughout the plot, while a small tweak to theme() adjusts the title’s position.\n\nlibrary(ggplot2)\n\np1 &lt;- ggplot() +\n  geom_line(\n    data = cotton,\n    aes(x = year, y = boles / 1000, linetype = consumption_type),\n    linewidth = 1.5\n  ) +\n  scale_linetype_manual(values = c(\"longdash\", \"dashed\", \"solid\")) +\n  labs(title = \"Millions of Boles\") +\n  theme(\n    plot.title = element_text(hjust = -0.05),\n    text = element_text(family = \"Routed Gothic\")\n  )\n\np1\n\n\n\n\n\n\nStep 2: remove features\nLet’s clear away the unneeded features: the background panel, the axes titles and the legend. You can empty these with element_blank() in the theme() function.\n\np2 &lt;- p1 + \n  theme(\n    panel.background = element_blank(),\n    axis.title = element_blank(),\n    legend.position = \"none\"\n  )\n\np2\n\n\n\n\n\n\nStep 3: correct the axes\nNow we can address the axes. Use the scale_*_continuous() functions to set the axes values, limits, origin and labels. With sec.axis you can create a secondary y-axis that mirrors the first, then remove the tick labels in the theme() function. You can also put a box around the chart area with the panel.border argument.\n\np3 &lt;- p2 +\n  scale_x_continuous(\n    breaks = seq(1942, 1948, 1),\n    labels = c(\"1942\", paste0(\"'\", 43:48)),\n    expand = c(0, 0)\n  ) +\n  scale_y_continuous(\n    breaks = seq(0, 12, 2),\n    limits = c(0, 12),\n    expand = c(0, 0),\n    sec.axis = dup_axis()\n  ) +\n  theme(\n    axis.ticks = element_line(linewidth = c(0, rep(0.5, 5), 0)),\n    axis.ticks.length = unit(-0.5, \"lines\"),\n    axis.text.y.right = element_blank(),\n    panel.border = element_rect(fill = NA, linewidth = 1)\n  )\n\np3\n\n\n\n\n\n\nStep 4: labels\nThe only missing features are the labels and arrows, which can be added with the annotate() and geom_segment(), respectively. A bit of trial-and-error will help you find the correct coordinates to place these elements.\n\np4 &lt;- p3 +\n  annotate(\n    geom = \"text\",\n    x = c(1946.1, 1945.9, 1943.75),\n    y = c(10.8, 7.1, 3.2),\n    label = c(\"U. S. Consumption\", \"Carry – over\\nStocks\", \"Exports\"),\n    family = \"Routed Gothic\"\n  ) +\n  geom_segment(\n    aes(\n      x = c(1945.2, 1945.3, 1944.2),\n      y = c(10.5, 7.4, 3.1),\n      xend = c(1945, 1945.1, 1944.4), \n      yend = c(9.7, 7.1, 2.8)\n    ),\n    arrow = arrow(\n      length = unit(2, \"mm\"),\n      type = \"closed\"\n    )\n  )\n\np4"
  },
  {
    "objectID": "posts/2023-05-10-spear-ggplot2/index.html#next-steps",
    "href": "posts/2023-05-10-spear-ggplot2/index.html#next-steps",
    "title": "Recreating a dataviz with {ggplot2}",
    "section": "Next steps",
    "text": "Next steps\nFinally we’ve got a lineplot that looks pretty close to Spear’s visualisation. What subtle differences do you notice, though? Try to find ways to improve them.\nNext, try to recreate the stacked-barchart from Spear’s original and then arrange the plots with a main title and surrounding text labels. The {ggpattern} package may help you recreate the hatchlines on the bars and {patchwork} could help with the arrangement of the plot and text elements."
  },
  {
    "objectID": "posts/2023-05-10-spear-ggplot2/index.html#full-base-r-alternative",
    "href": "posts/2023-05-10-spear-ggplot2/index.html#full-base-r-alternative",
    "title": "Recreating a dataviz with {ggplot2}",
    "section": "Full base R alternative",
    "text": "Full base R alternative\nFor the original challenge I used only base R’s plotting system rather than {ggplot2}. This is what my submitted image looked like:\n\nYou can read more about it in the accompanying blog post and you can find the original code on GitHub."
  },
  {
    "objectID": "posts/2023-05-10-spear-ggplot2/index.html#environment",
    "href": "posts/2023-05-10-spear-ggplot2/index.html#environment",
    "title": "Recreating a dataviz with {ggplot2}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:43 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_3.4.2 tidyr_1.3.0  \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.3       cli_3.6.1         knitr_1.43.1      rlang_1.1.1      \n [5] xfun_0.39         purrr_1.0.1       generics_0.1.3    jsonlite_1.8.7   \n [9] labeling_0.4.2    glue_1.6.2        colorspace_2.1-0  htmltools_0.5.5  \n[13] scales_1.2.1      fansi_1.0.4       rmarkdown_2.23    grid_4.3.1       \n[17] munsell_0.5.0     evaluate_0.21     tibble_3.2.1      fastmap_1.1.1    \n[21] yaml_2.3.7        lifecycle_1.0.3   compiler_4.3.1    dplyr_1.1.2      \n[25] htmlwidgets_1.6.2 pkgconfig_2.0.3   rstudioapi_0.14   farver_2.1.1     \n[29] digest_0.6.31     R6_2.5.1          tidyselect_1.2.0  utf8_1.2.3       \n[33] pillar_1.9.0      magrittr_2.0.3    gtable_0.3.3      tools_4.3.1      \n[37] withr_2.5.0"
  },
  {
    "objectID": "posts/2023-06-21-wordup-tables/index.html#tldr",
    "href": "posts/2023-06-21-wordup-tables/index.html#tldr",
    "title": "Convert a Word table to Markdown",
    "section": "tl;dr",
    "text": "tl;dr\nI made a function that shouldn’t need to exist in an ideal world: it takes a copied Microsoft Word table and outputs a Markdown version (well, a Govspeak version)."
  },
  {
    "objectID": "posts/2023-06-21-wordup-tables/index.html#govspeak-when-youre-spoken-to",
    "href": "posts/2023-06-21-wordup-tables/index.html#govspeak-when-youre-spoken-to",
    "title": "Convert a Word table to Markdown",
    "section": "Govspeak when you’re spoken to",
    "text": "Govspeak when you’re spoken to\nI’ve written about three painful things recently:\n\nForcing data scientists to expose their tools so we can all use and learn from them.\n‘Rectangularising’ tables scraped out of a Word document via the {officer} package.\nEasier ways to coerce dataframe columns to their ‘intended’ data type.\n\nToday I bring you a terrible Cerberus with these three heads1.\nThe challenge: sometimes public sector statisticians produce Word documents that need to be converted to a special type of simplified plaintext Markdown, called Govspeak, before they can be uploaded for publication as HTML files on GOV.UK2.\nThis is fine: we have specific publishing specialists who can take care of it. It can be a little tedious, however. What if we could speed up and make more efficient the process of converting from Word to Govspeak?\nThere’s a specific Govspeak converter online that you can paste into. But it doesn’t have full coverage of the things that might appear in a Word doc, including tables. Other online converters exist, but I don’t think we should rely on third parties that are probably intended for producing general Markdown rather than Govspeak, specifically"
  },
  {
    "objectID": "posts/2023-06-21-wordup-tables/index.html#markdown-word-up.",
    "href": "posts/2023-06-21-wordup-tables/index.html#markdown-word-up.",
    "title": "Convert a Word table to Markdown",
    "section": "Markdown? Word up.",
    "text": "Markdown? Word up.\nI’ve started an R package called {wordup} that aims to take a Word document and convert it to Govspeak. It’s early days in the sense that it doesn’t yet do, well… very much. But I thought the package name was funny (if unoriginal) and worth squatting. Maybe I’ll never get around to developing it, who knows.\nTo install (which is really not worth it right now, unless you want to raise an issue or pull request):\n\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/wordup\")\nlibrary(wordup)\n\nFor now, the principle is that you can unzip a Word document to expose a bunch of xml files (yet another thing I’ve been writing about recently, lol) that contain all the information needed to build the Word document3. As such, you can read that xml and extract all the information, styles, etc, and massage it programmatically into Govspeak format.\nPart of the process will involve taking a Word table, specifically, and converting it to a Govspeak-friendly form. I figured this might be a nice standalone tool in its itself, so I had a stab at what it could look like."
  },
  {
    "objectID": "posts/2023-06-21-wordup-tables/index.html#fantabulars",
    "href": "posts/2023-06-21-wordup-tables/index.html#fantabulars",
    "title": "Convert a Word table to Markdown",
    "section": "Fantabulars",
    "text": "Fantabulars\nSo right now the wordup::table_to_govspeak() function (whose name could change at any time) does three things:\n\nHandles inputs.\nGuesses data types.\nApplies extra styles.\n\nYou can either (a) copy-paste a Word table into the function, or (b) simply copy it to the clipboard, where it can be read by the function using the {clipr} package. The function will take the string—which is basically tabs (\\t) to indicate gaps between cells and newlines (\\n) to indicate rows—and reorient it initially into a dataframe.\nOf course, all the columns will be character-class at this point. We can immediately run type.convert() over the whole dataframe to coerce each column to a more appropriate data type, if appropriate. So a character column composed of c(\"10\", \"20\", \"30) will become a numeric column of values c(10, 20, 30). But this doesn’t work for numeric values that have symbols in them, like commas as thousands separators (1,200), per cent symbols (82%) and placeholder markers to indicate things like suppressed values ([c])4. To get around this, we can strip the nuisance characters and then see if what remains looks like a number.\nFinally, there’s some specific features of Govspeak tables that need attention. It’s acceptable to have row labels, where each value in every cell of the first column should be prefaced with an octothorpe (#), and totals columns, where the entire row should be emboldened with double-asterisks (**) either side of the cells’ values.\nWhat results can be sort of… magic really. You copy a Word table in its entirety to your clipboard, run the function, and bang: the Govspeak Markdown is returned. You can see this in action in the gif at the top of this page.\nSo I can literally copy a table like this to my clipboard:\n\n\n\nColumn 1\nColumn 2\nColumn 3\nColumn 4\nColumn 5\n\n\n\n\nX\n100\n1,000\n1%\n15\n\n\nY\n200\n2,000\n2%\n12\n\n\nZ\n300\n3,000\n3%\n[c]\n\n\nTotals\n600\n6,000\n6%\n[c]\n\n\n\nAnd run this:\n\nwordup::table_to_govspeak()\n\nTo print this (and have it copied to your clipboard as the message says):\n| Column 1 | Column 2 | Column 3 | Column 4 | Column 5 |\n| ------- | ------: | ------: | ------: | ------: |\n| X | 100 | 1,000 | 1% | 15 |\n| Y | 200 | 2,000 | 2% | 12 |\n| Z | 300 | 3,000 | 3% | [c] |\n| Totals | 600 | 6,000 | 6% | [c] |\nThe output table has been written to the clipboard.\nBoom. Note the crucial feature that the third, fourth and fifth columns are recognised as numeric—despite containing the strings ,, % and [c]—and therefore right-aligned (------:). This is entirely due to the argument ignore_regex, which defaults to removing commas, percentage symbols or anything in square brackets before it guesses what data type the column is5.\nAnd we can do fancy things like:\n\nwordup::table_to_govspeak(\n  has_row_titles = TRUE,\n  totals_rows = 4L\n)\n\nWhich outputs this thing:\n| Column 1 | Column 2 | Column 3 | Column 4 | Column 5 |\n| ------- | ------: | ------: | ------: | ------: |\n| # X | 100 | 1,000 | 1% | 15 |\n| # Y | 200 | 2,000 | 2% | 12 |\n| # Z | 300 | 3,000 | 3% | [c] |\n| # **Totals** | **600** | **6,000** | **6%** | **[c]** |\nThe output table has been written to the clipboard.\nOf course, in practice this might get a little more complicated if you need to manually specify in the function declaration that there’s a column of row titles or some totals rows. Pish-posh. The point is that I think this is probably better than trying to (a) write the Govspeak table by hand or (b) trying to use the Govspeak converter, which just doesn’t work for this task. This also has mild, opinionated, Govspeak-related benefits over using a straightforward knitr::kable().\nIs this perfect? Ahaha, no. There’s a lot to add or improve, but I think this is a decent start and solves a (niche) problem for now6."
  },
  {
    "objectID": "posts/2023-06-21-wordup-tables/index.html#environment",
    "href": "posts/2023-06-21-wordup-tables/index.html#environment",
    "title": "Convert a Word table to Markdown",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-04 09:56:28 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] wordup_0.0.0.9000\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-04-25-r.oguelike-dev/index.html#tldr",
    "href": "posts/2022-04-25-r.oguelike-dev/index.html#tldr",
    "title": "Building a {r.oguelike} in R",
    "section": "tl;dr",
    "text": "tl;dr\nI started writing a roguelike game (well, more of a ‘tech demo’) in an R package called {r.oguelike}."
  },
  {
    "objectID": "posts/2022-04-25-r.oguelike-dev/index.html#rogue-like",
    "href": "posts/2022-04-25-r.oguelike-dev/index.html#rogue-like",
    "title": "Building a {r.oguelike} in R",
    "section": "Rogue… like?",
    "text": "Rogue… like?\nThere’s loads of video game genres: beat ’em up, platformer, rhythm, MMORPG, sports, puzzle. Have you heard of roguelikes?\nThe name is literal: they’re games that play like Rogue, a legendary dungeon-explorer from 1980 that set the bar for role-playing games.\nPerhaps most recognisably, it used ASCII text as ‘graphics’: the player controls a character denoted by the at symbol (@), while floor tiles are made of periods (.), for example.\n\n\n\nScreenshot of Rogue via Thedarkb on Wikipedia\n\n\nThere are many interpretations of what exactly constitutes a ‘roguelike’, one of which is the strict ‘Berlin Interpretation’1. Must-haves include:\n\nrandomly-generated dungeons (a different map every time)\npermadeath (it’s game over when you die)\nturn-based battles (limitless thinking time, then one action)\ngrid-based (everything takes up one tile of space)\nnon-modal (all actions are possible at any time)\ncomplexity (rich problem solving with items, characters and interactions)\nresource management (items are limited and must be managed)\nhack ‘n’ slash (kill lots of monsters)\nexploration and discovery (find all corners of the map to solve problems)\n\nThese aren’t necessarily hard and fast rules—many games have added their own twist—but they provide the essence of the genre."
  },
  {
    "objectID": "posts/2022-04-25-r.oguelike-dev/index.html#like-rogue",
    "href": "posts/2022-04-25-r.oguelike-dev/index.html#like-rogue",
    "title": "Building a {r.oguelike} in R",
    "section": "Like Rogue!",
    "text": "Like Rogue!\nSo, what would it take to make a roguelike using R?\nI once made a tiny game-in-a-package called {ActionSquirrel}. You control an emoji squirrel on the R console, moving around a forest grid to collect randomly-placed nuts. Collect enough nuts to survive winter, which arrives within a certain number of turns, while avoiding a randomly-moving owl.\n\nx &lt;- ActionSquirrel::ActionSquirrel$new()\n\n\f🌳 🌳 🌳 🌳 🌳 \n🌳 🌳 🌰 🌳 🌳 \n🌳 🌳 🌳 🐿 🌳 \n🌳 🦉 🌳 🌳 🌳 \n🌳 🌳 🌳 🌳 🌳 \nMoves: 0 \nNuts: 0\n\n\nThat’s not far off from some of the roguelike requirements: it has randomness and permadeath, is turn-based and grid-based and has non-modality. But it’s missing complexity, resource management, hack ‘n’ slash gameplay and exploration.\nAnd the aesthetic isn’t particularly… dungeony?"
  },
  {
    "objectID": "posts/2022-04-25-r.oguelike-dev/index.html#r.oguelike",
    "href": "posts/2022-04-25-r.oguelike-dev/index.html#r.oguelike",
    "title": "Building a {r.oguelike} in R",
    "section": "{r.oguelike}",
    "text": "{r.oguelike}\nSo I started to build an R package containing an ‘engine’ for a game in the roguelike style, called {r.oguelike}.\nYou can visit the package website or look at the source code in the GitHub repo.\n\nFor now it’s just a toy to demo some possible approaches for some of the main game elements: ‘graphics’, movement, an inventory, item use and battling.\nAs ever, everything in the package is subject to change and improvement (though I also may never finish it). Consider this a quick devlog about progress so far.2\n\nInstall (or don’t)\nYou can install from GitHub to make the package available on your machine.\n\ninstall.packages(\"remotes\")  # if not already installed\nremotes::install_github(\"matt-dray/r.oguelike\")\n\nIf you prefer, you can also play in your browser without having to install anything. I’ve set up a Binder instance of RStudio with {r.oguelike} preinstalled so you can just click the button below to launch it (it may take a moment to load):\n\n\n\nLaunch Rstudio Binder\n\n\nThis also means it’s possible to play this game from your phone, lol.\n\n❗️ Note\nThe {r.oguelike} package is a work in progress and is developing at pace. Many things explained below may have been superseded or changed by the time you read this.\n\n\n\nDemo\nTop-tip: improve immersion by changing your console colour palette to dark mode, so it’s like you’re really inside a cave, wow.\nTo begin:\n\nr.oguelike::start_game()\n\nWhen you start, the console clears and the user interface is printed.\n# # # # # # # # # \n# . . $ . . E . # \n# . . . . . . . # \n# . . . . a . . # \n# . . . . . @ . # \n# # # # # # # # # \nT: 25 | HP: 10 | G: 0 | A: 0\nPress key to start\nInput: \nAt the top is a map of a dungeon room, made of floor (.) and wall (#) tiles. The room has randomly-selected dimensions from within a certain range. Within the room are randomly-placed characters and objects: the player (@), an enemy (E), and a collectible apple (a) and gold ($).\nBelow the dungeon room there’s:\n\na status/inventory bar, which gives a numeric value for Turns remaining, Hit Points, Gold and Apples3\na status message to provide information, usually to let the user know what has just happened\na prompt for the user to input a key press\n\nThe game is turn-based and begins when the user chooses a direction to move the player character. There are two methods for registering a key press:\n\npress W, A, S or D (i.e. up, left, down or right) and hit Enter\njust press an arrow key if your console supports {keypress} (not available in RStudio), a package from Gábor Csárdi that I wrote about recently\n\nIn this demo, let’s aim first for the apple. The apple will return us 1 HP when consumed, so it’s a good idea to get it in our inventory as soon as possible. So, let’s input W and Enter (or press the up arrow if {keypress} is enabled).\n# # # # # # # # # \n# . . $ . . E . # \n# . . . . . . . # \n# . . . . a @ . # \n# . . . . . . . # \n# # # # # # # # # \nT: 24 | HP: 10 | G: 0 | A: 0\nMoved up\nInput: \nThe console will wipe the user interface will be re-printed. You’ll notice that your character has moved up one tile, the turn counter has decreased by 1 and the status message has changed to say ‘Moved up’.\nNow we can move left to collect the apple.\n# # # # # # # # # \n# . . $ . . E . # \n# . . . . . . . # \n# . . . . @ . . # \n# . . . . . . . # \n# # # # # # # # # \nT: 23 | HP: 10 | G: 0 | A: 1\nCollected apple (+1 A)\nInput: \nAgain, you can see the player has progressed one tile and the turn counter decreased. You’ll notice that the inventory spot for the apple increased by 1 and the status message has changed to Collected apple (+1 A) so we know what happened.\nWhat next? Let’s aim for the loot, signified by $ on the map. I’ll fast-forward to show you what happens after moving left twice and up twice.\n# # # # # # # # # \n# . . @ . . E . # \n# . . . . . . . # \n# . . . . . . . # \n# . . . . . . . # \n# # # # # # # # # \nT: 19 | HP: 10 | G: 1 | A: 1\nFound gold (+1 G)\nInput: \nThe player now occupies the space where the gold was and the turn counter has decreased by 4. You’ll see that the status messages has updated to Found gold (+1 G) and the gold spot in the inventory has increased by 1, but note that the amount of gold is randomly selected from a range of possible values.\nThere’s one obvious target left: the enemy character (E). So if we move right twice, we’ll start an encounter.\nWhen you occupy the space of the enemy, you begin a turn-based battle. At the moment, this is actually an ‘auto-battler’: a routine is run under-the-hood where the player and enemy trade blows until one is vanquished.\nEach character has attack and HP values. Of course, you can see that the player has 10 HP to start, but they also have attack strength of 2. The enemy character starts with a randomly selected HP value from within a range, and their attack strength is 1. The player attacks first, so will receive three points of damage from the enemy that has 4 HP, for example.\n# # # # # # # # # \n# . . . . . @ . # \n# . . . . . . . # \n# . . . . . . . # \n# . . . . . . . # \n# # # # # # # # # \nT: 12 | HP: 7 | G: 1 | A: 1\nYou win! (-3 HP)\nInput: \nSo we know we won because the status message changed to You win! and a note of how many hit points we lost: (-3 HP). Concurrently the HP in the inventory bar has reduced by that amount.\nHaving lost some HP, we can add some back by consuming the apple, an action mapped to the number 1 key on your keyboard (regardless of whether you’re using {keypress} or not).\n# # # # # # # # # \n# . . . . . @ . # \n# . . . . . . . # \n# . . . . . . . # \n# . . . . . . . # \n# # # # # # # # # \nT: 11 | HP: 8 | G: 1 | A: 0\nAte apple (+1 HP)\nInput: \nSo we get a message Ate apple and that our hit points have increased as a result: (+1 HP). Of course, this means that the apple spot in the inventory has decreased to zero. Note that the HP maxes out at 10, so eating the apple won’t raise the HP value above that.\nThis is the end of the demo: you’ve collected all the items and defeated the enemy. But I also added a lose condition, which occurs when you run out of turns.\n# # # # # # # # # \n# . . . . . . . # \n# . . . . . . . # \n# . . . . . . . # \n# @ . . . . . . # \n# # # # # # # # # \nT: 1 | HP: 8 | G: 1 | A: 0\nMoved left\nInput: a\nYou died (max turns)! Try again!\n&gt; \nThe game ends and the command prompt (&gt;) returns.\n\n\nEngine?\nThe technicals aren’t much to marvel at, really, but you can take a look at the code in the GitHub repo or on the website.\nI called it an ‘engine’ earlier, but that was deceitful, lol.\nIt’s just a while loop that keeps running so long as the is_alive state is set to TRUE. So running out of turns sets the is_alive value to FALSE and the loop is broken.\nThe content of the loop is run after the player inputs a key press, which results in various counters being adjusted for the HP, etc. The loop concludes by printing the room with updated player locations, inventory bar and status messsage, ready for the next input.\nThe room itself is just a matrix. When you move the player, a small calculation is done to determine where the player character should be in the next iteration. Imagine the player is in the centre of a 3 by 3 room, i.e. they’re in position [2,2] of a matrix with x and y dimensions of 3. If they move down, that’s equivalent to adding 1 to their current position, so 5 + 1 = 6. Similarly, moving right would be equivalent to adding 3, so 5 + 3 = 8.\n\nmatrix(1:9, 3)\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\nThe code is pretty rough and you can see that the logic can start to become complicated quickly, but remember it’s just a demo for now.\n\n\nObvious improvements\nThere’s some obvious user-facing improvements to the features that are already in place:\n\ninteractive turn-based battles, where the user can choose what move to make (perhaps defensive moves, HP replenishment or magic)\nenemy movement, so they aren’t just stationary\ndifferent enemy types, with differing ‘AI’ (random movement, ‘chase’ player, etc) and attack/HP stats\ntraps (e.g. certain tiles are hidden traps, some collectible items are bogus)\nfog of war/vision cones (you can’t see what’s ahead until you get there, or you can only see a certain distance around you at all times)\n\nThere’s also a big-ticket item I haven’t touched: randomised or procedural dungeon generation. This is quite a big task and might end up as a blog post of its own. I encourage you to watch Herbert Wolverson’s talk at Roguelike Celebration 2020 for some ideas on this. At least at first, it could simply involve letting the player walk through doors to a few other rooms that contain randomised items.\nOn the back-end, I’ve so far written everything in base R; the only dependency is {keypress} to make inputs easier for consoles that support it. But there’s only so many if-else statements you can write before your brain explodes. To this end, I’m working in a branch to make use of the object-oriented approach of the {R6} package–as used in {ActionSquirrel}–to create general objects like enemies, rooms, etc, that should make it easier to handle and work with the elements of the game."
  },
  {
    "objectID": "posts/2022-04-25-r.oguelike-dev/index.html#the-future",
    "href": "posts/2022-04-25-r.oguelike-dev/index.html#the-future",
    "title": "Building a {r.oguelike} in R",
    "section": "The future",
    "text": "The future\nThe package will change and grow as I add stuff, so do check out the repo on GitHub for any updates that may happened since you read this post.\nObviously I’ll need some seed funding to set up my indie game company so I can begin making a cool 3D version of this. Oh, wait, mifekc is already on the case!\nAlright, nevermind. How about, erm, a roguelike-themed Wordle? Oh wait, it’s already been done!\nMight just take a nap instead, to be honest.\n\nℹ️ Update\nYou can now read about how I’ve generated and integrated (very simple) procedural dungeons into the package, replacing the rectangular rooms demonstrated above."
  },
  {
    "objectID": "posts/2022-04-25-r.oguelike-dev/index.html#environment",
    "href": "posts/2022-04-25-r.oguelike-dev/index.html#environment",
    "title": "Building a {r.oguelike} in R",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:41 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2    compiler_4.3.1       R6_2.5.1            \n [4] fastmap_1.1.1        cli_3.6.1            tools_4.3.1         \n [7] htmltools_0.5.5      rstudioapi_0.14      yaml_2.3.7          \n[10] rmarkdown_2.23       knitr_1.43.1         jsonlite_1.8.7      \n[13] xfun_0.39            digest_0.6.31        rlang_1.1.1         \n[16] ActionSquirrel_0.1.0 evaluate_0.21"
  },
  {
    "objectID": "posts/2023-05-07-bd2q/index.html",
    "href": "posts/2023-05-07-bd2q/index.html",
    "title": "Automate {blogdown} to Quarto",
    "section": "",
    "text": "gRaPhIc DeSiGn Is My PaSsIoN."
  },
  {
    "objectID": "posts/2023-05-07-bd2q/index.html#tldr",
    "href": "posts/2023-05-07-bd2q/index.html#tldr",
    "title": "Automate {blogdown} to Quarto",
    "section": "tl;dr",
    "text": "tl;dr\nI’ve written a quick R package, {bd2q}, to help me convert my {blogdown} blog to Quarto. Whether I’ll actually complete the conversion is another story."
  },
  {
    "objectID": "posts/2023-05-07-bd2q/index.html#upside-blogdown",
    "href": "posts/2023-05-07-bd2q/index.html#upside-blogdown",
    "title": "Automate {blogdown} to Quarto",
    "section": "Upside blogdown",
    "text": "Upside blogdown\nIt is destiny: no-one is ever completely happy with their blog.\nThis site was built five years ago1 with {blogdown}, which lets you write R Markdown files and have them knitted into a blog. I ignored the newer {distill} package2, but Quarto may be worth the switch. It’ll let me simplify the blog’s structure3 and take advantage of Quarto’s snazzy features4.\nBut I didn’t fancy transferring and editing ~150 posts by hand, so I’ve written a few functions to help out."
  },
  {
    "objectID": "posts/2023-05-07-bd2q/index.html#when-in-doubt-make-a-package",
    "href": "posts/2023-05-07-bd2q/index.html#when-in-doubt-make-a-package",
    "title": "Automate {blogdown} to Quarto",
    "section": "When in doubt, make a package",
    "text": "When in doubt, make a package\nAnd so the {bd2q} R package5 is available from GitHub. It does what I need it to do for now, but note it only has basic error checking, has no unit tests, etc. Use at own risk, etc. It’s likely to remain unpolished forever, but feel free to add issues or pull requests. To install:\n\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/bd2q\")\n\nThree things were in scope for this package:\n\nCreate a template Quarto blog.\nCreate the necessary Quarto folder structure for posts, then transfer posts and resources from the old {blogdown} blog.\nTweak the posts to remove or replace selected lines.\n\n\n1. Quarto blog template\nI assume someone has already written a version of usethis::create_project() for creating a Quarto blog. Regardless, I’ve written bd2q::create_template() to generate a folder with the minimal structure required, which makes my life easier for testing purposes.\n\nbd2q::create_template(q_path = \"~/new-quarto-blog\")\n\n✔ Created template Quarto blog at /Users/mattdray/new-quarto-blog\nThe skeleton content is opinionated and differs a bit to the one generated through RStudio’s ‘new project’ menu, for example, but the structure is the same:\nblog\n├── about.qmd\n├── index.qmd\n├── posts/\n│   └── metadata.yml\n├── styles.css\n└── blog.rproj\nOf course, now we need to pull in the posts from the old {blogdown} blog.\n\n\n2. Transfer posts and resources\nTypically in a {blogdown} blog, all R Markdown posts and their rendered HTML files are stored together in content/post/ in the form YYYY-MM-DD-post-name.Rmd and YYYY-MM-DD-post-name.html. Resources, like images, live separately in static/post/ with a folder per post in the form YYYY-MM-DD-post-name_files/.\nHere’s a simplified folder structure that focuses on a single post and its resources:\nblog/\n├── content/\n│   └── post/\n│       ├── YYYY-MM-DD-post-name.Rmd\n│       └── YYYY-MM-DD-post-name.html\n└── static/\n    └── post/\n        └── YYYY-MM-DD-post-name_files/\n            └── image.png\nQuarto simplifies this structure. Each post gets its own folder in posts/, like YYYY-MM-DD-post-name, which contains the post as index.qmd and a folder of resources. This means the post and all its content are stored together in one containing folder.\nblog/\n└── posts/\n    └── YYYY-MM-DD-post-name/\n        ├── index.qmd\n        └── resources/\n            └── image.png\nTo do the conversion, bd2q::transfer_posts() copies posts from a {blogdown} blog structure to a Quarto blog structure, setting up the required folders and renaming each post to index.qmd.\n\ntransfer_posts(\n  bd_path = \"~/old-blogdown-blog\",\n  q_path = \"~/new-quarto-blog\"\n)\n\n✔ Created posts/ directory structure.\nℹ Copying posts.\n✔ Copied 148 posts to /Users/mattdray/new-quarto-blog.\nOnce that’s been run, bd2q::transfer_resources() can copy each post’s resources into an accompanying subfolder, which defaults to the name ‘resources’. You can choose which file types you want transfer with the exts_keep argument.\n\ntransfer_resources(\n  bd_path = \"~/old-blogdown-blog\",\n  q_path = \"~/new-quarto-blog\",\n  resources_dir = \"resources\",\n  exts_keep = c(\"gif\", \"jpg\", \"jpeg\", \"png\", \"svg\", \"wav\"),\n)\n\nℹ Copying resources.\n✔ Copied 455 resources to each post's resources/ folder in Users/mattdray/new-quarto-blog/posts.\nOf course this doesn’t account for everything, like bits of JavaScript and CSS related to the use of htmlwidgets. I’m not really bothered about this, because these should be recreated when I re-render each post.\nNote that you can use bd2q::create_and_transfer() if you want to run create_template(), transfer_posts() and transfer_resources() all at once. Regardless, once you’ve got the structure sorted, you can begin to adjust the posts if you need to.\n\n\n3. Tweak post content\nThere’s content in the body of each post that I want to get rid of or make more Quarto-like. I made a few functions that iterate over all the index.qmd files and replace or remove certain content.\nOne obvious necessity is to rebuild the resource paths (to images, sound files, etc), which can be done specifically with bd2q::update_resource_paths(). It defaults to creating paths to each post’s ‘resources’ subfolder, as generated by bd2q::transfer_resources(). For example, you could use a regular expression to match rows you know will contain a resource path and have them updated for the new Quarto folder structure (I tend to insert images with HTML rather than Markdown, hence the &lt;img&gt; tag in the example below).\n\nupdate_resource_paths(\n  q_path = \"~/new-quarto-blog\",\n  resources_dir = \"resources\",\n  resource_rx = \"&lt;img src=\"\n)\n\nℹ Updating posts.\n✔ 148 posts updated.  \nI also added two replace/remove functions that are a little more generic.\nThe first is bd2q::remove_line(), which deletes a single line from each post based on a provided regular expression. When I was messing around with converting the blog to Quarto manually, I found that the presence of the ‘draft’ status in the YAML header would prevent the post from appearing on the homepage, even if was set to ‘no’. As a result, you can run something like this to find and remove the lines that start with ‘draft’:\n\nbd2q::remove_line(\n  q_path = \"~/new-quarto-blog\",\n  detect_rx = \"^draft:\"\n)\n\nℹ Making corrections.\n✔ Removed lines matching the regular expression '^draft:' from 128 out of 148 posts.\nThat’s fine for individual lines, but what if you have a sequence of consecutive lines that you want to find and remove, or replace with some other text?\nThat’s what bd2q::replace_lines() does. Provide a vector of strings that exactly match some consecutive lines in each post, then provide a vector of strings to replace them with (or NULL to simply remove them)6.\nThis addresses another specific problem I was having. I wanted to update my custom session-info blocks at the bottom of each post so that they instead appear as a Quarto ‘appendix’. That can be done like this:\n\nold_lines &lt;- c(\n  \"---\",\n  \"&lt;details&gt;&lt;summary&gt;Session info&lt;/summary&gt;\",\n  \"```{r eval=TRUE, sessioninfo, echo=FALSE}\",\n  \"sessioninfo::session_info()\",\n  \"```\",\n  \"&lt;/details&gt;\"\n)\n\nnew_lines &lt;- c(\n  \"## Details {.appendix}\",\n  \"&lt;details&gt;&lt;summary&gt;Session info&lt;/summary&gt;\",\n  \"```{r}\",\n  \"#' eval = TRUE,\",\n  \"#' echo = FALSE\",\n  'cat(\"Date:\", cat(format(Sys.time(), format = \"%Y-%m-%d\")), \"\\n\\n\"); sessionInfo()',\n  \"```\"\n)\n\nbd2q::replace_lines(\n  q_path = \"~/new-quarto-blog\",\n  match_str = old_lines,\n  replacement_str = new_lines\n)\n\nℹ Making corrections.\n✔ Removed lines matching the provided string vector from 9 out of 148 posts.   \nHaha, uhoh, I was expecting to have fixed more posts than that! Looks like I might have written my custom session-info block slightly differently in each post (maybe an extra space or empty line?), so I’ll have to run the bd2q::replace_lines() multiple times to make sure I can replace it in each post that it appears."
  },
  {
    "objectID": "posts/2023-05-07-bd2q/index.html#actually-use-the-package-pfft",
    "href": "posts/2023-05-07-bd2q/index.html#actually-use-the-package-pfft",
    "title": "Automate {blogdown} to Quarto",
    "section": "Actually use the package? Pfft!",
    "text": "Actually use the package? Pfft!\nSo, is {bd2q} objectively good? No. Does it do what I personally want it to do? Absolutely. Mostly. Yeah?\nOf course, transferring files into a new structure is the easy part. The hard part is to see if each post will still re-render after all these years. It’s unlikely! There’s no dependency management in this blog because there was no easy easy to do it. Quarto, meanwhile, has the ability to ‘freeze’ posts and link each post to a {renv} lockfile (thanks Albert) that captures each post’s package dependencies.\nThere are some other dependencies outside of packages though. For example, I have posts that use the {rtweet} package to fetch tweets from Twitter, but Twitter is a garbage fire and I may never be able to fetch tweets from the API in future. I may have to just copy-paste the outputs that were created when the post was originally rendered, oh well.\nTo be clear: this is hard work. I may not be brave enough to do it any time soon. I’ve set up a GitHub repo for ‘rostrum-blog-2’ where I’ve been experimenting with styles and structure, so if I ever get round to this task then that’s where the fireworks will be happening.\nAnd hey, at worst I got more familiar with the {fs} and {cli} packages when making {bd2q}, which are for ‘tidy’ path handling and nice user interfaces. A convoluted way to learn!\nBut that’s what this blog is all about, amirite."
  },
  {
    "objectID": "posts/2023-05-07-bd2q/index.html#environment",
    "href": "posts/2023-05-07-bd2q/index.html#environment",
    "title": "Automate {blogdown} to Quarto",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-06-29 15:25:33 CEST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] bd2q_0.0.0.9000\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-01-19-keypress/index.html#tldr",
    "href": "posts/2022-01-19-keypress/index.html#tldr",
    "title": "Impress with {keypress} minigames",
    "section": "tl;dr",
    "text": "tl;dr\nThe {keypress} R package by Gábor Csárdi records input from a simple keyboard-button press. You can use this to control games, like the ones in the tiny {hokey} package."
  },
  {
    "objectID": "posts/2022-01-19-keypress/index.html#whaddup-gamers",
    "href": "posts/2022-01-19-keypress/index.html#whaddup-gamers",
    "title": "Impress with {keypress} minigames",
    "section": "Whaddup gameRs?",
    "text": "Whaddup gameRs?\nI’ve made some silly games in R using the {R6} package for encapsulated OOP. For example:\n\n{ActionSquirrel} a 2D action-adventure game (blog, source)\n{safar6} a text-based recreation of Pokémon’s Safari Zone (blog, source)\nan ‘Automatic Bell Dispenser’ to mimics the cash machine used in Animal Crossing: New Horizons (blog)\n\nIn {ActionSquirrel} you move a character around a 2D grid. Problem (kinda): to go up you type x$move(\"up\"), which means ‘apply the move method to the previously-initialised R6 object called x, and supply to the where argument the direction \"up\"’. A bit long-winded, eh?\nIt would be more natural to provide a single keyboard input to a game scenario, so a left-arrow press moves the player to the left, right? Right.1"
  },
  {
    "objectID": "posts/2022-01-19-keypress/index.html#record-inputs",
    "href": "posts/2022-01-19-keypress/index.html#record-inputs",
    "title": "Impress with {keypress} minigames",
    "section": "Record inputs",
    "text": "Record inputs\nSure, R’s readline() can take user input, but you would literally have to type l, e, f, t and Enter, because the function doesn’t recognise key presses directly.\nThis is where Gábor Csárdi’s {keypress} package comes in. It accepts a single button press from the keyboard, including the arrow keys. It’s available on CRAN:\n\ninstall.packages(\"keypress\")\nkey &lt;- keypress::keypress()  # up arrow pressed\nkey\n\n\"up\"\n{keypress} works in the terminal but doesn’t work everywhere, such as RStudio. Use keypress::has_keypress_support() to see if it’s supported by the console you’re using. See the package README for details of the platforms supported and the keys that are accepted as input."
  },
  {
    "objectID": "posts/2022-01-19-keypress/index.html#minigames",
    "href": "posts/2022-01-19-keypress/index.html#minigames",
    "title": "Impress with {keypress} minigames",
    "section": "Minigames",
    "text": "Minigames\nI thought I’d try out with {keypress} with three tiny interactive games, which I’ve bundled into a pico package2 called {hokey}.\n\nremotes::install_github(\"matt-dray/hokey\")\n\nEach one takes a keypress input from keypress::keypress() to affect the game, which is just a bunch of if or while statements, basically. You can see the functions in the {hokey} package itself, if you’re a nerd.3\nThe games in order of complexity:\n\ntype(), a test of typing skills\nadventure(), a 2D side-scrollling adventure\nbattle(), a clicker-style monster smasher\n\nThese aren’t properly documented ot tested or anything. They’re just for demo’s sake.\nThe rest of this post describes the games with a dash of dry humour.\n\n1. Typing test\nHow fast you can you type randomly-selected letters?\nIn the type() game a countdown will begin and then you’ll be prompted to type one letter at a time, the total number of which can be controlled with the n argument.\nHere’s what a completed game might look like, where each letter is revealed sequentially after typing the previous one.\n\nhokey::type(n = 5)\n\n3... 2... 1... Go!\nPress 'r'! Hit!\nPress 'o'! Hit!\nPress 'f'! Hit!\nPress 'l'! 'h'? Miss!\nPress 'z'! Hit!\nEnd! 4/5 in 5.403 seconds.\nYes, three decimal places in the elapsed time so that people can be more easily ranked on speedruns.com.\n\n\n2. An adventure\nYou’ve played 2D games (e.g. Mario). You’ve played 2.5D games (e.g. Mario). You’ve played 3D games (e.g. Mario).\nYou’re thinking the future is four-dimensional Mario. But you’re wrong.\nInstead, hokey::adventure() explores the full power of moving along a one-dimensional line.\nTake control of the hero. Which is a dot. Move around the overworld. Which is a line. Simulate the lustrous points of Lineland from Edwin A Abbott’s Flatland!\n\nhokey::adventure(len = 10)\n\nPress left/right arrow keys\n--.------- \nBelow is a demo of what happens if you start the game and travel to the dangerous lands of the west (two left-key presses, resulting in you being bumped back on course), before heading for the utopian kingdom in the east (multiple right-key presses).\nThe symbol to the right of the line explains what’s happened (&lt; is left, &gt; is right, x is an illegal move, ! is a win).\nPress left/right arrow keys\n--.------- \n-.-------- &lt; \n.--------- x \n-.-------- &gt; \n--.------- &gt; \n---.------ &gt; \n----.----- &gt; \n-----.---- &gt; \n------.--- &gt; \n-------.-- &gt; \n--------.- &gt; \n---------. ! \nSuch graphics! Such dimensions!\n\n\n3. A clicker\nEver heard of Cookie Clicker? It’s a game where you click. A cookie. A whole bunch of times. Like, seriously, a whole bunch of times. Why? To win, of course.\nHere instead is a ‘presser’, where where you tap keys to vanquish randomised foes. Are there upgrades? No. Are there cool sprites? Not really. But do you click a lot? Also no, but you get to press buttons a lot.\nSo, initiate a battle with hokey::battle() and you’re faced with monstrous foes, who have terrifying randomised faces made of letters and symbols.\n\nhokey::battle(n = 3)\n\nNEW FOE! { O _ O } 10 HP \nSmash a key (I recommend Enter because of its large surface area) to deplete the foe’s hit points (HP) until they’re defeated. Each hit is printed as a period.\nNEW FOE! { O _ O } 10 HP \n..........\nVICTORY! { x _ x }  0 HP\nIncrementally more powerful foes will appear!\nNEW FOE! | - o - | 20 HP \n....................\nVICTORY! | x o x |  0 HP\n\nNEW FOE! [ ' v ' ] 30 HP \n..............................\nVICTORY! [ x v x ]  0 HP\nYou know they’re beaten because their eyes become crosses."
  },
  {
    "objectID": "posts/2022-01-19-keypress/index.html#game-over",
    "href": "posts/2022-01-19-keypress/index.html#game-over",
    "title": "Impress with {keypress} minigames",
    "section": "Game over",
    "text": "Game over\nChallenging. A test of wits. Worth your time.\nAll are phrases that do not sum up the games of {hokey}.\nBut, for me at least, I’ve got a better understanding of how {keypress} could be used for games written in R, a burgeoning field in the world of R programming.4\nLet me know how much you enjoyed these games and how much it’s going to suck to go back to your cutting-edge Neo Geo or Master System or whatever the kids are playing these days."
  },
  {
    "objectID": "posts/2022-01-19-keypress/index.html#environment",
    "href": "posts/2022-01-19-keypress/index.html#environment",
    "title": "Impress with {keypress} minigames",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:38 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] keypress_1.3.0\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-03-31-hastings-half/index.html#tldr",
    "href": "posts/2022-03-31-hastings-half/index.html#tldr",
    "title": "Interactive maps of Hastings Half Marathon",
    "section": "tl;dr",
    "text": "tl;dr\nI made a small R Markdown site that contains interactive maps of the route of the Hastings Half Marathon."
  },
  {
    "objectID": "posts/2022-03-31-hastings-half/index.html#half-distance-double-delay",
    "href": "posts/2022-03-31-hastings-half/index.html#half-distance-double-delay",
    "title": "Interactive maps of Hastings Half Marathon",
    "section": "Half distance, double delay",
    "text": "Half distance, double delay\nI signed up for the Hastings Half Marathon in March 2019 and finally got to run it in March 2022 after two years of pandemic-related cancellations.\nI managed a time of 1:44:151 in terrific conditions and raised money for Sands, the stillbirth and neonatal death charity (at time of writing you can still donate).\nAs a nice bonus, the finisher’s medal featured Alan Turing, who spent some of his childhood in the area."
  },
  {
    "objectID": "posts/2022-03-31-hastings-half/index.html#running-or-climbing",
    "href": "posts/2022-03-31-hastings-half/index.html#running-or-climbing",
    "title": "Interactive maps of Hastings Half Marathon",
    "section": "Running or climbing?",
    "text": "Running or climbing?\nThe Hastings Half is a popular and an interesting course, mostly because of the third dimension: there are two short, sharp early climbs, then a long sweeping one, later returning downhill to finish along the seafront of the town.2\nThere are precious few resources online that illustrate the course, however. You can find a low-quality map on the official website and get an elevation profile elsewhere, but I thought it might be useful to create a quick and tiny webpage with the x, y and z dimensions in an interactive format."
  },
  {
    "objectID": "posts/2022-03-31-hastings-half/index.html#run-route-run-code",
    "href": "posts/2022-03-31-hastings-half/index.html#run-route-run-code",
    "title": "Interactive maps of Hastings Half Marathon",
    "section": "Run route, run code",
    "text": "Run route, run code\nSo, I recorded the route with my Apple Watch and downloaded the data as a GPX file, which contains geospatial data in an XML-like format. I’ve talked about Apple Health data before, and also about a small package I made to read GPX data, called {gpx3d}, which came in handy.\nWith that data I made three interactive maps using R:\n\nA birds-eye view with {leaflet}, which allows zooming and panning and has markers for each of the kilometres\nAn elevation profile with {plotly}, which shows the distance and elevation on hover\nA 3D trace of the course with {ggrgl}, which can be dragged to show relative distance and elevation\n\nI embedded these maps in three separate tabs of a {flexdashboard}, an R Markdown format that lets you create simple, single page dashboards. I used {bslib}, {thematic}, {emo} and Google Fonts for styles and embellishment.\nI pushed the files to a GitHub repo and served the HTML via GitHub Pages to a dedicated webpage at matt-dray.github.io/hastings-half/.\nHere are some screenshots of each page:\n\n\n\nScreenshot of the interactive route map, made with {leaflet}\n\n\n\n\n\nScreenshot of the interactive elevation profile, made with {plotly}\n\n\n\n\n\nScreenshot of the interactive 3D trace, made with {ggrgl}"
  },
  {
    "objectID": "posts/2022-03-31-hastings-half/index.html#see-you-in-2023",
    "href": "posts/2022-03-31-hastings-half/index.html#see-you-in-2023",
    "title": "Interactive maps of Hastings Half Marathon",
    "section": "See you in 2023",
    "text": "See you in 2023\nUltimately the webpage is a very quick demo, but I hope others will be able to use to get a sense of the course.\nThe next step will be to add fourth and fifth dimensions: smell and sound. As soon as you reach the bottom of All Saints Street you hit the historic Old Town seafront, where you’re immediately perked up by the scent of frying chips and the screech of extremely raucous seagulls.\nThere’s no place like home."
  },
  {
    "objectID": "posts/2022-03-31-hastings-half/index.html#environment",
    "href": "posts/2022-03-31-hastings-half/index.html#environment",
    "title": "Interactive maps of Hastings Half Marathon",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-02 15:43:15 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2023-02-02-trapinch-begin/index.html#tldr",
    "href": "posts/2023-02-02-trapinch-begin/index.html#tldr",
    "title": "Wrapping PokéAPI with {trapinch}",
    "section": "tl;dr",
    "text": "tl;dr\nI’ve used the {httr2} R package to create {trapinch}, a package that wraps PokéAPI for fetching Pokémon data.\n\nℹ️ Update\nI had found a couple of older, non-{httr2} PokéAPI wrappers for R (see footnotes), but had somehow missed one that already uses {httr2}: see Ash Baldry’s {pokeapi} package, which he wrote months ago!"
  },
  {
    "objectID": "posts/2023-02-02-trapinch-begin/index.html#httr-me-baby-one-more-time",
    "href": "posts/2023-02-02-trapinch-begin/index.html#httr-me-baby-one-more-time",
    "title": "Wrapping PokéAPI with {trapinch}",
    "section": "{httr} me baby one more time",
    "text": "{httr} me baby one more time\nThe {httr2} package lets you talk to the internet. Or, if you’re fancy, it ‘helps you deal programmatically with HTTP requests and responses’ so you can use it to fetch data from Application Programming Interfaces (APIs).\n{httr2} has functions that are prefixed consistently (req_*(), resp_()*, etc), are narrow in scope, pipeable (|&gt;) and which return nice errors and messages. These are neat improvements on the original {httr} package.\nI’ve used {httr} before to explore R package startup messages and detect linkrot. It’s time to try out {httr2}. What simple API can I wrap into an R package?1"
  },
  {
    "objectID": "posts/2023-02-02-trapinch-begin/index.html#poke-an-api",
    "href": "posts/2023-02-02-trapinch-begin/index.html#poke-an-api",
    "title": "Wrapping PokéAPI with {trapinch}",
    "section": "Poke an API",
    "text": "Poke an API\nRegular readers will be unsurprised that I’ve chosen the PokéAPI API for fetching all sorts of information related to the Pokémon game franchise.2\nPokéAPI provides a relatively simple API. You don’t need to sign-up or use API tokens, you can only read (‘GET’) data from it’s not rate-limited.\nURL paths for fetching data are also straightforward: you append an endpoint and a resource of interest to the base URL in the form https://pokeapi.co/api/v2/{endpoint}/{resource}.3\nIn other words, you could type https://pokeapi.co/api/v2/pokemon/lotad in your browser and the API would respond with a JSON file containing data about Lotad, the best Pokémon.\n{httr2} lets us do this programmatically and can return a more R-friendly list object."
  },
  {
    "objectID": "posts/2023-02-02-trapinch-begin/index.html#its-a-trapinch",
    "href": "posts/2023-02-02-trapinch-begin/index.html#its-a-trapinch",
    "title": "Wrapping PokéAPI with {trapinch}",
    "section": "It’s a trapinch",
    "text": "It’s a trapinch\nSo, I’ve created the {trapinch} package.\nIt’s a proof of concept; a work in progress. There’s probably bugs. I’m sharing it in case I don’t take it any further, or if you want to contribute an issue or pull request.\nYou can download it from GitHub. It depends on {httr2} (obviously), {rcurl} and R version 4.1 or higher4 and can be downloaded from GitHub:\n\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/trapinch\")  # v0.0.1 in this post\nlibrary(trapinch)\n\nDon’t be surprised if function names or general functionality change in future. In particular, I’d like to look at throttling (limiting the number of API calls to prevent misuse) and to provide sensible errors for timeouts or if the service is down.\n\nGotta GET ’em all\nThere’s a generic low-level function, get_pokeapi(), to which you pass the endpoint and resource ID (numeric) or name (character) of interest. Each endpoint also has its own dedicated function, like get_item() or get_move() that calls get_pokeapi() under the hood.\nYou can look at the inbuilt resource_lookups list to get a dataframe of resource IDs and names for each endpoint, as well as the full URL needed to query the API. Here’s the first few:\n\nhead(names(resource_lookups))\n\n[1] \"ability\"        \"berry\"          \"berry-firmness\" \"berry-flavor\"  \n[5] \"characteristic\" \"contest-effect\"\nSo here’s the first few rows of the resource dataframe for the ‘pokemon’ endpoint:\n\nhead(resource_lookups[[\"pokemon\"]])\n\n  id       name                                  url\n1  1  bulbasaur https://pokeapi.co/api/v2/pokemon/1/\n2  2    ivysaur https://pokeapi.co/api/v2/pokemon/2/\n3  3   venusaur https://pokeapi.co/api/v2/pokemon/3/\n4  4 charmander https://pokeapi.co/api/v2/pokemon/4/\n5  5 charmeleon https://pokeapi.co/api/v2/pokemon/5/\n6  6  charizard https://pokeapi.co/api/v2/pokemon/6/\nOne of these resource names is ‘mew’, the legendary first-generation Pokémon.5 You could use get_pokeapi(\"pokemon\", \"mew\") to retrieve its data, or more simply:\n\nmew &lt;- get_pokemon(\"mew\")\n\nThe function returns a list of lists, which is parsed from the JSON response returned by the API. So for the ‘pokemon’ endpoint we get 18 different elements of various classes:\n\nstr(mew, max.level = 1)\n\nList of 18\n $ abilities               :List of 1\n $ base_experience         : int 300\n $ forms                   :List of 1\n $ game_indices            :List of 20\n $ height                  : int 4\n $ held_items              :List of 1\n $ id                      : int 151\n $ is_default              : logi TRUE\n $ location_area_encounters: chr \"https://pokeapi.co/api/v2/pokemon/151/encounters\"\n $ moves                   :List of 363\n $ name                    : chr \"mew\"\n $ order                   : int 248\n $ past_types              : list()\n $ species                 :List of 2\n $ sprites                 :List of 10\n $ stats                   :List of 6\n $ types                   :List of 1\n $ weight                  : int 40\nI’ve shown only the top level structure to hide some of the complexity. For example, the ‘moves’ item contains all the moves a Pokémon can learn, at what level it can learn them, in which game it learns them, and so on. Grabbing the first of the 363 ‘moves’ items (!) listed for Mew looks like this (oof):\n\nmew[[\"moves\"]][[1]][[\"move\"]][[\"name\"]]\n\n[1] \"pound\"\nA future task might be to simplify some of this complexity by collapsing deep lists into dataframes where possible.\n\n\nThumbing the Pokédex\nThe API responses are ‘paged’, meaning that you must make successive requests of a set size to retrieve all the data for a given endpoint. The get_*() functions automatically expand the request to ask for all the items in one go.\nWe know the maximum number of items to be returned from an endpoint because the stored in the resource_lookups object, so this can be appended automatically to the request string.\n\n\nBILL’s PC\nResponses are cached, which means that the data is saved on your computer. If you make the same request, the data will be retrieved first from the cache rather than calling the API again. That means there’s one less request for the API to deal with.\nThe cache is the path resolved by R_user_dir(\"trapinch\", \"cache\"). This function was introduced in R v4.0 for platform-independent storage of package-related data on a user’s machine.6 You can delete everything from the cache with clear_cache().\n\n\nSubstitute\n{httptest2} is a handy package that lets you test code written with {httr2}, specifically.\nWhy would you need special testing for API calls? The idea is that you should be able to test your package without the need for an active internet connection. {httptest2} ‘records’ the calls you make when you run your tests, then chooses when testing between this ‘mock’ response and a ‘live’ response.\nThe approach is pretty simple if you’ve tested before with {testthat}: you wrap your normal test_that() call with httr2::with_mock_dir(). Here’s an example of a test that make sure we get a list back from the API when we use get_pokeapi():\n\nwith_mock_dir(\"endpoint\", {\n  test_that(\"a list is returned\", {\n    expect_type(get_pokeapi(\"move-battle-style\"), \"list\")\n  })\n})\n\nBy wrapping the test in with_mock_dir(), {httptest2} creates the directory tests/endpoint/ that stores a copy of the JSON returned for this call when an internet connection was live.\nAs an aside, I learnt about curl::has_internet() in Colin’s blogpost, which can stop() the get_*() functions if there’s no internet connection. But has_internet() will trigger if you’re offline when you test, defeating the purpose of {httptest2}! Luckily, I saw a timely post by Maëlle about integrating this type of check into an ‘escape hatch’ so your unit tests can be run successfully in this scenario.\nThe rOpenSci HTTP Testing book is a good general port of call as well."
  },
  {
    "objectID": "posts/2023-02-02-trapinch-begin/index.html#inside-the-poké-ball",
    "href": "posts/2023-02-02-trapinch-begin/index.html#inside-the-poké-ball",
    "title": "Wrapping PokéAPI with {trapinch}",
    "section": "Inside the Poké Ball",
    "text": "Inside the Poké Ball\nThe user-facing functions of {trapinch} are therefore pretty simple. I could leave it at that.\nBut how daunting does the underlying {httr2} code look in the back-end? Turns out that it’s not that scary, thanks to those friendly and modular functions of {httr2}.\nWe can walk through that earlier get_pokemon(\"mew\") call using bare {httr2} functions by:\n\nStarting with the base API URL\nAppending the endpoint and resource as extensions (i.e. in the form /pokemon/mew)\nAdding a query for the maximum number of items in this endpoint-resource combo (i.e. ?limit=1279)\nAnnouncing to the API, as courtesy, who has made the call (i.e. who is the ‘user agent’)\nSpecifying the cache location for results to be saved\n\nFirst some variables:\n\nendpoint &lt;- \"pokemon\"\nresource &lt;- \"mew\"\nbase_url &lt;- \"https://pokeapi.co/api/v2/\"\nuser_agent &lt;- \"trapinch (http://github.com/matt-dray/trapinch)\"\nresource_count &lt;- nrow(trapinch::resource_lookups[[endpoint]])\ncache_dir &lt;- tools::R_user_dir(\"trapinch\", which = \"cache\")\n\nAnd now we can build our request with {httr2} functions prefixed with req:\n\nlibrary(httr2)\n\nmew_request &lt;- request(base_url) |&gt;\n  req_url_path_append(endpoint, resource) |&gt;\n  req_url_query(limit = resource_count) |&gt;\n  req_user_agent(user_agent) |&gt;\n  req_cache(cache_dir)\n\nPrinting the object summarises the request:\n\nmew_request\n\n&lt;httr2_request&gt;\nGET https://pokeapi.co/api/v2/pokemon/mew?limit=1279\nBody: empty\nOptions:\n• useragent: 'trapinch (http://github.com/matt-dray/trapinch)'\nPolicies:\n• cache_path: '/Users/mattdray/Library/Caches/org.R-project.R/R/trapinch'\n• cache_use_on_error: FALSE\n• cache_debug: FALSE\nThen we can actually execute the request:\n\nmew_perform &lt;- req_perform(mew_request)\n\nAgain, we can peek at the object to get some extra information about the processing of the request:\n\nmew_perform\n\n&lt;httr2_response&gt;\nGET https://pokeapi.co/api/v2/pokemon/mew?limit=1279\nStatus: 200 OK\nContent-Type: application/json\nBody: In memory (561317 bytes)\nWe can see the request was successful, since the HTTP status was 200 OK. Other status values are possible and may require us to try again later, for example.\nA couple of functions to mention here are last_request() and last_response(), which will also (surprise!) spit out info about the last request you made and the response received.\nFinally we can parse the JSON returned by the API. Again, I’m presenting the top-level structure only, given its complexity:\n\nmew_response &lt;- resp_body_json(mew_perform)\nstr(mew_response, max.level = 1)\n\nList of 18\n $ abilities               :List of 1\n $ base_experience         : int 300\n $ forms                   :List of 1\n $ game_indices            :List of 20\n $ height                  : int 4\n $ held_items              :List of 1\n $ id                      : int 151\n $ is_default              : logi TRUE\n $ location_area_encounters: chr \"https://pokeapi.co/api/v2/pokemon/151/encounters\"\n $ moves                   :List of 363\n $ name                    : chr \"mew\"\n $ order                   : int 248\n $ past_types              : list()\n $ species                 :List of 2\n $ sprites                 :List of 10\n $ stats                   :List of 6\n $ types                   :List of 1\n $ weight                  : int 40\nBoom: this matches the information we retrieved earlier with get_pokemon(\"mew\")."
  },
  {
    "objectID": "posts/2023-02-02-trapinch-begin/index.html#whos-that-pokémon",
    "href": "posts/2023-02-02-trapinch-begin/index.html#whos-that-pokémon",
    "title": "Wrapping PokéAPI with {trapinch}",
    "section": "Who’s that Pokémon?",
    "text": "Who’s that Pokémon?\nI know you’re thinking ‘why trapinch?’ In short, it’s the name of a Pokémon that contains the letters ‘R API’, which is cute. It also makes for an easy hex sticker with the Pokémon’s characteristic zigzag mouth and colour palette of orange and grey.\nSo why not ‘rapidash’, which starts with ‘R API’? Easy, lol: trapinch isn’t taken yet on Repokémon, a page by Chee Aun that lists GitHub repositories that are named after Pokémon.7\n\nJoin me next time as I continue my quest to write (sometimes) useful R packages that help me squat all the remaining spots on Repokémon (I call this ‘RDD’).8"
  },
  {
    "objectID": "posts/2023-02-02-trapinch-begin/index.html#environment",
    "href": "posts/2023-02-02-trapinch-begin/index.html#environment",
    "title": "Wrapping PokéAPI with {trapinch}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:36 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2023-04-23-type-convert/index.html",
    "href": "posts/2023-04-23-type-convert/index.html",
    "title": "Matt Dray Teaches (Data) Typing",
    "section": "",
    "text": "Confirmed: Unown is character type.1"
  },
  {
    "objectID": "posts/2023-04-23-type-convert/index.html#tldr",
    "href": "posts/2023-04-23-type-convert/index.html#tldr",
    "title": "Matt Dray Teaches (Data) Typing",
    "section": "tl;dr",
    "text": "tl;dr\nI forgot that the base R function type.convert() exists. Handy for ‘simplifying’ all the columns of a dataframe to appropriate data types."
  },
  {
    "objectID": "posts/2023-04-23-type-convert/index.html#suppression-depression",
    "href": "posts/2023-04-23-type-convert/index.html#suppression-depression",
    "title": "Matt Dray Teaches (Data) Typing",
    "section": "Suppression depression",
    "text": "Suppression depression\n{a11ytables} is an R package that lets you generate publishable spreadsheets that follow the UK government’s best practice guidance.\nOne requirement is to replace missing values with placeholder symbols. For example, suppressed data can be replaced with the string \"[c]\" (‘confidential’).\nOf course, R’s behaviour means it can store only one data type per column, so a numeric-type column will be automatically converted to character when you introduce at least one string value (i.e. something in \"quotes\").2\nFor example, this vector is type ‘double’ (i.e. decimals and not ‘whole-number’ integers) and has the more general ‘numeric’ class:\n\nnums &lt;- runif(100)\ntypeof(nums); class(nums)\n\n[1] \"double\"\n\n\n[1] \"numeric\"\n\n\nThe whole thing is converted to character type if you append just one character value.\n\ntypeof(c(nums, \"[c]\"))\n\n[1] \"character\"\n\n\nThis is known behaviour, yes, but it causes a minor annoyance in the xlsx files output from an {a11ytables} workflow: Excel puts a warning marker in the corner of any cell in a text column that contains a numeric value.3\n\n\n\n\nCat left a GitHub issue related to this: columns entirely made of numbers were being marked by Excel with the ‘number in a text column’ warning. In this case, it was because Cat’s suppression process resulted in all columns being converted to character.\nIt would be great to convert back to numeric any columns that did not receive a placeholder symbol during the wrangling process. How can you do this?"
  },
  {
    "objectID": "posts/2023-04-23-type-convert/index.html#type-specimen",
    "href": "posts/2023-04-23-type-convert/index.html#type-specimen",
    "title": "Matt Dray Teaches (Data) Typing",
    "section": "Type specimen",
    "text": "Type specimen\nLet’s consider a demo example. First I’ll attach {dplyr}, which is commonly used by stats producers in the UK government.\n\nsuppressPackageStartupMessages(library(dplyr))\n\nHere’s a very simple dataframe, tbl, to use as a demo. Column x contains values that will need to be suppressed because they’re lower than 5. There are no such values in column y.\n\nset.seed(1337)\n\ntbl &lt;- tibble(\n  id = LETTERS[1:5],\n  x  = round(runif(5, 0, 10), 2),\n  y  = round(runif(5, 6, 10), 2)\n)\n\ntbl\n\n# A tibble: 5 × 3\n  id        x     y\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 A      5.76  7.33\n2 B      5.65  9.79\n3 C      0.74  7.12\n4 D      4.54  6.98\n5 E      3.73  6.58\n\n\nSo, to borrow and simplify Cat’s approach: for each numeric column in tbl (i.e. x and y), replace any value of less than 5 with the placeholder string \"[c]\", otherwise retain the original value.\n\ntbl_supp &lt;- tbl |&gt; \n  mutate(\n    across(\n      where(is.numeric),\n      \\(value) if_else(\n        condition = value &lt; 5, \n        true      = \"[c]\",\n        false     = as.character(value)\n      )\n    )\n  )\n\ntbl_supp\n\n# A tibble: 5 × 3\n  id    x     y    \n  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1 A     5.76  7.33 \n2 B     5.65  9.79 \n3 C     [c]   7.12 \n4 D     [c]   6.98 \n5 E     [c]   6.58 \n\n\nSo column x now contains text values and has predictably been converted to character, which you can see as &lt;chr&gt; in the tibble header. But notice that y is also character type despite all the numeric values being retained.\nThis happened because the if_else() we used to create tbl_supp required the true and false arguments to resolve to the same type. The false argument must use as.character() because true resolves to the character value \"[c]\".\nIdeally we’d perform our suppression step but column x would end up as character and y as numeric. How can we achieve this?"
  },
  {
    "objectID": "posts/2023-04-23-type-convert/index.html#adjust-my-type",
    "href": "posts/2023-04-23-type-convert/index.html#adjust-my-type",
    "title": "Matt Dray Teaches (Data) Typing",
    "section": "Adjust my type",
    "text": "Adjust my type\nIn this section are some methods to fix the problem by:\n\nCausing yourself further brainache\nUsing a (relatively little known?) base R function\nDoing it ‘properly’ from the outset\n\n\nType 1: nah\nOf course, we could run tbl_supp |&gt; mutate(y = as.numeric(y)) to convert that specific column back to numeric. But imagine if you have a lot more columns and you can’t be sure which ones need to be converted.\nMaybe you could apply as.numeric() across all columns? Columns of numbers stored as text will then be converted entirely to numeric:\n\nas.numeric(c(\"1\", \"2\", \"3\"))\n\n[1] 1 2 3\n\n\nBut this causes a problem for character columns that contain text, like our placeholder symbol:\n\nas.numeric(c(\"1\", \"[c]\"))\n\nWarning: NAs introduced by coercion\n\n\n[1]  1 NA\n\n\nSo \"1\" becomes 1, but we’re warned that \"[c]\" has been converted to NA (well, NA_real_, which is the numeric form of NA).\nWe could do something convoluted, like see which columns didn’t gain NA values and should be retained as numeric. But that’s bonkers. This approach ultimately makes things worse because we’ve actually lost information!\nReally we want to check each column to see if it contains numbers only and then convert it to numeric. How?\n\n\nType 2: better\nThere’s a handy base R function that I had forgotten about: type.convert().\nIt takes a vector and, in turn, tries to coerce it to each data type. The process stops when coercion occurs without error. As the help file (?type.convert) puts it:\n\nGiven a vector, the function attempts to convert it to logical, integer, numeric or complex, and when additionally as.is = FALSE… converts a character vector to factor. The first type that can accept all the non-missing values is chosen.\n\nAnd handily:\n\nWhen the data object x is a data frame or list, the function is called recursively for each column or list element.\n\nSo we can pass our entire dataframe to type.convert() and it’ll check them all for us:\n\ntbl_supp_conv &lt;- type.convert(tbl_supp, as.is = TRUE)\n\ntbl_supp_conv\n\n# A tibble: 5 × 3\n  id    x         y\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 A     5.76   7.33\n2 B     5.65   9.79\n3 C     [c]    7.12\n4 D     [c]    6.98\n5 E     [c]    6.58\n\n\nAs we wanted, our character column y has become numeric type (&lt;dbl&gt;) while x remains as character. Neato.\n\n\nType 3: betterer\nThere are probably better approaches to this problem from the outset, rather than after-the-fact application of type.convert().\nAs Tim has pointed out, you could actually just use the base R form of ifelse():\n\ntbl |&gt; \n  mutate(\n    across(\n      where(is.numeric),\n      \\(value) ifelse(\n        test = value &lt; 5, \n        yes  = \"[c]\",\n        no   = value\n      )\n    )\n  )\n\n# A tibble: 5 × 3\n  id    x         y\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 A     5.76   7.33\n2 B     5.65   9.79\n3 C     [c]    7.12\n4 D     [c]    6.98\n5 E     [c]    6.58\n\n\nI think people use dplyr::if_else() for (a) consistency if they’re already using tidyverse in the script and (b) it’s ‘strictness’ compared to ifelse(). if_else() will force you to declare the true and false arguments so they resolve to the same type, whereas ifelse() will silently force type coercion, which may be undesirable in some cases.\nAnother method would be to iterate the suppression over only the columns that need it. For example, you could do that with a simple for and if:\n\ncols_numeric &lt;- names(select(tbl, where(is.numeric)))\n\nfor (col in cols_numeric) {\n  if (any(tbl[col] &lt; 5)) {\n    tbl[col] &lt;- ifelse(\n      tbl[col] &lt; 5,\n      \"[c]\",\n      as.character(tbl[[col]])\n    )\n  }\n}\n\ntbl\n\n# A tibble: 5 × 3\n  id    x         y\n  &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n1 A     5.76   7.33\n2 B     5.65   9.79\n3 C     [c]    7.12\n4 D     [c]    6.98\n5 E     [c]    6.58\n\n\nThis reads as ‘for each numeric column that contains at least one value less than 5, replace those values with the placeholder symbol \"[c]\".’"
  },
  {
    "objectID": "posts/2023-04-23-type-convert/index.html#preach-to-the-converted-types",
    "href": "posts/2023-04-23-type-convert/index.html#preach-to-the-converted-types",
    "title": "Matt Dray Teaches (Data) Typing",
    "section": "Preach to the converted types",
    "text": "Preach to the converted types\nIt’s almost like this post could have just been a tweet saying ‘😮 yo, type.convert() is 🪄magic🪄 y’all’. But this post is now a handy reference in case anyone has the same problems with Excel’s handling of {a11ytables} outputs in future.\nAlso I needed to hit my pun quota for the month.4"
  },
  {
    "objectID": "posts/2023-04-23-type-convert/index.html#environment",
    "href": "posts/2023-04-23-type-convert/index.html#environment",
    "title": "Matt Dray Teaches (Data) Typing",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:35 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2\n\nloaded via a namespace (and not attached):\n [1] digest_0.6.31     utf8_1.2.3        R6_2.5.1          fastmap_1.1.1    \n [5] tidyselect_1.2.0  xfun_0.39         magrittr_2.0.3    glue_1.6.2       \n [9] tibble_3.2.1      knitr_1.43.1      pkgconfig_2.0.3   htmltools_0.5.5  \n[13] generics_0.1.3    rmarkdown_2.23    lifecycle_1.0.3   cli_3.6.1        \n[17] fansi_1.0.4       vctrs_0.6.3       withr_2.5.0       compiler_4.3.1   \n[21] rstudioapi_0.14   tools_4.3.1       pillar_1.9.0      evaluate_0.21    \n[25] yaml_2.3.7        rlang_1.1.1       jsonlite_1.8.7    htmlwidgets_1.6.2"
  },
  {
    "objectID": "posts/2023-01-04-r.oguelike-sfx/index.html",
    "href": "posts/2023-01-04-r.oguelike-sfx/index.html",
    "title": "Ding! Sound effects in {r.oguelike}",
    "section": "",
    "text": "new wr — r.oguelike any% tenkeyless noglitch"
  },
  {
    "objectID": "posts/2023-01-04-r.oguelike-sfx/index.html#tldr",
    "href": "posts/2023-01-04-r.oguelike-sfx/index.html#tldr",
    "title": "Ding! Sound effects in {r.oguelike}",
    "section": "tl;dr",
    "text": "tl;dr\nThe {r.oguelike} package—a toy roguelike microadventure for the R console—now has little sound effects thanks to {sonify}. Pew pew!"
  },
  {
    "objectID": "posts/2023-01-04-r.oguelike-sfx/index.html#the-adventure-continues",
    "href": "posts/2023-01-04-r.oguelike-sfx/index.html#the-adventure-continues",
    "title": "Ding! Sound effects in {r.oguelike}",
    "section": "The adventure continues?",
    "text": "The adventure continues?\nApparently this is part 5 of the {r.oguelike} devlog. You can read earlier posts about:\n\nits inception\ncreating simple procedural dungeons\nmaking an enemy chase the player\n3D dungeons and continuous keypress inputs\n\nAlas, this is also probably the last installment.\nYes, the dungeons have been dank (cool, edgy), but also dank (cool, damp, claustrophobic). Time to unspelunk myself.\nThere may be time for a {r.oguelike2} in future. I’d like to try a class-based approach to help limit code spaghetti and make it more extensible. Perhaps it will even have a proper game loop! Call me when you’re ready, Kojima.\nUntil then, one more little feature to tie things up. Beeeeeeep. BOOOOOOOP."
  },
  {
    "objectID": "posts/2023-01-04-r.oguelike-sfx/index.html#hi-sonifi",
    "href": "posts/2023-01-04-r.oguelike-sfx/index.html#hi-sonifi",
    "title": "Ding! Sound effects in {r.oguelike}",
    "section": "Hi-Sonifi",
    "text": "Hi-Sonifi\nSo, yes: {r.oguelike} now has sound effects with quality as high as its graphics and gameplay. See all these in concert in the video embedded at the top of this page.\nI used the {sonify} package to create a few little beeps and toots that I think fit the game’s retro aesthetic.1 These are fired when the player moves and interacts with things in the dungeon.\nI’ve written about {sonify} before when I sonified data about COVID-19 infections and GitHub activity (incredible juxtaposition), which can offer a more interesting and accessible way of presenting data.\nYou can also demean {sonify} by making funny little honks and parps, which is what I’ve done for {r.oguelike}.\nHow did I arrive at the soundscape for {r.oguelike}? I did the bare minimum of fiddling around with the arguments in sonify::sonify() until the noises amused me."
  },
  {
    "objectID": "posts/2023-01-04-r.oguelike-sfx/index.html#demo-cassette",
    "href": "posts/2023-01-04-r.oguelike-sfx/index.html#demo-cassette",
    "title": "Ding! Sound effects in {r.oguelike}",
    "section": "Demo cassette",
    "text": "Demo cassette\nSounds are played in the code of the package via functions after each triggering event. The user can prevent these sounds from playing with the logical has_sfx argument in the start_game() function.\nFor example, here’s the function for the simplest sound effect:\n\n.sfx_move &lt;- function(has_sfx) {\n  if (has_sfx) sonify::sonify(1, 1, duration = 0.001)\n}\n\nThe sonify() outputs are {tuneR} objects. I’ve saved these as wav files with tuneR::writeWav() so they can be embedded in this post.\n\n\nClick for illustrative code to create the wav files.\n\n\nlibrary(sonify)\nlibrary(tuneR)\nlibrary(purrr)\n\nsfx &lt;- list(\n  \n  move = sonify(1, 1, duration = 0.001),\n  \n  bump = sonify(1, 1, duration = 0.01, flim = c(100, 110)),\n  \n  gold = bind(\n    sonify(1, 1, duration = 0.05, flim = c(800, 800)),\n    sonify(1, 1, duration = 0.05, flim = c(1000, 1000))\n  ),\n  \n  apple = sonify(0:1, c(0, 1), duration = 0.05),\n  \n  eat = sonify(0:1, c(1, 0), duration = 0.05),\n  \n  win = bind(\n    sonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600)),\n    sonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600)),\n    sonify(0:1, rep(1, 2), duration = 0.1, flim = c(800, 800))\n  ),\n  \n  lose = bind(\n    sonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600)),\n    sonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600)),\n    sonify(0:1, rep(1, 2), duration = 0.1, flim = c(400, 400))\n  )\n  \n)\n\nwalk2(\n  .x = sfx,\n  .y = names(sfx), \n  ~writeWave(.x, paste0(.y, \".wav\"))\n)\n\n\nIn reality, the sounds play a little slower in the game itself, but it was a bit fiddly to reproduce it for these clips. You’ll get the idea.\n\nMove\nStep onto unoccupied floor tile (.) and you’ll hear the very quick tap of your boot.\nClick to play the sound:\n\n\n\n\n\nAnd here’s the corresponding code to reproduce it:\n\nsonify(1, 1, duration = 0.001)\n\nBut bump into the dungeon wall (#) and you’ll get a dull thud, you absolute clod.\n\n\n\n\n\n\nsonify(1, 1, duration = 0.01, flim = c(100, 110))\n\nYes, flim, as in: ‘this post is absolute flimflam’.\n\n\nFood\nWould you pick up an apple (a) you found on the floor of a cave? Here’s what it might sound like as it pops into your inventory.\n\n\n\n\n\n\nsonify(0:1, c(0, 1), duration = 0.05),\n\nMore importantly, would you eat an apple (a) you found on the floor of a cave? Here’s how it would sound as it rolls down your gullet.\n\n\n\n\n\n\nsonify(0:1, c(1, 0), duration = 0.05)\n\n\n\nGold\nCollecting gold ($) grants you a celebratory chirp of excitement. Although there’s not actually anything in the dungeon to spend it on, sorry.\n\n\n\n\n\n\nsonify(1, 1, duration = 0.05, flim = c(800, 800))\nsonify(1, 1, duration = 0.05, flim = c(1000, 1000))\n\n\n\nDefeat enemy\nA powerful victory ditty after you crush your enemies (E).\n\n\n\n\n\n\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600))\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600))\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(800, 800))\n\n\n\nLose\nConversely, a sad lament for being crushed by your enemies (E) or running out of turns (T).\n\n\n\n\n\n\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600))\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600))\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(400, 400))"
  },
  {
    "objectID": "posts/2023-01-04-r.oguelike-sfx/index.html#echo-echo-echo",
    "href": "posts/2023-01-04-r.oguelike-sfx/index.html#echo-echo-echo",
    "title": "Ding! Sound effects in {r.oguelike}",
    "section": "Echo echo echo",
    "text": "Echo echo echo\nIf you want to try out {r.oguelike}, you can install it from GitHub:\n\ninstall.github(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/r.oguelike\")  # v0.1 currently\nr.oguelike::start_game()\n\nYou can also run {r.oguelike} in an RStudio instance in your browser (!), thanks to the Binder project.\nFree feel to highlight any bugs via the issues, or create a pull request that adds all the things that stop me from calling {r.oguelike} a proper ‘game’.2\n\nMost importantly, don’t forget to wishlist me on Steam and remember that pre-order bonuses will include an apple that’s been left on a dungeon floor for a few months."
  },
  {
    "objectID": "posts/2023-01-04-r.oguelike-sfx/index.html#environment",
    "href": "posts/2023-01-04-r.oguelike-sfx/index.html#environment",
    "title": "Ding! Sound effects in {r.oguelike}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:33 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2021-11-07-deepfry/index.html#tldr",
    "href": "posts/2021-11-07-deepfry/index.html#tldr",
    "title": "Deep fried memes in R",
    "section": "tl;dr",
    "text": "tl;dr\nNow you can use a function to deep fry memes in R."
  },
  {
    "objectID": "posts/2021-11-07-deepfry/index.html#extra-crispy",
    "href": "posts/2021-11-07-deepfry/index.html#extra-crispy",
    "title": "Deep fried memes in R",
    "section": "Extra crispy",
    "text": "Extra crispy\nYou can make memes in R with packages like Guangchang Yu’s {meme}. You could even post them to Twitter with #RStatsMemes for @rstatsmemes to find.\nHowever, it’s no longer enough to present memes as-is. They must be deep-fried to become modern and ironic. It will help people think that your meme is so edgy that it’s been re-saved thousands of times."
  },
  {
    "objectID": "posts/2021-11-07-deepfry/index.html#get-to-temperature",
    "href": "posts/2021-11-07-deepfry/index.html#get-to-temperature",
    "title": "Deep fried memes in R",
    "section": "Get to temperature",
    "text": "Get to temperature\nYou’ll need image-manipulation wizardry from the {magick} package, along with {extrafont} to let you use fonts from your system.\nAt time of writing there is an issue with importing fonts, which requires an earlier version of {Rttf2pt1} to be installed.\n\ninstall.packages(c(\"magick\", \"extrafont\", \"remotes\"))\nremotes::install_version(\"Rttf2pt1\", version = \"1.3.8\")\n\nYou can then import fonts from your system.\n\nextrafont::font_import()\n\nImporting fonts may take a few minutes, depending on the number of fonts and the speed of the system.\nContinue? [y/n] \nNow we can use important joke fonts—like Impact, Papyrus or Calibri—in our memes, assuming they’re installed on your system."
  },
  {
    "objectID": "posts/2021-11-07-deepfry/index.html#small-fry",
    "href": "posts/2021-11-07-deepfry/index.html#small-fry",
    "title": "Deep fried memes in R",
    "section": "Small fry",
    "text": "Small fry\nI’ve cooked up a single, low-quality function, fry(), that:\n\nReads a meme template image (or any image) from a path\nAdds top/bottom text in Impact font\nReads from a URL a specific (cursed) cry/laugh emoji that’s popular in deep-frying and places it in a random location (corners or left/right sides)\nAdjusts the image contrast, saturation, etc,1, tints it orange and bulges it from the centre\nWrites the image to a temporary jpeg file—compressing it horribly—and then reads it back in\nOutputs a magick-image object that you can save with magick::image_write() and send to all your friend (sic)\n\nIt does what I want it to do; adjust it as you please.\n\nsuppressPackageStartupMessages(library(magick))\n\nfry &lt;- function(\n  img_path, emoji_path,\n  text_top, text_bottom,\n  depth = c(\"shallow\", \"deep\")) {\n  \n  depth &lt;- match.arg(depth)\n  \n  cat(\"Heating oil... \")\n  \n  emoji &lt;- magick::image_read(emoji_path)\n  \n  emoji_where &lt;-  sample(c(  \n    paste0(\"north\", c(\"east\", \"west\")),\n    paste0(\"south\", c(\"east\", \"west\")),\n    \"east\", \"west\"  # e.g. 'east' is right\n  ), 1)\n  \n  img &lt;- image_read(img_path) |&gt; \n    image_annotate(\n      text_top, \"north\", size = 80, font = \"Impact\",\n      color = \"white\", strokecolor = \"black\"\n    ) |&gt;\n    image_annotate(\n      text_bottom, \"south\", size = 80, font = \"Impact\",\n      color = \"white\", strokecolor = \"black\"\n    ) |&gt;\n    image_scale(\"1000\") |&gt; \n    image_composite(emoji, gravity = emoji_where) |&gt; \n    image_colorize(30, \"orange\") |&gt;  # tint\n    image_modulate(brightness = 80, saturation = 120, hue = 90) |&gt;\n    image_contrast(sharpen = 100) |&gt; \n    image_noise()\n  \n  cat(\"dunking meme... \")\n  \n  if (depth == \"shallow\") {\n    img &lt;- img %&gt;% image_implode(-0.5)  # bulge\n    compress &lt;- 8\n  } else if (depth == \"deep\") {\n    img &lt;- img %&gt;% image_implode(-1)  # more bulge\n    compress &lt;- 1  # maximum compression\n  } \n  \n  path_out &lt;- tempfile(\"meme\", fileext = \".jpeg\")\n  image_write(img, path_out, \"jpeg\", compress)\n  \n  cat(\"crisp.\")\n  image_read(path_out)\n  \n}"
  },
  {
    "objectID": "posts/2021-11-07-deepfry/index.html#get-cooking",
    "href": "posts/2021-11-07-deepfry/index.html#get-cooking",
    "title": "Deep fried memes in R",
    "section": "Get cooking",
    "text": "Get cooking\nWhat spicy meme shall I make? Well, the = versus &lt;- assignment-operator flamewar has been cold for a few days, so time to heat it up again.2 And why not incorporate the world’s most famous fry cook (in sarcastic form)?\n\nsponge_path &lt;- paste0(  # URL to meme image\n  \"https://raw.githubusercontent.com/matt-dray/rostrum-blog/\",\n  \"master/static/post/2021-11-07-deepfry_files/spongebob.jpg\"\n)\n\nemoji_path &lt;- paste0(  # URL to cry/laugh emoji\n  \"https://raw.githubusercontent.com/matt-dray/rostrum-blog/\",\n  \"master/static/post/2021-11-07-deepfry_files/deepfry-emoji.jpg\"\n)\n\nbot_txt &lt;- \"= sAvEs KeYsTrOkEs Vs &lt;-\"  # sarcastic text\ntop_txt &lt;- tolower(bot_txt)\n\nFirst, a nice shallow fry.\n\nfry(sponge_path, emoji_path, top_txt, bot_txt, \"shallow\")\n\nHeating oil... dunking meme... crisp.\n\n\n\n\n\nAnd now we deep fry.\n\nfry(sponge_path, emoji_path, top_txt, bot_txt, \"deep\")\n\nHeating oil... dunking meme... crisp.\n\n\n\n\n\n*Fry-cook’s kiss*"
  },
  {
    "objectID": "posts/2021-08-30-paren-label/index.html#tldr",
    "href": "posts/2021-08-30-paren-label/index.html#tldr",
    "title": "Auto-label closing parentheses in RStudio",
    "section": "tl;dr",
    "text": "tl;dr\nI wrote a novelty R function that inserts comments after closing parentheses with the names of the functions they belong to. (These are called biscuits, apparently.) It’s available as an RStudio Addin from the {blogsnip} package."
  },
  {
    "objectID": "posts/2021-08-30-paren-label/index.html#matryoshka-functions",
    "href": "posts/2021-08-30-paren-label/index.html#matryoshka-functions",
    "title": "Auto-label closing parentheses in RStudio",
    "section": "Matryoshka functions",
    "text": "Matryoshka functions\nShiny apps can involve a lot of nested functions in the UI, which can make them difficult to handle.\nSometimes I comment after a closing parenthesis (‘paren’) with the name of the function that it’s closing, which makes it easier to match the pairs.\nDuncan told me these labels are called ‘biscuits’, which is charming.\n\nui &lt;- fluidPage(\n  \"hogwash\",\n  sidebarLayout(\n    \"tripe\",\n    mainPanel(\n      \"piffle\",\n      tabsetPanel(\n        \"bilge\",\n        tabPanel(\n          \"twaddle\"\n        )  # tabPanel\n      )  # tabsetPanel\n    )  # mainPanel\n  )  # sidebarLayout\n)  # fluidPage\n\nIdeally you don’t want to write ‘hadouken code’1 like this, though. A well-designed Shiny app would be modular and abstract away the functions, making everything a delight to read and understand.2"
  },
  {
    "objectID": "posts/2021-08-30-paren-label/index.html#paren-in-a-codestack",
    "href": "posts/2021-08-30-paren-label/index.html#paren-in-a-codestack",
    "title": "Auto-label closing parentheses in RStudio",
    "section": "Paren in a codestack",
    "text": "Paren in a codestack\nThere are a few ways that the RStudio IDE can help with the problem of bracket-buddying in long-winded scripts. In particular:\n\nPut your cursor next to a parenthesis and its partner will be automatically highlighted\nYou can auto-indent with Command + I and expose indent guides with Options &gt; Code &gt; Show indent guides so that paren-pairs are aligned vertically\nColour-match paren-pairs with rainbow colours, which you can activate with Options &gt; Code &gt; Display\nUse the keyboard shortcut Control + P to jump from an opening to a closing parenthesis\n\nYou can see these in action in this gif:\n\nThese go some way to helping, but each is not perfect for me, personally. For example, as someone with colourblindness, I find the rainbow colouring isn’t distinct enough."
  },
  {
    "objectID": "posts/2021-08-30-paren-label/index.html#a-biscuit-recipe",
    "href": "posts/2021-08-30-paren-label/index.html#a-biscuit-recipe",
    "title": "Auto-label closing parentheses in RStudio",
    "section": "A biscuit recipe",
    "text": "A biscuit recipe\nSo what if we want to use those closing-paren labels, or ‘biscuits’, instead? There doesn’t seem to be an option in RStudio for that.\nNaturally, I wondered about filling that gap in the market.\nAs a result, consider this post a thought-experiment manifested with some clunky code that is poorly tested and probably doesn’t do exactly what you want it to do. You have been warned.\n\nEasy as A, B, D\nUsing R code, how can you work out the matching parentheses in an expression? Spoiler: it’s not that simple.\nMaybe you could treat an expression as a string, then label the opening and closing parens in forward and reverse order, respectively.\nIn this example, the labels match up the parens for each imaginary function (uppercase for open-parens and lowercase for closing-parens):\n\n\"first(second(third()))\"\n#     A      B     Ccba\n\nBut this simple reversing heuristic doesn’t work for these expressions:\n\n\"first(second(third(), fourth()))\"\n#     A      B     Cd        Dcba\n\n\"first(second(third(')')))\"\n#     A      B     C d cba\n\nIn the first example we’d get the parens for third() and fourth() mixed up. In the second we have a sneaky unopened closing paren inside a string.\nNot forgetting that this doesn’t solve how to extract each function name to use as the biscuit.\n\n\n‘Overengineer’ is my middle name\nRather than the naive approach of chopping up and counting strings, I decided to parse the actual R expressions from them.\nI created a function to do this, add_biscuits(), that contains sub-functions for three steps:\n\n.parse() to interpret the R code from an input\n.label() to match parenthesis pairs by their parent function, grab the parent function name and insert it as a comment after the closing paren\n.format() to stick it all back together and style it\n\nThe rest of the post walks through these functions. I’m certain there’s easier ways to do things, but the code here demonstrates the point I’m trying to reach.\nFor demonstration, we can use one of the trickier examples from above as our input.\n\nstring &lt;- \"first(second(third('x'), fourth('y')))\"\n\n\n1. Parse\nThe .parse() function takes a string containing R code and returns a dataframe of its ‘syntax tree’. In other words, it breaks the string into ‘tokens’ that are recognised as units of R code: function calls, assignment arrows, etc.\nI’ve used getParseData(parse()) to do the hard work of parsing the string into a dataframe with one row per token. The downside is that you must provide to it a file rather than a character object, so we first have to write it to a temporary file.\nI’ve then filtered the dataframe to get only the tokens that are R code (i.e. they aren’t spaces) and renumbered the rows so they’re consecutive. This will be useful when we want to extract the function names for each set of parens.\n\n\nExpand the .parse() function definition\n\n\n.parse &lt;- function(string) {\n  \n  file &lt;- tempfile(fileext = \".R\")\n  writeLines(string, file)\n  \n  tokens &lt;- getParseData(parse(file))\n  parsed &lt;- parsed[parsed$terminal == TRUE, ]\n  rownames(parsed) &lt;- as.character(seq(nrow(parsed)))\n  \n  return(parsed)\n  \n}\n\n\nHere’s what the output looks like:\n\ntree &lt;- .parse(string)\ntree[, c(\"line1\", \"col1\", \"parent\", \"token\", \"text\")]\n\n   line1 col1 parent                token   text\n1      1    1      3 SYMBOL_FUNCTION_CALL  first\n2      1    6     40                  '('      (\n3      1    7      6 SYMBOL_FUNCTION_CALL second\n4      1   13     35                  '('      (\n5      1   14      9 SYMBOL_FUNCTION_CALL  third\n6      1   19     16                  '('      (\n7      1   20     12            STR_CONST    'x'\n8      1   23     16                  ')'      )\n9      1   24     35                  ','      ,\n10     1   26     23 SYMBOL_FUNCTION_CALL fourth\n11     1   32     30                  '('      (\n12     1   33     26            STR_CONST    'y'\n13     1   36     30                  ')'      )\n14     1   37     35                  ')'      )\n15     1   38     40                  ')'      )\n\n\nSo each row is a recognised R token, e.g. the function name from the first() function is a SYMBOL_FUNCTION_CALL and 'x' is a STR_CONSTANT. Parentheses are recognised as separate special tokens too: '(' and ')'.\nWe also get returned the position of each token in the input (line* and col*) and a variable called parent which tells us something about the association of tokens. In our case, opening- and closing-parens have the same parent value.\n\n\n2. Label\nSo we can tie our paren pairs together with the parent variable and we know where to place the biscuit with the line1 and col1 information. But how to extract the function name and ‘biscuitise’ it?\nI’ve written the slightly awkward .label() function for this. It takes the output from .parse() and checks each row to see if it’s a closing-paren token; if so, it finds the position of the matching open-paren by parent; then it looks at the text of the token in the preceding row to get the function name and sticks that in a new column called label.\n\n\nExpand the .label() function definition\n\n\n.label &lt;- function(tree) {\n  \n  tree$label &lt;- NA_character_\n  \n  for (tkn in seq_len(nrow(tree))) {\n    \n    tree$label[tkn] &lt;- ifelse(\n      tree$token[[tkn]] == \"')'\",\n      tree[as.numeric(rownames(\n        tree[tree$parent == tree$parent[[tkn]] & tree$token == \"'('\", ]\n      )) - 1, \"text\"],\n      NA_character_\n    )\n    \n  }\n  \n  return(tree)\n  \n}\n\n\nSo now we have the required biscuit for each closing paren:\n\ntree_lbl &lt;- .label(tree)\ntree_lbl[!is.na(tree_lbl$label), c(\"text\", \"label\")]\n\n   text  label\n8     )  third\n13    ) fourth\n14    ) second\n15    )  first\n\n\n\n\n3. Format\nThe last step needs involves sticking everything back together again. My quick solution is hacky and needs a refactor for sure.\nThe .format() function does a couple of awkward things: recognises and pastes commas to their preceding token (otherwise we’ll get lines in the output that start with a comma, which is valid, but not my style) and pastes in the biscuits with a suffixed # to mark it as a comment. Of course, this blocks downstream code, so we can add a linebreak with \\n.\nThe output is still going to be a bit uggo though, so I employed {styler} to reformat it in tidyverse style. This is very definitely opinionated.\n\n\nExpand the .format() function definition\n\n\n.format &lt;- function(tree_lbl) {\n  \n  tree_lbl$comma &lt;- c(\n    ifelse(tree_lbl$text != \",\", NA_character_, \",\")[-1], NA_character_\n  )  # lag commas\n  \n  tree_lbl &lt;- tree_lbl[tree_lbl$token != \"','\", ]  # remove comma tokens\n  \n  tree_lbl$string &lt;- NA_character_\n  \n  for (tkn in seq_len(nrow(tree_lbl))) {\n    \n    if (!is.na(tree_lbl$comma[tkn])) {  # when there's a comma\n      \n      if (!is.na(tree_lbl$label[tkn])) {  # paste with biscuit\n        \n        tree_lbl$string[tkn] &lt;- paste0(\n          \"\\n\", tree_lbl$text[tkn], tree_lbl$comma[tkn],\n          \"#\", tree_lbl$label[tkn], \"\\n\"\n        ) \n        \n      } else if (is.na(tree_lbl$label[tkn])) {  # paste without biscuit\n        \n        tree_lbl$string[tkn] &lt;- paste0(\n          \"\\n\", tree_lbl$text[tkn], tree_lbl$comma[tkn], \"\\n\"\n        ) \n        \n      }\n      \n    } else if (is.na(tree_lbl$comma[tkn]) & !is.na(tree_lbl$label[tkn])) {\n      \n      tree_lbl$string[tkn] &lt;- paste0(\n        \"\\n\", tree_lbl$text[tkn], \"#\", tree_lbl$label[tkn], \"\\n\"\n      ) \n      \n    } else {  # no comma, no biscuit\n      \n      tree_lbl$string[tkn] &lt;- tree_lbl$text[tkn]\n      \n    }\n    \n  }\n  \n  string_out &lt;- paste0(tree_lbl$string, collapse = \"\")\n  string_out &lt;- gsub(\"\\n\\n\", \"\\n\", string_out)\n  \n  styled &lt;- suppressWarnings(\n    utils::capture.output(styler::style_text(string_out))\n  )\n  \n  paste(styled, collapse = \"\\n\")\n  \n}\n\n\nLet’s hand over to .format() the labelled tree dataframe that was output from .label():\n\nout &lt;- .format(tree_lbl)\nout\n\n[1] \"first(\\n  second(\\n    third(\\\"x\\\"), # third\\n    fourth(\\\"y\\\") # fourth\\n  ) # second\\n) # first\"\n\n\nSo the output is a character vector, with one element per line of our output R file. You can see in the console how this looks.\n\ncat(out)\n\nfirst(\n  second(\n    third(\"x\"), # third\n    fourth(\"y\") # fourth\n  ) # second\n) # first\n\n\nReal noice: we’ve got a comment after each closing bracket that notes which function it’s closing. You can argue that some of these biscuits are redundant, but the goal has been achieved!\nA reminder of the original input:\n\nstring\n\n[1] \"first(second(third('x'), fourth('y')))\"\n\n\n\n\n4. Combined function\nAnd so, we can put these three steps together in one function: add_biscuits(), which is a cuter name than label_parens() or whatever.\n\nadd_biscuits &lt;- function(string) { \n  .parse(string) |&gt; .label() |&gt; .format()\n}\n\nThe output from each sub-function passes to the next, so it’s a nice chance to use the pipe operator (R &gt;= v4.1).\nLet’s try it on that awkward example with the sneaky extra bracket.\n\nstring2 &lt;- \"first(second(third(')')))\"\ncat(add_biscuits(string2))\n\nfirst(\n  second(\n    third(\")\") # third\n  ) # second\n) # first\n\n\nSo only the ‘real’ closing-paren tokens have been recognised and labelled."
  },
  {
    "objectID": "posts/2021-08-30-paren-label/index.html#bonus-rstudio-addin",
    "href": "posts/2021-08-30-paren-label/index.html#bonus-rstudio-addin",
    "title": "Auto-label closing parentheses in RStudio",
    "section": "Bonus: RStudio addin",
    "text": "Bonus: RStudio addin\nYou’re thinking ‘cool, but how can I use this thing practically?’ The answer is an RStudio addin.\nI’ve written before about {blogsnip}, my package of R Markdown-related RStudio addins to help me prepare blog posts. I’ve put the add_biscuits() function in there for now.\nInstall from GitHub with {remotes} as follows and then restart RStudio. {blogsnip} doesn’t force you to install {styler}, so you’ll have to do that too (if you haven’t already).\n\ninstall.packages(c(\"remotes\", \"styler\"))\nremotes::install_github(\"matt-dray/blogsnip\")\n\nThere should now be a ‘BLOGSNIP’ section in the ‘Addins’ menu (top navigation bar) with an option to ‘Add closing paren labels’. Select a full R expression in the script window, then select ‘Add closing paren labels’. Your code will be replaced with the same code, but with biscuits inserted.\n\nBeware: your code will be replaced if you use the addin. Of course, you can edit or undo the output as necessary.\nYou can set a keyboard shortcut for this too, if you want. Go to Tools &gt; Modify Keyboard Shortcuts…. I set mine to Ctrl + Cmd + P, since Ctrl + P is the shortcut that jumps from opening to closing parens."
  },
  {
    "objectID": "posts/2021-08-30-paren-label/index.html#oh-crumbs",
    "href": "posts/2021-08-30-paren-label/index.html#oh-crumbs",
    "title": "Auto-label closing parentheses in RStudio",
    "section": "Oh, crumbs…",
    "text": "Oh, crumbs…\nLet me be clear: add_biscuits() is half-baked (lol). It works on the simple examples here, but I’m pretty sure it will break horribly on more complex things. I haven’t really tested it properly.\nIt gets confused if there’s already some labelled closing parens. It gets confused if you don’t highlight enough code to capture all the opening and closing parens. It gets confused if you run it over more than one expression. It ignores curly and square parentheses. Etc, etc.\nSo, use the function at your own risk, or better yet: improve it by contributing to {blogsnip}.\nOr even better yet, just use a good implementation of this functionality that someone else has probably written and I’ve been too lazy to search for.\nOr, y’know, don’t write heavily-nested code that requires you to write comments after closing parens."
  },
  {
    "objectID": "posts/2021-08-30-paren-label/index.html#environment",
    "href": "posts/2021-08-30-paren-label/index.html#environment",
    "title": "Auto-label closing parentheses in RStudio",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-08 13:16:37 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.3        crayon_1.5.2       cli_3.6.1          knitr_1.43.1      \n [5] rlang_1.1.1        xfun_0.39          rex_1.2.1          processx_3.8.1    \n [9] purrr_1.0.1        styler_1.10.1      xmlparsedata_1.0.5 jsonlite_1.8.7    \n[13] rprojroot_2.0.3    htmltools_0.5.5    ps_1.7.5           rmarkdown_2.23    \n[17] R.cache_0.16.0     evaluate_0.21      fastmap_1.1.1      lifecycle_1.0.3   \n[21] yaml_2.3.7         cyclocomp_1.1.0    compiler_4.3.1     lintr_3.0.2       \n[25] htmlwidgets_1.6.2  rstudioapi_0.14    R.oo_1.25.0        R.utils_2.12.2    \n[29] digest_0.6.31      R6_2.5.1           magrittr_2.0.3     callr_3.7.3       \n[33] R.methodsS3_1.8.2  tools_4.3.1        withr_2.5.0        lazyeval_0.2.2    \n[37] xml2_1.3.4         remotes_2.4.2      desc_1.4.2"
  },
  {
    "objectID": "posts/2023-04-02-splendid-r-games/index.html#tldr",
    "href": "posts/2023-04-02-splendid-r-games/index.html#tldr",
    "title": "R is a game engine, fight me",
    "section": "tl;dr",
    "text": "tl;dr\nR is ‘a free software environment for statistical computing and graphics’. Ahahaha, no it’s not, it’s a game engine. I’ve created a ‘splendid’ list of games you can play—written in R—to prove it. Help expand it."
  },
  {
    "objectID": "posts/2023-04-02-splendid-r-games/index.html#stats-only",
    "href": "posts/2023-04-02-splendid-r-games/index.html#stats-only",
    "title": "R is a game engine, fight me",
    "section": "Stats only!",
    "text": "Stats only!\nR is not a general, multi-purpose programming language. It was written to do statistical analysis and make charts. You are literally not allowed to do anything else with it. You should use &lt;LANGUAGE&gt; instead, which is much more suited to your specific use case. R is a joke language for nerds.\nYou should not read beyond this point if you think, quite rightly, that mirth and frivolity are unsuited to an R session."
  },
  {
    "objectID": "posts/2023-04-02-splendid-r-games/index.html#stats-only-1",
    "href": "posts/2023-04-02-splendid-r-games/index.html#stats-only-1",
    "title": "R is a game engine, fight me",
    "section": "Stats only?",
    "text": "Stats only?\nUnity. Unreal. GameMaker. Godot. All of these videogame engines are now obsolete.\nIt is R—humble R!—that represents the future of gaming.\nTo prove it, I’ve created a list of ‘splendid R games’ in a GitHub repo1 that you are welcome to contribute to.2\nYes, R can be used for fun. Do not tell R Core."
  },
  {
    "objectID": "posts/2023-04-02-splendid-r-games/index.html#wait-hes-serious",
    "href": "posts/2023-04-02-splendid-r-games/index.html#wait-hes-serious",
    "title": "R is a game engine, fight me",
    "section": "Wait, he’s serious?",
    "text": "Wait, he’s serious?\nI think there’s three kinds of ‘platform’ for games written in R:\n\nFor the console\nIn Shiny\nPorted\n\nGames played in the console are pretty straightforward and probably most common. You can run some code, or a function from a package, to launch some code in the R console that you can interact with. A simple option for this might involve use of readline() to receive user input, for example, like Giora Simchoni’s excellent text-based puzzler, Castle of R.\n\n\n\nGiora’s Castle of R running in the terminal.\n\n\nShiny can give you a little more flexibility when it comes to graphics and user input, at the expense of needing to host the app and maybe some extra JavaScript skills. A great example of this is Pedro Silva’s winning entry (app, source) to the Posit Shiny contest in 2020.\n\n\n\nA still from Pedro’s Shiny Decisions app.\n\n\nThe third category is a little more boundary-pushing. Imagine if R was powerful enough to let you port existing games. Well, surprise, ya boi Mike Cheng (aka coolbutuseless) has pushed hard on expanding the capabilities of R to run fast enough and with realtime user input,3 porting the classic Another World (1991) to R, which was showcased at 2022’s Posit conference (source, video, blog).\n\n\n\nA still from Mike’s rstudio::conf(2022) presentation, featuring Another World.\n\n\nOf course, within these ‘platforms’ are genres like word games, arcade games, puzzle games, etc. Will you be the first to create an MMORPG (a massively-multiplayer online R-powered game)?"
  },
  {
    "objectID": "posts/2023-04-02-splendid-r-games/index.html#i-am-an-indie-game-dev-now",
    "href": "posts/2023-04-02-splendid-r-games/index.html#i-am-an-indie-game-dev-now",
    "title": "R is a game engine, fight me",
    "section": "I am an indie game dev now",
    "text": "I am an indie game dev now\nI’ve always been interested in how videogames are coded,4 wishing that I could do the same myself. Of course I could simply learn ‘real’ programming languages.\nExcept that’s blasphemy. Of course I’d rather break my own mind and spirit in an attempt to make R achieve 0.1% of what might be possible in P*thon.\nCase in point, I’ve made a few R packages containing some little toys (in order of gooddest to baddest):\n\n{r.oguelike} (source, blogs) for a procedural-dungeon explorer with enemy pathfinding and inventory\n{tamRgo} (source, blog) for a cyber pet in your R console that persists between sessions\n{safar6} (source, blog) for a text-based re-make of the Safari Zone from the first generation of Pokémon games\n{ActionSquirrel} (source, blog) for a tile-based, turn-based minigame in the R console\n{hokey} (source, blog) for minigames that use direct keypress inputs with {keypress}\n\n\n\n\nHint when playing {tamRgo}: do not forget about your pet for 138 days. RIP Kevin XVIII.\n\n\nI’ve got something in the pipeline that involves extremely rudimentary physics in the R console. Wow! For release in 2023 (because game launches never go wrong)."
  },
  {
    "objectID": "posts/2023-04-02-splendid-r-games/index.html#ready-player-2",
    "href": "posts/2023-04-02-splendid-r-games/index.html#ready-player-2",
    "title": "R is a game engine, fight me",
    "section": "Ready Player 2",
    "text": "Ready Player 2\nThe splendid list must be missing a bunch of games. Please leave an issue or pull request in the splendid-r-games repo to add more examples.\nNext stop: letting people run R games in the browser without an installed copy of R. This is already possible with a service like Binder, which can spin up an instance of RStudio with packages pre-installed I did this for {r.oguelike}).\n\n\n\nJust like the Nokia N-Gage, amirite?\n\n\nBut soon you might be able to use WebR to play games in the browser without even spinning up RStudio, ooh. So look out for an R version of itch.io in future, lol."
  },
  {
    "objectID": "posts/2023-04-02-splendid-r-games/index.html#environment",
    "href": "posts/2023-04-02-splendid-r-games/index.html#environment",
    "title": "R is a game engine, fight me",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-02 12:50:56 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2023-03-16-webr-test/index.html#tldr",
    "href": "posts/2023-03-16-webr-test/index.html#tldr",
    "title": "Playgrounds with WebR and Quarto",
    "section": "tl;dr",
    "text": "tl;dr\nWebR lets you run R in the browser(!). Now you can make WebR chunks in Quarto that render to editable, executable blocks(!)."
  },
  {
    "objectID": "posts/2023-03-16-webr-test/index.html#sliding-into-tedium",
    "href": "posts/2023-03-16-webr-test/index.html#sliding-into-tedium",
    "title": "Playgrounds with WebR and Quarto",
    "section": "Sliding into tedium",
    "text": "Sliding into tedium\nI wrote recently a simple introduction to how R parses code. I provided a function that I said the reader could go away and run themselves.\nAs in… copy-paste it into an instance of R running on their machine. Gross.\nWouldn’t it be better if people could just tinker with the code right there in the post? This kind of ‘playground’ could be great for explaining concepts and teaching.1"
  },
  {
    "objectID": "posts/2023-03-16-webr-test/index.html#i-seesaw-a-solution",
    "href": "posts/2023-03-16-webr-test/index.html#i-seesaw-a-solution",
    "title": "Playgrounds with WebR and Quarto",
    "section": "I seesaw a solution",
    "text": "I seesaw a solution\nWebR lets you run R in the browser. Read that again! This is a landmark piece of work from George Stagg and Lionel Henry.\nI won’t go into technicals and limitations here. For more information, see:\n\nthe docs\nthe v0.1 launch post\nan ‘awesome’ list of resources\n\nCrucially for my needs, you can now run WebR chunks in a Quarto document, thanks to James J Balamuta. This renders interactive blocks of R code that the reader can adjust and execute with button-click:\n\n\n\nBeware: this is a gif, not an embedded demo!\n\n\nCheck out James’s coatless/quarto-webr GitHub repo for the source. There’s also a live demo and its source."
  },
  {
    "objectID": "posts/2023-03-16-webr-test/index.html#swinging-into-action",
    "href": "posts/2023-03-16-webr-test/index.html#swinging-into-action",
    "title": "Playgrounds with WebR and Quarto",
    "section": "Swinging into action",
    "text": "Swinging into action\nTo have a go yourself, do follow the setup steps in James’s quarto-webr README and look at the source of his demo.\nUltimately you can:\n\nInstall the extension to your project folder by running quarto add coatless/quarto-webr in the terminal\nSet filter: webr in the YAML of your qmd file2\nWrite code chunks in the qmd using the {webr} engine\n\nThis made it straightforward to prepare a little Quarto doc with chunks powered by the ‘webr’ engine, which I deployed to the web via Netlify.3\nYou can visit that live page or see the underlying source on GitHub.4\nSo now you can tinker with the example I gave in the original blogpost about parsing R code. Unfortunately I can’t add this directly to the post, since this blog is not made with Quarto."
  },
  {
    "objectID": "posts/2023-03-16-webr-test/index.html#a-blog-platform-merry-go-round",
    "href": "posts/2023-03-16-webr-test/index.html#a-blog-platform-merry-go-round",
    "title": "Playgrounds with WebR and Quarto",
    "section": "A blog-platform merry-go-round",
    "text": "A blog-platform merry-go-round\nI’ve written this quick demo and post because I was excited about what George & Lionel and James have put together. There’s so many system-independent applications of this approach that could help with teaching and learning, or explaining simple ideas in a blog post.\nIn fact, this blog may eventually switch from {blogdown} to Quarto to take advantage of WebR. It’ll be a pain to convert old posts, but luckily I already missed the earlier {blogdown}-to-{distill} bandwagon, lol.5"
  },
  {
    "objectID": "posts/2023-03-16-webr-test/index.html#environment",
    "href": "posts/2023-03-16-webr-test/index.html#environment",
    "title": "Playgrounds with WebR and Quarto",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-06-29 13:19:28 CEST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-08-11-more-addins/index.html",
    "href": "posts/2022-08-11-more-addins/index.html",
    "title": "Two RStudio Addins: {quartostamp} and {snorkel}",
    "section": "",
    "text": "I made a couple of packages that contain RStudio Addins: {quartostamp} inserts little divs and classes into your Quarto documents, while {snorkel} inserts Rd tags into your {roxygen2} function documentation."
  },
  {
    "objectID": "posts/2022-08-11-more-addins/index.html#tldr",
    "href": "posts/2022-08-11-more-addins/index.html#tldr",
    "title": "Two RStudio Addins: {quartostamp} and {snorkel}",
    "section": "",
    "text": "I made a couple of packages that contain RStudio Addins: {quartostamp} inserts little divs and classes into your Quarto documents, while {snorkel} inserts Rd tags into your {roxygen2} function documentation."
  },
  {
    "objectID": "posts/2022-08-11-more-addins/index.html#al-addin",
    "href": "posts/2022-08-11-more-addins/index.html#al-addin",
    "title": "Two RStudio Addins: {quartostamp} and {snorkel}",
    "section": "Al Addin",
    "text": "Al Addin\nRStudio Addins let you access R functions interactively at the click of a button (or with a keyboard shortcut, or via the RStudio command palette). I particularly like them for easy sharing of insertable pre-written code.\nSee Dean Attali’s {addinslist} package for examples or the {shrtcts} package by Garrick Aden-Buie for an alternative approach to ‘make anything an RStudio shortcut’.\nOn my part:\n\nI wrote about the little {backtick} Addin package that inserts backticks (`) and backtick constructions1\nI wrote about the {r2eng} package, which has an Addin that lets you highlight some R code and then speak that expression out loud in English\nI wrote about the {blogsnip} Addin package that can manipulate code used to write this blog\nthe {a11ytables} package has an Addin to insert code skeletons for creating publishable best-practice spreadsheets\n\nRStudio Addins are kinda straightforward to put into in an R package. Put your functions in R/ as usual, then write an inst/rstudio/addins.dcf file to declare your functions (e.g. see {backtick}’s .dcf). Learn more from Sharon Machlis and Jozef Hajnala.\nThe user can then select the functions from the ‘Addins’ dropdown in the RStudio IDE.\nOf late I’ve written two packages—{quartostamp} and {snorkel}—that contain RStudio Addins to help me write code structures that I struggle to remember when writing Quarto documents and function documentation.\nOthers seem to have found these useful, so I thought I’d ‘officially’ signal that they exist."
  },
  {
    "objectID": "posts/2022-08-11-more-addins/index.html#package-quartostamp",
    "href": "posts/2022-08-11-more-addins/index.html#package-quartostamp",
    "title": "Two RStudio Addins: {quartostamp} and {snorkel}",
    "section": "Package {quartostamp}",
    "text": "Package {quartostamp}\n\nQuarto—‘new R Markdown’—is all the rage right now, having been officially launched at the recent rstudio::conf(2022) conference. Folks are going bonkers for tools and techniques to learn and implement it. A good place to begin is the Awesome Quarto List by Mickaël Canouil.\nFeatured there is {quartostamp}, a little R package I made that contains an RStudio Addin to insert into your Quarto doc a number of useful divs and classes. As the README puts it:\n\nWhy ‘quartostamp’? You could physically stamp some pre-prepared type into a literal quarto document; you can digitally stamp some pre-written elements into your qmd file.\n\n\n\n\nHex logo for {quartostamp}.\n\n\nYou can install it from GitHub like:\n\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/quartostamp\")\n\nAs an example, did you forget how to insert speaker notes into a presentation? Go to Addins &gt; Insert Speaker Notes and this will be inserted to your doc:\n::: {.notes}\nSpeaker notes go here.\n:::\nThat’s a straightforward one; a two-column layout is more complex. Go to Addins &gt; Insert Column Layout and you get this:\n:::: {.columns}\n\n::: {.column width='40%'}\nLeft column\n:::\n\n::: {.column width='60%'}\nRight column\n:::\n\n::::\nThese elements are basically lifted from the docs, so big shoutout to the authors JJ Allaire, Charles Teague, Carlos Scheidegger, Yihui Xie and Christophe Dervieux.\nGo to the package website to see the current list of functions available in the Addin. Click them to learn more, including a preview of the actual text that will be inserted into your document.\nI think the limits of the package are the content that you would insert in the body of your Quarto doc, or to places like Revealjs slide headings. In other words, not Quarto YAML nor chunk options. These are autocompleted in RStudio, or otherwise dealt with already elsewhere.\nDo submit your ideas for {quartodown} as issues or pull requests in the GitHub repo.\n\nℹ️ Update\nThe package was updated in June 2023 to version 0.1.0, which lets you highlight some text and run the addin so that the selected text becomes the body of the stamp. A simple dummy skeleton is inserted if you use the addin without highlighting any text, as described above.\nFor example, you can write some bullets, highlight them, select ‘Insert Speaker Notes’ and you’ll get the appropriate markup for those bullets to be rendered as speaker notes in your Quarto presentation."
  },
  {
    "objectID": "posts/2022-08-11-more-addins/index.html#package-snorkel",
    "href": "posts/2022-08-11-more-addins/index.html#package-snorkel",
    "title": "Two RStudio Addins: {quartostamp} and {snorkel}",
    "section": "Package {snorkel}",
    "text": "Package {snorkel}\n\nThe {snorkel} package2 is another solution to storing syntax outside of my own brain. In this case, it helps out with formatting text in {roxygen2} function documentation.3\nThe reason for the name should be obvious.4 As the package README puts it:\n\nYou put a snorkel in your mouth to help you breathe oxygen; you put a {snorkel} in your addins to help you write with {roxygen2}.\n\nYes, this is package-name-driven development; I thought of the name before writing anything.\nInstall from GitHub like:\n\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/snorkel\")\n\nSo, how would you embolden a word in your function documentation? Highlight the word and then go to Addins &gt; Format Bold and you get:\n#' I am a \\strong{bold} boy.\nHere’s something more complex: how can you link to a function in an external package? Write the package function in the form package::function, highlight it and then select Addins &gt; Link To Function (Another Package) and you get:\n#' When the crowd say 'Bo \\code{\\link[dplyr]{select}}a'.\nThe functions in the Addin insert code mentioned in the {roxygen2} docs, so big shoutout to the authors Hadley Wickham, Peter Danenberg, Gabor Csárdi, Manuel Eugster and RStudio.\nThe package website has a list of the functions available in the Addin,5 which you can click to see previews of what each one will insert.\nFor now I think the functions in the package should focus just on the Rd tags that format the documentation, rather than the {roxygen2} tags (like @description, @params, etc). The latter are already autocompleted in RStudio, so I feel like there’s less need. Similarly, the package doesn’t include functions to insert Markdown into function documentation, but perhaps it could be expanded in future.\nNew functionality is always welcome; please raise an issue or pull request in the GitHub repo."
  },
  {
    "objectID": "posts/2022-08-11-more-addins/index.html#addin-your-suggestions",
    "href": "posts/2022-08-11-more-addins/index.html#addin-your-suggestions",
    "title": "Two RStudio Addins: {quartostamp} and {snorkel}",
    "section": "Addin your suggestions",
    "text": "Addin your suggestions\nI made these primarily for myself; I’m really bad at remembering syntax. I always need ‘a brain outside my brain’. Maybe they’ll be useful for you too.\nPerhaps you can help out by expanding the list of functions in these packages. Please add any suggestions or features in an issue or pull request in either GitHub repo.\nSo, don’t be a cad, it would be maddenin’ and saddenin’ if you hadn’t added in your Addin ideas, so be a rad chad and add your addins in the Addins."
  },
  {
    "objectID": "posts/2022-08-11-more-addins/index.html#environment",
    "href": "posts/2022-08-11-more-addins/index.html#environment",
    "title": "Two RStudio Addins: {quartostamp} and {snorkel}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:30 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-02-12-mapbot-londonr/index.html#tldr",
    "href": "posts/2022-02-12-mapbot-londonr/index.html#tldr",
    "title": "londonmapbot at LondonR",
    "section": "tl;dr",
    "text": "tl;dr\nI spoke at a LondonR hootenanny1 (in-person!) about how to create your own simple Twitter bot powered by GitHub Actions and {rtweet}, just like my @londonmapbot creation.\n\nℹ️ Update\nThe bot no longer runs on Twitter. You can read about how I ported it to Mastodon at @londonmapbot@botsin.space."
  },
  {
    "objectID": "posts/2022-02-12-mapbot-londonr/index.html#the-mapbotverse",
    "href": "posts/2022-02-12-mapbot-londonr/index.html#the-mapbotverse",
    "title": "londonmapbot at LondonR",
    "section": "The mapbotverse",
    "text": "The mapbotverse\nI created a Twitter bot called @londonmapbot. It uses the {rtweet} package by Mike Kearney to tweet out a random satellite image of Greater London via Mapbox, scheduled and executed by GitHub Actions.\nI’ve written about this before:\n\nA Twitter bot with {rtweet} and GitHub Actions (original post)\nMapping londonmapbot tweets with {leaflet}\nWhat colour is London?\n\nI’ve noticed a number of other projects have used or developed the londonmapbot code, or else are inspired by it. I’ve created a Twitter List containing the ones I know about, which—in earnest—I’ve called ‘the mapbotverse’.\nIt includes bots that tweet maps more cleverly, or do something else, like:\n\nRoberto Jiménez’s @esmapbot, which tweets images of Spain sampled from within a geojson of the country’s borders\nMatt Kerlogue’s @narrowbotR, which tweets canal and river locations with geographically-coincident Flickr images, which have been rated for photo quality (!)\nOscar Baruffa’s @BigBookofR, which tweets out a random section of the excellent Big Book of R resource\n\nI talked at LondonR about how you can be at least as cool as these folks.\nYes, you too can fork the source for londonmapbot on GitHub, or click the green ‘use this template’ button in the repo to begin your own mapbot. Or you can can create something from scratch. Let me know what you get up to."
  },
  {
    "objectID": "posts/2022-02-12-mapbot-londonr/index.html#slides",
    "href": "posts/2022-02-12-mapbot-londonr/index.html#slides",
    "title": "londonmapbot at LondonR",
    "section": "Slides",
    "text": "Slides\nObviously I created some slides for the event. Consider them a more up-to-date (and simpler) version of my original blogpost.\nBelow is the presentation embedded2, but you can also visit the slides online, or go to the source on GitHub.\n\nℹ️ Update\n{rtweet} version 1.0 was released with breaking changes in July 2022 and so I’ve tweaked the slides to reflect this. You can read a separate blogpost about these changes.\n\n\n\n\n\n\n\n\n\nWith the slides selected, press the left and right keys to navigate, F to go fullscreen and P to see the presenter notes."
  },
  {
    "objectID": "posts/2022-02-12-mapbot-londonr/index.html#bonus",
    "href": "posts/2022-02-12-mapbot-londonr/index.html#bonus",
    "title": "londonmapbot at LondonR",
    "section": "Bonus",
    "text": "Bonus\nJust after the talk, I found out I could mark the bot as ‘automated’ from Twitter settings at: More &gt; Settings and Privacy &gt; Your account &gt; Account information &gt; Automation. I just had to log in as the ‘managing account’ (i.e. my personal account) to connect the two profiles. This is now required as per terms of service, I believe.\n\nSo now the profile has a little robot icon and the phrase ‘automated by @mattdray’."
  },
  {
    "objectID": "posts/2022-02-12-mapbot-londonr/index.html#inevitable-bot-uprising",
    "href": "posts/2022-02-12-mapbot-londonr/index.html#inevitable-bot-uprising",
    "title": "londonmapbot at LondonR",
    "section": "Inevitable bot uprising",
    "text": "Inevitable bot uprising\nIt’s another maybe two-or-so years until all of Twitter (Earth?) is just a bot singularity, so I suggest you get in early. I reckon a mapbot is a pretty cheap way to get in on the hype."
  },
  {
    "objectID": "posts/2022-02-12-mapbot-londonr/index.html#environment",
    "href": "posts/2022-02-12-mapbot-londonr/index.html#environment",
    "title": "londonmapbot at LondonR",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-02 15:59:55 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2   compiler_4.3.1      fastmap_1.1.1      \n [4] cli_3.6.1           tools_4.3.1         htmltools_0.5.5    \n [7] xaringanExtra_0.7.0 rstudioapi_0.14     yaml_2.3.7         \n[10] rmarkdown_2.22      knitr_1.43.1        jsonlite_1.8.5     \n[13] xfun_0.39           digest_0.6.31       rlang_1.1.1        \n[16] evaluate_0.21"
  },
  {
    "objectID": "posts/2022-06-28-isocubes-dungeon/index.html#tldr",
    "href": "posts/2022-06-28-isocubes-dungeon/index.html#tldr",
    "title": "An isometric dungeon chase in R",
    "section": "tl;dr",
    "text": "tl;dr\nI made an interactive isometric-dungeon demo in R, thanks to {r.oguelike} for dungeon building and mikefc’s {isocubes} for drawing isometric cube graphics and {eventloop} for continuous keypress inputs."
  },
  {
    "objectID": "posts/2022-06-28-isocubes-dungeon/index.html#a-new-dimension",
    "href": "posts/2022-06-28-isocubes-dungeon/index.html#a-new-dimension",
    "title": "An isometric dungeon chase in R",
    "section": "A new dimension",
    "text": "A new dimension\nMike (AKA mikefc, AKA coolbutuseless) is well known for off-label R creations that desecrate the assumption that ‘R is a language for statistical computing’.\nMike revealed the {isocubes} package recently, which lets you print objects made of isometric cubes to a graphics device. I immediately thought of the toy {r.oguelike} package I’ve been developing recently, which has the goal of creating (really) basic features of a roguelike game in R.1 The dungeons are currently ASCII tiles printed to the console. How would it look in isometric?\nIn a frenzied series of tweets, I built up a little toy that creates a procedural isometric dungeon and adds a user-controlled player character and a pathfinding enemy. The steps were to:\n\nBuild an isometric dungeon (tweet)\nAdd a player (tweet)\nAccept continuous input (tweet)\nAdd a pathfinding enemy (tweet)\n\nThis post talks through those steps. You can find the code for the final product in a GitHub Gist. It is absolutely not polished and really is just a Frankenstein’s monster of code that I stapled together.\n\n1. Build an isometric dungeon\n{r.oguelike} creates procedural dungeons in the form of a matrix where # symbols are non-traversable wall tiles and . indicates traversable floor tiles. I wrote about the inception of the package in a recent blog post.\nWe can swap the characters for height values, where the floor is 1 and the walls are 2, and {isocubes} will project the walls one cube above the plane of the floor. We can also use this information to provide colours; black for the floor and brown for the walls, for example, so it looks like a cavern.\nHere’s a few examples:\n\nI think that looks pretty good (ignore the graphical artefacts from the gif compression). I didn’t time how long it took for each image to be rendered because it was near-instantaneous.\nBut we don’t want to just look at pictures of dungeons, we want to explore them.\n\n\n2. Add a player\n{r.oguelike} lets a user move a character around the the floor tiles. The player is represented by @ in the dungeon matrix, which we can again substitute with a height value of 1 so it’s one cube higher than the floor. Of course, we should colour it to distinguish it from the walls; I chose blue.\nThe user’s keyboard input is accepted by readline() and this determines the character’s movement. Typing W then Enter will make the player move north one tile, for example. In {r.oguelike}, a keypress input causes the current location to be overwritten with a floor tile (.); the tile above to be replaced with the player symbol (@); and then the updated matrix is re-printed to the console.\nAgain, this all takes place inside the matrix that represents the dungeon, so we can also just lift this functionality into the {isocubes} version. Here you can see a series of user inputs to the console that result in the player moving around the floor tiles.\n\n\n\n\nIt was really pleasing when I got this to work, but it’s also quite tedious to tap in a key and hit enter for each movement.\n\n\n3. Accept continuous input\n{r.oguelike} simply prints the dungeon matrix to the console at the end of each turn, whereas our {isocubes} version takes place in a graphics window that’s refreshed with every turn.\nMike also has a package called {eventloop},2 which he suggested might be useful for continuous input from the user. The package contains:\n\na framework for rendering interactive graphics and handling mouse+keyboard events from the user at speeds fast enough to be considered interesting for games and other realtime applications\n\nBear in mind that it doesn’t work on Windows. Read more about it in Mike’s blog.\nHere you can see the result of incorporating {eventloop}. The user is pressing the arrow keys—which you can see being printed to the console—to move the player. This is way more seamless than the previous readline() method.\n\n\n\n\nThis is a nice demo, but it would be great to make this more of a ‘game’.\n\n\n4. Add a pathfinding enemy\n{r.oguelike} has an enemy character, represented in the dungeon matrix as E. Again, we can replace this with a height of 1 and colour it yellow, for example.\nI wrote recently about implementing simple breadth-first pathfinding so that the enemy can head toward wherever the player currently is. At time of writing I haven’t fully implemented the pathfinding into {r.oguelike}, but that didn’t stop me adding it into the code for this isometric demo.\nHere you can see the enemy cube (yellow) hunting down the player-controlled cube (blue). I was motivated to add a capture condition and decided to have fun with it.\n\nI hope you enjoyed the victory dance at the end of the gif (it was the best I could do with the limited graphics).3\n\nℹ️ Update\nAfter this post was published, the {oblicubes} package was published by Trevor L Davies. It allows you to use oblique projections. So obviously I had a go with {r.oguelike}.\n\n\n\nClick for the required code changes.\n\nIn the code I wrote, you pretty much replace:\n\ncoords &lt;- isocubes::coords_heightmap(dungeon_h, col = dungeon_c)\n\ncubes  &lt;- isocubes::isocubesGrob(\n  coords,\n  max_y = ncol(dungeon_h) + 0.1 * ncol(dungeon_h),\n  fill = coords$col,\n  xo = 0.7\n)\n\ngrid::grid.newpage()  # 'clear'\ngrid::grid.draw(cubes)  # render\n\nWith:\n\ncoords &lt;- oblicubes::xyz_heightmap(\n  dungeon_h,\n  col = dungeon_c,\n  scale = 0.3,\n  ground = \"xy\"\n)\n\ngrid::grid.newpage()  # 'clear'\noblicubes::grid.oblicubes(coords)  # render"
  },
  {
    "objectID": "posts/2022-06-28-isocubes-dungeon/index.html#the-fourth-dimension",
    "href": "posts/2022-06-28-isocubes-dungeon/index.html#the-fourth-dimension",
    "title": "An isometric dungeon chase in R",
    "section": "The fourth dimension",
    "text": "The fourth dimension\nI need to tie up some loose ends in the current version of {r.oguelike}, but I’m considering the possibilities for {isocubes} and {eventloop} in future. Maybe the start_game() function could have an argument where the user can choose 2D or 3D (isometric or oblique) representations of the game.\nI also have a few ideas of how I can use my basic {r.oguelike} ‘engine’ with {isocubes} to develop some other, non-roguelike games. For example, Dmytro (AKA Deemah) suggested {rsokoban}. Sokoban is a game where you solve small tile-based puzzles by pushing crates onto designated spots. I was also reminded of Q*bert, where you try and touch all the floor tiles to change their colour.\nSo many ideas for off-label R use, so little time."
  },
  {
    "objectID": "posts/2022-06-28-isocubes-dungeon/index.html#postscript",
    "href": "posts/2022-06-28-isocubes-dungeon/index.html#postscript",
    "title": "An isometric dungeon chase in R",
    "section": "Postscript",
    "text": "Postscript\nI lied a bit earlier. The actual first thought I had when seeing {isocubes} was pixel art. I wrote a post (exactly) one year ago where I converted some vectors into little pixel drawings using R’s image() function.\nIt’s fairly straightforward to convert those vectors into a format accepted by {isocubes}, which means you can have an isometric sprite of Link from The Legend of Zelda, or a rainbow version of the insect logo for this blog.\n\nI wrote a GitHub Gist with the code for these images, so feel free to steal. Let me know what you end up making."
  },
  {
    "objectID": "posts/2022-06-28-isocubes-dungeon/index.html#environment",
    "href": "posts/2022-06-28-isocubes-dungeon/index.html#environment",
    "title": "An isometric dungeon chase in R",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:28 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-05-01-dungeon/index.html",
    "href": "posts/2022-05-01-dungeon/index.html",
    "title": "Simple procedural dungeons in R",
    "section": "",
    "text": "Three iterations to expand four randomly-placed floor tiles into a cavern."
  },
  {
    "objectID": "posts/2022-05-01-dungeon/index.html#tldr",
    "href": "posts/2022-05-01-dungeon/index.html#tldr",
    "title": "Simple procedural dungeons in R",
    "section": "tl;dr",
    "text": "tl;dr\nI wrote a (very!) basic procedure to generate randomised ASCII-character tile-based dungeons for {r.oguelike}, an in-development roguelike-game-in-a-package for R."
  },
  {
    "objectID": "posts/2022-05-01-dungeon/index.html#generate-to-accumulate",
    "href": "posts/2022-05-01-dungeon/index.html#generate-to-accumulate",
    "title": "Simple procedural dungeons in R",
    "section": "Generate to accumulate",
    "text": "Generate to accumulate\nI wrote recently about the {r.oguelike} R package, which contains the beginnings of a roguelike game written entirely in R.\n\nA key element of roguelike games is that the dungeons should be procedurally generated1 so that the player gets a different one each time they play.\nThere are many algorithmic systems for dungeon creation, like wave function collapse, perlin noise, binary space partitioning, cellular automata, etc.2 See the talk by Herbert Wolverson at Roguelike Celebration, for example.\nI plan to take a look at these approaches in future, but I wanted to start with something a bit more… naïve. I just want a simple interconnected space that spawns with randomised rooms, corridors and galleries."
  },
  {
    "objectID": "posts/2022-05-01-dungeon/index.html#excavations",
    "href": "posts/2022-05-01-dungeon/index.html#excavations",
    "title": "Simple procedural dungeons in R",
    "section": "Excavations",
    "text": "Excavations\n\n️ℹ️ Note\nThe {r.oguelike} package is a work in progress and is developing at pace. Many things explained below may have been superseded or changed by the time you read this.\n\n\nInstall/launch\nYou can install the (currently work-in-progress) {r.oguelike} package from GitHub, via {remotes}.\n\ninstall.packages(\"remotes\")  # if not already installed\nremotes::install_github(\"matt-dray/r.oguelike\")\n\nYou can also launch RStudio in the browser with {r.oguelike} preinstalled, thanks to Binder3 (may take a couple of minutes to load):\n\n\n\n\n\n\n\nPrepare\nBefore we begin, note that we can talk about generative ‘dungeons’ in the context of connected rooms, like in The Binding of Isaac, or more freeform structures, like world maps in Dwarf Fortress. We’re going for the latter, which amounts to interconnected caverns.\nThe function we’ll be using is called generate_dungeon(), which prints to the console a cavern that differs each time you run it.4 You can alter the output using the arguments:\n\niterations is the number of times to ‘grow’ the caverns\nn_row and n_col give the map dimensions\nn_rooms is the number of rooms to spawn\nis_snake for a cavern that is continuous from left to right and wiggly\nis_organic for a more freeform vs ‘square’ look to the caverns\ncolour to print the output in colour\n\nYou can always run set.seed() before generate_dungeon() to create the same dungeon every time you run the function with the same parameters.\n\n\nDemo\nSo here’s a smallish dungeon with 3 growth iterations for 4 starting rooms, on a map with tile dimensions of 20 rows by 30 columns.\n\ndungeon &lt;- r.oguelike::generate_dungeon(3, 20, 30, 4)\n\nHere’s a screenshot of the output so you can see it in colour.\n\n\n\nClick for the actual console output.\n\n| - - - - - - - - - - - - - - - - - - - - - - - - - - - - | \n| # # # # # # . # # # # # # # # # # # # # # # # # # # # # | \n| # # . # . . . . # # # # # . # # # # # # # # # # # # # # | \n| # . . . . # . . # # # . . . . # # # # # # # # # # # # # | \n| # . . . . . . . . . . . . . . . # # # # # # # # # # # # | \n| . . . # . . # . . # # . . . . . # # # # # # # # # # # # | \n| . . . . # # # . # # # # # . . # # # # # # # # # # # # # | \n| . . # # # # # # # # # # # . # # # # # # # # # # # # # # | \n| . . . . # # # # # # # # . . . # # # # # # # # # # # # # | \n| . . . . # # # # # # # # # . . # # # # # # # # # # # # # | \n| . . . # # # # # # # . # . . . # # # # # # # # # # # # # | \n| . . . # # # # # # . . . . . . . # # # # # # # # # # # # | \n| . . . # # . . # . . # . . . . . . . . . # . . . # # # # | \n| . . . . . . . . . . . . . . . . . . . . . . . . # # # # | \n| . . # # . . . # . # . . . # . . . # # . . # . . # # # # | \n| # # # # . . . # . # # # # # . # . # # # # . . . # # # # | \n| # # # # # # # # # # # # # # # # # # # # . . . . # # # # | \n| # # # # # # # # # # # # # # # # # # # # . . . # # # # # | \n| # # # # # # # # # # # # # # # # # # # # # # . # # # # # | \n| - - - - - - - - - - - - - - - - - - - - - - - - - - - - | \n\nSo, in this example you can see we have a little cavern with some interconnected areas and a dead-end in the lower right. The tiles represent:\n\ncavern-floor tiles (black periods), which is where the character can traverse\ncave wall tiles (red hashmarks, which can’t be passed through)\na boundary around the edge (yellow hyphens and pipe symbols)\n\nNote that the actual output from the function—a matrix that represents the dungeon tiles—is returned invisibly.\n\n\nClick for a preview of the returned matrix.\n\n\n# Preview first 10 rows and columns\ndungeon[1:10, 1:10]\n\n[,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n[1,] \"|\"  \"-\"  \"-\"  \"-\"  \"-\"  \"-\"  \"-\"  \"-\"  \"-\"  \"-\"  \n[2,] \"|\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \".\"  \"#\"  \"#\"  \n[3,] \"|\"  \"#\"  \"#\"  \".\"  \"#\"  \".\"  \".\"  \".\"  \".\"  \"#\"  \n[4,] \"|\"  \"#\"  \".\"  \".\"  \".\"  \".\"  \"#\"  \".\"  \".\"  \"#\"  \n[5,] \"|\"  \"#\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \n[6,] \"|\"  \".\"  \".\"  \".\"  \"#\"  \".\"  \".\"  \"#\"  \".\"  \".\"  \n[7,] \"|\"  \".\"  \".\"  \".\"  \".\"  \"#\"  \"#\"  \"#\"  \".\"  \"#\"  \n[8,] \"|\"  \".\"  \".\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \n[9,] \"|\"  \".\"  \".\"  \".\"  \".\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \n[10,] \"|\"  \".\"  \".\"  \".\"  \".\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \n\n\n\nMore examples\nI think this process works best with a larger map grid (i.e. higher n_row and n_col values), more randomly-selected room start-points (higher n_rooms) and more growth steps (higher iterations).\nHere’s a larger maze-like dungeon:\n\nThis one came out more like a doughnut, with a central ‘pillar’ of rock-wall tiles:\n\nAnd this one is the result of using is_snake = TRUE, which creates a single, long snaking cavern:\n\nHere’s what happens if we set is_organic = FALSE and is_snake = TRUE. You get much obvious ‘rooms’ connected by small corridors:\n\nAnd if we set is_organic = FALSE and is_snake = FALSE we get something interconnected, but looks more ‘artificial’ or manmade with its mostly square walls:\n\nYou can see how the shape of these dungeons can be used as part of the storytelling. Is the player in a big cavern, hollowed out long ago by natural processes? Or perhaps in an underground city, chiselled-out by dwarves?"
  },
  {
    "objectID": "posts/2022-05-01-dungeon/index.html#proceed-the-procedure",
    "href": "posts/2022-05-01-dungeon/index.html#proceed-the-procedure",
    "title": "Simple procedural dungeons in R",
    "section": "Proceed the procedure",
    "text": "Proceed the procedure\nWhat’s the actual process for generating these maps? The procedure is very simple: lay a map made entirely of wall tiles; select random sites for rooms5 and replace with floor tiles; connect them with floor-tile corridors; expand the floor tiles generatively.\nThe corridors are particularly important. Laying corridors is a cheap way of making all areas of the dungeon accessible, which maximises the opportunity for exploration. Vanilla implementations of some other approaches, like using perlin noise, would need post-processing to make sure isolated caves are connected up.\n\nℹ️ Update\nAfter publishing this post, I had a quick play around with perlin noise for seeding dungeons. I put code and an example output in a small GitHub Gist. It uses noise_perlin() from the {ambient} package.\n\n\nFunctions\nThese steps are handled in the generate_dungeon() function by a few sub-functions, which looks a bit like this:\n\nm &lt;- .create_dungeon(n_row, n_col, n_rooms)\n\nm &lt;- .connect_dungeon(m, is_snake)\n\ni &lt;- 0\n\nwhile (i &lt; iterations) {\n  m &lt;- .grow_dungeon(m)\n  i &lt;- i + 1\n}\n\n.draw_dungeon(m, colour)\n\nNot much right? But what’s actually happening?\n\nFirst, .create_dungeon():\n\nprepares a matrix with dimensions n_row and n_col\nfills the matrix with tiles that represent non-traversable rocky cave walls (#)\nselects randomly an n_rooms number of non-edge tiles in that map and replaces them with traversable cavern-floor tiles (.)\n\nThen .connect_dungeon() (this function is run now if is_organic = TRUE, otherwise after .grow_dungeon() in the next step):\n\nconnects rooms with straight, right-angled corridors made of floor tiles (connected from lowest to highest if is_snake = TRUE, otherwise randomly)\n\nNow the iterative bit, .grow_dungeon(), which happens in a while-loop whose iterations are determined, which:\n\nspawns randomly with sample() a new cavern-floor tile to the north, south, east or west or current floor tiles\nperforms one round of spawning for the number of iterations provided\n\nFinally, .draw_dungeon():\n\nprints to the console, using cat(), each line of the matrix in turn\ncolours the output with the {crayon} package, if requested\n\n\nAnd we can look at the output at each step to see what’s going on:\n\nSo, the map started with four randomly-selected floor tiles; these were joined with straight, right-angled corridors; then three iterations expanded out the floor space from the existing floor tiles.\n\n\nSampling\nWhat does it mean to ‘expand out the floor space’? Let’s focus on the little bit of the .grow_dungeon() function that actually does this.\nHere’s a tiny example matrix of wall tiles with a floor tile in the middle:\n\nm &lt;- matrix(\"#\", 3, 3)  # wall tiles\nm[2, 2] &lt;- \".\"  # floor tiles\nm\n\n     [,1] [,2] [,3]\n[1,] \"#\"  \"#\"  \"#\" \n[2,] \"#\"  \".\"  \"#\" \n[3,] \"#\"  \"#\"  \"#\" \n\n\nNow we find the adjacent tiles and sample a random number of them to also become floor tiles.\n\nstart_tile &lt;- which(m == \".\")\n\nadjacent_tiles &lt;- c(\n  start_tile - 1,        # north\n  start_tile + 1,        # south\n  start_tile - ncol(m),  # east \n  start_tile + ncol(m)   # west \n)\n\nchange_to_floor &lt;- sample(\n  adjacent_tiles,\n  sample(1:length(adjacent_tiles), 1)\n)\n\nm[change_to_floor] &lt;- \".\"\n\nm\n\n     [,1] [,2] [,3]\n[1,] \"#\"  \"#\"  \"#\" \n[2,] \".\"  \".\"  \"#\" \n[3,] \"#\"  \".\"  \"#\" \n\n\nSo one, two, three, or all of the adjacent tiles could be turned to a floor tile.\nThis is then repeated for the number of iterations provided by the user."
  },
  {
    "objectID": "posts/2022-05-01-dungeon/index.html#going-deeper",
    "href": "posts/2022-05-01-dungeon/index.html#going-deeper",
    "title": "Simple procedural dungeons in R",
    "section": "Going deeper",
    "text": "Going deeper\nSo! I encourage you to play with this. Mess around with the arguments and see what you can come up with.\nWhat now for developing the package? Well, the {r.oguelike} package already has the rudiments of gameplay in the start_game() function, so the next step is to place the player, enemies and items into these dungeon spaces and let the player explore them.\nIdeally we can also create a system to place certain objects in certain spaces, like treasure in the far reaches of a dead-end, or a monster that’s in a narrow corridor and must be defeated to advance. Stuff like locked doors would be great too.\nThat’s much more roguelike-like, like, amirite?\n\nℹ️ Update\nJust after writing this post, I added code from generate_dungeon() into start_game(), so new games will now start with a procedural dungeon. It seems to work pretty well."
  },
  {
    "objectID": "posts/2022-05-01-dungeon/index.html#environment",
    "href": "posts/2022-05-01-dungeon/index.html#environment",
    "title": "Simple procedural dungeons in R",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:26 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] r.oguelike_0.1.0\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2023-06-11-apple-health-runs/index.html#tldr",
    "href": "posts/2023-06-11-apple-health-runs/index.html#tldr",
    "title": "Extract run data from Apple Health (redux)",
    "section": "tl;dr",
    "text": "tl;dr\nYou can use R to extract running details from a downloaded of your Apple Health data. The format of the data has changed since I last tried this, so I re-wrote my code."
  },
  {
    "objectID": "posts/2023-06-11-apple-health-runs/index.html#on-your-marks",
    "href": "posts/2023-06-11-apple-health-runs/index.html#on-your-marks",
    "title": "Extract run data from Apple Health (redux)",
    "section": "On your marks",
    "text": "On your marks\nIn 2021 I extracted my running activities from my Apple Health data using the {xml2} package. You can read there for some theory and background.\nAt that point I’d been running for one year. I’m nearly at 500 runs, so I thought I would re-execute my code with the latest data. Alas, the original code no longer works because Apple seems to have updated the format of the XML file they provide.\n\n❗️ Update\nI have since re-rendered this post after passing 500 runs.\n\n\nSo I’ve written a new function that takes a path to the zipped download of my Apple Health data and outputs a dataframe of time and distance data, with one row per run."
  },
  {
    "objectID": "posts/2023-06-11-apple-health-runs/index.html#get-set",
    "href": "posts/2023-06-11-apple-health-runs/index.html#get-set",
    "title": "Extract run data from Apple Health (redux)",
    "section": "Get set",
    "text": "Get set\nI followed the same steps as before to get my Apple Health data off my phone.\nI smashed together a quick function to unzip the file to a temporary location and then extract workout data using the the {xml2} package. There’s a bit of base R wrangling to output a dataframe with a row per run workout, focusing on total time and distance.\n\n\nClick to expand the function definition\n\n\nget_run_distances &lt;- function(zip_path) {\n  \n  # Unzip Apple Health export to temporary location\n  message(\"Unzipping and reading XML\")\n  temp &lt;- tempdir()\n  unzip(zipfile = zip_path, exdir = temp)\n  xml_in &lt;- xml2::read_xml(file.path(temp, \"apple_health_export\", \"export.xml\"))\n  unlink(temp)\n  \n  # Isolate workouts only and convert to an R list object\n  message(\"Isolating workouts from XML\")\n  wo_in &lt;- xml2::xml_find_all(xml_in, \"//Workout\") |&gt; xml2::as_list()\n  \n  # Pre-allocate a list to be filled with output data\n  wo_total &lt;- length(wo_in)\n  wo_out &lt;- vector(\"list\", wo_total)\n  \n  # For each viable workout, extract the details\n  message(\"Iterating over workouts to extract run data\")\n  for (wo_n in seq(wo_total)) {\n    \n    # Extract details for current workout\n    wo &lt;- wo_in[[wo_n]]\n    wo_attrs &lt;- attributes(wo)  # the data is stored as attributes\n    is_run &lt;- \n      wo_attrs[[\"workoutActivityType\"]] == \"HKWorkoutActivityTypeRunning\"\n    \n    # If the workout wasn't a run, then skip to the next workout\n    if (!is_run) next\n    \n    # if it is a run, then extract the data to a single-row dataframe\n    if (is_run) {\n      \n      # There can be more than one element named 'WorkoutStatistics'. We want to \n      # get the one with distance information and extract the details.\n      wo_stats &lt;- wo[grep(\"WorkoutStatistics\", names(wo))]\n      wo_stats_types &lt;- lapply(wo_stats, \\(x) attr(x, c(\"type\")))\n      dist_type &lt;- \"HKQuantityTypeIdentifierDistanceWalkingRunning\"\n      dist_index &lt;- which(wo_stats_types == dist_type)\n      wo_dist &lt;- wo_stats[[dist_index]]\n      \n      # Prepare single-row dataframe and add to the pre-allocated list\n      wo_details &lt;- data.frame(\n        source = wo_attrs[[\"sourceName\"]],\n        start = as.POSIXct(wo_attrs[[\"startDate\"]]),\n        end = as.POSIXct(wo_attrs[[\"endDate\"]]),\n        distance_km = attr(wo_dist, \"sum\") |&gt; as.numeric() |&gt; round(2)\n      )\n      wo_details[[\"duration_s\"]] &lt;- \n        as.numeric(wo_details[[\"end\"]] - wo_details[[\"start\"]], units = \"secs\")\n      wo_out[[wo_n]] &lt;- wo_details\n      \n    }\n    \n  }\n  \n  # Convert to dataframe, select columns\n  message(\"Combining data\")\n  wo_out_df &lt;- do.call(rbind, wo_out)\n  wo_out_df[, c(\"source\", \"start\", \"end\", \"duration_s\", \"distance_km\")]\n  \n}\n\n\nI won’t go through it line by line, but there’s some commentary to explain what’s happening at each step. It does what I need it to do for now, but no doubt there’s some refactoring to be done.\nThere’s a few things to note:\n\nI’m more comfortable handling R objects, so I converted early to a list with xml2::as_list(). Awkwardly, the data in the list object was stored as attributes to each element.\nThe distance data is stored in an element called ‘WorkoutStatistics’, but more than one element will have this name. We first have to isolate the element that is of the correct type, which has the name ‘HKQuantityTypeIdentifierDistanceWalkingRunning’.\nI converted the start and end variables to datetime class (POSIXct) and subtracted one from the other to get the duration of the run. This yields the ‘difftime’ class that can be converted to seconds with as.numeric() and the argument units = \"secs\".\nThere’s no input handling, because this was quick and for ‘fun’, lol."
  },
  {
    "objectID": "posts/2023-06-11-apple-health-runs/index.html#go",
    "href": "posts/2023-06-11-apple-health-runs/index.html#go",
    "title": "Extract run data from Apple Health (redux)",
    "section": "Go",
    "text": "Go\nSo, to use the function you pass a path to where your zipped Apple Health export lives. Mine is in my ‘Documents’ folder.\n\nruns &lt;- get_run_distances(\"~/Documents/data/export.zip\")\n\nUnzipping and reading XML\n\n\nIsolating workouts from XML\n\n\nIterating over workouts to extract run data\n\n\nCombining data\n\n\nI recorded all my runs with the Nike Run Club app, so I’ll filter out duplicates where I dual-recorded with Apple’s Workout app. I think I accidentally started the app by mistake a couple of times, so we’ll only grab runs of over 1 km. I’ll also convert the seconds to a friendlier-looking ‘period’ class using {lubridate}1.\nHere’s the most recent few:\n\nruns &lt;- runs[runs$source == \"Nike Run Club\" & runs$distance_km &gt; 1, ]\nruns$duration &lt;- lubridate::seconds_to_period(runs$duration_s)\nruns &lt;- runs[, c(\"start\", \"distance_km\", \"duration\")]\nrow.names(runs) &lt;- NULL\ntail(runs)\n\n                  start distance_km duration\n497 2023-06-15 08:45:46        6.39  30M 36S\n498 2023-06-17 11:07:03       10.52  50M 58S\n499 2023-06-18 10:36:58       10.42  51M 29S\n500 2023-06-22 08:14:51        6.34  30M 43S\n501 2023-06-24 08:47:05       10.13  48M 43S\n502 2023-06-25 09:20:20       12.12  59M 48S\n\n\nFor my own tracking purposes, I’ve run:\n\n502 times\nfor a total distance of 4119 km\nfor a total duration of about 14 days\n\nAnd I can recreate one of the plots from the old post while we’re here:\n\nplot(\n  x = runs$start, \n  y = runs$distance_km, \n  las = 1,  # rotate y-axis labels\n  main = \"Runs captured with Nike Run Club in Apple Health\",\n  xlab = \"Date\",\n  ylab = \"Distance (km)\"\n)\n\n\n\n\nSome patterns are obvious. For example, there’s lots of 5 km runs until about mid-2021, when it hops to more like 7 km. That’s when I started running for 30 mins at a time, rather than for 5 km specifically.\nI’m pretty happy at these two distances, obviously, but maybe I should do more 21.1 km half-marathons. Or a full marathon? No no, that’s foolish: it would expand my y-axis too much and make it harder to observe patterns at shorter distances, amirite."
  },
  {
    "objectID": "posts/2023-06-11-apple-health-runs/index.html#environment",
    "href": "posts/2023-06-11-apple-health-runs/index.html#environment",
    "title": "Extract run data from Apple Health (redux)",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:25 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] lubridate_1.9.2\n\nloaded via a namespace (and not attached):\n [1] digest_0.6.31     fastmap_1.1.1     xfun_0.39         knitr_1.43.1     \n [5] htmltools_0.5.5   timechange_0.2.0  rmarkdown_2.23    generics_0.1.3   \n [9] xml2_1.3.4        cli_3.6.1         compiler_4.3.1    rstudioapi_0.14  \n[13] tools_4.3.1       evaluate_0.21     yaml_2.3.7        rlang_1.1.1      \n[17] jsonlite_1.8.7    htmlwidgets_1.6.2"
  },
  {
    "objectID": "posts/2021-08-27-dehex-app/index.html",
    "href": "posts/2021-08-27-dehex-app/index.html",
    "title": "Adding a Shiny app to {dehex}",
    "section": "",
    "text": "Use the {dehex} app to generate a random hex code and learn how to interpret it by eye."
  },
  {
    "objectID": "posts/2021-08-27-dehex-app/index.html#tldr",
    "href": "posts/2021-08-27-dehex-app/index.html#tldr",
    "title": "Adding a Shiny app to {dehex}",
    "section": "tl;dr",
    "text": "tl;dr\nThe {dehex} package now contains a Shiny app that you can use to walk through the process of reading a colour hex code, as per David DeSandro’s method."
  },
  {
    "objectID": "posts/2021-08-27-dehex-app/index.html#dehexcellent",
    "href": "posts/2021-08-27-dehex-app/index.html#dehexcellent",
    "title": "Adding a Shiny app to {dehex}",
    "section": "{dehex}cellent",
    "text": "{dehex}cellent\nIn the last post I introduced the R package {dehex}. Its purpose is to help me (you?) look at a colour hex code and be able to ‘read’ roughly what colour it is without resorting to a lookup.\n\n\n\nI promise this is a hex sticker, but it’s background is white, whoops.\n\n\nSo, the computer-friendly code ‘#C68738’ can be interpreted by your brain as the human-friendly phrase ‘middle washed orange’.\nThe package only exists because of a mind-melting talk by David DeSandro and his recommendation of the approach due to his colourblindness. I’m also colourblind and would prefer to ‘solve’ a colour than try and guess what it is from a sample."
  },
  {
    "objectID": "posts/2021-08-27-dehex-app/index.html#an-apportunity",
    "href": "posts/2021-08-27-dehex-app/index.html#an-apportunity",
    "title": "Adding a Shiny app to {dehex}",
    "section": "An apportunity",
    "text": "An apportunity\nThe {dehex} package uses a number of functions to help you through the steps of DeSandro’s method. It prints things to the R console to help you.1\nThere’s dh_shorten() to simplify the code to three digits; dh_graph() to make an RGB chart of your shortened hex code; dh_guide() to preview hue, saturation and lightness profiles to match against your shortened hex code; and dh_solve() to provide you with ‘the answer’, along with RGB charts for the nearest hue, saturation and lightness (HSL) profiles.\n\n\n\nAn RGB bar chart printed by {dehex} to the console, with guides for hue, saturation and lightness.\n\n\nThe trouble is that you have to know what order to run these functions. The documentation, README and blog post provide this information, as well as DeSandro’s resources, but it would be ideal to have an option to showcase {dehex} and learn stuff without needing to type any functions yourself.\nSo, I’ve created a simple Shiny app and made it available as the dh_app() function in {dehex}.2 I consider it ‘in development’ (this absolves me of liability if I say this, yes?).\nThe app depends on two packages: {shiny} and {bslib}. You’ll have to install these separately to {dehex} by using install.packages(c(\"shiny\", \"bslib\")) (if you haven’t already installed them on your machine).\nThese aren’t dependencies3 because you shouldn’t be forced to install them if you have no plans on using the app.4\nAside: what’s fun is I get to make further use of the Shiny app README badge I invented (?) with my {badgr} package, like so:"
  },
  {
    "objectID": "posts/2021-08-27-dehex-app/index.html#lolwat",
    "href": "posts/2021-08-27-dehex-app/index.html#lolwat",
    "title": "Adding a Shiny app to {dehex}",
    "section": "lolwat?",
    "text": "lolwat?\nThe app is pretty simple.\nThere’s a big blue button labelled ‘Generate’. Click it and a random six-digit colour hex code is generated.\n\n\n\n‘That is the question.’\n\n\nYour then proceed through the numbered tabs to learn about each step, get some quick bullets of explanation, and then have the option to reveal help via some outputs from functions in the {dehex} package. There’s also a link to the relevant slide of David DeSandro’s talk.\nAs a beginner, you’ll want to reveal the tips to get maximum help. As you get better, you may not need to reveal them anymore.\nThe final tab provides the solution. You should have the answer by the time you get to this tab, but it reveals to you the hue, saturation and lightness RGB profiles that best match the generated hex code, along with the answer as a string, and a sample of the colour itself.\nThe app is purposefully low on interactivity. It’s just a little sidequest that bundles the steps and relevant {dehex} functions, in case you don’t want to run the functions from R itself.5\nOriginally I was going to just create an app to go on the web for anyone to use, but why would they want to see outputs from {dehex}? I also think that it’s worth reading DeSandro’s blog and watching or reading his talk in the first instance.\nAs ever, send suggestions, issues and pull requests in the GitHub repo for the package."
  },
  {
    "objectID": "posts/2021-08-27-dehex-app/index.html#environment",
    "href": "posts/2021-08-27-dehex-app/index.html#environment",
    "title": "Adding a Shiny app to {dehex}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-08 19:08:45 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2021-10-03-squirrel/index.html#tldr",
    "href": "posts/2021-10-03-squirrel/index.html#tldr",
    "title": "{ActionSquirrel}: a game in the R console",
    "section": "tl;dr",
    "text": "tl;dr\nI created the {ActionSquirrel} package. It contains an {R6}-powered playable game for the R console, which includes images (well, emoji) and sounds (thanks to the {sonify} package)."
  },
  {
    "objectID": "posts/2021-10-03-squirrel/index.html#gamers",
    "href": "posts/2021-10-03-squirrel/index.html#gamers",
    "title": "{ActionSquirrel}: a game in the R console",
    "section": "GameRs",
    "text": "GameRs\nI’ve written before about the idea of games that you can play in R. For example, I replicated a text-based version of Pokemon Blue’s Safari Zone. This was made possible by using the {R6} package by Winston Chang, which provides an implementation of object-oriented programming (OOP) in R.\nAn R6 class has ‘fields’ (variables) and ‘methods’ (functions) that can adjust the field values. This means you can manipulate the state of the object over time. You can read more in the {R6} documentation or in Hadley Wickham’s Advanced R book.\nSo you could create a class with a field that provides the location of a character, then let the user apply a method to overwrite that location. If you print the ‘before’ and ‘after’ states, you’ll get the impression of movement for the character."
  },
  {
    "objectID": "posts/2021-10-03-squirrel/index.html#winter-is-coming",
    "href": "posts/2021-10-03-squirrel/index.html#winter-is-coming",
    "title": "{ActionSquirrel}: a game in the R console",
    "section": "Winter is coming",
    "text": "Winter is coming\nWith this in mind, I made a game and put it in the {ActionSquirrel} package. It’s pretty simple; consider it a concept.\nYou play as a squirrel in a woodland, hoarding nuts before winter sets in. You have to collect 8 nuts in 30 moves or you won’t survive. To make matters worse, there’s an owl on patrol that wants to eat you.\nThe package contains a single ‘ActionSquirrel’ class. It has fields for the location of game objects—emojis for a tree, a squirrel, an owl and a nut—on a grid.1 It has a method to move the squirrel around the grid, which also executes code to assesses and change other field states. For example, it can check how many moves have happened, can adjust the owl’s position and spawn a new nut after the last one was collected."
  },
  {
    "objectID": "posts/2021-10-03-squirrel/index.html#demo",
    "href": "posts/2021-10-03-squirrel/index.html#demo",
    "title": "{ActionSquirrel}: a game in the R console",
    "section": "Demo",
    "text": "Demo\nYou can install from GitHub.\n\ninstall.packages(\"remotes\")  # if not installed already\nremotes::install_github(\"matt-dray/ActionSquirrel\")\n\nNote that I’ve developed and tested this only in RStudio v1.4.1717 with R v4.1.1 running on macOS Big Sur. I think emoji rendering, console-clearing and the sound effects may not work on all platforms and setups.\nBasic instructions are printed when the package is attached.\n\nlibrary(ActionSquirrel)\n\nWelcome to {ActionSquirrel}!\n* New game: x &lt;- ActionSquirrel$new()\n* Move:     e.g. x$move('up')\n* Info:     x$pause()\n\n\n\nStart\nInitiate an object with the ActionSquirrel class by assigning ActionSquirrel$new() to a name (I’ll use x for demo purposes). This clears the console and generates a forest grid that contains the squirrel, a nut and an owl, along with tallies for moves and nuts collected.\n\nx &lt;- ActionSquirrel$new()\n\n\f🌳 🌳 🌳 🌳 🌳 \n🌳 🌳 🌰 🌳 🌳 \n🌳 🌳 🌳 🐿 🌳 \n🌳 🦉 🌳 🌳 🌳 \n🌳 🌳 🌳 🌳 🌳 \nMoves: 0 \nNuts: 0\n\n\nMethods are applied to your object with the dollar symbol accessor2 in the form object$method(). We can use the pause() method to get game instructions, for example.\n\nx$pause()\n\nP A U S E\n * Aim:       get eight nuts before winter (30 moves)\n * Move:      e.g. x$move('up')\n * Chain:     e.g. x$move('u')$move('r')\n * New game:  x &lt;- ActionSquirrel$new()\n * Info:      x$pause()\n * Source:    github.com/matt-dray/ActionSquirrel\n\n\n\n\nState\nTo understand a little more the mechanics of R6-classes, you could take a peek at the current state of the fields and methods by printing your ActionSquirrel-class object.\nIt isn’t necessary for gameplay purposes to see this information, but for learning purposes it provides a sort-of ‘meta’ view of the current game state. (It will also help you ‘hack’ the game, more on that later!)\n\nx\n\n&lt;ActionSquirrel&gt;\n  Public:\n    active: TRUE\n    clone: function (deep = FALSE) \n    initialize: function () \n    move: function (where = c(\"up\", \"down\", \"left\", \"right\")) \n    moves: 0\n    n_loc: 8\n    nuts: 0\n    o_loc: 17\n    overworld: 🌳 🌳 🌳 🌳 🌳 🌳 🌳 🌰 🌳 🌳 🌳 🌳 🌳 🐿 🌳 🌳 🦉 🌳 🌳 🌳 🌳 🌳 🌳 🌳 🌳\n    pause: function () \n    s_loc: 14\n\n\nThe most relevant of these are the moves and nuts counts; the *_loc values that specify the location of the squirrel, owl and nut in the overworld vector; and the move() method for controlling the player.\n\n\nMove\nYou move the squirrel through the forest with the move() method. It has one argument, where, that takes the directions \"up\", \"down\", \"left\" and \"right\" (you can also just supply the first letter of the direction).\n\nx$move(\"up\")\n\n\f🌳 🌳 🌳 🌳 🌳 \n🌳 🌳 🌰 🐿️ 🌳 \n🌳 🦉 🌳 🌳 🌳 \n🌳 🌳 🌳 🌳 🌳 \n🌳 🌳 🌳 🌳 🌳 \nMoves: 1 \nNuts: 0\n\n\nCongratulations: your move tally has increased by one. You may also have noticed that the owl moved up one space as well; it moves one space vertically or horizontally, or stays still, with equal probability.\nI built in collision detection, so you can’t exceed the limits of the grid by trying to go left if you’re already on the leftmost edge, for example.\nNote that you can also take more than one move at a time (elite gamer tech) by ‘chaining’ methods, like x$move(\"up\")$move(\"left\"), but this is risky because you might collide with the owl.\nImportantly, the whole R console is cleared before the updated grid is printed. This gives an impression of animated graphics, since the console overwrites the previous state with the current state.\nNow to collect the nut.\n\nx$move(\"left\")\n\n\f🌳 🌳 🌳 🌳 🌳 \n🌳 🌳 🐿️ 🌳 🌳 \n🌳 🦉 🌳 🌳 🌳 \n🌰 🌳 🌳 🌳 🌳 \n🌳 🌳 🌳 🌳 🌳 \nMoves: 2 \nNuts: 1\n\n\nCongratulations, your nut tally has increased by one and a new nut has spawned in a random location. Collect at least eight nuts, or you won’t survive winter.\n\n\nOwl\nYou’ll get a game over if the owl eats you (i.e. you occupy the same spot). So if you move left and the owl happens to move up…\n\nx$move(\"left\")\n\n\f🌳 🌳 🌳 🌳 🌳 \n🌳 💀 🌳 🌳 🌳 \n🌳 🌳 🌳 🌳 🌳 \n🌰 🌳 🌳 🌳 🌳 \n🌳 🌳 🌳 🌳 🌳 \nMoves: 3 \nNuts: 1\nY O U   D I E D ! \nThe owl ate you.\nG A M E   O V E R \n* New game: x &lt;- ActionSquirrel$new() \n* Source:   github.com/matt-dray/ActionSquirrel\n\n\nThe location of your death is marked with a skull and you’ll get a game over with information about what happened. At this point, the active field of the class is set to FALSE, which prevents you from moving again.\n\n\n\nDefinitely it’s harder than Dark Souls.\n\n\n\n\nWinter\nAfter 30 turns the game will end because you’ve reached winter. You’ll get a victory screen if you collected 8 nuts, otherwise a failure screen.\nAside: {R6} allows for ‘public’ and ‘private’ fields and methods. I’ve used public methods for the ActionSquirrel class, so that users can see the contents and state of the class and manipulate them. I think this is good for learning purposes.\nIt also means that we can ‘hack’ the game to the end state by overwriting the number of nuts and moves remaining! First, a victory after having collected eight nuts or more:\n\nx &lt;- ActionSquirrel$new()\n\n\f🌳 🌳 🌳 🌳 🌳 \n🌳 🌳 🌰 🌳 🌳 \n🌳 🌳 🌳 🐿 🌳 \n🌳 🦉 🌳 🌳 🌳 \n🌳 🌳 🌳 🌳 🌳 \nMoves: 0 \nNuts: 0\n\nx$moves &lt;- 29\nx$nuts &lt;- 10\nx$move()\n\n\f🐿️ 💤 🌰 🌰 🌰 \n🌰 🌰 🌰 🌰 🌰 \n🌰 🌰 🎄 ⛄ 🎄 \n🌨 ⛄ 🎄 ⛄ 🎄 \n⛄ ⛄ 🌨 🎄 🌨 \nMoves: 30 \nNuts: 10\nY O U   S U R V I V E D ! \nSufficient winter nut cache!\nG A M E   O V E R \n* New game: x &lt;- ActionSquirrel$new() \n* Source:   github.com/matt-dray/ActionSquirrel\n\n\nOur little squirrel friend is hibernating with the nut cache nearby. Meanwhile, the signs of winter fill the rest of the grid. Your success is confirmed in a printed statement.\nAnd what if we end the game with an insufficient nut cache?\n\nx &lt;- ActionSquirrel$new()  # start new game\n\n\f🌳 🌳 🌳 🌳 🌳 \n🌳 🌳 🌰 🌳 🌳 \n🌳 🌳 🌳 🐿 🌳 \n🌳 🦉 🌳 🌳 🌳 \n🌳 🌳 🌳 🌳 🌳 \nMoves: 0 \nNuts: 0\n\nx$moves &lt;- 29\nx$nuts &lt;- 4\nx$move()\n\n\f🐿️ 💀 🌰 🌰 🌰 \n🌰 ❌ ❌ ❌ ❌ \n🎄 🎄 🌨 🎄 ⛄ \n🎄 ⛄ 🎄 ⛄ 🎄 \n⛄ 🎄 🌨 ⛄ ⛄ \nMoves: 30 \nNuts: 4\nY O U   D I E D ! \nInsufficient winter nut cache!\nG A M E   O V E R \n* New game: x &lt;- ActionSquirrel$new() \n* Source:   github.com/matt-dray/ActionSquirrel\n\n\nOh dear.\n\n\nSFX\nSo we’ve got a player character, an enemy, collectibles, a goal and ‘animated’ visuals. The only thing missing is audio.\nLuckily, you can force your computer to make noise with the {sonify} package. I’ve used it before in this blog to represent COVID-19 data in audio form. For {ActionSquirrel}, I used it to make short, simple beeps to indicate a move, nut capture, collision with the edge of the grid, a win and a death. Here’s what those sound like, respectively:\n\n\n\n\n\nThe death sound is a flatline, because of course it is."
  },
  {
    "objectID": "posts/2021-10-03-squirrel/index.html#r6-7-8",
    "href": "posts/2021-10-03-squirrel/index.html#r6-7-8",
    "title": "{ActionSquirrel}: a game in the R console",
    "section": "R6, 7, 8",
    "text": "R6, 7, 8\nSo, give it a go. What’s your high score? How guilty did you feel when the squirrel died?\nThere’s lots of ways this could be improved. Maybe the owl could have ‘AI’ that encourages it to move towards the player or nut. Maybe there could be another enemy with different movement patterns. I welcome any bug reports or suggestions in the GitHub repo for {ActionSquirrel}, or maybe you can fork it and make it better.\nThis post completes my R6 OOP hattrick alongside posts on Animal Crossing and Pokémon. Next time I might move onto {R7}, a new package for OOP in R that’s being coordinated and developed in the open by the R Consortium."
  },
  {
    "objectID": "posts/2021-10-03-squirrel/index.html#environment",
    "href": "posts/2021-10-03-squirrel/index.html#environment",
    "title": "{ActionSquirrel}: a game in the R console",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-08 12:34:07 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ActionSquirrel_0.1.0\n\nloaded via a namespace (and not attached):\n [1] digest_0.6.31     R6_2.5.1          signal_0.7-7      fastmap_1.1.1    \n [5] sonify_0.0-1      xfun_0.39         knitr_1.43.1      htmltools_0.5.5  \n [9] rmarkdown_2.23    tuneR_1.4.4       cli_3.6.1         compiler_4.3.1   \n[13] rstudioapi_0.14   tools_4.3.1       evaluate_0.21     yaml_2.3.7       \n[17] rlang_1.1.1       jsonlite_1.8.7    htmlwidgets_1.6.2 MASS_7.3-60"
  },
  {
    "objectID": "posts/2022-09-07-earl22/index.html",
    "href": "posts/2022-09-07-earl22/index.html",
    "title": "EARL 22: {a11ytables} for better spreadsheets",
    "section": "",
    "text": "Please don’t sue me for my fan art, Microsoft."
  },
  {
    "objectID": "posts/2022-09-07-earl22/index.html#tldr",
    "href": "posts/2022-09-07-earl22/index.html#tldr",
    "title": "EARL 22: {a11ytables} for better spreadsheets",
    "section": "tl;dr",
    "text": "tl;dr\nI presented some slides at the EARL 2022 conference about {a11ytables}: an R package that helps automate the production of reproducible and accessible spreadsheets, with a focus on publication of government statistics."
  },
  {
    "objectID": "posts/2022-09-07-earl22/index.html#counting-sheets",
    "href": "posts/2022-09-07-earl22/index.html#counting-sheets",
    "title": "EARL 22: {a11ytables} for better spreadsheets",
    "section": "Counting sheets",
    "text": "Counting sheets\nThe UK government publishes a lot of spreadsheets that contain statistical tables. Compared to each other—and to themselves over time—these files are often:\n\ninconsistent in structure (e.g. cover or contents sheets are missing)\ninconsistent in style (e.g. different fonts, different shorthand codes for suppressed values)\ninaccessible to users of assistive technology (e.g. they contain blank columns or unannounced footnotes)\n\nLuckily, the government’s Analysis Function released some excellent guidance for releasing statistics in spreadsheets, with particular attention to accessibility.\nThe government’s grassroots Reproducible Analytical Pipelines (RAP) movement is also growing at pace. RAP’s purpose is to overcome a legacy of fragmented point-and-click processes into code-driven end-to-end pipelines that improve speed, accuracy and reproducibility; including workflows that generate statistical spreadsheets for publication.\nIt will take time for these approaches to become 100% embedded across government, due to factors like the inevitable inertia that comes with trying to leave legacy processes behind.1\nHow can we grease the wheels?"
  },
  {
    "objectID": "posts/2022-09-07-earl22/index.html#spreadsheet-socialism",
    "href": "posts/2022-09-07-earl22/index.html#spreadsheet-socialism",
    "title": "EARL 22: {a11ytables} for better spreadsheets",
    "section": "Spreadsheet socialism",
    "text": "Spreadsheet socialism\nI work in a government team that publishes data2 and I wanted to make it easier for us to:\n\ngenerate spreadsheets via R (the most commonly used language here)\nbe able to reproduce outputs in future (i.e. we produce files monthly, quarterly, annually)\napply accessible styles and structure (so we don’t have to spend ages with checklists and point-and-click interfaces)\n\nFirst I looked for existing code-based solutions and found the Python package gptables, written by the Analysis Function Core Team. At the time, the package created spreadsheets in accordance with an older version of the best-practice guidance. There was no R-native solution either, though gptables could be accessed in R via {reticulate}.\nAs a result, I created {a11ytables}: an R package to generate spreadsheets that meet the latest best-practice guidance for releasing statistics in spreadsheets.\n\nIt can be downloaded from GitHub (currently v0.1), which also installs {openxlsx} (which does all the hard work of building a workbook) and {pillar} (for prettier printing).\n\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"co-analysis/a11ytables\")\nlibrary(a11ytables)\n\nDo submit issues or pull requests to the repo if you have ideas or solutions."
  },
  {
    "objectID": "posts/2022-09-07-earl22/index.html#easy-does-it",
    "href": "posts/2022-09-07-earl22/index.html#easy-does-it",
    "title": "EARL 22: {a11ytables} for better spreadsheets",
    "section": "Easy does it",
    "text": "Easy does it\nA major aim of {a11ytables} is to make it easy for stats producers to more easily complete the last mile of their ‘data-in to spreadsheet-out’ pipeline. As such, the workflow is relatively simple and is composed of only three functions (arguments ignored for brevity):\n\ncreate_a11ytable() |&gt; \n  generate_workbook() |&gt;\n  openxlsx::saveWorkbook()\n\nBasically:\n\nPass information and data as arguments to create_a11ytable(), which creates a special a11ytables-class dataframe representation of your spreadsheet content\nPass that object to generate_workbook() to convert it to a Workbook-class object that applies the required structure and styling\nUse saveWorkbook() from the {openxlsx} package to write the spreadsheet output to an xlsx file\n\nI recommend that you read the vignettes and function documentation on the package website to better understand how to use {a11ytables} and to learn about its caveats3; I won’t go into depth in this post."
  },
  {
    "objectID": "posts/2022-09-07-earl22/index.html#over-easy-does-it",
    "href": "posts/2022-09-07-earl22/index.html#over-easy-does-it",
    "title": "EARL 22: {a11ytables} for better spreadsheets",
    "section": "Over-easy does it",
    "text": "Over-easy does it\nI wrote some slides about the package and presented it at the EARL 2022 conference4 in London. Yes, to expose the package, but also to make a wider point about the general importance of reproducibility, accessibility and the power of reusable tools.\nYou can access the slides for my talk on the web, or find the source on GitHub.\nThe slides show an example of some tables published by the UK government—the latest UK egg statistics5—and walks through how they might be developed using {a11ytables}.\n\n\n\n\n\n\n\n\nI wrote the slides in Quarto and made heavy use of {quartostamp}—my package of Quarto helpers exposed as an RStudio Addin—which I wrote about recently. Click ‘settings’ in the hamburger menu (lower left) to go fullscreen, see presenter notes, or get a slide overview."
  },
  {
    "objectID": "posts/2022-09-07-earl22/index.html#environment",
    "href": "posts/2022-09-07-earl22/index.html#environment",
    "title": "EARL 22: {a11ytables} for better spreadsheets",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:04 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2   compiler_4.3.1      fastmap_1.1.1      \n [4] cli_3.6.1           tools_4.3.1         htmltools_0.5.5    \n [7] xaringanExtra_0.7.0 rstudioapi_0.14     yaml_2.3.7         \n[10] rmarkdown_2.23      knitr_1.43.1        jsonlite_1.8.7     \n[13] xfun_0.39           digest_0.6.31       rlang_1.1.1        \n[16] evaluate_0.21"
  },
  {
    "objectID": "posts/2022-09-13-potato/index.html#tldr",
    "href": "posts/2022-09-13-potato/index.html#tldr",
    "title": "You are a halfling, trying to harvest {potato}",
    "section": "tl;dr",
    "text": "tl;dr\nPlay an interactive version of ‘Potato’—a one-page halfling-themed role-playing game (RPG) by Oliver Darkshire (Twitter, Patreon)—in your R console with the {potato} package."
  },
  {
    "objectID": "posts/2022-09-13-potato/index.html#potato",
    "href": "posts/2022-09-13-potato/index.html#potato",
    "title": "You are a halfling, trying to harvest {potato}",
    "section": "Potato?",
    "text": "Potato?\nI’ve recently put together a GitHub repo to collect together a bunch of neat games that you can play. The twist? They were built using R.\nYes, R: ‘a FrEe SoFtWaRe EnViRoNmEnT fOr StAtIsTiCaL cOmPuTiNg AnD gRaPhIcS’.\nI think R is best suited to either text-based user-input games on the R console, or via a more dedicated interface, like Shiny.1\nIn this vein, Oliver Darkshire wrote an excellent ‘one-page role-playing game’ called Potato that seems ripe for plucking (well, I guess you ‘pull’ potatoes?) into an R implementation. A simple text interface; updating and tracking variables; clear win conditions. The basic desire to avoid action and simply tend to vegetables.\nSo… {potato}."
  },
  {
    "objectID": "posts/2022-09-13-potato/index.html#potato-1",
    "href": "posts/2022-09-13-potato/index.html#potato-1",
    "title": "You are a halfling, trying to harvest {potato}",
    "section": "Potato!",
    "text": "Potato!\nYou can install the {potato} package from GitHub thanks to {remotes}:\n\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/potato\")\n\nYou start a game with:2\n\npotato::potato()\n\n--- POTATO ---\n\nA (one-page) RPG by Oliver Darkshire (@deathbybadger)\nThese and more at https://www.patreon.com/deathbybadger\n\nYou are a halfling, just trying to exist.\nMeanwhile, the dark lord rampages across the world.\nYou do not care about this. You are trying to farm potatoes.\nBecause what could a halfling possibly do about it anyway?\n\nKeep rolling until DESTINY, POTATO or ORC reach 10/10.\n\n- DESTINY: 0/10\n- POTATO:  0/10\n- ORC:     0/10\n- PAY:     1 POTATO to remove 1 ORC\n\nPress [ENTER] to roll... \nThe console will prompt you for input as you play. It’s basically luck-based die rolls, though you will have the chance to intervene with an option to hurl a certain number of precious potatoes at an orc to make it clear off.\nYou win when POTATO reaches 10. You lose when ORC reaches 10. You also… ‘don’t lose’… if DESTINY reaches 10.\nPlease see the one-page RPG that David put together and/or support him on Patreon if you like it or any of the other hilarious one-page RPGs that he’s made.\nI cannot stress enough that this is his work and all I’ve done is put it into an obscure format that literally three people might look at for a laugh."
  },
  {
    "objectID": "posts/2022-09-13-potato/index.html#potato-2",
    "href": "posts/2022-09-13-potato/index.html#potato-2",
    "title": "You are a halfling, trying to harvest {potato}",
    "section": "Potato…",
    "text": "Potato…\nI could just leave it there, but I think the interesting thing for R users are the various little methods required to make the ‘game’ function.\nTo display text to the user in the console, we can use cat() or message(). I kinda prefer message() because the user has more control over it in general, like suppressMessages() (which does what you think it does).\n\nmessage(\"Hello world!\")\n\nHello world!\nThere’s a subtlety in presentation too, which is that the two functions return text in different colours.\nThe game loop itself runs inside a repeat, which is maybe uncommon for some R users. We’re mostly used to for or while loops for iteration with a known set of things to iterate over, whereas repeat will keep going until we specify a break.\n\nrepeat {\n  \n  if (keep_going) {\n    do_something()\n  }\n  \n  if (!keep_going) {\n    break\n  }\n  \n}\n\nYou can imagine a scenario where keep_going is set to TRUE and some actions happen as a result; and that if it becomes FALSE then the game loop ends. In {potato}, we make sure to first print the current values of DESTINY, POTATO and ORC so the user sees them before the game continues or ends.\nWhat are DESTINY, POTATO and ORC? Before we initiate that repeat loop we can specify a bunch of starting values for some important scoring variables. Stylistically, it makes sense to use ALL CAPS for these (that’s how they were written in the original game, after all), but there’s also an old-school rule-of-thumb to specify variables this way in R code so you can more easily spot them in your code.\n\nDESTINY &lt;- 0L\nPOTATO  &lt;- 0L\nORC     &lt;- 0L\n\nin addition, we clearly need user input to decide what to do during the game. Most of the time, a user’s hand is forced and they need to roll. But sometimes they have the choice to remove an orc at the cost of one or more potatoes (depending on how the die falls).\nThis is a logical variable that we can keep track of, i.e. can the user pay (TRUE or FALSE)?\n\ncan_pay &lt;- FALSE\n\nif (COST &lt;= POTATO) {\n  can_pay &lt;- TRUE\n} else if (COST &gt; POTATO) {\n  can_pay &lt;- FALSE\n}\n\nIf the cost to yeet an orc is equal-to or less-than the number of potatoes, we can elect to make the payment. This is expressed in the options provided to the user on the command line.\nGiven the can_pay value, the user will get the option to either roll the die (FALSE):\n\nevent &lt;- readline(\n  \"Press [ENTER] to roll... \"\n)\n\nOr choose to roll the die or make the payment (TRUE):\n\nevent &lt;- readline(\n  \"Press [ENTER] to roll or [p] to pay 1 POTATO to remove 1 ORC... \"\n)\n\nBoth of which require user input that results in a value stored in the event object. Note that hitting Enter results in an empty string (\"\").\nDie-roll values pass through a series of if statements that are activated based on the number rolled. So if you roll 1 or 2, you’re In the garden...; if 3 or 4, you’ll get A knock on the door...; else the potato cost per orc-yeet increases by 1).\nA second roll is made automatically when in the garden or when a knock is heard. Here’s what happens if a 1 is rolled when in the garden:\n\nif (rolled_garden == 1L) {\n  \n  message(\n    paste(\n      rolled_garden_msg,\n      \"You happily root about all day in your garden.\"\n    )\n  )\n  \n  message(\"- Result: +1 POTATO\")\n  \n  POTATO &lt;- POTATO + 1L\n  \n}\n\nExcellent, the POTATO variable counter is increased by 1 in this case and confirmed to the user in a message(). The latest DESTINY, POTATO and ORC scores are then printed back to the user at the start of the next repeat loop.\nAnd then you just… keep potatoing."
  },
  {
    "objectID": "posts/2022-09-13-potato/index.html#potato.",
    "href": "posts/2022-09-13-potato/index.html#potato.",
    "title": "You are a halfling, trying to harvest {potato}",
    "section": "Potato.",
    "text": "Potato.\nOnce again, you can visit Oliver Darkshire on Twitter as @deathbybadger and support him on Patreon.\nYou can find the source code for {potato} on GitHub. Issues and pull requests welcome. Just make sure you can afford the charge of one potato to submit."
  },
  {
    "objectID": "posts/2022-09-13-potato/index.html#environment",
    "href": "posts/2022-09-13-potato/index.html#environment",
    "title": "You are a halfling, trying to harvest {potato}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-02 12:50:32 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2023-03-03-getparsedata/index.html",
    "href": "posts/2023-03-03-getparsedata/index.html",
    "title": "I can’t be parsed, mate",
    "section": "",
    "text": "Image by Keith Johnston from Pixabay. Deep fried by Matt Dray.1"
  },
  {
    "objectID": "posts/2023-03-03-getparsedata/index.html#tldr",
    "href": "posts/2023-03-03-getparsedata/index.html#tldr",
    "title": "I can’t be parsed, mate",
    "section": "tl;dr",
    "text": "tl;dr\nR is capable of reading R code. Obviously. You can use getParseData(parse()) to see what’s going on. A very naive intro."
  },
  {
    "objectID": "posts/2023-03-03-getparsedata/index.html#at-an-imparse",
    "href": "posts/2023-03-03-getparsedata/index.html#at-an-imparse",
    "title": "I can’t be parsed, mate",
    "section": "At an imparse",
    "text": "At an imparse\nThere’s many things that delight me about R coding.2 One meta thing I like is the idea that R has to recognise the code that you give it as… R code.\nFor example, does x&lt;-1 mean ‘x is less than minus-one’? Hm, actually R recognises &lt;- as a ‘left-assignment operator’—a special ‘token’—that gives the name x the value of 1. Subtle, but important.\nAnother example: the tokens &lt;- and = have an equivalent role in x &lt;- 1 and x = 1. For style reasons, you’ll probably want to replace = with &lt;-.3 But don’t just ‘find and replace’ because = is context dependent. Consider:\n\nx = subset(mtcars, subset = carb == 8)\n\nHere, = is used to assign (=), to set a function argument (=) and as part of the equivalence operator (==). Oof.\nHow can a mere human understand this better?"
  },
  {
    "objectID": "posts/2023-03-03-getparsedata/index.html#parsed-tense",
    "href": "posts/2023-03-03-getparsedata/index.html#parsed-tense",
    "title": "I can’t be parsed, mate",
    "section": "Parsed tense",
    "text": "Parsed tense\nThe cool (‘cool’) thing is that R gives you tools to be able to see the world as R sees it.\nThis is sometimes called ‘static code analysis’, in that you can interrogate the code for syntax errors before it executes. Packages like {lintr} can even help tidy up (‘lint’) your code by adjusting or replacing the tokens.4\nI’ve used this approach before to:\n\ncreate the {r2eng} package, which matches tokens against words so an expression can be translated to English (e.g. &lt;- is matched to the word ‘gets’)\nwrite an RStudio addin that auto-labels closing parentheses with the name of the function they belong to (known cutely as a ‘biscuit’)\nidentify and destroy files that contain equals assignment (x = 1), rather than the superior assignment arrow (x &lt;- 1)\n\nHow might you tinker about with this yourself? Read on for a quickstart."
  },
  {
    "objectID": "posts/2023-03-03-getparsedata/index.html#parse-the-parcel",
    "href": "posts/2023-03-03-getparsedata/index.html#parse-the-parcel",
    "title": "I can’t be parsed, mate",
    "section": "Parse the parcel",
    "text": "Parse the parcel\nI’ll talk about two main functions: parse() and getParseData(), which are both part of base R.\nYou can pass a string of R code to parse() for it to be recognised as an ‘expression’. Let’s use the equals-rich subset() example from above.\n\ncode_str &lt;- \"x = subset(mtcars, subset = carb == 8)\"\ncode_expr &lt;- parse(text = code_str)\ncode_expr\n\nexpression(x = subset(mtcars, subset = carb == 8))\n\nclass(code_expr)\n\n[1] \"expression\"\n\n\nSo the string is recognised as R code at this point, which will allow us to break it down into its individual tokens. You could jump ahead here and just eval()uate this expression object.\n\neval(code_expr)\nx\n\n              mpg cyl disp  hp drat   wt qsec vs am gear carb\nMaserati Bora  15   8  301 335 3.54 3.57 14.6  0  1    5    8\n\n\nAs a result, the dataframe x is now in our environment and, as expected, contains only rows of the mtcars that have 8 carburetors.5\nSo we have the power to delay code execution, like some kind of wizard. Jeepers! That’s great, but now lets pick apart the frozen expression into its constituent tokens. This is where getParseData() comes in.\nThe function takes an expression object as the input and returns a dataframe with one token per row and several columns of handy information related to positioning and the relatedness between the tokens.\nFor now I’m going to simplify the output to show only the units of text that have been recognised as tokens, along with the name that R gives to each token under the hood (e.g. &lt;- is recognised as LEFT_ASSIGN).6\n\ncode_parsed &lt;- getParseData(parse(text = code_str, keep.source = TRUE))\ncode_parsed[code_parsed$text != \"\", c(\"text\", \"token\")]\n\n     text                token\n1       x               SYMBOL\n2       =            EQ_ASSIGN\n5  subset SYMBOL_FUNCTION_CALL\n6       (                  '('\n8  mtcars               SYMBOL\n9       ,                  ','\n14 subset           SYMBOL_SUB\n15      =               EQ_SUB\n16   carb               SYMBOL\n17     ==                   EQ\n19      8            NUM_CONST\n21      )                  ')'\n\n\nOh neato, so you can see = is indeed recognised as the token EQ_ASSIGN (‘equals assign’), = as EQ_SUB (equals in the context of supplying function arguments) and == as in EQ (the equivalence operator).\nIf you’re wondering, the keep.source = TRUE bit was needed to encourage parse() to return its output, which is a necessary step within this non-interactive blog post."
  },
  {
    "objectID": "posts/2023-03-03-getparsedata/index.html#parseltongue",
    "href": "posts/2023-03-03-getparsedata/index.html#parseltongue",
    "title": "I can’t be parsed, mate",
    "section": "Parseltongue",
    "text": "Parseltongue\nWant to take a look at the tokens in a given string of R code yourself? You can use this little function that contains parse() and getParseData() and returns you the simplified dataframe I showed above if simplify = TRUE, otherwise it gives the full read out.7\n\nparse_out &lt;- function(string, simplify = TRUE) {\n  p &lt;- parse(text = string, keep.source = TRUE)\n  pd &lt;- getParseData(p)\n  if (simplify) {\n    keep_cols &lt;- c(\"token\", \"text\")\n    pd &lt;- pd[pd$text != \"\", keep_cols]\n  }\n  pd\n}\n\nSo you could use it like:\n\nparse_out(\n  \"mean(CO2[CO2$Plant == 'Qn1', CO2$uptake]) -&gt; mean_uptake\"\n)\n\n                  token        text\n1  SYMBOL_FUNCTION_CALL        mean\n2                   '('           (\n4                SYMBOL         CO2\n5                   '['           [\n7                SYMBOL         CO2\n8                   '$'           $\n10               SYMBOL       Plant\n12                   EQ          ==\n13            STR_CONST       'Qn1'\n14                  ','           ,\n20               SYMBOL         CO2\n21                  '$'           $\n23               SYMBOL      uptake\n25                  ']'           ]\n30                  ')'           )\n35         RIGHT_ASSIGN          -&gt;\n36               SYMBOL mean_uptake\n\n\n\nℹ️ Update\nSince I wrote this post, it’s become possible to include editable R blocks in a rendered Quarto document, which can be run in the browser thanks to WebR(!). I’ve made a quick demo and post so you can play around with a simplified version of the parsing function above."
  },
  {
    "objectID": "posts/2023-03-03-getparsedata/index.html#lateral-parse",
    "href": "posts/2023-03-03-getparsedata/index.html#lateral-parse",
    "title": "I can’t be parsed, mate",
    "section": "Lateral parse",
    "text": "Lateral parse\nI’ll leave you with another interesting thing that shows you the inner workings of R, which you might not realise as you run your code. We can look at how the code is actually executed, not just the tokens that it’s composed of.\nConsider how the {magrittr} pipe %&gt;% is used. Here I’ve slightly adjusted the input to filter for 6 and 8 carburetors; you’ll see why in a second.\n\nparse_out(\"mtcars %&gt;% subset(carb %in% c(6, 8))\")\n\n                  token   text\n1                SYMBOL mtcars\n2               SPECIAL    %&gt;%\n4  SYMBOL_FUNCTION_CALL subset\n5                   '('      (\n7                SYMBOL   carb\n8               SPECIAL   %in%\n10 SYMBOL_FUNCTION_CALL      c\n11                  '('      (\n13            NUM_CONST      6\n15                  ','      ,\n19            NUM_CONST      8\n21                  ')'      )\n26                  ')'      )\n\n\nOkay yeah, %&gt;% is recognised as a token called SPECIAL between the left-hand side of mtcars and the right-hand side of subset(carb %in% c(6, 8)). Notice also that %in% is also recognised as SPECIAL.\nIn fact, this is how R recognises ‘infix operators’ that are bound by percent symbols. This is some special syntactical magic that lets you put the function name between two arguments. So x %&gt;% head is equivalent to `%&gt;%`(mtcars, head). Perhaps SPECIAL instead of a more specific name because infix operators can be created on the fly?\nIf %&gt;% is SPECIAL, how do you think the base pipe is recognised in this simpler example?\n\nparse_out(\"mtcars |&gt; head()\")\n\n                 token   text\n1               SYMBOL mtcars\n2                 PIPE     |&gt;\n4 SYMBOL_FUNCTION_CALL   head\n5                  '('      (\n7                  ')'      )\n\n\nNot that surprising: it’s recognised as PIPE and not a SPECIAL, since it’s a proper base R token in its own right (as of R v4.1) .\nOkay, so we’ve seen how R parses these tokens, what about how it actually executes the code? One way to see this is to look at an ‘abstract syntax tree’ with the {lobstr} package.8 A ‘tree’ to show the nested structure of code and variables and so on.\n\nlibrary(lobstr)    # install from CRAN\nlibrary(magrittr)  # install from CRAN\nast(mtcars %&gt;% head())\n\n█─`%&gt;%` \n├─mtcars \n└─█─head \n\n\nYeah, like I said: x %&gt;% head() is ultimately executed by R like a normal function (block symbol in the output from ast() above), in the form `%&gt;%`(mtcars, head). You can see how the `%&gt;%` is a parent to mtcars and head() below it.\nSo the same happens for the base pipe, right?\n\nast(mtcars |&gt; head())\n\n█─head \n└─mtcars \n\n\nSurprise! mtcars |&gt; head is not executed like `|&gt;`(mtcars, head). It’s literally executed like head(mtcars). The base pipe is so special because it’s baked right into the R source code as a separate type of token that is recognised to have a job distinct from a basic SPECIAL. This should make it a little faster to run compared to %&gt;% as well."
  },
  {
    "objectID": "posts/2023-03-03-getparsedata/index.html#parse-away",
    "href": "posts/2023-03-03-getparsedata/index.html#parse-away",
    "title": "I can’t be parsed, mate",
    "section": "Parse away",
    "text": "Parse away\nWell, ‘cool’ I guess. Now it’s up to you: you can either parse on this knowledge, or leave it in the parsed.9"
  },
  {
    "objectID": "posts/2023-03-03-getparsedata/index.html#environment",
    "href": "posts/2023-03-03-getparsedata/index.html#environment",
    "title": "I can’t be parsed, mate",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:02 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] magrittr_2.0.3 lobstr_1.1.2  \n\nloaded via a namespace (and not attached):\n [1] digest_0.6.31     fastmap_1.1.1     xfun_0.39         knitr_1.43.1     \n [5] htmltools_0.5.5   rmarkdown_2.23    cli_3.6.1         compiler_4.3.1   \n [9] rstudioapi_0.14   tools_4.3.1       evaluate_0.21     yaml_2.3.7       \n[13] rlang_1.1.1       jsonlite_1.8.7    crayon_1.5.2      htmlwidgets_1.6.2"
  },
  {
    "objectID": "posts/2023-01-06-remorse/index.html",
    "href": "posts/2023-01-06-remorse/index.html",
    "title": ".-././–/—/.-./…/.",
    "section": "",
    "text": "You may not believe it, but I am releasing this art under CC0."
  },
  {
    "objectID": "posts/2023-01-06-remorse/index.html#tldr",
    "href": "posts/2023-01-06-remorse/index.html#tldr",
    "title": ".-././–/—/.-./…/.",
    "section": "tl;dr",
    "text": "tl;dr\nOn a whim, I’ve written {remorse}: a tiny R package that converts text to Morse Code to audio."
  },
  {
    "objectID": "posts/2023-01-06-remorse/index.html#beat-a-dead-morse",
    "href": "posts/2023-01-06-remorse/index.html#beat-a-dead-morse",
    "title": ".-././–/—/.-./…/.",
    "section": "Beat a dead morse",
    "text": "Beat a dead morse\nIn the last post I mentioned {sonify} for making R do little audible beeps and boops.\nIt reminded me of one (of many) unwritten micro-projects I’ve got kicking around in my brain: obviously you could use {sonify} to communicate Morse Code. And why not translate from text to Morse (and back) while you’re at it?1\nTo be honest this was a classic case of name-driven development (NDD): I thought {remorse} was a funny name for a package and worked backwards from there.\nObviously it says ‘Morse’ in the name, but also ‘remorse’ is usually what I feel after putting together a small pointless package; pointless-package existentialism (PPE) is something I have a track history with.\nBut of course, the true remorse is that I didn’t find the better package-name pun: {morseinspector}. But maybe that’s too long of a name and maybe non-Brits wouldn’t understand the reference. Maybe I’m thinking too hard.2"
  },
  {
    "objectID": "posts/2023-01-06-remorse/index.html#oh-dit-dit-dahling",
    "href": "posts/2023-01-06-remorse/index.html#oh-dit-dit-dahling",
    "title": ".-././–/—/.-./…/.",
    "section": "Oh dit-dit-dahling",
    "text": "Oh dit-dit-dahling\nConsider this highly plausible scenario: it’s 20XX, the apocalypse has come, and the remaining humans on planet Earth communicate by Morse Code. For some reason.3\nWow, wouldn’t it be handy to have a text-to-Morse translator?\nWell friend, if you’ve managed to find an electronic thinking box in the apocalyptic barren wastelands (assuming electricity is still available (and the machine has R installed (and the {remorse} package was downloaded before the world’s internet cut out (and you know how to use R (and you don’t own a simpler, more portable Morse Code translation pamphlet))))), then you will have this incredible power at your fingertips.\nOr maybe you’d rather risk it? Pfft."
  },
  {
    "objectID": "posts/2023-01-06-remorse/index.html#use-the-morse",
    "href": "posts/2023-01-06-remorse/index.html#use-the-morse",
    "title": ".-././–/—/.-./…/.",
    "section": "Use the Morse…",
    "text": "Use the Morse…\nThat’s an awful lot of build-up for a very simple package. Let’s take a look at what little it does.\nAs usual, {remorse} lives on GitHub4, so it can be downloaded with a little help from the typographically-adjacent {remotes} package:\n\ninstall.github(\"remotes\")\nremotes::install_github(\"matt-dray/remorse\")  # v0.1.1 here\n\nThat’ll install {sonify} as well, which is needed for the audio.\nRight so: text to Morse Code.\n\ntext_in &lt;- \"Ahoy pal!\"\nmorse &lt;- remorse::txt2morse(text_in)\nmorse\n\n[1] \".-/..../---/-.-- .--./.-/.-../-.-.--\"\n\n\nSo each letter has been translated to the relevant string of ‘dits and dahs’ (‘dots’ and ‘dashes’) that make up Morse Code. I’ve used a period (.) and hyphen (-) to represent these in {remorse}, with forward slashes (/) between Morse groups that represent individual characters, and a space for the spaces between words.\nNote that not all characters can be converted to Morse Code. I did some research (Wikipedia) to discover the mappings from letters, numbers and punctuation to Morse Code. This information is used internally as a lookup, but is also exported in morse_lookup:\n\nremorse::morse_lookup\n\n       A        B        C        D        E        F        G        H \n    \".-\"   \"-...\"   \"-.-.\"    \"-..\"      \".\"   \"..-.\"    \"--.\"   \"....\" \n       I        J        K        L        M        N        O        P \n    \"..\"   \".---\"    \"-.-\"   \".-..\"     \"--\"     \"-.\"    \"---\"   \".--.\" \n       Q        R        S        T        U        V        W        X \n  \"--.-\"    \".-.\"    \"...\"      \"-\"    \"..-\"   \"...-\"    \".--\"   \"-..-\" \n       Y        Z        0        1        2        3        4        5 \n  \"-.--\"   \"--..\"  \"-----\"  \".----\"  \"..---\"  \"...--\"  \"....-\"  \".....\" \n       6        7        8        9        &        '        @        ) \n \"-....\"  \"--...\"  \"---..\"  \"----.\"  \".-...\" \".----.\" \".--.-.\" \"-.--.-\" \n       (        :        ,        =        !        .        -        * \n \"-.--.\" \"---...\" \"--..--\"  \"-...-\" \"-.-.--\" \".-.-.-\" \"-....-\"   \"-..-\" \n       +        \"        ?        /          \n \".-.-.\" \".-..-.\" \"..--..\"  \"-..-.\"      \" \" \n\n\nOf course, this means we can map backwards from Morse Code to letters, numbers and punctuation:\n\ntext_out &lt;- remorse::morse2txt(morse)\ntext_out\n\n[1] \"AHOY PAL!\"\n\n\nMorse Code has no sense of case, so it just converts it all to uppercase. Like you’re shouting; the most clear form of communication.\nSo, you can argue justifiably that txt2morse(\"yo\") |&gt; morse2txt() is just a worse version of toupper() that strips out certain unmappable characters.\nBut of course it does so much more. Well, one thing more. Let’s go from Morse to audio.\nFirst a reminder of the code from earlier:\n\nmorse\n\n[1] \".-/..../---/-.-- .--./.-/.-../-.-.--\"\n\n\nAnd to generate audio you just:\n\nremorse::morse2sfx(morse)\n\nThe output sounds like this:\n\n\n\n\n\nWow. It plays audible dits (one ‘time unit’, default is dit_length = 0.05 in seconds), dahs (three), spaces between dits and dahs (one), spaces between Morse character groupings (three) and spaces between words (seven). Tell all your friends.\nSo, do I still feel remorse for writing {remorse}, even after demonstrating its incredible power? Yes. All I ask is that you think of me in those apocalyptic wastelands.\n\nℹ️ Update\nI just realised you can turn Morse Code into… Morse Code. Mind blown.\n\nremorse::txt2morse(\"hi\") |&gt;\n  remorse::txt2morse()\n\n[1] \".-.-.-/.-.-.-/.-.-.-/.-.-.-/-..-./.-.-.-/.-.-.-\"\n\n\n‘Morsest Code’. Why? Absolutely.\nMaybe I’ve been watching too much Tom7 recently."
  },
  {
    "objectID": "posts/2023-01-06-remorse/index.html#environment",
    "href": "posts/2023-01-06-remorse/index.html#environment",
    "title": ".-././–/—/.-./…/.",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-06-29 18:19:21 CEST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   remorse_0.1.1     rstudioapi_0.14  \n [9] yaml_2.3.7        rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5   \n[13] xfun_0.39         digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2023-06-07-rectangular-officer/index.html#tldr",
    "href": "posts/2023-06-07-rectangular-officer/index.html#tldr",
    "title": "Rectangularise Word tables extracted by {officer}",
    "section": "tl;dr",
    "text": "tl;dr\n{officer} is an R package that lets you extract elements of a Word document, including tables, into a tidy dataframe. I’ve written a function to ‘re-rectangularise’ extracted Word tables into a list of R dataframes.\n\nℹ️ Update\nTurns out that Eli Pousson has written the {officerExtras} package (install it from GitHub), which already contains this functionality in the officer_tables() and officer_table() functions. At least this proves my idea wasn’t too far-fetched!\nAlso you can just use docxtractr::docx_extract_all_tbls() by Bob Rudis to extract all the tables in one go, lol."
  },
  {
    "objectID": "posts/2023-06-07-rectangular-officer/index.html#whats-the-officer-problem",
    "href": "posts/2023-06-07-rectangular-officer/index.html#whats-the-officer-problem",
    "title": "Rectangularise Word tables extracted by {officer}",
    "section": "What’s the officer, problem?",
    "text": "What’s the officer, problem?\nSomeone on Slack asked about some difficulty with scraping a table from a Word document. We’ve all been there.\nMy mind immediately went to {officer} by David Gohel, which is part of the ‘officeverse’ for reading, creating and manipulating common Microsoft documents with R1.\nIn particular, the function officer::docx_summary() extracts all the elements of a Word doc into a tidy dataframe2. Each row of that dataframe is a heading, or a paragraph, or the contents of a table cell3.\nThis means tables are ‘unstacked’, with a row per ‘cell’ of the original Word table. How could you convert these tidy Word tables into dataframes for further use in R? There’s a suggestion in the docs, but I drew the rest of the heckin’ owl by creating a slightly overengineered function to do it4."
  },
  {
    "objectID": "posts/2023-06-07-rectangular-officer/index.html#allo-allo",
    "href": "posts/2023-06-07-rectangular-officer/index.html#allo-allo",
    "title": "Rectangularise Word tables extracted by {officer}",
    "section": "’Allo ’allo",
    "text": "’Allo ’allo\nFirst, you can download the {officer} package from CRAN:\n\ninstall.packages(\"officer\") # if not yet installed\nlibrary(officer)\n\nLet’s create a Word document to test with and save it to a temporary location:\n\n# Create a test docx file\ndoc_test &lt;- read_docx() |&gt;\n  body_add_par(\"This is a test\", style = \"heading 1\") |&gt;\n  body_add_par(\"Below is a table.\", style = \"Normal\") |&gt;\n  body_add_table(mtcars[1:3, 1:5]) |&gt; \n  body_add_par(\"Below is another table\", style = \"Normal\") |&gt;\n  body_add_table(airquality[1:3, 1:5])\n\n# Save docx to temp location\ntemp_docx &lt;- tempfile(fileext = \".docx\")\nprint(doc_test, target = temp_docx)\n\nThe package has a nice system of pipeable functions for building up document. This code created a file with a heading, followed by two tables that each have a line of text above them.\nWe can read the document with read_docx() and extract the contents into a tidy dataframe:\n\n# Read the file from temp path\ndoc_path &lt;- list.files(tempdir(), pattern = \".docx$\", full.names = TRUE)\ndoc_in &lt;- read_docx(doc_path)\n\n# Get the content of the document as a dataframe\ndoc_tidy &lt;- docx_summary(doc_in)\nstr(doc_tidy)\n\n'data.frame':   43 obs. of  11 variables:\n $ doc_index   : int  1 2 3 3 3 3 3 3 3 3 ...\n $ content_type: chr  \"paragraph\" \"paragraph\" \"table cell\" \"table cell\" ...\n $ style_name  : chr  \"heading 1\" \"Normal\" NA NA ...\n $ text        : chr  \"This is a test\" \"Below is a table.\" \"mpg\" \"21.0\" ...\n $ level       : num  NA NA NA NA NA NA NA NA NA NA ...\n $ num_id      : int  NA NA NA NA NA NA NA NA NA NA ...\n $ row_id      : int  NA NA 1 2 3 4 1 2 3 4 ...\n $ is_header   : logi  NA NA TRUE FALSE FALSE FALSE ...\n $ cell_id     : num  NA NA 1 1 1 1 2 2 2 2 ...\n $ col_span    : num  NA NA 1 1 1 1 1 1 1 1 ...\n $ row_span    : int  NA NA 1 1 1 1 1 1 1 1 ...\n\n\nThe doc_in object has ‘rdocx’ class that carries the extracted elements and associated style information. Running docx_summary() converts this to the single tidy dataframe that we’re after.\nYou can see we have information here about the content of our doc. For purposes of this post, we care about:\n\ntext, which is the actual written content\ncontent_type, which can tell us if we’re looking at table cells\ndoc_index, which assigns an ID value so document elements stay together (e.g. cells of a table will all carry the same doc_index)\ncell_id and row_id, which tell us the x and y cell locations in tables\nis_header, which can tell us if the row contains a table header.\n\nNow to extract the table elements and ‘re-rectangularise’ back into a dataframe."
  },
  {
    "objectID": "posts/2023-06-07-rectangular-officer/index.html#cop-a-load-of-this",
    "href": "posts/2023-06-07-rectangular-officer/index.html#cop-a-load-of-this",
    "title": "Rectangularise Word tables extracted by {officer}",
    "section": "Cop a load of this",
    "text": "Cop a load of this\nI’ve made two functions using base R:\n\nrectangularise_tables() (note the plural) takes the dataframe provided by docx_summary() and outputs a list of dataframes, one per table in the original Word file\n.rectangularise_table() (not pluralised and starts with a dot for disambiguation), which runs inside rectangularise_tables() to reformat the tidy representation of a single Word table into an R dataframe\n\nYou’ll need to copy both of these into your session and run them. For convenience, I’ve added them to a GitHub gist. I’ve added commentary so you can see what’s happening in each bit.\n\n\nClick to expand the rectangularise_tables() definition.\n\n\nrectangularise_tables &lt;- function(\n    docx_summary,  # output dataframe from docx_summary\n    assume_headers = TRUE,  # assume headers in first row?\n    type_convert = TRUE  # try to coerce columns to most likely data type?\n) {\n  \n  # Check inputs\n  \n  is_data.frame &lt;- inherits(docx_summary, \"data.frame\")\n  \n  docx_summary_names &lt;- c(\n    \"doc_index\", \"content_type\", \"style_name\", \"text\", \"level\", \"num_id\", \n    \"row_id\", \"is_header\", \"cell_id\", \"col_span\", \"row_span\"\n  )  # column names we can expect in the output from docx_summary\n  \n  is_docx_summary &lt;- all(names(docx_summary) %in% docx_summary_names)\n  \n  if (!is_data.frame | !is_docx_summary) {\n    stop(\n      paste(\n        \"Argument 'docx_summary' must be a data.frame created with\",\n        \"'officer::docx_summary'.\"\n      ),\n      call. = FALSE\n    )\n  }\n  \n  # Get only the rows that relate to Word tables\n  docx_summary_tables &lt;- \n    docx_summary[docx_summary[[\"content_type\"]] %in% \"table cell\", ]\n  \n  # Get the ID value for each Word table\n  doc_indices &lt;- unique(docx_summary_tables[[\"doc_index\"]])\n  \n  # Initiate an empty list to hold dataframe representations of the Word tables\n  tables_out &lt;- vector(mode = \"list\", length = length(doc_indices))\n  names(tables_out) &lt;- paste0(\"doc_index_\", doc_indices)\n  \n  # For each Word table, 'rectangularise' into a dataframe and add to the list\n  for (doc_index in doc_indices) {\n    \n    docx_summary_table &lt;- \n      docx_summary_tables[docx_summary_tables[[\"doc_index\"]] == doc_index, ]\n    \n    extracted_table &lt;- .rectangularise_table(docx_summary_table, assume_headers)\n    \n    list_element_name &lt;- paste0(\"doc_index_\", doc_index)\n    tables_out[[list_element_name]] &lt;- extracted_table\n    \n  }\n  \n  # Optionally convert columns to appropriate type (integer, etc)\n  if (type_convert) {\n    tables_out &lt;- lapply(tables_out, type.convert, as.is = TRUE)\n  }\n  \n  return(tables_out)\n  \n}\n\n\n\n\nClick to expand the .rectangularise_table() definition.\n\n\n.rectangularise_table &lt;- function(\n    table_cells,  # docx_summary output filtered for 'table cells' only\n    assume_headers = TRUE  # assume headers in first row?\n) {\n  \n  # Check inputs\n  \n  is_table_cells &lt;- all(table_cells[[\"content_type\"]] == \"table cell\")\n  is_one_table &lt;- length(unique(table_cells[[\"doc_index\"]])) == 1\n  \n  if (!is_table_cells | !is_one_table) {\n    stop(\n      paste(\n        \"Argument 'table_cells' must be a dataframe created with\",\n        \"'officer::docx_summary' where 'content_type' is filtered for\",\n        \"'table cell' only.\"\n      ),\n      call. = FALSE\n    )\n  }\n  \n  # Split each Word table into a list element, isolate headers and cell contents\n  cell_id_split &lt;- split(table_cells, table_cells[[\"cell_id\"]])\n  headers &lt;- lapply(cell_id_split, function(x) x[x[[\"is_header\"]], \"text\"])\n  content &lt;- lapply(cell_id_split, function(x) x[!x[[\"is_header\"]], \"text\"])\n  table_out &lt;- as.data.frame(content)\n  \n  # Column headers are identified by TRUE in the is_header column, but may not\n  # be marked up as such. Use them as dataframe headers if they exist.\n  has_headers &lt;- length(unlist(headers)) &gt; 0\n  if (has_headers) {\n    names(table_out) &lt;- headers\n  }\n  \n  # If headers are not identified by is_header, assume that the first row of the\n  # Word table contains the headers. The user can control this behaviour with\n  # the argument assume_headers.\n  if (!has_headers & assume_headers) {\n    headers &lt;- table_out[1, ]  # assume first row is headers\n    table_out &lt;- table_out[2:nrow(table_out), ]  # rest of table is content\n    names(table_out) &lt;- headers\n  }\n  \n  return(table_out)\n  \n}\n\n\nYou’ll notice the assume_headers argument. The headers for a Word table are marked by TRUE in the is_header column of the output from docx_summary(). Except when they aren’t. It’s possible that you’ll read a Word doc where the table headers aren’t identified. Set assume_headers to TRUE (the default) to allow rectangularise_table() to instead use the first row of the table as headers. The setting will apply to all tables; I reckon that it’s all or nothing whether table headers will be marked up in a given Word document.\nYou may also have seen the type_convert argument5. By default, the text column in the output from docx_summary() will be character class, but the actual data might be integers, for example. As explained in a recent blog post, the type.convert() function attempts to coerce a column to the appropriate data type if possible.\nAnd now we can see that the dataset works using our test document:\n\ndf_list &lt;- rectangularise_tables(doc_tidy)\nstr(df_list)\n\nList of 2\n $ doc_index_3:'data.frame':    3 obs. of  5 variables:\n  ..$ mpg : num [1:3] 21 21 22.8\n  ..$ cyl : int [1:3] 6 6 4\n  ..$ disp: int [1:3] 160 160 108\n  ..$ hp  : int [1:3] 110 110 93\n  ..$ drat: num [1:3] 3.9 3.9 3.85\n $ doc_index_5:'data.frame':    3 obs. of  5 variables:\n  ..$ Ozone  : int [1:3] 41 36 12\n  ..$ Solar.R: int [1:3] 190 118 149\n  ..$ Wind   : num [1:3] 7.4 8 12.6\n  ..$ Temp   : int [1:3] 67 72 74\n  ..$ Month  : int [1:3] 5 5 5\n\n\nSmashing. We have a list of two dataframes: one for each of the tables in the test document. I took the liberty of naming the list elements like doc_index_* so you can trace which doc_index they were in the original output from docx_summary()."
  },
  {
    "objectID": "posts/2023-06-07-rectangular-officer/index.html#prisonr",
    "href": "posts/2023-06-07-rectangular-officer/index.html#prisonr",
    "title": "Rectangularise Word tables extracted by {officer}",
    "section": "PrisonR",
    "text": "PrisonR\nTo summarise, this is absolutely not the worst code-related crime I’ve committed on this blog. Sorry guv! I’ll definitely be sentenced to the most severe punishment if caught and tried: several minutes of hard labour, or ‘refactoring’ as they call it on the inside.\nAt worst I’ll build an Andy-Dufresne-style tunnel out of my prison cell and hide the entrance behind years of accumulated hex stickers.\n\nℹ️ Update\nAs a bonus, I later wrote a quick reproducible example that part-solves the original reason for this post. Here I’ve used {docxtractr} to extract tables from docx files in separate subfolders and then combine them.\n\n\nClick to expand code.\n\n\n# Attach packages (all are available from CRAN)\nlibrary(docxtractr)  # to extract tables from docx files\nlibrary(officer)  # to create dummy docx files\nlibrary(charlatan)  # to generate fake data\n\n# Create multiple dummy docx files in separate temporary folders\n\nmy_folder &lt;- tempdir()  # temporary locations to store the files\nn_files &lt;- 5  # the number of dummy files to generate\n\nfor (i in seq(n_files)) {\n  \n  # Create subfolders\n  subfolder_name &lt;- paste0(\"subfolder_\", i)\n  dir.create(file.path(my_folder, subfolder_name))\n  \n  # Create dummy dataframe\n  \n  n_fake &lt;- 10  # number of fake data items to generate\n  \n  temp_df &lt;- data.frame(\n    name = ch_name(n_fake),\n    job = ch_job(n_fake),\n    phone = ch_phone_number(n_fake)\n  )\n  \n  # Add dummy dataframe to a docx file and save it\n  path &lt;- file.path(my_folder, subfolder_name, paste0(\"df_\", i, \".docx\"))\n  officer::read_docx() |&gt; body_add_table(temp_df) |&gt; print(target = path)\n  \n}\n\n# Get the file paths to all the docx files\ndocx_paths &lt;- list.files(\n  my_folder,\n  pattern = \".docx$\",\n  full.names = TRUE,  # return full filepaths\n  recursive = TRUE  # look in all subfolders\n)\n\n# Preallocate a list to be filled with extracted tables, one element per file\nextracted_tables &lt;- vector(\"list\", n_files)\n\n# Extract tables and add to the list (not tested: I think that read_docx will\n# read .doc files, but only if you have LibreOffice installed.\nfor (i in docx_paths) {\n  tables &lt;- docxtractr::read_docx(i) |&gt; docx_extract_all_tbls()\n  extracted_tables[basename(i)] &lt;- tables\n}\n\n# In this simple demo, the dataframes in each list element can be appended\n# because they all have the same column names and types.\ndo.call(rbind, extracted_tables)"
  },
  {
    "objectID": "posts/2023-06-07-rectangular-officer/index.html#environment",
    "href": "posts/2023-06-07-rectangular-officer/index.html#environment",
    "title": "Rectangularise Word tables extracted by {officer}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-06-29 18:16:59 CEST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] officer_0.6.2\n\nloaded via a namespace (and not attached):\n [1] digest_0.6.31     R6_2.5.1          fastmap_1.1.1     xfun_0.39        \n [5] knitr_1.43.1      htmltools_0.5.5   rmarkdown_2.22    xml2_1.3.4       \n [9] cli_3.6.1         zip_2.3.0         askpass_1.1       openssl_2.0.6    \n[13] textshaping_0.3.6 systemfonts_1.0.4 compiler_4.3.1    rstudioapi_0.14  \n[17] tools_4.3.1       ragg_1.2.5        evaluate_0.21     yaml_2.3.7       \n[21] rlang_1.1.1       jsonlite_1.8.5    htmlwidgets_1.6.2 uuid_1.1-0"
  },
  {
    "objectID": "posts/2021-11-27-long-fns/index.html#tldr",
    "href": "posts/2021-11-27-long-fns/index.html#tldr",
    "title": "R has obscenely long function names",
    "section": "tl;dr",
    "text": "tl;dr\nUse ls() on a package name in the form \"package:base\" to see all the objects it contains. I’ve done this to find the longest (and shortest) function names in base R and the {tidyverse} suite."
  },
  {
    "objectID": "posts/2021-11-27-long-fns/index.html#naming-things",
    "href": "posts/2021-11-27-long-fns/index.html#naming-things",
    "title": "R has obscenely long function names",
    "section": "Naming things",
    "text": "Naming things\nI try to keep to a few rules when creating function names, like:\n\nuse a verb to make clear the intended action, like get_badge() from {badgr}\nstart functions with a prefix to make autocomplete easier, like the dh_*() functions from {dehex}\ntry to be descriptive but succinct, like r2cron() from {dialga}\n\nIt can be tricky to be succinct. Consider the base R function suppressPackageStartupMessages()1: it’s a whopping 30 characters, but all the words are important. Something shortened, like suppPkgStartMsg(), wouldn’t be so clear.\nIt made me wonder: what’s the longest function name in R?2\nBut! It seems tricky and time consuming to find the longest function name from all R packages. CRAN alone has over 18,000 at time of writing.\nA much easier (lazier) approach is to focus on some package subsets. I’ll look at base R and the {tidyverse}."
  },
  {
    "objectID": "posts/2021-11-27-long-fns/index.html#the-long-and-the-short-of-it",
    "href": "posts/2021-11-27-long-fns/index.html#the-long-and-the-short-of-it",
    "title": "R has obscenely long function names",
    "section": "The long and the short of it",
    "text": "The long and the short of it\n\nBase R\nCertain R packages are built-in and attached by default on startup.\n\nbase_names &lt;- sessionInfo()$basePkgs\nbase_names\n\n[1] \"stats\"     \"graphics\"  \"grDevices\" \"utils\"     \"datasets\"  \"methods\"  \n[7] \"base\"     \n\n\nHow can we fetch all the functions from these packages? We can use ls() to list all their objects, supplying the package name in the format \"package:base\", for example. Note that I said ‘objects’, not ‘functions’, since it will also return names that refer to things like datasets.\nFor fun, we can use this as an excuse to demo ‘lambda’ syntax and the dog’s balls approach to function-writing, both introduced in R v4.1.3\n\nbase_pkgs &lt;- paste0(\"package:\", base_names)\n\nbase_fns &lt;- lapply(base_pkgs, ls) |&gt;\n  setNames(base_names) |&gt; \n  lapply(\\(object) as.data.frame(object)) |&gt; \n  (\\(x) do.call(rbind, x))()  # the balls ()()\n\nbase_fns$package &lt;- gsub(\"\\\\.\\\\d{,4}$\", \"\", row.names(base_fns))\nrow.names(base_fns) &lt;- NULL\nbase_fns$nchar &lt;- nchar(base_fns$object)\n\nbase_fns &lt;- base_fns[order(-base_fns$nchar), ]\n\nOf the 2465 objects across these packages, a quick histogram shows that the most frequent character length is under 10, with a tail stretching out to over 30.\n\nhist(\n  base_fns$nchar,\n  main = \"Character length of base-object names\",\n  xlab = \"Number of characters\",\n  las = 1\n)\n\n\n\n\nHere’s the top 10 by character length.\n\nbase_fns_top &lt;- base_fns[order(-base_fns$nchar), ]\nrownames(base_fns_top) &lt;- seq(length = nrow(base_fns_top))\nhead(base_fns_top, 10)\n\n                                  object package nchar\n1  aspell_write_personal_dictionary_file   utils    37\n2     getDLLRegisteredRoutines.character    base    34\n3       getDLLRegisteredRoutines.DLLInfo    base    32\n4        reconcilePropertiesAndPrototype methods    31\n5         suppressPackageStartupMessages    base    30\n6          as.data.frame.numeric_version    base    29\n7           as.character.numeric_version    base    28\n8            print.DLLRegisteredRoutines    base    27\n9             as.data.frame.model.matrix    base    26\n10            conditionMessage.condition    base    26\n\n\nSo there are four objects with names longer than suppressPackageStartupMessages(), though they are rarely used as far as I can tell. The longest is aspell_write_personal_dictionary_file(), which has 37(!) characters. It’s part of the spellcheck functions in {utils}.\nIt’s interesting to me that it follows some of those rules for function naming that I mentioned earlier. It has a verb, is descriptive and uses a prefix for easier autocomplete; ‘aspell’ refers to the GNU open-source Aspell spellchecker on which it’s based.\nI’m intrigued that the function uses snake_case rather than camelCase or dot.case, which seem more prevalent in base functions. You could argue then that the underscores have ‘inflated’ the length by four characters. Similarly, the prefix adds another six characters. So maybe the function could be simplified to writePersonalDictionaryFile(), which is merely 27 characters.\nWhat about shortest functions? There are many one-character functions in base R.\n\nsort(base_fns[base_fns$nchar == 1, ][[\"object\"]])\n\n [1] \"-\" \":\" \"!\" \"?\" \"(\" \"[\" \"{\" \"@\" \"*\" \"/\" \"&\" \"^\" \"+\" \"&lt;\" \"=\" \"&gt;\" \"|\" \"~\" \"$\"\n[20] \"c\" \"C\" \"D\" \"F\" \"I\" \"q\" \"t\" \"T\"\n\n\nSome of these will be familiar, like c() to concatenate and t() to transpose. You might wonder why operators and brackets are in here. Remember: everything in R is a function, so `[`(mtcars, \"hp\") is the same as mtcars[\"hp\"]. I have to admit that stats::C() and stats::D() were new to me.\n\n\nTidyverse\nHow about object names from the {tidyverse}?\nTo start, we need to attach the packages. Running library(tidyverse) only loads the core packages of the tidyverse, so we need another approach to attach them all.\nOne method is to get the a vector of the package names with the tidyverse_packages() function and pass it to p_load() from {pacman}, which prevents the need for a separate library() call for each one.4\nFirst, here’s the tidyverse packages.\n\nℹ️ Update\nI updated this post in July 2023. The {lubridate} package is now installed as part of the tidyverse and many new functions have appeared across the multitude of packages in the metapackage.\n\n\n# install.packages(\"tidyverse\")  # if not installed\nsuppressPackageStartupMessages(  # in action!\n  library(tidyverse)\n)\ntidy_names &lt;- tidyverse_packages()\ntidy_names\n\n [1] \"broom\"         \"conflicted\"    \"cli\"           \"dbplyr\"       \n [5] \"dplyr\"         \"dtplyr\"        \"forcats\"       \"ggplot2\"      \n [9] \"googledrive\"   \"googlesheets4\" \"haven\"         \"hms\"          \n[13] \"httr\"          \"jsonlite\"      \"lubridate\"     \"magrittr\"     \n[17] \"modelr\"        \"pillar\"        \"purrr\"         \"ragg\"         \n[21] \"readr\"         \"readxl\"        \"reprex\"        \"rlang\"        \n[25] \"rstudioapi\"    \"rvest\"         \"stringr\"       \"tibble\"       \n[29] \"tidyr\"         \"xml2\"          \"tidyverse\"    \n\n\nAnd now to load them all.\n\n# install.packages(\"pacman\")  # if not installed\nlibrary(pacman)\np_load(char = tidy_names)\n\nOnce again we can ls() over packages in the form \"package:dplyr\". Now the {tidyverse} is loaded, we might as well use it to run the same pipeline as we did for the base packages.\n\ntidy_pkgs &lt;- paste0(\"package:\", tidy_names)\n\ntidy_fns &lt;- map(tidy_pkgs, ls) |&gt;\n  set_names(tidy_names) |&gt; \n  enframe(name = \"package\", value = \"object\") |&gt;\n  unnest(object) |&gt; \n  mutate(nchar = nchar(object))\n\nSo we’re looking at even more packages this time, since the whole tidyverse contains 3070 of them.\nThe histogram is not too dissimilar to the one for base packages, though the tail is shorter, it’s arguably more normal-looking and the peak is perhaps slightly closer to 10. The latter could be because of more liberal use of snake_case.\n\nhist(\n  tidy_fns$nchar,\n  main = \"Character length of {tidyverse} object names\",\n  xlab = \"Number of characters\",\n  las = 1\n)\n\n\n\n\nHere’s the top 10 by character length.\n\nslice_max(tidy_fns, nchar, n = 10)\n\n# A tibble: 11 × 3\n   package       object                            nchar\n   &lt;chr&gt;         &lt;chr&gt;                             &lt;int&gt;\n 1 rlang         ffi_standalone_check_number_1.0.7    33\n 2 googlesheets4 vec_ptype2.googlesheets4_formula     32\n 3 googlesheets4 vec_cast.googlesheets4_formula       30\n 4 cli           cli_progress_builtin_handlers        29\n 5 rstudioapi    getRStudioPackageDependencies        29\n 6 rstudioapi    registerCommandStreamCallback        29\n 7 rlang         ffi_standalone_is_bool_1.0.7         28\n 8 dbplyr        supports_star_without_alias          27\n 9 rstudioapi    launcherPlacementConstraint          27\n10 cli           ansi_has_hyperlink_support           26\n11 ggplot2       scale_linewidth_continuous           26\n\n\nWell there you are: ffi_standalone_check_number_1.0.7() from {rlang} wins the prize with 33 characters. What does it do? The full documentation is literally ‘Internal API for standalone-types-check’. Okey doke.\nIntriguingly, the next two are both from {googlesheets4}. The help pages say they’re ‘internal {vctrs} methods’. The names of these are long because of the construction: the first part tells us the method name, e.g. vec_ptype2, and the second part tells us that they apply to the googlesheets4_formula S3 class.\nSo maybe these don’t really count because they would be executed as as vec_ptype2() and vec_cast()? And they’re inflated because they contain the package name, {googlesheets4}, which is quite a long one (13 characters). That would leave cli::cli_progress_builtin_handlers() and rstudioapi::getRStudioPackageDependencies() as the next longest (29 characters). The latter uses camelCase—which is typical of the {rstudioapi} package—so isn’t bulked out by underscores.\nOn the other end of the spectrum, there’s only one function with one character: dplyr::n(). I think it makes sense to avoid single-character functions in non-base packages, because they aren’t terribly descriptive. n() can at least be understood to mean ‘number’.\nInstead, here’s all the two-letter functions from the {tidyverse}. Note that many of these are from {lubridate} and are shorthand expressions that make sense in context, like hm() for hour-minute. You can also see some of {rlang}’s operators creep in here, like bang-bang (!!) and the walrus (:=).5\n\ndplyr::filter(tidy_fns, nchar == 2)\n\n# A tibble: 16 × 3\n   package   object nchar\n   &lt;chr&gt;     &lt;chr&gt;  &lt;int&gt;\n 1 cli       no         2\n 2 dplyr     do         2\n 3 dplyr     id         2\n 4 lubridate am         2\n 5 lubridate hm         2\n 6 lubridate ms         2\n 7 lubridate my         2\n 8 lubridate pm         2\n 9 lubridate tz         2\n10 lubridate ym         2\n11 lubridate yq         2\n12 magrittr  or         2\n13 rlang     :=         2\n14 rlang     !!         2\n15 rlang     ll         2\n16 rlang     UQ         2\n\n\nMany of these are due to {lubridate} using single letters to represent time periods, like hm is ‘hour minute’. You can also see some symbols from {rlang}, like the good ol’ :=, or ‘walrus’ operator.\nBoth the {dplyr} functions here are no longer intended for use. I’m sad especially for dplyr::do(): the help page says it ‘never really felt like it belong[ed] with the rest of dplyr’. Sad.\n\nIn memoriam: do()."
  },
  {
    "objectID": "posts/2021-11-27-long-fns/index.html#environment",
    "href": "posts/2021-11-27-long-fns/index.html#environment",
    "title": "R has obscenely long function names",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:26:59 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] xml2_1.3.4          rvest_1.0.3         rstudioapi_0.14    \n [4] rlang_1.1.1         reprex_2.0.2        readxl_1.4.2       \n [7] ragg_1.2.5          pillar_1.9.0        modelr_0.1.11      \n[10] magrittr_2.0.3      jsonlite_1.8.7      httr_1.4.6         \n[13] hms_1.1.3           haven_2.5.2         googlesheets4_1.1.1\n[16] googledrive_2.1.1   dtplyr_1.3.1        dbplyr_2.3.2       \n[19] cli_3.6.1           conflicted_1.2.0    broom_1.0.5        \n[22] pacman_0.5.1        lubridate_1.9.2     forcats_1.0.0      \n[25] stringr_1.5.0       dplyr_1.1.2         purrr_1.0.1        \n[28] readr_2.1.4         tidyr_1.3.0         tibble_3.2.1       \n[31] ggplot2_3.4.2       tidyverse_2.0.0    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.3      xfun_0.39         htmlwidgets_1.6.2 gargle_1.5.1     \n [5] tzdb_0.4.0        vctrs_0.6.3       tools_4.3.1       generics_0.1.3   \n [9] fansi_1.0.4       pkgconfig_2.0.3   data.table_1.14.8 lifecycle_1.0.3  \n[13] compiler_4.3.1    textshaping_0.3.6 munsell_0.5.0     htmltools_0.5.5  \n[17] yaml_2.3.7        cachem_1.0.8      tidyselect_1.2.0  digest_0.6.31    \n[21] stringi_1.7.12    fastmap_1.1.1     grid_4.3.1        colorspace_2.1-0 \n[25] utf8_1.2.3        withr_2.5.0       scales_1.2.1      backports_1.4.1  \n[29] timechange_0.2.0  rmarkdown_2.23    cellranger_1.1.0  memoise_2.0.1    \n[33] evaluate_0.21     knitr_1.43.1      glue_1.6.2        DBI_1.1.3        \n[37] R6_2.5.1          systemfonts_1.0.4 fs_1.6.2"
  },
  {
    "objectID": "posts/2023-03-15-in-a-dungeon/index.html",
    "href": "posts/2023-03-15-in-a-dungeon/index.html",
    "title": "Fun and learning. In a dungeon!",
    "section": "",
    "text": "Learn hard and you too can be a mobile gamedev like me."
  },
  {
    "objectID": "posts/2023-03-15-in-a-dungeon/index.html#tldr",
    "href": "posts/2023-03-15-in-a-dungeon/index.html#tldr",
    "title": "Fun and learning. In a dungeon!",
    "section": "tl;dr",
    "text": "tl;dr\nToday I spoke at a public sector1 event for data scientists2. I said that learning is best when focused into little projects that are fun."
  },
  {
    "objectID": "posts/2023-03-15-in-a-dungeon/index.html#to-the-point",
    "href": "posts/2023-03-15-in-a-dungeon/index.html#to-the-point",
    "title": "Fun and learning. In a dungeon!",
    "section": "To the point",
    "text": "To the point\nThe abstract sums it up, obviously:\n\nEver done a technical training module and then immediately forgot what you learnt? Do you sometimes feel like you’re ticking boxes instead of actually developing your skills? Yeah, me too. Luckily, more active styles of learning are available. Maybe you can try working on a small, focused project where you can make mistakes and have fun. I’ve had success with this and, as a bonus, accidentally learnt more than I had planned to. I’ll give you an example of my experience and some ideas for how you might be able to do it yourself. The talk will involve a detour to an underground cave, but you won’t need any extra equipment.3\n\nYes, a cheeky teaser there to pique the interest. But everyone came to my talk anyway because it was the only one at that timeslot.\nYou can just look at the slides below if you want (direct link, source). Press ‘s’ to pop out the speaker notes.\n\n\n\n\n\n\n\n\nThese were made with Revealjs via Quarto, of course."
  },
  {
    "objectID": "posts/2023-03-15-in-a-dungeon/index.html#on-my-soapbox",
    "href": "posts/2023-03-15-in-a-dungeon/index.html#on-my-soapbox",
    "title": "Fun and learning. In a dungeon!",
    "section": "On my soapbox",
    "text": "On my soapbox\nSo what incredible insight did I bring to the event?\nBasically, I think ‘module-based’ learning—often passive video walkthroughs with comprehension exercises—are too generic and I usually struggle to remember anything from them.\nI think ‘project-based’ learning is preferable. Think about what you actually want to learn and develop a small-scope, discrete project around it. Make the subject matter fun. Fail meaningfully by be being open, recording what you’ve found, and involving your community.\nMy contrived soundbite is that module-based is done to you and project-based is done by you.\nIs this a new thought technology? No. Is it always true and applicable to everyone in every conceivable scenario and with every learning need? No. What’s my expertise? None, really. I’ve just spent a long time in lots of different departments and I can tell you what has worked for me4 as someone who entered the public sector with little computing or coding ability.\nAm I all too aware of how self-indulgent this all sounds? Yes. Did I need a whole talk to explain this? No, probably not. I’m happy if just one person stops to think about this next time they want to learn something. I’m also content if one person panicked slightly when they realised that R is a game engine now."
  },
  {
    "objectID": "posts/2023-03-15-in-a-dungeon/index.html#environment",
    "href": "posts/2023-03-15-in-a-dungeon/index.html#environment",
    "title": "Fun and learning. In a dungeon!",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:26:56 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2   compiler_4.3.1      fastmap_1.1.1      \n [4] cli_3.6.1           tools_4.3.1         htmltools_0.5.5    \n [7] xaringanExtra_0.7.0 rstudioapi_0.14     yaml_2.3.7         \n[10] rmarkdown_2.23      knitr_1.43.1        jsonlite_1.8.7     \n[13] xfun_0.39           digest_0.6.31       rlang_1.1.1        \n[16] evaluate_0.21"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Attribution-NonCommercial-ShareAlike 4.0 International",
    "section": "",
    "text": "Creative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\n\n\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n\nConsiderations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. More considerations for licensors.\nConsiderations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor’s permission is not necessary for any reason–for example, because of any applicable exception or limitation to copyright–then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public.\n\n\n\n\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\n\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-NC-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution, NonCommercial, and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nNonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\n\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nA. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and\nB. produce, reproduce, and Share Adapted Material for NonCommercial purposes only.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nB. Additional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nC. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes.\n\n\n\n\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\nA. retain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nB. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nC. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\n\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-NC-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\n\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\n\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\n\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\n\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\n\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org"
  },
  {
    "objectID": "LICENSE.html#creative-commons-attribution-noncommercial-sharealike-4.0-international-public-license",
    "href": "LICENSE.html#creative-commons-attribution-noncommercial-sharealike-4.0-international-public-license",
    "title": "Attribution-NonCommercial-ShareAlike 4.0 International",
    "section": "",
    "text": "By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\n\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-NC-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution, NonCommercial, and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nNonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\n\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nA. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and\nB. produce, reproduce, and Share Adapted Material for NonCommercial purposes only.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nB. Additional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nC. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes.\n\n\n\n\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\nA. retain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nB. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nC. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\n\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-NC-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\n\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\n\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\n\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\n\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\n\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org"
  },
  {
    "objectID": "posts/2023-02-26-nook-s7/index.html#tldr",
    "href": "posts/2023-02-26-nook-s7/index.html#tldr",
    "title": "Repaying Tom Nook with {S7}",
    "section": "tl;dr",
    "text": "tl;dr\nThe R7 S7 object-oriented system is coming to R. I’ve done a little R6-to-S7 translation on an old project to get a very cursory feel for it, featuring Animal Crossing New Horizons.\n\n❗️ Warning\nThe S7 system and package are under development and could change at any time, rendering everything in this post useless.1 Heck, last time I checked, the system was called ‘R7’. There’s also a chance that S7 elements may have been integrated into base R itself by the time you read this."
  },
  {
    "objectID": "posts/2023-02-26-nook-s7/index.html#again-oh-no",
    "href": "posts/2023-02-26-nook-s7/index.html#again-oh-no",
    "title": "Repaying Tom Nook with {S7}",
    "section": "2020 again, oh no",
    "text": "2020 again, oh no\nAnimal Crossing New Horizons (ACNH) was the perfect pandemic game. And the pandemic was the perfect time to build an ersatz version of the ACNH in-game banking system to solve an exercise in the Advanced R book using the {R6} package for object-oriented programming (OOP) in R.\nThe exercise helped me fantasize about defeating the game’s main boss, the predatory loanshark (loanraccoon?) Tom Nook, via endless wire transfers of hard-earned in-game currency, called ‘Bells’.\nOf course, a lot has changed since 2020. Most importantly, a new OOP system for R is being developed. Conversely, Tom Nook has not changed. He is still a scourge.\nAnyway, maybe this is a chance to twitch my OOP muscles with this new system."
  },
  {
    "objectID": "posts/2023-02-26-nook-s7/index.html#oop-they-did-it-again",
    "href": "posts/2023-02-26-nook-s7/index.html#oop-they-did-it-again",
    "title": "Repaying Tom Nook with {S7}",
    "section": "OOP they did it again",
    "text": "OOP they did it again\nThe R Consortium’s OOP working group has been beavering (raccooning?) away to develop a new OOP system from the ground up: S72 (S3 + S4, geddit?).\nThe idea is to take the best elements of the existing and in-built S3 and S4 systems, interface with them and improve on them.\nYou can read various design docs and meeting minutes on their documentation site, which is housed in their ‘OOP-WG’ GitHub repo, and try out the current iteration of the associated package, fittingly called {S7}.\nYou should refer to their docs in the first instance, or a useful third party review. For example, Jumping Rivers have… jumped the river on this one and produced a handy intro."
  },
  {
    "objectID": "posts/2023-02-26-nook-s7/index.html#a-new-horizon-for-oop",
    "href": "posts/2023-02-26-nook-s7/index.html#a-new-horizon-for-oop",
    "title": "Repaying Tom Nook with {S7}",
    "section": "A new horizon for OOP",
    "text": "A new horizon for OOP\nNaturally, I should revisit my post on Repaying Tom Nook with {R6} by replicating it with {S7}. Naturally.\nAha, but actually the {S7} package is more like a development of S3 and S4 objects, and is not a ‘new version’ of {R6}! Ah well. I’m noodling around with {S7} for my own devices and thought I’d post it here so I can refer back to it later.\nBasically I’m recycling content from a previous post to get a feel for the new system. But only in the most superficial, basic way. I spent about 15 minutes on this. Look elsewhere for actually-usefully material. You have been warned."
  },
  {
    "objectID": "posts/2023-02-26-nook-s7/index.html#install",
    "href": "posts/2023-02-26-nook-s7/index.html#install",
    "title": "Repaying Tom Nook with {S7}",
    "section": "Install",
    "text": "Install\nFor now, the {S7} package is in the R Consortium’s OOP-WG GitHub repo.\n\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"RConsortium/OOP-WG\")\n\nAnd for some glamour we’ll also use the quintessential {emoji} package3\n\ninstall.packages(\"emoji\")  # if not yet installed\nlibrary(emoji)"
  },
  {
    "objectID": "posts/2023-02-26-nook-s7/index.html#that-is-class",
    "href": "posts/2023-02-26-nook-s7/index.html#that-is-class",
    "title": "Repaying Tom Nook with {S7}",
    "section": "That is class",
    "text": "That is class\nA new class is constructed with… new_class()\nWe can give it a name. We can also give it properties: fields that contain data and can be provided a type check and default value. It’s possible to build validators for these as well, which ensure that certain conditions are met when the properties are adjusted. I’ll keep this simple for now: I just want the values to remain equal or greater than zero.\n\nABD &lt;- new_class(\n  name = \"ABD\",\n  properties = list(\n    savings = new_property(class_integer, default = 0L),\n    loan = new_property(class_integer, default = 2498000L)\n  ),\n  validator = function(self) {\n    if (self@savings &lt; 0L) {\n      \"@savings must be zero or more\"\n    } else if (self@loan &lt; 0L) {\n      \"@loan must be zero or more\"\n    }\n  }\n)\n\nFor new methods, you can create a new ‘generic’ and define a function for it. For example, the ‘deposit’ method is pretty straightforward: it just adds an amount to the current savings value.\n\ndeposit &lt;- new_generic(\"deposit\", \"x\")\n\nmethod(deposit, ABD) &lt;- function(x, amount) {\n  x@savings &lt;- x@savings + amount\n  x\n}\n\nI specified some other methods, but I hid them because they’re not much more complicated.\n\n\nClick for more methods\n\nThe ‘withdraw’ method subtracts a specified amount from the savings property. You’re warned if you specify an amount greater than the amount available.\n\nwithdraw &lt;- new_generic(\"withdraw\", \"x\")\n\nmethod(withdraw, ABD) &lt;- function(x, amount) {\n  \n  if (x@savings - amount &lt; 0L) {\n    warning(\n      \"Withdrew all savings: \", x@savings, \" Bells.\\n\", \n      call. = FALSE\n    )\n    x@savings &lt;- 0L\n  } else {\n    x@savings &lt;- x@savings - amount\n  }\n  \n  x\n  \n}\n\nThe ‘pay’ method moves funds from savings to loan. You’re warned if the loan is already paid, if you specify a greater amount than there are savings, or if you pay a greater amount than the loan remaining. You’ll get a victory message if you pay off the whole loan.\n\npay &lt;- new_generic(\"pay\", \"x\")\n\nmethod(pay, ABD) &lt;- function(x, amount) {\n  \n  if (x@loan == 0L) {\n    stop(\"You already finished paying your loan!\\n\", call. = FALSE)\n  }\n  \n  if (x@savings - amount &lt; 0L) {\n    warning(\n      \"Paid total amount from savings instead: \", x@savings, \" Bells.\\n\",\n      call. = FALSE\n    )\n    x@loan &lt;- x@loan - x@savings\n    x@savings &lt;- 0L\n  } else if (x@loan - amount &lt; 0L) {\n    warning(\n      \"Paid total remaining loan instead: \", x@loan, \" Bells.\\n\",\n      call. = FALSE\n    )\n    x@savings &lt;- x@savings - x@loan \n    x@loan &lt;- 0L\n  } else {\n    x@savings &lt;- x@savings - amount\n    x@loan &lt;- x@loan - amount\n  }\n  \n  if (x@loan == 0L) {\n    cat(\n      emoji(\"smiley\"),\n      \"Sweet! I finally finished paying off my very last home loan!\",\n      emoji(\"tada\"), \"\\n\\n\"\n    )\n  }\n  \n  x\n  \n}\n\nThe check method is basically a print method. It reports the loan and savings amounts currently stored in the bank.\n\ncheck &lt;- new_generic(\"check\", \"x\")\n\nmethod(check, ABD) &lt;- function(x) {\n\n  loan_formatted &lt;- format(x@loan, big.mark = \",\", scientific = FALSE)\n\n  savings_formatted &lt;- format(x@savings, big.mark = \",\", scientific = FALSE)\n\n  cat(\"Automatic Bell Dispenser (ABD)\\n\\n\")\n  cat(emoji(\"bell\"), \"Loan Balance:\", loan_formatted, \"Bells\\n\")\n  cat(emoji(\"pig2\"), \"Savings Balance:\", savings_formatted, \"Bells\\n\\n\")\n  cat(\n    \"Please make a selection from the menu below\\n\\n\",\n    emoji(\"house\"), \"pay()\\n\",\n    emoji(\"arrow_up\"), \"deposit()\\n\",\n    emoji(\"arrow_down\"), \"withdraw()\"\n  )\n\n}\n\n\nYou can start a new instance of the ABD class by, y’know, calling it.\n\nbank &lt;- ABD()\n\nWhen you check the class of this object, you’ll see both the custom class name and a reminder that it has the ‘S7’ class.\n\nclass(bank)\n\n[1] \"ABD\"       \"S7_object\"\n\n\nThe vanilla print method exposes the properties and their startup values:\n\nbank\n\n&lt;ABD&gt;\n @ savings: int 0\n @ loan   : int 2498000\n\n\nNote that the properties are prepended with @. This indicates that we can use the ‘at’ symbol to access these ‘slots’ (like S4) from the object, like:\n\nbank@loan\n\n[1] 2498000\n\n\nWhile we’re printing stuff, we can use the check() method (that I’ve pre-specified) to see the properties in a manner that more closely resembles the game.\n\ncheck(bank)\n\nAutomatic Bell Dispenser (ABD)\n\n🔔 Loan Balance: 2,498,000 Bells\n🐖 Savings Balance: 0 Bells\n\nPlease make a selection from the menu below\n\n 🏠 pay()\n ⬆️ deposit()\n ⬇️ withdraw()\n\n\nYou can easily and directly change the properties. To add 10 Bells:\n\nbank@savings &lt;- 9.99\n\nError: &lt;ABD&gt;@savings must be &lt;integer&gt;, not &lt;double&gt;\nHaha, whoops. Remember I specified that the property can only be an integer, so we need to provide an integer value instead of a double value. In other words, we can only provide whole numbers of Bells. Remember that the L suffix is used in R to signify an integer.4\n\nbank@savings &lt;- 10L\n\nIs there an overdraft? Tom Nook would probably love that and would ask for massive overdraft fees, but it’s not programmed into the game. This is where our validator comes in handy. We specified that you can’t have a negative amount of savings, so this causes an error:\n\nbank@savings &lt;- -11L\n\nError: &lt;ABD&gt; object is invalid:\n- @savings must be zero or more\nThat’s fine, but I have sometimes I have extra logic I want to evaluate when I adjust the properties. That’s why I created new methods earlier on. It means I can use a function to add to the savings property instead, for example.\n\nbank &lt;- deposit(bank, 10L)\nbank@savings\n\n[1] 10\n\n\nWe can retrieve Bells in this fashion too:\n\nbank &lt;- withdraw(bank, 10L)\nbank@savings\n\n[1] 0\n\n\nWhat if we deposit enough Bells to pay the loan?\n\nbank &lt;- deposit(bank, 2500000L)\nbank &lt;- pay(bank, 2500000L)\n\nWarning: Paid total remaining loan instead: 2498000 Bells.\n\n\n😃 Sweet! I finally finished paying off my very last home loan! 🎉 \n\n\nThe method warns us when we try to pay off a value greater than the remaining loan and prints a nice congratulatory message if we’ve cleared the whole debt.\nAnd so we end up with this view:\n\ncheck(bank)\n\nAutomatic Bell Dispenser (ABD)\n\n🔔 Loan Balance: 0 Bells\n🐖 Savings Balance: 2,000 Bells\n\nPlease make a selection from the menu below\n\n 🏠 pay()\n ⬆️ deposit()\n ⬇️ withdraw()\n\n\nHuzzah. Get rekt, raccoon dog. More like Tom Crook amirite."
  },
  {
    "objectID": "posts/2023-02-26-nook-s7/index.html#environment",
    "href": "posts/2023-02-26-nook-s7/index.html#environment",
    "title": "Repaying Tom Nook with {S7}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:26:57 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] emoji_15.0    S7_0.0.0.9000\n\nloaded via a namespace (and not attached):\n [1] digest_0.6.31     fastmap_1.1.1     xfun_0.39         magrittr_2.0.3   \n [5] glue_1.6.2        stringr_1.5.0     knitr_1.43.1      htmltools_0.5.5  \n [9] rmarkdown_2.23    lifecycle_1.0.3   cli_3.6.1         compiler_4.3.1   \n[13] rstudioapi_0.14   tools_4.3.1       evaluate_0.21     yaml_2.3.7       \n[17] rlang_1.1.1       jsonlite_1.8.7    htmlwidgets_1.6.2 stringi_1.7.12"
  },
  {
    "objectID": "posts/2022-04-27-tide/index.html#tldr",
    "href": "posts/2022-04-27-tide/index.html#tldr",
    "title": "Turn the {tide} on R’s secret spreadsheet editor",
    "section": "tl;dr",
    "text": "tl;dr\nR has an interactive spreadsheet editor for dataframes that you can access with edit(). I made the function tide::tide() to generate automatically some code that will reproduce the changes you made manually with edit()."
  },
  {
    "objectID": "posts/2022-04-27-tide/index.html#edit",
    "href": "posts/2022-04-27-tide/index.html#edit",
    "title": "Turn the {tide} on R’s secret spreadsheet editor",
    "section": "Edit",
    "text": "Edit\nR’s edit() function invokes a text editor so you can amend an R object.1\nSomething special happens If you edit() a data.frame object: a somewhat-janky interactive spreadsheet-like editor appears in a new window.2\nClick in a cell to amend a value, or click in the header for a menu that lets you change the column name, or switch between real and character classes. There are even buttons to copy and paste values.\nClick the ‘quit’ button to confirm your changes. The edited data is returned to you back in the console.\nBut that’s not very reproducible. How can anyone recreate the amended dataframe from the original if your clicks and keypresses weren’t recorded?\nCan we make edit() more reproducible?"
  },
  {
    "objectID": "posts/2022-04-27-tide/index.html#tide",
    "href": "posts/2022-04-27-tide/index.html#tide",
    "title": "Turn the {tide} on R’s secret spreadsheet editor",
    "section": "Tide",
    "text": "Tide\nBasic premise: create a function that accepts a dataframe as input, opens the edit menu, observes the updated values and generates code to reproduce the new object from the old.\nI’ve created the concept package, {tide}, to do this.3 It has only one, eponymous function: tide().\nWhy ‘tide’? Well, it’s ‘edit’ backwards. And we’re ‘turning the tide’ on the edit() function to make it reproducible, geddit?4\nYou can install {tide} from GitHub. The {clipr} package, which can copy text to your clipboard, will also be installed.\n\nif (!require(remotes)) install.packages(\"remotes\")\ninstall_github(\"matt-dray/tide\")\n\nSo let’s get our feet wet with an example. Here’s a thematically-related data.frame of the tide table for London Bridge for May 1 2022.\n\ntide_table &lt;- data.frame(\n  type = c(\"High\", \"Low\", NA_character_, \"Low\"),\n  time_bst = c(\"02:58\", \"09:42\", \"15:20\", \"21:58\"),\n  height_m = c(7.0, 0.5, 6.9, 70)\n)\n\ntide_table\n\n  type time_bst height_m\n1 High    02:58      7.0\n2  Low    09:42      0.5\n3 &lt;NA&gt;    15:20      6.9\n4  Low    21:58     70.0\n\n\nBut whoops: the missing value should be ‘High’ and the height is wrong by two orders of magnitude for the 21:58 low tide.\nSo, let’s use tide::tide() on the dataframe to edit those values.\n\nlibrary(tide)\ntide(tide_table)\n\nThis opens a separate data-editor window. Here’s how it looks when it opens:5\n\nAnd once I’ve made the adjustments manually:\n\nAnd here’s what’s returned to the console once I’ve clicked the ‘Quit’ button:\nWrote code to clipboard\n##   type time_bst height_m\n## 1 High    02:58      7.0\n## 2  Low    09:42      0.5\n## 3 High    15:20      6.9\n## 4  Low    21:58      0.7\nYou can see the edits have been successfully returned. This is also what you’d see if you just used edit().\nThe extra feature from tide() is evident in the message Wrote code to clipboard: the function generated some lines of code that will take you from the original to the edited object.\nSo if we now paste from the clipboard we get:\n\ntide_table[3, 1] &lt;- \"High\"\ntide_table[4, 3] &lt;- 0.7\n\nIn other words, ‘replace the value in row 3, column 1 of the tide_table object with the string value \"High\"’, for example.\nAnd if we actually run those lines, we can recreate the amended data.frame from the original:\n\ntide_table\n\n  type time_bst height_m\n1 High    02:58      7.0\n2  Low    09:42      0.5\n3 High    15:20      6.9\n4  Low    21:58      0.7\n\n\nSo, hurrah, we now have a method of manually editing the table and getting some code back that can reproduce it."
  },
  {
    "objectID": "posts/2022-04-27-tide/index.html#diet",
    "href": "posts/2022-04-27-tide/index.html#diet",
    "title": "Turn the {tide} on R’s secret spreadsheet editor",
    "section": "Diet",
    "text": "Diet\nTo borrow another anagram of ‘edit’ the capability of the package is quite… lightweight. Some issues are that:\n\nthe function currently only works if you amend individual values (cells), not if you change headers, or add rows and columns\nthe returned code will operate on a cell-by-cell basis, so you might get x[1, 1] &lt;- \"A\" and x[2, 1] &lt;- \"B\" where actually it could have been the more convenient to get x[1:2, 1] &lt;- c(\"A\", \"B\")\nthe returned code refers to columns by index, even though it’s more explicit to refer to them by name, like x[1, \"col1\"] &lt;- \"A\"\nthe returned code will be written in base R and will edit in place by index (i.e. [&lt;-), it doesn’t return {data.table}- or tidyverse-compliant code\nyou only get the code in your clipboard, it isn’t returned from the function\n\nI might update the package to handle this stuff in future, or you can do it for me with a pull request in the GitHub repo.\nBut to be honest, the data editor is probably a bit too clunky and simple to be useful for most use cases. So there’s not much point expanding this package beyond a concept.\nOr maybe the approach will pick up pace like the Severn Estuary tidal bore, who knows? Or maybe you think this post is a bore.6"
  },
  {
    "objectID": "posts/2022-04-27-tide/index.html#environment",
    "href": "posts/2022-04-27-tide/index.html#environment",
    "title": "Turn the {tide} on R’s secret spreadsheet editor",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-02 12:36:29 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2021-08-10-dehex/index.html#tldr",
    "href": "posts/2021-08-10-dehex/index.html#tldr",
    "title": "Read a hex colour code with {dehex}",
    "section": "tl;dr",
    "text": "tl;dr\nI wrote an R package, {dehex}, that helps you learn to ‘read’ a hex colour code by eye according to David DeSandro’s method. Check out his mindblowing talk."
  },
  {
    "objectID": "posts/2021-08-10-dehex/index.html#hue-are-you",
    "href": "posts/2021-08-10-dehex/index.html#hue-are-you",
    "title": "Read a hex colour code with {dehex}",
    "section": "Hue are you?",
    "text": "Hue are you?\nHex codes are used in computing to encode a colour as a succinct six-digit alphanumeric string, like #F4D82A.\nThese codes are written in hexadecimal (hence ‘hex’): they can take the characters 0 to 9 and A to F, which encodes 16 possible values. This encodes 16 million colours total, which are easy for computers to store and interpret.\nEach pair of characters basically encodes red, green and blue. For example, the code #FF000 is ‘red’. It uses the highest of these hex values, ‘F’, in both of the ‘red’ positions, while the green and blue pairs are zero.\nThat’s easy enough to decipher, but what about #8ACD52 or #C0FFEE?1 You could copy these into a tool that returns colour information (many search engines can do this now) but they often return a sample and not the colour’s name.\nI’m red-green colourblind and have difficulty identifying and talking about colours, so that’s not always helpful."
  },
  {
    "objectID": "posts/2021-08-10-dehex/index.html#the-desandro-method",
    "href": "posts/2021-08-10-dehex/index.html#the-desandro-method",
    "title": "Read a hex colour code with {dehex}",
    "section": "The DeSandro Method",
    "text": "The DeSandro Method\nDavid DeSandro of Metafizzy gave a talk at the dotCSS conference in 2018 about his superpower: ‘reading’ a hex colour code by eye.2\nHis talk is comprehensive and has excellent visuals. I strongly recommend that you watch his explanation if you find this topic interesting. You can also find the slides and a great written explanation on his blog. I cannot do justice here to such a powerful thought technology.\nIn short, it’s possible to look at a hex code like #F2D359 and get the rough hue, saturation and lightness of the colour it encodes, which you can speak as an English phrase like ‘light washed yellow’. David, too, is colourblind and has found success with his method.\nThis post isn’t about colour theory and I’m definitely not an expert, but the point of the method is that you don’t need to be one."
  },
  {
    "objectID": "posts/2021-08-10-dehex/index.html#introducing-dehex",
    "href": "posts/2021-08-10-dehex/index.html#introducing-dehex",
    "title": "Read a hex colour code with {dehex}",
    "section": "Introducing {dehex}",
    "text": "Introducing {dehex}\n\n\n\nThis is a hex logo, but it has a white background.\n\n\nRight, so I’ve made a small R package called {dehex} that you can use to:\n\nTrain yourself to read hex codes with the DeSandro Method\nReturn a rough English phrase for a given hex code\n\nAll from your R console.\nThe package is on GitHub and you can install with the help of {remotes}.\n\nremotes::install_github(\"matt-dray/dehex\")\n\nThe reason for the name should be obvious: you’re ‘dehexing’, i.e. converting from hex. But also I like the connotation of removing a ‘hex’ as in a spell. The colour is cursed; it’s trapped behind a code.\nUsual warnings: the package needs a refactor, there’s probably some bugs, but it works for me. Drop an issue or PR in the GitHub repo with any ideas or suggestions.\n\nCheat codes\nYou are thinking:\n\nUgh, this sounds like effort, just tell me what colour my hex code is\n\nSo I’m going to show you immediately how to retrieve an English phrase and a colour sample for a given hex code. Probably this is the most useful bit of the package for users who don’t want to become a hex mentat.3\nSince we’re ‘solving’ the hex code, the function is called dh_solve().4 It outputs a text string.\n\ndehex::dh_solve(\"#F2D359\")\n\n[1] \"light washed yellow\"\n\n\nIf you set swatch to TRUE, then you’ll get a plot filled with that colour as well.\n\ndehex::dh_solve(\"#F2D359\", swatch = TRUE)\n\n\n\n\n[1] \"light washed yellow\"\n\n\nHow lovely.\n\nℹ️ Note\nI later noticed that the package {ColorNameR} exists, which has the express purpose of taking a colour code and returning a name for that colour.\n\n\n\nLearning is fun\nFor the more adventurous, you can use {dehex} to learn how to read a hex code with DeSandro’s method from your R console.\nThere’s five steps:\n\nSimplify from a six- to a three-digit hex code\nCreate a bar chart from the RGB values encoded by the short hex\nAssess hue (red, orange, violet, etc) from the chart’s ‘shape’\nAssess saturation (‘saturated’, ‘washed’, etc) from the range of the RGB values\nAssess lightness (‘dark’, ‘middle’, ‘light’) from the total of the RGB values\n\nI’ve incorporated each of these into {dehex}, plus a method for getting the answer.\n\n1. Three-digit code\nTurns out that the first value of each pair is the important one when determining colour, so you can shorten the standard six-digit hex code to just three digits.\nThat’s easy enough to do in your head, but the function dh_shorten() does it for you:\n\nhex_code &lt;- \"#F2D359\"\nshort_code &lt;- dehex::dh_shorten(hex_code)\nshort_code\n\n[1] \"#FD5\"\n\n\nAs it happens, the short code is still recognised by interpreters, but it’s often expanded double up each value to get back to six. So #FD5 is technically #FFDD55 rather than the original #F2D359, but that doesn’t really matter for our purposes.\n\n\n2. RGB graph\nThe values in the shortcode encode an ‘amount’ of red, green and blue. The lowest value is 0 and the highest is F, which is hexadecimal for 15. The higher the value, the more that’s ‘mixed’ into the final colour.\nYou can use dh_graph() to create this for you automatically. Rather than generate a plot though, we can just print a cute bar graph to the console. We’re only using it for reference, after all.\n\ndehex::dh_graph(\n  short_code,\n  adorn_h = FALSE, adorn_s = FALSE, adorn_l = FALSE\n)\n\n#FD5\nR ████████████████\nG ██████████████░░\nB ██████░░░░░░░░░░\n\n\nFor whatever reason, certain browsers struggle to render these graph outputs correctly in this blog post (seems fine in Firefox). In your console, the graphs will appear with neat ‘continuous’ bars instead of as individual blocks. Example in a dark theme editor:\n\nThe output is a horizontal chart showing the values of red (R), green (G) and blue (B) encoded by the hex short code. Each bar is made from 16 unicode block elements (i.e. 0 to 15), which are ‘filled’ to represent the amount of each colour.\nIf you’re using RStudio, this will print in colour, thanks to the {crayon} package (although you can turn it off with the argument crayon = FALSE). That looks like this using RStudio’s default light theme:\n\nOr, using a dark theme:\n\nPerhaps you’re wondering what the adorn_* arguments do in dh_graph(). They add extra information to the output that will help us in steps 3 to 5. I’ll switch these on as we go through those next steps.\n\n\n3. Hue\nFor our purposes, hue is basically a name we give a colour, like ‘orange’. We’re going to compare the ‘profile’ or ‘shape’ of our RGB graph to a number of others to determine which one most closely resembles ours.\nFor simplicity, we stick only to the primary, secondary and tertiary colours in the RGB colour system: red, green and blue; yellow, cyan, magenta; orange, chartreuse, aquamarine, azure, violet and rose. We also include a special case: grey.5\nThe {dehex} package has a built in guide that will print RGB graphs for each of these colours. Since this is a guide for hue, you pass the argument \"H\". I’ve hidden the output, since there are 13 graphs.\n\ndehex::dh_guide(\"H\")\n\n\n\nClick to expand the hue guides\n\n\n\nred\nR ████████████████ H 3\nG █░░░░░░░░░░░░░░░ H 1.5\nB █░░░░░░░░░░░░░░░ H 1.5\n\ngreen\nR █░░░░░░░░░░░░░░░ H 1.5\nG ████████████████ H 3\nB █░░░░░░░░░░░░░░░ H 1.5\n\nblue\nR █░░░░░░░░░░░░░░░ H 1.5\nG █░░░░░░░░░░░░░░░ H 1.5\nB ████████████████ H 3\n\nyellow\nR ████████████████ H 2.5\nG ████████████████ H 2.5\nB █░░░░░░░░░░░░░░░ H 1\n\ncyan\nR █░░░░░░░░░░░░░░░ H 1\nG ████████████████ H 2.5\nB ████████████████ H 2.5\n\nmagenta\nR ████████████████ H 2.5\nG █░░░░░░░░░░░░░░░ H 1\nB ████████████████ H 2.5\n\norange\nR ████████████████ H 3\nG █████████░░░░░░░ H 2\nB █░░░░░░░░░░░░░░░ H 1\n\nchartreuse\nR █████████░░░░░░░ H 2\nG ████████████████ H 3\nB █░░░░░░░░░░░░░░░ H 1\n\naquamarine\nR █░░░░░░░░░░░░░░░ H 1\nG ████████████████ H 3\nB █████████░░░░░░░ H 2\n\nazure\nR █░░░░░░░░░░░░░░░ H 1\nG █████████░░░░░░░ H 2\nB ████████████████ H 3\n\nviolet\nR █████████░░░░░░░ H 2\nG █░░░░░░░░░░░░░░░ H 1\nB ████████████████ H 3\n\nrose\nR ████████████████ H 3\nG █░░░░░░░░░░░░░░░ H 1\nB █████████░░░░░░░ H 2\n\ngrey\nR █████████░░░░░░░ H 2\nG █████████░░░░░░░ H 2\nB █████████░░░░░░░ H 2\n\n\n\nYou can see that I’ve added a value to the end of each bar, which represents the ranking of the RGB values. This follows the logic of the rank() function in base R: 1 is smallest, 3 is largest and ties are the average of the shared ranks. However, I’ve increased the tolerance for ties.6\nWhich of the graphs in the hue guide most closely resemble our colour?\nYou might be able to see by eye that it’s probably yellow, but we look at our graph again but this time with adorn_h set to TRUE (the default).\n\ndehex::dh_graph(\n  short_code,\n  adorn_h = TRUE, adorn_s = FALSE, adorn_l = FALSE\n)\n\n#FD5\nR ████████████████ H 2.5\nG ██████████████░░ H 2.5\nB ██████░░░░░░░░░░ H 1\n\n\nSo, we have an RGB hue ranking of 2.5-2.5-1, which indeed matches the ‘yellow’ ranks in the guide, even if the RGB values are not exactly the same.\nI admit this step is quite clunky and it doesn’t help that there’s so many plots to compare against. It’s easier I think when you have a colour wheel arrangement to look at, like in DeSandro’s talk. Remember: with {dehex}’s help, you just need to look at the ranking values at the end of each bar.\n\n\n4. Saturation\nNow we repeat the process for saturation. This time we’re going to compare the range of RGB values. This is easier because there’s only three (‘saturated’, ‘washed’ and ‘muted’) plus grey (i.e. zero range).\nThis time we pass \"S\" for the saturation guide:\n\ndehex::dh_guide(\"S\")\n\n\n\nClick to expand the saturation guides\n\n\n\nsaturated\nR ████████████████\nG █████████░░░░░░░\nB █░░░░░░░░░░░░░░░\nS ████████████████\n\nwashed\nR █████████████░░░\nG █████████░░░░░░░\nB ████░░░░░░░░░░░░\nS ░░░██████████░░░\n\nmuted\nR ██████████░░░░░░\nG █████████░░░░░░░\nB ███████░░░░░░░░░\nS ░░░░░░████░░░░░░\n\ngrey\nR █████████░░░░░░░\nG █████████░░░░░░░\nB █████████░░░░░░░\nS ░░░░░░░░█░░░░░░░\n\n\n\nThis time there’s an additional bar for saturation, labelled ‘S’, that indicates the range of RGB values covered by each level of saturation. We can compare the saturation of our colour with the adorn_s argument set to TRUE.\n\ndehex::dh_graph(\n  short_code,\n  adorn_h = FALSE, adorn_s = TRUE, adorn_l = FALSE\n)\n\n#FD5\nR ████████████████\nG ██████████████░░\nB ██████░░░░░░░░░░\nS ░░░░░███████████\n\n\nSo, that’s roughly the range of the ‘washed’ category of saturation.\n\n\n5. Lightness\nFinally, we do the same for the lightness of the colour (‘light’, ‘middle’ and ‘dark’. You can total up the values, where higher values are lighter, but I’ve chosen to mark the mean value in {dehex} because I think it’s easier to interpret from the graph format.\nProvide \"L\" for lightness to the dh_guide() function:\n\ndehex::dh_guide(\"L\")\n\n\n\nClick to expand the lightness guides\n\n\n\nlight\nR ████████████████\nG ███████████████░\nB ██████████████░░\nL ░░░░░░░░░░░░░░█░\n\nmiddle\nR ██████████░░░░░░\nG █████████░░░░░░░\nB ████████░░░░░░░░\nL ░░░░░░░░█░░░░░░░\n\ndark\nR ████░░░░░░░░░░░░\nG ███░░░░░░░░░░░░░\nB ██░░░░░░░░░░░░░░\nL ░░█░░░░░░░░░░░░░\n\n\n\nAnd again, here’s the chart for our colour showing a column for lightness:\n\ndehex::dh_graph(\n  short_code,\n  adorn_h = FALSE, adorn_s = FALSE, adorn_l = TRUE\n)\n\n#FD5\nR ████████████████\nG ██████████████░░\nB ██████░░░░░░░░░░\nL ░░░░░░░░░░░█░░░░\n\n\nYep, slightly on the higher end, so it’s a lighter colour.\n\n\nSolution\nIf you followed these steps, you’ll have seen that #F2D359 is roughly ‘light washed yellow’.\nSo, {dehex} can therefore be used as a ‘training device’ to guide you through this process.\nThe idea is that you remember the hue shapes (relatively hard because there’s lots), the saturation ranges (i.e. wider range means more saturated) and lightness averages (i.e. higher is lighter) from the guides and compare your colour to those.\nYou can check your answer (or cheat, of course) by using dh_solve(). I showed this earlier in the post, but it also has the option to see all the matching charts for hue, saturation and lightness:\n\ndehex::dh_solve(hex_code, graphs = TRUE)\n\ninput code: #FD5\nR ████████████████ H 2.5\nG ██████████████░░ H 2.5\nB ██████░░░░░░░░░░ H 1\nS ░░░░░███████████\nL ░░░░░░░░░░░█░░░░\n\nhue: yellow\nR ████████████████ H 2.5\nG ████████████████ H 2.5\nB █░░░░░░░░░░░░░░░ H 1\n\nsaturation: washed\nR █████████████░░░\nG █████████░░░░░░░\nB ████░░░░░░░░░░░░\nS ░░░██████████░░░\n\nlightness: light\nR ████████████████\nG ███████████████░\nB ██████████████░░\nL ░░░░░░░░░░░░░░█░\n\n\n[1] \"light washed yellow\"\n\n\nHere you can see the selected guides that best matched the input.\n\n\n\nTest yourself\nIf you’re really serious about this, you’ll want to practice with random hex codes, of course. Lucky for you I’ve included a function that will generate them.\nSee if you can work out what this colour is using the guides and method above and then check your answer in the details block below.\n\nset.seed(2021)\nrando_hex &lt;- dehex::dh_random()\nrando_hex\n\n[1] \"#76EA7C\"\n\n\n\n\nClick here for the solution\n\n\ndehex::dh_solve(rando_hex, swatch = TRUE, graphs = TRUE)\n\n\n\n\ninput code: #7E7\nR ████████░░░░░░░░ H 1.5\nG ███████████████░ H 3\nB ████████░░░░░░░░ H 1.5\nS ░░░░░░░████████░\nL ░░░░░░░░░█░░░░░░\n\nhue: green\nR █░░░░░░░░░░░░░░░ H 1.5\nG ████████████████ H 3\nB █░░░░░░░░░░░░░░░ H 1.5\n\nsaturation: washed\nR █████████████░░░\nG █████████░░░░░░░\nB ████░░░░░░░░░░░░\nS ░░░██████████░░░\n\nlightness: middle\nR ██████████░░░░░░\nG █████████░░░░░░░\nB ████████░░░░░░░░\nL ░░░░░░░░█░░░░░░░\n\n\n[1] \"middle washed green\"\n\n\n\nDid you get it right?"
  },
  {
    "objectID": "posts/2021-08-10-dehex/index.html#dream-of-colourfornication",
    "href": "posts/2021-08-10-dehex/index.html#dream-of-colourfornication",
    "title": "Read a hex colour code with {dehex}",
    "section": "Dream of colourfornication",
    "text": "Dream of colourfornication\nAs ever, this package and post are a Showerthought That Became Real (possible tagline for this blog); something to fill my free time.\nAt very least I’ve got a better idea of identifying hex-encoded colours without looking them up and getting confused when presented with an unnamed block of colour that my deuteronopic eyes can’t understand.\nI’m developing a Shiny app to make this more of an interactive tool that you can use without even needing access to R. I can’t promise it’ll be ready any time soon.\nAnyway, go and watch/read David DeSandro’s materials and do drop an issue or PR in the {dehex} GitHub repo if you have any contributions."
  },
  {
    "objectID": "posts/2021-08-10-dehex/index.html#environment",
    "href": "posts/2021-08-10-dehex/index.html#environment",
    "title": "Read a hex colour code with {dehex}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-08 21:43:48 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] digest_0.6.31     fastmap_1.1.1     xfun_0.39         magrittr_2.0.3   \n [5] knitr_1.43.1      htmltools_0.5.5   rmarkdown_2.23    lifecycle_1.0.3  \n [9] cli_3.6.1         grid_4.3.1        vctrs_0.6.3       compiler_4.3.1   \n[13] purrr_1.0.1       rstudioapi_0.14   tools_4.3.1       evaluate_0.21    \n[17] yaml_2.3.7        dehex_0.1.2       crayon_1.5.2      rlang_1.1.1      \n[21] jsonlite_1.8.7    htmlwidgets_1.6.2"
  },
  {
    "objectID": "posts/2022-12-11-pixeltrix-animate/index.html#tldr",
    "href": "posts/2022-12-11-pixeltrix-animate/index.html#tldr",
    "title": "Animate sprites in R with {pixeltrix}",
    "section": "tl;dr",
    "text": "tl;dr\nI’ve updated the {pixeltrix} package so you can create animated sprite gifs with a simple, interactive pixel editor from within R’s plot window."
  },
  {
    "objectID": "posts/2022-12-11-pixeltrix-animate/index.html#pix-all-the-right-boxes",
    "href": "posts/2022-12-11-pixeltrix-animate/index.html#pix-all-the-right-boxes",
    "title": "Animate sprites in R with {pixeltrix}",
    "section": "Pix all the right boxes",
    "text": "Pix all the right boxes\nThe {pixeltrix} package—which I’ve written about before—lets you open an interactive R plot that you can click to turn ‘pixels’ on and off.\nI created it for one purpose: to quickly create simple, blocky sprites for my {tamRgo} package, which lets you keep a persistent cyberpet on your computer (yes, really).\nBut wouldn’t it be nice if {pixeltrix} were more… general? Read on for a couple of improvements to the package that might help.\n\nℹ️ Update\nThe package has been updated again since this post. From version 0.2 you:\n\ncan provide colours as input to click_pixels() and frame_pixels()\nreceive a colours attribute with the output matrices, which encodes the state and colour values"
  },
  {
    "objectID": "posts/2022-12-11-pixeltrix-animate/index.html#pixellate-to-accumulate",
    "href": "posts/2022-12-11-pixeltrix-animate/index.html#pixellate-to-accumulate",
    "title": "Animate sprites in R with {pixeltrix}",
    "section": "Pixellate to accumulate",
    "text": "Pixellate to accumulate\nFirst, you can install the updated package from GitHub:\n\nremotes::install_github(\"matt-dray/pixeltrix\")  # v0.1.2 in this post\nlibrary(pixeltrix)\n\nNow the improvements: plotting with colour, and creating gif animations.\n\n1. Plot\nThe click_pixel() function opens an interactive plot. If n_state = 3, for example, then each pixel will cycle through three states as you keep clicking it. You’re returned a matrix of these values when you hit Esc.\nThat was enough for {tamRgo}: I turned a binary matrix into a 1-bit sprite. But wouldn’t it be good—fundamental!—to be able to plot the matrix as an image with user-specified colours? So I made draw_pixels().\nI’ve added a three-state matrix, blue, into the package as an example dataset. Let’s plot it with simple colours:\n\ndraw_pixels(\n  m = pixeltrix::blue, \n  colours = c(\"white\", \"#879afb\", \"gray20\")\n)\n\n\nOf course, it’s the subtly-coloured player character from Pokémon Blue (1996) as seen on the Nintendo Game Boy Color.\n\n\n2. Animate\nNaturally, you could use click_pixels() and draw_pixels() to generate several images and combine them as ‘frames’ of an animation. Why not have a function that does this automatically?\nSo that’s what I did:\n\nframe_pixels() calls click_pixels() and adds the output as the first element of a list, then it passes that matrix into edit_pixels() as the template for the next frame (and so on until you choose to stop making frames)\ngif_pixels() takes the list of matrices created by frame_pixels() and draws, combines and writes them to a gif\n\nI’ve prepared pixeltrix::mario as an example of an output from frame_pixels(). It contains each of three frames that comprise Mario’s walk cycle from Super Mario Bros on the NES.\nHere’s what the console output looked like when I made mario:\n\nmario &lt;- frame_pixels(\n  n_rows   = 16,\n  n_cols   = 16,\n  n_states = 4  # background + 3 colours\n)\n\nClick squares in the plot window. Press &lt;Esc&gt; to end.\nAdd a frame? y/n: y\nClick squares in the plot window. Press &lt;Esc&gt; to end.\nCurrent frame count: 2\nAdd a frame? y/n: y\nClick squares in the plot window. Press &lt;Esc&gt; to end.\nCurrent frame count: 3\nAdd a frame? y/n: n\nFinal frame count: 3\nYou can see there’s interactivity; the user is prompted to add another frame with Add a frame? y/n:, where y will let you create a new frame and n will stop the process and return the list of matrices.\nAnd so you can see it’s a list of three matrices:\n\nstr(mario)\n\nList of 3\n $ : int [1:16, 1:16] 0 0 0 0 0 0 0 0 1 1 ...\n $ : int [1:16, 1:16] 0 0 0 0 0 0 0 0 0 0 ...\n $ : int [1:16, 1:16] 0 0 0 0 0 0 0 0 0 0 ...\n\n\nYou can then convert the list to a gif with gif_pixels(), which engifs the frames using {gifski}.1\n\ngif_pixels(\n  frames = mario,\n  colours = c(\n    \"white\",    # background\n    \"#FDA428\",  # skin (yellowish)\n    \"#FC0D1B\",  # overalls/hat (red)\n    \"#A32B2E\"   # hair, eyes, shirt, boots (brown)\n  ),\n  file = \"mario.gif\",\n  delay = 0.15  # passed via dots to gifski::save_gif()\n)\n\nInserting image 3 at 0.30s (100%)...\nEncoding to gif... done!\n[1] \"mario.gif\"\nAnd if we open that file:\n\nYahoooooo, created entirely with R. Noice.\n\n\nPix n mix\nSo {pixeltrix} finally got a couple of nice-to-have (well, must-have) functions. This is enough for me to continue just messing around with it as a novelty2.\nI mean, come on: animated pixelart created in an interactive R plot window? Why? I mean, er… wow!"
  },
  {
    "objectID": "posts/2022-12-11-pixeltrix-animate/index.html#environment",
    "href": "posts/2022-12-11-pixeltrix-animate/index.html#environment",
    "title": "Animate sprites in R with {pixeltrix}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:01 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] pixeltrix_0.2.1.9000\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2023-02-09-londmapbotstodon/index.html#tldr",
    "href": "posts/2023-02-09-londmapbotstodon/index.html#tldr",
    "title": "Porting a Twitter bot to Mastodon",
    "section": "tl;dr",
    "text": "tl;dr\nI’ve (finally) ported the londonmapbot Twitter bot to Mastodon. Like a mammoth rising from the ashes."
  },
  {
    "objectID": "posts/2023-02-09-londmapbotstodon/index.html#tooooooot",
    "href": "posts/2023-02-09-londmapbotstodon/index.html#tooooooot",
    "title": "Porting a Twitter bot to Mastodon",
    "section": "TOOOOOOOT",
    "text": "TOOOOOOOT\nTwitter is burning to the ground, yada yada.\nFor example, it appears that the free API tier will disappear soon. Soon like… today. Oh wait, maybe not yet?1 Cool customer communication, brah.\nAnyway, this news will obviously devastate contributors and fans of the mapbotverse Twitter list.\nYou don’t know what the mapbotverse is? Oof. It’s a collection of 25 bot accounts that take some inspiration from my londonmapbot account, which uses GitHub Actions and the {rtweet} package to tweet on schedule a picture of a random spot in Greater London via MapBox.\nAnd so it’s time to update the code behind londonmapbot so that it continues to post to Twitter for as long as it survives. But also so that it lives on by posting to Mastodon via the {rtoot} package as well.\nMastowhat? Something something federated Twitter-replacement sort of thing. Tooooooot tooooooot.\n\nℹ️ Update\nI finally turned off londonmapbot on Twitter in May 2023."
  },
  {
    "objectID": "posts/2023-02-09-londmapbotstodon/index.html#masto-do-or-masto-do-not",
    "href": "posts/2023-02-09-londmapbotstodon/index.html#masto-do-or-masto-do-not",
    "title": "Porting a Twitter bot to Mastodon",
    "section": "Masto-do or masto-do-not",
    "text": "Masto-do or masto-do-not\nI’m slightly behind the curve on this: Matt Kerlogue has already ported his narrowbotR (‘narrow boater’) bot from Twitter to Mastodon and written about it.\nThe fix was fairly rudimentary in the end, thanks to standing on the shoulder of mammoths. Particularly the creators of the {rtoot} R package.\n{rtoot} lets you interact with the Mastodon API. It’s a sort-of analogue to the {rtweet} package for the Twitter API. {rtoot} was stood up very quickly by David Schoch (with co-author Chung-hong Chan and contributor Johannes Gruber) when it became clear that Mastodon was becoming the platform-du-jour for nerds.\n\nSet up Mastodon\nIt’s easier to set yourself up with API access for Mastodon compared to Twitter:\n\nSet up a Mastodon account on the dedicated bot server botsin.space (londonmapbot is @londonmapbot@botsin.space).2\nInstall the {rtoot} package.\nAuthorise yourself with Mastodon and get an API token.\n???\nAbsolutely do not profit whatsoever.\n\nSteps 2 and 3 look like this:\n\ninstall.packages(\"rtoot\")  # on CRAN\n\nrtoot::auth_setup(\n  instance  = \"botsin.space\",  # the Mastodon server the account is on\n  type      = \"user\",          # i.e. for posting from R\n  name      = \"londonmapbot\",  # name the token file\n  clipboard = TRUE             # copy to clipboard\n)\n\nThis process interrupts you to interactively authorise the {rtoot} package in a browser window and copy a big long code to a dialogue box that appears in your R session.\n\nIt’ll then return:\nToken of type \"user\" for instance botsin.space is valid\nToken (in environment variable format) has been copied to clipboard.\n&lt;mastodon bearer token&gt; for instance: botsin.space of type: user \nI pasted this API token to a safe place and also stored it as a GitHub repo secret in the londonmapbot GitHub repo so it could be referred to while the GitHub Action was running.\n\n\nPost to Mastodon\nNow we can use the post_toot() function to… toot a post. Publish a toot? Entoot a noote. It requires a token argument that takes a special ‘bearer token’ with a particular structure that’s not too dissimilar from what the rtweet package expects of the object passed to its own token function.\nAside: token setup is made easy in {rtweet} thanks to the rtweet_bot() function, to which you can pass your API keys and secrets. It’s a little less obvious in {rtoot}, which was initially built with the intention of running API calls from your personal machine, so you could just store your keys in your .Renviron file or whatever.\nBut actually you can just mimic how {rtweet} accepts the token. To do this, I did not use my brain at all and simply ripped-off Matt Kerlogue’s post.3 My updated R script now contains this:4\n\nmastodon_token &lt;- structure(\n  list(  # it's just a list\n    bearer   = Sys.getenv(\"RTOOT_DEFAULT_TOKEN\"),\n    type     = \"user\",  # i.e. to post from R\n    instance = \"botsin.space\"  # the server\n  ),\n  class = \"rtoot_bearer\"  # special token class\n)\n\nWhere RTOOT_DEFAULT_TOKEN is that API token from earlier, which is required for accessing Mastodon. As mentioned, it’s stored as a GitHub repo secret and called into the GitHub Action environment thanks to the ${{ secrets.RTOOT_DEFAULT_TOKEN }} call in the YAML file.\nThis object can be passed quite happily to the post_toot() function.\n\nrtoot::post_toot(\n  status   = latlon_details,\n  media    = temp_file,\n  alt_text = alt_text,\n  token    = mastodon_token\n)\n\nWhere the status (body text), media (image file) and alt_text (alternative text for the image) objects have been generated already (see the R script for details).\nThis is then executed on schedule according to the cron string5 specified in the YAML file (currently twice a day at 0914 and 1714) to publish stuff like this:\n\n\n\nAwait Twitter implosion\nI want the bot to keep posting to Twitter for as long as I’m allowed to. In other words, we should try to post a tweet and catch any error silently, without disrupting the GitHub Action. So naturally I wrapped post_tweet() in a tryCatch() statement, yes? No, actually I used purrr::possibly() instead.\nWhy? Basically because the syntax is easy to remember, lol. And what difference does it make to have one extra dependency for this task? To use it, you wrap your function of interest in possibly() and then it can fail without erroring-out the whole function.\n\npossibly_post_tweet &lt;- purrr::possibly(rtweet::post_tweet)\n\npossibly_post_tweet(\n  status         = latlon_details,\n  media          = temp_file,\n  media_alt_text = alt_text,\n  token          = twitter_token\n)\n\n\n\nFiddle while Frisco burns\nWhile I was messing about with the londonmapbot code, I made a few things in the repo a bit more generic. For example, I altered the name of the GitHub Actions YAML file and the R script to be called ‘post-image’. This is more descriptive and it removes the need for someone forking the repo to have to manually change the name away from ‘londonmapbot’. You are so welcome."
  },
  {
    "objectID": "posts/2023-02-09-londmapbotstodon/index.html#parp",
    "href": "posts/2023-02-09-londmapbotstodon/index.html#parp",
    "title": "Porting a Twitter bot to Mastodon",
    "section": "Parp",
    "text": "Parp\nFarewell, until the next time we have to port londonmapot to another API-enabled microblogging site. We’ve had bird- and mammal-themed sites; my prediction is that the next site will be called ‘Seacucumber’ and we won’t ‘tweet’ or ‘toot’, we’ll ‘eviscerate’.6\nI mean, inverting one’s stomach is a daily reaction on Twitter anyway, amirite?"
  },
  {
    "objectID": "posts/2023-02-09-londmapbotstodon/index.html#environment",
    "href": "posts/2023-02-09-londmapbotstodon/index.html#environment",
    "title": "Porting a Twitter bot to Mastodon",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-02 16:08:26 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-06-01-try-r-v4-2/index.html#tldr",
    "href": "posts/2022-06-01-try-r-v4-2/index.html#tldr",
    "title": "Try R v4.2 in your browser",
    "section": "tl;dr",
    "text": "tl;dr\nI made it so you can launch RStudio in the browser with R v4.2 installed—thanks to the Binder service—so you can try out the new pipe |&gt; and anonymous-function \\() syntax."
  },
  {
    "objectID": "posts/2022-06-01-try-r-v4-2/index.html#just-browsering",
    "href": "posts/2022-06-01-try-r-v4-2/index.html#just-browsering",
    "title": "Try R v4.2 in your browser",
    "section": "Just browsering",
    "text": "Just browsering\nWant to try R v4.2 from the safety of your browser without installing any software?\nMaybe your organisation hasn’t yet moved to version 4.1 or higher, but you want a chance to noodle around with its cool new syntax that all the hip young trendsetters are yakking about.\nClick the ‘launch binder’ badge below to launch R v4.2 and RStudio in your browser, thanks to the Binder project and {holepunch} package.1 You may need to wait a few moments for it to build.\n\n\n\n\n\nOnce loaded, click on the get-started.R file in the ‘files’ pane for a very simple introductory script with some basic introductions to the new syntax.\nTwo packages are also installed with the Binder instance:\n\nThe {dplyr} package, authored by Hadley Wickham, Romain François, Lionel Henry and Kirill Müller, so you can compare the base pipe against the {magrittr} pipe (%&gt;%), which was created by Stefan Milton-Bache and made popular by the tidyverse.\nThe {pipebind} package by Brenton Wiernik, so you can explore some methods for extending the functionality of the base pipe"
  },
  {
    "objectID": "posts/2022-06-01-try-r-v4-2/index.html#untaxing-syntax",
    "href": "posts/2022-06-01-try-r-v4-2/index.html#untaxing-syntax",
    "title": "Try R v4.2 in your browser",
    "section": "Untaxing syntax",
    "text": "Untaxing syntax\nThere are two major new features to try: the base pipe |&gt; and anonymous-function syntax \\() (sometimes referred to as ‘lambdas’), which were both introduced in R v4.1 (May 2021). From R news:\n\nR now provides a simple native forward pipe syntax |&gt;. The simple form of the forward pipe inserts the left-hand side as the first argument in the right-hand side call. The pipe implementation as a syntax transformation was motivated by suggestions from Jim Hester and Lionel Henry.\n\n\nR now provides a shorthand notation for creating functions, e.g. (x) x + 1 is parsed as function(x) x + 1.\n\nAn underscore placeholder _ for the right-hand side of a base pipe was introduced in R v4.2 (April 2022). From R news:\n\nIn a forward pipe |&gt; expression it is now possible to use a named argument with the placeholder _ in the rhs [right-hand side] call to specify where the lhs [left-hand side] is to be inserted. The placeholder can only appear once on the rhs."
  },
  {
    "objectID": "posts/2022-06-01-try-r-v4-2/index.html#whos-been-piping-up",
    "href": "posts/2022-06-01-try-r-v4-2/index.html#whos-been-piping-up",
    "title": "Try R v4.2 in your browser",
    "section": "Who’s been piping up?",
    "text": "Who’s been piping up?\nThis post isn’t about how to use the new syntax or the motivation behind it.\nThis post exists, at best, to help you play with R v4.2 and the latest features without installing anything. At worst, it might make you aware that the base pipe exists, or that Binder is magic.\nI suggest you take a look at the following materials for more information:\n\nHadley Wickham’s ‘Pipes’ chapter in the work-in-progress second edition of R for Data Science (R4DS), which talks about why to use it and how it compares to %&gt;%\nMichael Barrowman’s post about the speed of the new base pipe and what it’s doing under the hood\nSharon Machlis’s post that provides an introduction and also points to materials for running different R versions in a Docker container\nIsabella Velásquez’s post, with a story about solving a plotting problem with the base pipe\nElio Campitelli’s post that covers a number of things, including implications for {data.table}\nMiles McBain’s post on the awkward ‘dog balls’ syntax for constructing anonymous functions on the right-hand side of a base pipe, which is partially fixed by the introduction of the underscore placeholder in R v4.22\nBrenton Wiernik’s Twitter thread about the {pipebind} package to help address some of the base pipe’s shortcomings, including use of the placeholder multiple times on the right-hand side\nAdolfo Álvarez’s charming post on the history of pipes in R, including the inception of the base pipe\n\nAnd there’s probably loads more I’m missing. Let me know about them.\nRegardless, this all very exciting for me because I have strong feelings about symbols in R. Do read my theory about how $ notation is an INTERNATIONAL CONSPIRACY and YOU ARE COMPLICIT. Or my method for avoiding scripts that use the equals symbol for assignment, yuck!"
  },
  {
    "objectID": "posts/2022-06-01-try-r-v4-2/index.html#environment",
    "href": "posts/2022-06-01-try-r-v4-2/index.html#environment",
    "title": "Try R v4.2 in your browser",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-01 15:26:17 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2021-12-30-gpx3d/index.html#tldr",
    "href": "posts/2021-12-30-gpx3d/index.html#tldr",
    "title": "Your workout route (in three dimensions!)",
    "section": "tl;dr",
    "text": "tl;dr\nYou can use R to extract coordinate and elevation data from a GPX file and then plot it as an interactive 3D object. I put some functions in the tiny R package {gpx3d} to help do this."
  },
  {
    "objectID": "posts/2021-12-30-gpx3d/index.html#elevate-to-accumulate",
    "href": "posts/2021-12-30-gpx3d/index.html#elevate-to-accumulate",
    "title": "Your workout route (in three dimensions!)",
    "section": "Elevate to accumulate",
    "text": "Elevate to accumulate\nI’ve seen recently on Twitter some people using Marcus Volz’s {strava} R package to create pleasing visualisations of their running routes as small-multiples.\nI don’t use Strava, but I downloaded my Apple Health data this week and it contained a folder of GPX files; one for each ‘workout’ activity recorded via my Apple Watch.1 GPX files are basically just a type of XML used for storing GPS-related activity.\nBut rather than try to emulate {strava}, I thought it might be ‘fun’ to incorporate the elevation data from a GPX as a third dimension. I’ve also had mikefc’s {ggrgl} package—‘a 3D extension to ggplot’—on my to-do list for a while now."
  },
  {
    "objectID": "posts/2021-12-30-gpx3d/index.html#an-alternate-dimension",
    "href": "posts/2021-12-30-gpx3d/index.html#an-alternate-dimension",
    "title": "Your workout route (in three dimensions!)",
    "section": "An alternate dimension",
    "text": "An alternate dimension\nCut to the chase: I made a tiny package called {gpx3d}. For now it does what I want it to do and it works on my machine.\nYou can download it from GitHub with help from the {remotes} package.\n\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/gpx3d\")\n\nThere are a number of dependencies, including many that are not available on CRAN; see the README for {ggrgl} for details. You must also install XQuartz, if you haven’t already.\nThe package does two things and has two exported functions:\n\nextract_gpx3d() gets the data out of a GPX file (i.e. it reads a GPX file; parses the XML; extracts datetime, latitude, longitude and elevation; converts to sf-class; and calculates the distance covered)\nplot_gpx3d() plots the data as an interactive 3D object (i.e. it takes the output from extract_gpx3d(), generates a ‘3D ggplot’ using {ggrgl} and renders it as an interactive object to an external device)\n\nThere are also two demo datasets:\n\nsegment.gpx, a GPX file containing a shorter, edited version of the route used in this blogpost, which you can access with system.file(\"extdata\", \"segment.gpx\", package = \"gpx3d\") after installing the package\ngpx_segment, an sf-class data.frame that’s the result of using the extract_gpx3d() on the built-in segment.gpx file\n\nRead on for an explanation and examples.\n\nExtract\nThere are already functions that can help read GPX files into R, like gpx::read_gpx() and plotKML::readGPX(), but I decided to do it by hand with {xml2} to get a custom output format (and to practice handling XML).\nIn short, the extract_gpx3d() function uses read_xml() to read the GPX file, then as_list() to convert it to a deeply nested list. A little wrangling is then required to create a data.frame: datetime and elevation can be hoisted out of the list okay, but the longitude and latitude are actually extracted from the attributes.\nAfter this, the data.frame is converted to the ‘geography-aware’ sf-class.2 I’ve done this for two reasons: (1) the output object can be taken away and will play nicely with various {sf} functions, letting you create various maps and perform further processing, and (2) it allowed me to calculate the distance between each recorded point, which could be summed for total distance.\nTo use extract_gpx3d(), simply pass a path to a GPX file. I’ve chosen a 10 km run I took on Christmas morning,3 which I downloaded from Apple Health and stored locally.4\n\nfile &lt;- \"~/Documents/data/apple_health_export/workout-routes/route_2021-12-25_10.31am.gpx\"\nroute &lt;- gpx3d::extract_gpx3d(file)\nroute[2000:2004, ]\n\nSimple feature collection with 5 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 0.559015 ymin: 50.85109 xmax: 0.559273 ymax: 50.85109\nGeodetic CRS:  WGS 84\n                    time      ele      lon      lat                  geometry\n2000 2021-12-25 09:13:29 8.406136 0.559273 50.85109 POINT (0.559273 50.85109)\n2001 2021-12-25 09:13:30 8.498508 0.559209 50.85109 POINT (0.559209 50.85109)\n2002 2021-12-25 09:13:31 8.599027 0.559144 50.85109 POINT (0.559144 50.85109)\n2003 2021-12-25 09:13:32 8.721706 0.559079 50.85109 POINT (0.559079 50.85109)\n2004 2021-12-25 09:13:34 8.858613 0.559015 50.85109 POINT (0.559015 50.85109)\n         distance\n2000 4.564465 [m]\n2001 4.494285 [m]\n2002 4.564465 [m]\n2003 4.564465 [m]\n2004 4.492909 [m]\n\n\nYou can see the rows are basically a measurement per second (time) of the coordinates (lon and lat) and elevation (ele), and that the sf-class metadata and geometry column are present, along with the distance in metres from the previous to current point.\nYou can take this dataset away and do other stuff with it, like create a lat-long plot of the route (below left), or the elevation over time (below right).\n\npar(mfrow = c(1, 2), mar = rep(0, 4))\nwith(route, plot(lon, lat, type = \"l\", axes = FALSE))\nwith(route, plot(time, ele, type = \"l\", axes = FALSE))\n\n\n\n\nIf you’re wondering about the little ‘tail’ in the bottom right of the route, I accidentally joined the back of a Parkrun, so quickly did a hairpin turn to escape. Except the Parkrun route is a ‘there-and-back’ course, so the confused stewards thought I was now in the lead with a pace of about two minutes per kilometre. Whoops!\nThe elevation plot is pretty dramatic: roughly, it goes downhill to a small plateau, down again to a flatter plateau, then the inevitable (steep!) climb. The lowest plateau is along the seafront, so basically sea level.\nBut boo! Only two dimensions? You can instead use the plotting function built in to {gpx3d} for something a bit more exciting.\n\n\nPlot\nAll the hard work of plotting is done primarily by {ggplot2} and {ggrgl}. The former is probably well-known to readers; the latter is an extension written by mikefc to introduce a third dimension to ggplot objects. In other words, you can extrude your plot along some third variable to generate a z-axis.\nThere’s a whole bunch of specialised 3D geoms in {ggrgl}. For my purposes, I wanted to extend a geom_path() line plot into the third dimension. This is achieved by adding a z argument to the aes() call of the geom_path_3d() function, where z is our elevation data.\nAnd so the plot_gpx3d() function in {gpx3d} renders the plot as an interactive 3D object with {rgl} to an external devoutrgl::rgldev() graphics device.5 You can then click and drag it with your mouse and use the scrollwheel to zoom. I’ve embedded a gif of the output at the top of this thread.6\n\ngpx3d::plot_gpx3d(route)\n\nYou can see why I chose this particular route for the demo; it really shows off the power of the elevation data. I ran anti-clockwise downhill to the seafront, where it was almost entirely flat, before running back up a relatively sharp ascent.\nMight have made a nice print if I’d been gifted a 3D printer for Christmas!"
  },
  {
    "objectID": "posts/2021-12-30-gpx3d/index.html#a-romance-of-many-dimensions",
    "href": "posts/2021-12-30-gpx3d/index.html#a-romance-of-many-dimensions",
    "title": "Your workout route (in three dimensions!)",
    "section": "A romance of many dimensions",
    "text": "A romance of many dimensions\nI’ve made {gpx3d} entirely for my own amusement, so your kilometreage may vary. At this point I can’t make any guarantees about whether it will even work on your machine, but hopefully I’ll find time in future to make sure it does. It might also be nice to include more user options for adjusting the output so you aren’t stuck with ‘ggplot grey’ and the same defaults mikefc used in a vignette showing a {ggrgl} version of Minard’s famous visulisation of Napoleon’s march.7\nI’ll also be thinking about developing {gpx4d} and functions like geom_tesseract(), but I might need physics to catch up first."
  },
  {
    "objectID": "posts/2021-12-30-gpx3d/index.html#environment",
    "href": "posts/2021-12-30-gpx3d/index.html#environment",
    "title": "Your workout route (in three dimensions!)",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-04 19:50:41 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.3        cli_3.6.1          knitr_1.43.1       rlang_1.1.1       \n [5] xfun_0.39          DBI_1.1.3          KernSmooth_2.23-21 generics_0.1.3    \n [9] sf_1.0-13          jsonlite_1.8.7     glue_1.6.2         htmltools_0.5.5   \n[13] e1071_1.7-13       fansi_1.0.4        rmarkdown_2.23     grid_4.3.1        \n[17] tibble_3.2.1       evaluate_0.21      classInt_0.4-9     fastmap_1.1.1     \n[21] lifecycle_1.0.3    yaml_2.3.7         compiler_4.3.1     dplyr_1.1.2       \n[25] pkgconfig_2.0.3    htmlwidgets_1.6.2  Rcpp_1.0.10        rstudioapi_0.14   \n[29] digest_0.6.31      wk_0.7.3           R6_2.5.1           tidyselect_1.2.0  \n[33] utf8_1.2.3         class_7.3-22       pillar_1.9.0       magrittr_2.0.3    \n[37] tools_4.3.1        proxy_0.4-27       s2_1.1.4           gpx3d_0.0.0.9002  \n[41] units_0.8-2        xml2_1.3.4"
  },
  {
    "objectID": "posts/2022-11-13-tamRgo/index.html",
    "href": "posts/2022-11-13-tamRgo/index.html",
    "title": "Tamagotchi in R?",
    "section": "",
    "text": "Development of a {tamRgo} digital pet."
  },
  {
    "objectID": "posts/2022-11-13-tamRgo/index.html#tldr",
    "href": "posts/2022-11-13-tamRgo/index.html#tldr",
    "title": "Tamagotchi in R?",
    "section": "tl;dr",
    "text": "tl;dr\nI’ve written the concept R package {tamRgo} to simulate a persistent digital pet in your R console, lol."
  },
  {
    "objectID": "posts/2022-11-13-tamRgo/index.html#had-an-oeuf",
    "href": "posts/2022-11-13-tamRgo/index.html#had-an-oeuf",
    "title": "Tamagotchi in R?",
    "section": "Had an oeuf?",
    "text": "Had an oeuf?\nR is a game engine1. Don’t @ me2.\nTurns out that R can keep a ‘save state’: developers can write a persistent file to the platform-independent path on a user’s machine resolved by tools::R_user_dir()3.\nOf course, I’ve used this to make a concept R package. {tamRgo} saves locally a ‘blueprint’ for a Tamgotchi-like digital pet4, which is read and updated when you interact with it in the R console.\nTamago (egg) + uotchi (‘watch’) = Tamagotchi. Tamago + R = {tamRgo}."
  },
  {
    "objectID": "posts/2022-11-13-tamRgo/index.html#nuovo-uovo",
    "href": "posts/2022-11-13-tamRgo/index.html#nuovo-uovo",
    "title": "Tamagotchi in R?",
    "section": "Nuovo uovo",
    "text": "Nuovo uovo\n\nInstall\nUse {remotes} to install the package from GitHub. There’s also an accompanying documentation website.\n\n# install.packages(\"tamRgo\")  # if not yet installed\nremotes::install_github(\"matt-dray/tamRgo\")\nlibrary(tamRgo)\n\nWelcome to {tamRgo}, a digital pet in the R console!\n - Docs: &lt;https://matt-dray.github.io/tamRgo&gt;\n - New pet: lay_egg()\n - Then: get_stats(), see_pet(), play(), feed(), clean()\nIt has no package dependencies, but you’ll need to be running a version of R greater than 4.0.\nOf course, it’s just a toy to demonstrate a concept. I’ve built out a bit of a ‘game loop’, but it’s just for fun and the code is not optimised. Bugs guaranteed, so suggestions and code contributions are always welcome.\n\n\nNew pet\nTo begin, you’ll need to generate you new cyberpet5 by laying an egg. You’ll be asked to confirm it’s okay to save a blueprint file onto your computer, which is just a small list object stored as an RDS file.\n\nlay_egg(pet_name = \"KEVIN\")\n\nSave pet blueprint? y/n: y\nSaved pet blueprint.\nYou have a new egg... it hatched!\nYou can get_stats(), see_pet(), play(), feed(), clean().\nThe blueprint will be saved at the location resolved by tools::R_user_dir(\"tamRgo\", \"data\"). You can always release() your pet into the wild, which will delete the blueprint file.\nSo, you have a new pet. Now what? The hint suggests to check the stats, so let’s do that.\n\nget_stats()\n\nCharacteristics\n Name:    KEVIN\n Species: Z\n Age:     0\n Level:   0 (newborn)\n Alive:   TRUE\nStatus\n Happy:   ■■■□□  \n Hungry:  ■■■□□  \n Dirty:   □□□□□  \nYou can see some characteristics: the name you provided, the pet’s species (X, Y or Z) and their age (days since ‘birth’). You can see the pet’s level (whatever that means) and whether they are currently alive. There’s also status values, which are followed by five-point gauges, some of which are filled.\nLet’s quickly check what our pet looks like with see_pet(). Its appearance depends on the species and the level; newborns are pretty much a blob, but your pet will grow and develop as it levels.\nThe rendering of the sprite, which is built with unicode block elements, will depend on the settings in your console. Your browser may also bork the the sprites as they appear in this post. See the package’s hex logo at the top of the page to get truer examples of the intended designs.\n\nsee_pet()\n\n░░░░░░░\n░░███░░\n░█░█░█░\n░█████░\n░██░██░\n░░███░░\n░░░░░░░\nCongratulations! KEVIN is a beautiful little chap.\n\n\nFeed\nHaving just been born, KEVIN is a bit peckish. You can tell because the ‘Hungry’ gauge is partially filled. Let’s lower the value by using feed().\n\nfeed()\n\n'Hungry' status value is now 2/5\nSee how the ‘Hungry’ counter decreased by 1 to 2?\n\nget_stats()\n\nCharacteristics\n  Name:    KEVIN\n  Species: Z\n  Age:     0\n  Level:   0 (newborn)\n  Alive:   TRUE\nStatus\n  Happy:   ■■■□□  \n  Hungry:  ■■□□□  \n  Dirty:   □□□□□  \n\n\nPlay\nYou can increase the ‘Happy’ value, which is currently 0, with play(). This begins a game of ‘higher or lower’ with user input. Yes, it’s not much of a skill-based game, but there’s a rumour that it’s easier under some circumstances and that a higher score is better for your pet’s wellbeing.\n\nplay()\n\nHigher or lower than 4? Type h or l: h\nWrong! It was 1. Score: 0/5.\nHigher or lower than 1? Type h or l: h\nCorrect! It was 8. Score: 1/5.\nHigher or lower than 4? Type h or l: h\nCorrect! It was 6. Score: 2/5.\nHigher or lower than 6? Type h or l: l\nCorrect! It was 5. Score: 3/5.\nHigher or lower than 7? Type h or l: l\nWrong! It was 10. Score: 3/5.\nResult: you scored 3/5!\n'Happy' status value is now 4/5\n\n\nClean\nAfter some time, your pet will become ‘dirty’, represented by a small pile of filth underneath their sprite.\n\nsee_pet()\n\n░░░░░░░\n░░███░░\n░█░█░█░\n░█████░\n░██░██░\n░░███░░\n░░░░░░░\n░░░░░░░\n░░░█░░░\n░░███░░  \n░█████░ \n░░░░░░░\nWhich is almost as big as KEVIN himself, wow. You’ll just need to clean() it away.\n\nclean()\n\n'Dirty' status value is now 0/5\n\n\nPersistence\nPerhaps the most important thing to know is that you can end your R session and come back later and your pet will still be available. In fact, it will continue to live and grow on your computer while you’re away.\nMaybe you come back five days later. Here’s what you might see if you check your pet’s stats from any R session on your computer.\n\nget_stats()\n\nCharacteristics\n  Name:    KEVIN\n  Species: Z\n  Age:     5\n  Level:   2 (youngling)\n  Alive:   TRUE\nStatus\n  Happy:   □□□□□ !\n  Hungry:  ■■■■■ !\n  Dirty:   ■■■■■ !\nAha, so KEVIN’s age and level have increased since you’ve been away, even though you haven’t interacted with him for a while. But uh-oh, looks like his status values are at their worst.\nPay attention to these status values. Look after your pet! Apparently there’s a chance it might become… ‘unalive’. Rumour has it that good owners have longer-living pets…\nAnyway, let’s quickly check KEVIN’s appearance now he’s level 2.\n\nsee_pet()\n\n░░░░░░░░░░\n░░█░░░░█░░\n░░░█░░█░░░\n░░██████░░\n░░█░██░█░░\n░░██████░░\n░███░░███░\n░░██████░░\n░░█░░░░█░░\n░░░░░░░░░░\n░░░░░░░\n░░░█░░░\n░░███░░  \n░█████░ \n░░░░░░░\n░░░░░░░\n░░░█░░░\n░░███░░  \n░█████░ \n░░░░░░░\n░░░░░░░\n░░░█░░░\n░░███░░  \n░█████░ \n░░░░░░░\n░░░░░░░\n░░░█░░░\n░░███░░  \n░█████░ \n░░░░░░░\n░░░░░░░\n░░░█░░░\n░░███░░  \n░█████░ \n░░░░░░░\nErm, well, cool antennae, bro. Totally distracts from the mess. Might need to clean() him."
  },
  {
    "objectID": "posts/2022-11-13-tamRgo/index.html#under-the-shell",
    "href": "posts/2022-11-13-tamRgo/index.html#under-the-shell",
    "title": "Tamagotchi in R?",
    "section": "Under the shell",
    "text": "Under the shell\nThe underlying logic is pretty simple. I don’t want to give away too many spoilers, but it’s worth explaining some of the main components a bit.\n\nBlueprint\nThe whole system is dependent on a ‘blueprint’ file, which is what gets stored at the tools::R_user_dir() location. It’s a list object with elements like the pet’s name, species (randomly generated), ‘date of birth’, accumulated XP, status values (happy, hungry, dirty) and some other things.\nThe blueprint is read and updated whenever you use a function from {tamRgo}. The current datetime is compared to the datetime of last interaction (stored in the blueprint) and the difference is used to calculate things like the pet’s age, XP accumulation and level and status values.\nThis gives the impression that the pet has been ‘alive’ on the player’s machine while they’ve been away. A trick6!\n\n\nExperience\nThe main goal is to accumulate XP and keep your pet alive. XP:\n\nis accumulated passively every hour\nis gained from the minigame in play(), where a higher score means more XP\nwill result in the pet levelling up when certain thresholds have been met, which alters their appearance\n\nAt a certain point, the pet will become ‘unalive’7. The chance of this happening is based on the pet’s accumulated XP. Basically:\n\nXP is ‘frozen’ at a certain age and the value is stored in the blueprint\nthe chance of becoming unalive is tied to the frozen XP value, where more XP means a lower chance\nthe number of days since the XP was frozen is used as a multiplier, so the chance of becoming unalive increases with time\n\nThe current XP count is stored in the blueprint, but is hidden from the user. This moves focus away from tracking and improving a single number and hopefully towards a more general goal of keeping your pet happy, well-fed and clean.\n\n\nSprites\nThere are character ‘sprites’ that change with age and species (see the image at the top of this post). The sprite for a newborn, mature and unalive pet are the same regardless of species, but the other levels are dependent on whether the pet is species X, Y or Z. Of course, these are pixellated to mimic the original Tamagotchi style.\nThe sprites are called by see_pet() as binary matrices of filled and unfilled ‘pixels’. I wrote the package {pixeltrix}, which I wrote about in my last blog post for a simple interactive way to design sprites by turning pixels ‘on’ and ‘off’ in a plotting window. Here’s a preview of a totally original little cyberfriend being incepted."
  },
  {
    "objectID": "posts/2022-11-13-tamRgo/index.html#practical-yolk",
    "href": "posts/2022-11-13-tamRgo/index.html#practical-yolk",
    "title": "Tamagotchi in R?",
    "section": "Practical yolk",
    "text": "Practical yolk\nThe package is not feature complete, lol8. To improve it, I could maybe9:\n\nanimate the pixel graphics\nallow blueprints to be transferred between machines, so your pet can live across multiple devices10\nadd a battle system like Digimon\nmake the play() minigame actually fun and so it grants more XP for greater skill\nmake more meaningful use of ‘hungry’ and ‘dirty’ statuses, perhaps include a hidden HP gauge that is reduced when these statuses are at their maximum for an extended period\n\nThe main point of this toy was for me to work out how to store data on a user’s machine. Should you actually do that? It depends. Can you use it in a silly R package for purposes of fun? Well, yes, if you ask me.\nYou can probably think of other ways to use tools::R_user_dir() for games in R, particularly for save states. Let me know when you’ve made a new triple-A game for R and I’ll add it to the list."
  },
  {
    "objectID": "posts/2022-11-13-tamRgo/index.html#environment",
    "href": "posts/2022-11-13-tamRgo/index.html#environment",
    "title": "Tamagotchi in R?",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:05 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] tamRgo_0.1.0\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2021-10-05-gorilla/index.html#tldr",
    "href": "posts/2021-10-05-gorilla/index.html#tldr",
    "title": "Reveal a hidden gorilla with {magick}",
    "section": "tl;dr",
    "text": "tl;dr\nYou can convert a line drawing to datapoints with a sprinkle of {magick}."
  },
  {
    "objectID": "posts/2021-10-05-gorilla/index.html#ape-escape",
    "href": "posts/2021-10-05-gorilla/index.html#ape-escape",
    "title": "Reveal a hidden gorilla with {magick}",
    "section": "Ape escape",
    "text": "Ape escape\nHave you seen that video where you’re so focused on counting basketball passes that you fail to see the gorilla moving across the screen?\nThis kind of selective attention was studied by two researchers, Yanai and Lercher, who provided subjects with a dataset that looked like a gorilla when plotted. The gorilla was found less often if the subjects were also given a hypothesis to investigate.\nThe study got some attention on Twitter last week. As a result, Isabella Velásquez wrote a great blogpost where she recreated the dataset using R and Python in tandem via the {reticulate} package.\nI had a go at creating the dataset with base R and the excellent {magick} package for image manipulation."
  },
  {
    "objectID": "posts/2021-10-05-gorilla/index.html#point-it-out",
    "href": "posts/2021-10-05-gorilla/index.html#point-it-out",
    "title": "Reveal a hidden gorilla with {magick}",
    "section": "Point it out",
    "text": "Point it out\nThe jpeg image file used in the original paper can be downloaded from classroomclipart.com to a temporary location on your machine.\n\ndownload.file(\n  paste0(\n    \"https://classroomclipart.com/images/gallery/\",\n    \"Clipart/Black_and_White_Clipart/Animals/\",\n    \"gorilla-waving-cartoon-black-white-outline-clipart-914.jpg\" \n  ),\n  tempfile(fileext = \".jpg\")\n)\n\nWe can read the file into R with {magick}.\n\nimg &lt;- \n  list.files(tempdir(), pattern = \".jpg$\", full.names = TRUE) |&gt;\n  magick::image_read()\n\nimg\n\n\n\n\nWith other {magick} functions we can:\n\nreduce to two distinct colours only (i.e. for the lines and background), which makes it easier to filter the data later\nconvert from an image to point data\n\n\ngo &lt;- img |&gt;\n  magick::image_quantize(2) |&gt;  # colour reduction\n  magick::image_raster() |&gt;     # as x-y data\n  as.data.frame()\n\nhead(go)\n\n  x y       col\n1 1 1 #fefefeff\n2 2 1 #fefefeff\n3 3 1 #fefefeff\n4 4 1 #fefefeff\n5 5 1 #fefefeff\n6 6 1 #fefefeff\n\n\nAnd to prove we only have two colours (off-white for the background, grey for the lines):\n\nunique(go$col)\n\n[1] \"#fefefeff\" \"#555555ff\"\n\n\nNow we can:\n\nreverse the order of the y values so the gorilla is right-side up\nfilter to retain only the datapoints that represent lines\nrescale the x and y to create ‘Body Mass Index’ (BMI)1 and ‘steps’ variables\n\n\ngo$y     &lt;- rev(go$y)\ngo       &lt;- go[go$col != \"#fefefeff\", ]\ngo$bmi   &lt;- go$y / max(go$y) * 17 + 15\ngo$steps &lt;- 15000 - go$x * 15000 / max(go$x)\n\nhead(go)\n\n      x   y       col bmi    steps\n174 174 550 #555555ff  32 8665.049\n175 175 550 #555555ff  32 8628.641\n176 176 550 #555555ff  32 8592.233\n196 196 550 #555555ff  32 7864.078\n198 198 550 #555555ff  32 7791.262\n199 199 550 #555555ff  32 7754.854\n\n\nYou may have noticed that the image has a watermark. We could have removed it earlier with {magick}, but can do it now by filtering out the datapoints in that corner.\n\ngo$logo &lt;- ifelse(go$bmi &lt; 16 & go$steps &lt; 5500, TRUE, FALSE)\ngo      &lt;- go[!go$logo, ]\n\nThis leaves us with 16865 datapoints. We can follow the original study by taking a sample and splitting the results into ‘female’ and ‘male’ groups, weighted so that the female group has higher step counts.\n\ngo_smp       &lt;- go[sample(nrow(go), 1768), ]\ngo_smp$rnorm &lt;- rnorm(nrow(go_smp), mean = 0, sd = 10)\ngo_smp$index &lt;- go_smp$steps * (1 + go_smp$rnorm)\ngo_smp$group &lt;- \n  ifelse(go_smp$index &lt; median(go_smp$steps), \"F\", \"M\") |&gt;\n  as.factor()\n\nhead(go_smp[, c(\"bmi\", \"steps\", \"group\")])\n\n            bmi       steps group\n135597 21.83091 13216.01942     F\n85694  25.60182    72.81553     F\n199825 17.00909 14817.96117     F\n43530  28.75455  5169.90291     M\n200308 16.97818 12233.00971     F\n55403  27.85818  7900.48544     F\n\n\nNow finally to plot the datasets side-by-side.\n\npar(mfrow = c(1, 2))\n\nwith(\n  go_smp[go_smp$group == \"F\", ],\n  plot(\n    steps, bmi,\n    xlim = c(0, 15000),\n    pch = 16, cex = 0.5, col = \"blue\",\n    xlab = \"Steps\", ylab = \"BMI\", \n  )\n)\n\nwith(\n  go_smp[go_smp$group == \"M\", ],\n  plot(\n    steps, bmi, \n    xlim = c(0, 15000),\n    pch = 16, cex = 0.5, col = \"red\",\n    xlab = \"Steps\", ylab = \"BMI\"\n  )\n)\n\n\n\n\nI see them!\nThis has been a bit overengineered and could be generalised, but it gives a gist of how you might go about converting an image to a dataframe of x and y positions.\nAt worst, this is a reminder not to trust researchers and to always check for unexpected gorillas."
  },
  {
    "objectID": "posts/2021-10-05-gorilla/index.html#environment",
    "href": "posts/2021-10-05-gorilla/index.html#environment",
    "title": "Reveal a hidden gorilla with {magick}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-07 21:11:24 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] digest_0.6.31     fastmap_1.1.1     xfun_0.39         magrittr_2.0.3   \n [5] knitr_1.43.1      htmltools_0.5.5   png_0.1-8         rmarkdown_2.23   \n [9] cli_3.6.1         compiler_4.3.1    rstudioapi_0.14   tools_4.3.1      \n[13] evaluate_0.21     Rcpp_1.0.10       yaml_2.3.7        magick_2.7.4     \n[17] rlang_1.1.1       jsonlite_1.8.7    htmlwidgets_1.6.2"
  },
  {
    "objectID": "posts/2021-08-27-zzz/index.html#tldr",
    "href": "posts/2021-08-27-zzz/index.html#tldr",
    "title": "Exploring R package startup messages",
    "section": "tl;dr",
    "text": "tl;dr\nI got curious about R package startup messages, so I grabbed all the special zzz.R files from R packages that are on CRAN and sourced on GitHub. You can jump to the table of results."
  },
  {
    "objectID": "posts/2021-08-27-zzz/index.html#start-me-up",
    "href": "posts/2021-08-27-zzz/index.html#start-me-up",
    "title": "Exploring R package startup messages",
    "section": "Start me up",
    "text": "Start me up\nI learnt recently from Hernando Cortina that his and Amanda Dobbyn’s {multicolor} package prints to the console some multicoloured ASCII-art text of the package’s name when you call it with library(multicolor).\nIt gave me an itch to scratch: how often are these sorts of startup messages used by R packages? What do people put in them? Is there anything funny in them? Anything nefarious?"
  },
  {
    "objectID": "posts/2021-08-27-zzz/index.html#a-strong-attachment",
    "href": "posts/2021-08-27-zzz/index.html#a-strong-attachment",
    "title": "Exploring R package startup messages",
    "section": "A strong attachment",
    "text": "A strong attachment\nA package may need to run additional code before its functions can work, like maybe some options() need to be set.\nThere are two times this kind of code can be run: when the package is loaded, including namespace calls like dplyr::select(), or more specifically when the package is attached with library().\nTo prepare code for running on-load or on-attach, you create the special functions .onLoad() and .onAttach(). These go in a zzz.R file in the R/ directory of your package, because… convention?\nThe on-attach option is useful for printing messages for the user to see in the console, like the {multicolor} example above. You want this to happen on-attach and not on-load, since you wouldn’t want to print a message every single your script uses the :: namespace qualifier.\nTo specify a message in the body of your .onAttach() function, you use packageStartupMessage(). Why not just cat() or message()? Because it allows the user to quell startup messages using suppressPackageStartupMessages().\nYou can learn more in Hadley Wickham’s R Packages book.\nAs an example, consider the {tidyverse} package, which has some verbose output on attach:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nBut you can shush it with the suppressPackageStartupMessages() function:1\n\ndetach(\"package:tidyverse\")  # first detach it\nsuppressPackageStartupMessages(library(tidyverse))\n\nPeace.\nSo the startup messages of {multicolor} and {tidyverse} do two completely different things: one is fun and frivolous and the other is informative. Isn’t it possible that someone could put ads in the startup message or use it in evil ways? Well, perhaps.\nLet’s find out what R package developers put in their startup messages. How many packages even have a zzz.R file and how many of those even contain a packageStartupMessage() call?"
  },
  {
    "objectID": "posts/2021-08-27-zzz/index.html#catching-some-zs",
    "href": "posts/2021-08-27-zzz/index.html#catching-some-zs",
    "title": "Exploring R package startup messages",
    "section": "Catching some Zs",
    "text": "Catching some Zs\nI understand if all this talk of zzz.R causes you to… zzz. In short, if you want to get all the zzz.R files, you can:\n\nGet a list of R packages on CRAN\nIdentify which ones have an associated GitHub repo\nGet the default branch name of each one and construct the possible URL to their zzz.R file\nContact the possible zzz.R file to see if it exists\nIf it exists, download it\nFilter for zzz.R files that contain packageStartupMessage()\n\nWe’ve already attached the tidyverse packages, but we’ll also need two more packages:\n\nlibrary(gh)    # interact with GitHub API\nlibrary(httr)  # requests via the internet \n\n\nℹ️ Note\nIf you’re thinking this approach is a bit long-winded, you’re right. As Tim pointed out, we could just extract the info via METACRAN, an unofficial CRAN mirror hosted on GitHub. It even has its own API. I’ll leave that as an exercise for the reader.\n\n\nPackages\nLuckily you can grab info for all current CRAN packages with the very handy CRAN_package_db() function.2\n\ncran_pkgs &lt;- as_tibble(tools::CRAN_package_db())\n\nThis returns a dataframe containing 19844 rows, where each one is a package, along with 67 variables. We get information like the stuff that’s found in package DESCRIPTION files, but it doesn’t tell us whether a package has a zzz.R file.\nOne way to do this is to visit the GitHub repo associated with the package, if it has one, and see if a zzz.R exists. Of course, many packages are not on GitHub, but we’re going to ignore those for simplicity.\n\nℹ️ Update\nI re-rendered this post in July 2023, so the output no longer reflects CRAN as it was when this post was published (August 2021).\n\n\n\n\nGithub repos\nA quick way of discovering if a package has a GitHub repo is to check for ‘github.com’ in the BugReports section of it DESCRIPTION file.3 Again, this doesn’t capture all the possible repos, but is fine for now.\n\nhas_repo &lt;- cran_pkgs %&gt;% \n  select(Package, BugReports) %&gt;% \n  filter(str_detect(BugReports, \"github\")) %&gt;% \n  transmute(\n    Package,\n    owner_repo = str_extract(\n      str_replace_all(paste0(BugReports, \"/x\"), \"//\", \"/\"),\n      \"(?&lt;=github.com/).*(?=/[a-zA-Z])\"\n    )\n  ) %&gt;% \n  separate(owner_repo, c(\"owner\", \"repo\"), \"/\") %&gt;% \n  filter(!is.na(Package), !is.na(owner), !is.na(repo)) %&gt;% \n  distinct(Package, owner, repo) %&gt;% \n  arrange(Package) \n\nsample_n(has_repo, 5)\n\n# A tibble: 5 × 3\n  Package owner       repo   \n  &lt;chr&gt;   &lt;chr&gt;       &lt;chr&gt;  \n1 mvp     RobinHankin mvp    \n2 papaja  crsh        papaja \n3 BTYD    ghuiber     BTYD   \n4 RSQLite r-dbi       RSQLite\n5 disordR RobinHankin disordR\n\n\nThere were 19844 CRAN packages total and now we have 8150 (41%) that appear to have a GitHub repo.\nIf you’re wondering why we didn’t just use the package name as the repo name, it’s because they sometimes don’t match, e.g. {baseballDBR} is in a repo called ‘moneyball’.\nNow we can use the repo details to build a URL to a potential zzz.R URL. This comes in the form https://raw.githubusercontent.com/&lt;owner&gt;/&lt;repo&gt;/&lt;defaultbranch&gt;/R/zzz.R\".\n\n\nDefault branch\nYou’ll notice we don’t yet know the default branch of the package’s GitHub repo. Historically, we could probably have just hard-coded ‘master’, but the automatic default is now ‘main’. And of course, the default branch could be something else entirely.\nWe can grab the default branch for each repo from the GitHub API using the excellent {gh} package by Gábor Csárdi, Jenny Bryan and Hadley Wickham. You’ll need to do some setup to use it yourself.\nThe key function is gh(), to which you can pass a GET request for the information we want: GET /repos/{owner}/{repo}. We can iterate for each repo by passing each owner and repo name in turn. It returns a list object with lots of information about the repo.\nI’ve created ‘possibly’ function variants with {purrr} so that any errors in the process are handled by returning NA, rather than breaking the loop, which would kill the process.\n\n# Create 'try' function versions\nmap2_possibly &lt;- possibly(map2, NA_real_)\ngh_possibly &lt;- possibly(gh, NA_real_)\n\n# Function: fetch repo details, print message on action\nget_repo &lt;- function(owner, repo) {\n  cat(paste0(\"[\", Sys.time(), \"]\"), paste0(owner, \"/\", repo), \"\\n\")\n  gh_possibly(\"GET /repos/{owner}/{repo}\", owner = owner, repo = repo) \n}\n\nmaybe_zzz &lt;- has_repo %&gt;%\n  mutate(\n    repo_deets =  map2_possibly(\n      has_repo$owner, has_repo$repo, get_repo\n    )\n  ) %&gt;% \n  mutate(\n    default_branch = map(\n      repo_deets, ~pluck(.x, \"default_branch\")\n    ),\n    default_branch = pluck(default_branch, 1),\n    zzz_url = paste0(\n      \"https://raw.githubusercontent.com/\",\n      owner, \"/\", repo, \"/\", default_branch, \"/R/zzz.R\"\n    )\n  )\n\nSo now we have a column with the returned repo information, the extracted default branch name and a URL that points to a potential zzz.R file in that repo.\n\nhead(maybe_zzz)\n\n# A tibble: 6 × 6\n  Package      owner           repo         repo_deets default_branch zzz_url   \n  &lt;chr&gt;        &lt;chr&gt;           &lt;chr&gt;        &lt;list&gt;     &lt;chr&gt;          &lt;chr&gt;     \n1 AATtools     Spiritspeak     AATtools     &lt;gh_rspns&gt; master         https://r…\n2 ABHgenotypeR StefanReuscher  ABHgenotypeR &lt;gh_rspns&gt; master         https://r…\n3 ABM          junlingm        ABM          &lt;gh_rspns&gt; master         https://r…\n4 ACEP         agusnieto77     ACEP         &lt;gh_rspns&gt; master         https://r…\n5 ACNE         HenrikBengtsson ACNE         &lt;gh_rspns&gt; master         https://r…\n6 ACWR         JorgeDelro      ACWR         &lt;gh_rspns&gt; master         https://r…\n\n\n\n\nStatus codes\nNow we can check the status code for each of the URLs we’ve built. A return of 200 tells us that the file exists and 404 means it doesn’t.4 Again, we can prevent the loop breaking on error by creating a ‘possibly’ version of map().\n\nlibrary(httr)  # for status_code()\n\nmap_possibly &lt;- possibly(map, NA_character_)\n\nmaybe_zzz_status &lt;- maybe_zzz %&gt;% \n  mutate(\n    status = map_possibly(\n      zzz_url, ~status_code(GET(.x))\n    )\n  ) %&gt;% \n  unnest(status)\n\ncount(maybe_zzz_status, status)\n\n# A tibble: 2 × 2\n  status     n\n   &lt;int&gt; &lt;int&gt;\n1    200  1519\n2    404  6631\n\n\nOkay, great, we’ve got over a thousand zzz.R files.\n\n\nRead content\nNow we know which packages have a zzz.R file, we can use readLines() to grab their content from their URL, which again we can protect from errors with purrr::possibly().\nNote that I’ve created a special version of readLines() that reports to the user the path being checked, but also has a random delay. This is to dampen the impact on GitHub’s servers.\n\n# Function: readLines() but with a pause and message\nreadLines_delay &lt;- function(path) {\n  sample(1:3, 1)\n  cat(paste0(\"[\", Sys.time(), \"]\"), path, \"\\n\")\n  readLines(path, warn = FALSE)\n}\n\nreadLines_delay_possibly &lt;- possibly(readLines_delay, NA_character_)\n\nfosho_zzz &lt;- maybe_zzz_status %&gt;% \n  select(-repo_deets) %&gt;% \n  filter(status == 200) %&gt;%  # just the \n  mutate(lines = map_possibly(zzz_url, readLines_delay_possibly))\n\ndim(fosho_zzz)\n\nSo now we have a dataframe with a row per package and a list-column containing the R code in the zzz.R file.\n\n\nStartup messages\nFinally, we can find out which packages have a packageStartupMessage() call inside their zzz.R.\n\nhas_psm &lt;- fosho_zzz %&gt;% \n  select(Package, lines) %&gt;%\n  unnest(lines) %&gt;%\n  filter(str_detect(lines, \"packageStartupMessage\")) %&gt;% \n  mutate(lines = str_remove_all(lines, \" \")) %&gt;%\n  distinct(Package) %&gt;% \n  pull()\n\nfosho_psm &lt;- filter(fosho_zzz, Package %in% has_psm)\n\nSo we started with 19844 CRAN packages and have winnowed it to down to 579 (3%) that have a call to packageStartupMessage() in their zzz.R.\n\n\nTable of results\nI could provide a table with all the zzz.R content, but I don’t want to break any licenses by reproducing them all here. Instead, here’s an interactive table that links to the GitHub page for each zzz.R file that appears to have a package startup message.\n\n\nClick for table code\n\n\nlibrary(reactable)\n\nreactable(\n  data = fosho_psm %&gt;% \n    select(package = Package, owner, url = zzz_url),\n  searchable = TRUE,\n  paginationType = \"jump\",\n  defaultPageSize = 10,\n  columns = list(\n    url = colDef(cell = function(value) {\n      htmltools::tags$a(href = value, target = \"_blank\", \"zzz.R\")\n    })\n  )\n)\n\n\n\n\n\n\n\n\n\n❗️ Warning\nI re-rendered this post in July 2023, so the table above may contain different packages to when it was first published. The section below relates to the originally-published post and may no longer reflect the content of the zzz.R files listed in the table above.\n\n\n\nPatterns\nI had a scan through the scripts and found some frequent uses of packageStartupMessages() to:\n\nshow a basic salutation (e.g. {afex})\nshow the version number, a check to see if the user has the latest version, sometimes a prompt to download the latest version for them (e.g. {vistributions}), sometimes a note that the package has been superseded by another (e.g. {drake})\nlinks to guidance, examples, documentation (e.g. {bayesplot})\nprovide a citation or author names (e.g. {unvotes})\nlink to issue tracking or bug reporting (e.g. {timeperiodsR})\ncheck for required supplementary software (e.g. {DALY})\nremind of the need for credentials or keys for packages that access APIS, for example (e.g. {trainR})\nprovide terms of use, warranties, licenses, etc (e.g. {emmeans})\n\nI was also interested to see:\n\na random tip, so you get something new each time you attach the package (e.g. {shinyjs})\nappeals for GitHub stars (e.g. {sigminer})\nlinks to purchasable course materials (e.g. {anomalise})\n\nAnd perhaps the most self-aware were several packages that reminded the user that they can turn off startup messages with suppressPackageStartupMessages() if the messages get too annoying (e.g. {dendextend}).\nA few interesting specifics (possible spoiler alerts!):\n\n{bayestestR} and {sjmisc} have displays a special Star Wars message on a certain day of the year…\n{SHT} and {symengine} load ASCII art, as does {BetaBit}, which also prompts the user for a game they’d like to play\n{depigner} says ‘Welcome to depigner: we are here to un-stress you!’\n{mde} has a friendly ‘Happy Exploration :)’ salutation and {manymodelr} says ‘Happy Modelling! :)’\n{sjPLot} says ‘#refugeeswelcome’\n\nYou can use the interactive table above to reach each of the zzz.R files for these packages, or have a sift through yourself to see what you can find."
  },
  {
    "objectID": "posts/2021-08-27-zzz/index.html#buy-my-stuff",
    "href": "posts/2021-08-27-zzz/index.html#buy-my-stuff",
    "title": "Exploring R package startup messages",
    "section": "Buy my stuff?",
    "text": "Buy my stuff?\nIs there a line somewhere? Is it okay to advertise something? You could argue that someone has gone out of their way to release a package for free, so what harm is it in trying to get something back? or does this approach undermine the whole ‘open’ process?\nI know some people find startup messages a bit annoying, but I think it’s easy enough for users to opt out of seeing them with a call to suppressPackageStartupMessages().\nMostly I’m kind of surprised by the lack of abuse of packageStartupMessage() in this sample. Let me know of any cheeky business you might have come across."
  },
  {
    "objectID": "posts/2021-08-27-zzz/index.html#environment",
    "href": "posts/2021-08-27-zzz/index.html#environment",
    "title": "Exploring R package startup messages",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-08 18:06:43 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] reactable_0.4.4 httr_1.4.6      gh_1.4.0        tidyverse_2.0.0\n [5] lubridate_1.9.2 forcats_1.0.0   stringr_1.5.0   dplyr_1.1.2    \n [9] purrr_1.0.1     readr_2.1.4     tidyr_1.3.0     tibble_3.2.1   \n[13] ggplot2_3.4.2  \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.3      jsonlite_1.8.7    compiler_4.3.1    tidyselect_1.2.0 \n [5] scales_1.2.1      yaml_2.3.7        fastmap_1.1.1     R6_2.5.1         \n [9] generics_0.1.3    knitr_1.43.1      htmlwidgets_1.6.2 munsell_0.5.0    \n[13] pillar_1.9.0      tzdb_0.4.0        rlang_1.1.1       utf8_1.2.3       \n[17] stringi_1.7.12    reactR_0.4.4      xfun_0.39         timechange_0.2.0 \n[21] cli_3.6.1         withr_2.5.0       magrittr_2.0.3    crosstalk_1.2.0  \n[25] digest_0.6.31     grid_4.3.1        rstudioapi_0.14   hms_1.1.3        \n[29] lifecycle_1.0.3   vctrs_0.6.3       evaluate_0.21     glue_1.6.2       \n[33] fansi_1.0.4       colorspace_2.1-0  rmarkdown_2.23    ellipsis_0.3.2   \n[37] tools_4.3.1       pkgconfig_2.0.3   htmltools_0.5.5"
  },
  {
    "objectID": "posts/2022-01-07-acnh-swipe-results/index.html#tldr",
    "href": "posts/2022-01-07-acnh-swipe-results/index.html#tldr",
    "title": "The most popular Animal Crossing villagers",
    "section": "tl;dr",
    "text": "tl;dr\nI once wrote an R Shiny app to run a popularity contest for Animal Crossing villagers. Surprise: cute ones are favourites."
  },
  {
    "objectID": "posts/2022-01-07-acnh-swipe-results/index.html#swiping-shinyswipe-code",
    "href": "posts/2022-01-07-acnh-swipe-results/index.html#swiping-shinyswipe-code",
    "title": "The most popular Animal Crossing villagers",
    "section": "Swiping {shinyswipe} code",
    "text": "Swiping {shinyswipe} code\nA while back I wrote a Shiny app (site, source, blogpost) for TidyTuesday to replicate a Tinder-like experience using villagers from Nintendo’s Animal Crossing New Horizons game. It uses the swipe mechanic from Nick Strayer’s {shinysense} package to gauge popularity: left for a ‘dislike’, right for a ‘like’.\nAfter exceeding 3000 total swipes, it’s time to take a look at the results.\n\nℹ️ Update\nI re-rendered this post in July 2023 when there were about 6000 swipes(!)."
  },
  {
    "objectID": "posts/2022-01-07-acnh-swipe-results/index.html#oh-sheet",
    "href": "posts/2022-01-07-acnh-swipe-results/index.html#oh-sheet",
    "title": "The most popular Animal Crossing villagers",
    "section": "Oh sheet",
    "text": "Oh sheet\nData from each swipe in the app is automatically appended to a public Google Sheets sheet that can be read with {googlesheets4}. Public sheets don’t require authentication to download, so run gs4_deauth() before read_sheet() to prevent it.\n\nlibrary(googlesheets4)\ngs4_deauth()\n\nraw &lt;- read_sheet(\n  ss = \"1kMbmav6XvYqnTO202deyZQh37JeWtTK4ThIXdxGmEbs\",\n  col_types = \"Tcc\"  # datetime, char, char\n)\n\n✔ Reading from \"acnh-swipe_results\".\n\n\n✔ Range 'Sheet1'.\n\n\nFirst thing is to isolate the left and right swipes only. The {shinysense} package also allows for up and down swipes by default and I wasn’t sure how to remove this capability from my app (and was too lazy to work it out).\n\ndat &lt;- raw[raw$swipe %in% c(\"left\", \"right\"), ]\ndat[sample(rownames(dat), 5), ]  # random sample\n\n# A tibble: 5 × 3\n  date                name   swipe\n  &lt;dttm&gt;              &lt;chr&gt;  &lt;chr&gt;\n1 2021-06-20 23:46:18 Midge  right\n2 2021-06-20 23:44:39 Tasha  left \n3 2022-12-03 00:10:25 Dizzy  left \n4 2021-05-14 23:01:04 Megan  right\n5 2022-01-20 20:35:13 Rasher left \n\n\nThe data are one row per swipe, with columns for date (datetime of when the swipe happened), name (the villager’s name) and swipe (the swipe direction).\nBut what we’re really after is a grouped table with a row per villager, plus new columns for the total number of swipes, the difference between right and left swipes and the percentage of swipes that were to the right (pc_right). These will let us better rank the characters.\n\ndf &lt;- with(dat, table(name, swipe)) |&gt;  # like dplyr::count()\n  as.data.frame(responseName = \"n\") |&gt;\n  reshape(  # like tidyr::pivot_*()\n    v.names   = \"n\",      # values_from\n    idvar     = \"name\",   # id_cols\n    timevar   = \"swipe\",  # names_from\n    direction = \"wide\",   # i.e. pivot_wider()\n    sep       = \"_\"       # names_sep\n  ) |&gt; \n  transform(  # like dplyr::mutate()\n    total    = n_left + n_right,\n    diff     = n_right - n_left,\n    pc_right = 100 * round(n_right / (n_right + n_left), 2)\n  )\n\nhead(df)\n\n     name n_left n_right total diff pc_right\n1 Admiral     14       4    18  -10       22\n2 Agent S     10       4    14   -6       29\n3   Agnes     14       8    22   -6       36\n4      Al     13       3    16  -10       19\n5 Alfonso      6       7    13    1       54\n6   Alice      8       8    16    0       50\n\n\n\n\nClick to expand code explanation\n\nI think most readers of this blog are probably {tidyverse} users, so I’ll explain some of the base R approach I took here:\n\nI’ve used the base pipe (|&gt;) introduced in R v4.1 to chain the functions, which is analogous to {magrittr}’s pipe (%&gt;%) in this example\nwith() allows the bare column names in table() to be evaluated as columns of dat, which means you only write the name of the data object once\na table() coerced with as.data.frame() is equivalent to dplyr::count(), basically\nreshape() can be used like tidyr::pivot_wider() (I’ve added comments in the code block above to show how the arguments are used)\nturns out that transform() can be used like dplyr::mutate() to create new columns, thought the help files say it should only be used for interactive and that ‘you deserve whatever you get!’\n\n\nWe can also bring in some additional villager data collected for TidyTuesday and join it to the swipe data. This will come in useful later.\n\ntt &lt;- read.csv(\n  paste0(\n    \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/\",\n    \"2e9bd5a67e09b14d01f616b00f7f7e0931515d24/data/\",\n    \"2020/2020-05-05/villagers.csv\"\n  )\n)\n\ndf &lt;- merge(df, tt, by = \"name\")"
  },
  {
    "objectID": "posts/2022-01-07-acnh-swipe-results/index.html#new-horizons-scanning",
    "href": "posts/2022-01-07-acnh-swipe-results/index.html#new-horizons-scanning",
    "title": "The most popular Animal Crossing villagers",
    "section": "New Horizons scanning",
    "text": "New Horizons scanning\nThere are 391 villagers represented in these data, with a combined total of 5950 legitimate swipes.\nThe total swipes per villager ranged from 7 to 29, with a mean of 15.2±3.9, so some characters didn’t really get enough swipes for proper assessment. You’d better go to the app and add some more swipes, eh?\n\npar(bg = \"lightgreen\")\nhist(\n  df$total,\n  main = \"Distribution of total swipes per villager\",\n  xlab = \"Total swipes\",\n  col = \"lightblue\",\n  las = 1\n)\n\n\n\n\nWhat if we look now at right swipes (i.e. ‘likes’), adjusted for the total swipes per character?\n\npar(bg = \"lightgreen\")\nhist(\n  df$pc_right,\n  main = \"Distribution of right swipes per villager\",\n  xlab = \"Right swipes (%)\",\n  col = \"lightblue\",\n  las = 1\n)\n\n\n\n\nYou can see that the distribution isn’t quite normal. The frequency of swipes below 50% is 297 and above 50% is 83. This implies that the majority of characters were disliked in a binary sense.\nThe bins at 0 and 100% tell you that there were some characters that were met with universal disapproval and approval, while the bin at 50% tells us that same characters split people’s opinions. Which were they?"
  },
  {
    "objectID": "posts/2022-01-07-acnh-swipe-results/index.html#drumroll-please",
    "href": "posts/2022-01-07-acnh-swipe-results/index.html#drumroll-please",
    "title": "The most popular Animal Crossing villagers",
    "section": "Drumroll, please",
    "text": "Drumroll, please\nSo, onto the villager rankings.\nI’ve written a little function to output an HTML table where each character’s name links to their profile on the Animal Crossing Wiki and exposes their photo from VillagerDB.\n\nentable &lt;- function(df) {\n  df$url &lt;- paste0(\n    \"&lt;img src='\", df$url, \"' \",\n    \"width=50 \",\n    \"alt='Animal Crossing villager \", df$name,\"'&gt;\"\n  )\n  df$name &lt;- paste0(\n    \"&lt;a href='https://animalcrossing.fandom.com/wiki/\",\n    df$name, \"'&gt;\", df$name, \"&lt;/a&gt;\"\n  )\n  df &lt;- df[, c(\"name\", \"url\", \"pc_right\", \"total\")]\n  names(df) &lt;- c(\"Name\", \"Picture\", \"Right swipes (%)\", \"Total swipes\")\n  rownames(df) &lt;- NULL\n  knitr::kable(df)\n}\n\n\nLeast popular\nTo build tension, we’ll start with the least-liked villagers.\n\nbot &lt;- df[order(df$pc_right, -df$n_left), ] |&gt; head()\nentable(bot)\n\n\n\n\n\n\n\n\n\n\nName\nPicture\nRight swipes (%)\nTotal swipes\n\n\n\n\nPinky\n\n0\n23\n\n\nCashmere\n\n0\n17\n\n\nLeonardo\n\n0\n16\n\n\nWalt\n\n0\n16\n\n\nHarry\n\n0\n14\n\n\nBenedict\n\n0\n13\n\n\n\n\n\nSorry Pinky. You are simply… too pink? Seems harsh.\n\n\nMost polarising\nTo build even more tension, let’s look at the characters who had a 50:50 ratio of likes to dislikes.\n\nmeh &lt;- subset(df[order(-df$total), ], diff == 0) |&gt; head()\nentable(meh)\n\n\n\n\n\n\n\n\n\n\nName\nPicture\nRight swipes (%)\nTotal swipes\n\n\n\n\nAlice\n\n50\n16\n\n\nHopkins\n\n50\n16\n\n\nHornsby\n\n50\n16\n\n\nMelba\n\n50\n16\n\n\nCherry\n\n50\n14\n\n\nGoose\n\n50\n14\n\n\n\n\n\nI’m not sure why these villagers are so controversial Perhaps they’re too ‘plain’ for some people?\n\n\nMost popular\nAnd finally, what you’ve all been waiting for.\n\ntop &lt;- df[order(-df$pc_right, -df$n_right), ] |&gt; head()\nentable(top)\n\n\n\n\n\n\n\n\n\n\nName\nPicture\nRight swipes (%)\nTotal swipes\n\n\n\n\nKiki\n\n89\n9\n\n\nFrobert\n\n85\n20\n\n\nBea\n\n85\n13\n\n\nZell\n\n83\n23\n\n\nJulia\n\n82\n17\n\n\nFauna\n\n80\n15\n\n\n\n\n\nSo: Kiki, the grandad-jumper-wearing black-void cat, has the best ratio of right to left-swipes! The rest of the list are pretty conventionally cute (though Zell looks pretty aloof)."
  },
  {
    "objectID": "posts/2022-01-07-acnh-swipe-results/index.html#speciesism",
    "href": "posts/2022-01-07-acnh-swipe-results/index.html#speciesism",
    "title": "The most popular Animal Crossing villagers",
    "section": "Speciesism!",
    "text": "Speciesism!\nI know what you’re thinking: the results are on a villager-by-villager basis, but which species are the most popular? We can aggregate swipes and take a look.\n\nsp_l &lt;- aggregate(n_left ~ species, sum, data = df)\nsp_r &lt;- aggregate(n_right ~ species, sum, data = df)\nsp_n &lt;- with(df, table(species)) |&gt; \n  as.data.frame(responseName = \"n_villagers\")\n\nsp &lt;- sp_n |&gt; \n  merge(sp_l, by = \"species\") |&gt; \n  merge(sp_r, by = \"species\") |&gt; \n  transform(\n    total = n_right + n_left,\n    pc_right = 100 * round(n_right / (n_right + n_left), 2)\n  )\n\n\n\nClick to expand code explanation\n\nA couple more base functions here for those not used to them:\n\naggregate() is like dplyr::group_by() followed by dplyr::summarise() and it allows for compact ‘formula syntax’, so we can say ‘aggregate y by x’ with y ~ x\nmerge() is just like the dplyr::*_join() family\n\n\nSo, firstly, the species ranked by lowest proportion of right swipes.\n\nsp_bot &lt;- sp[order(sp$pc_right, -sp$n_left), ]\nrownames(sp_bot) &lt;- NULL\nhead(sp_bot)\n\n   species n_villagers n_left n_right total pc_right\n1    mouse          15    172      24   196       12\n2    hippo           7     86      19   105       18\n3   monkey           8    110      26   136       19\n4 kangaroo           8    114      29   143       20\n5      pig          15    178      46   224       21\n6     bear          15    172      47   219       21\n\n\nI can see how monkeys and hippos might not be that ‘cute’, per se, but what about the mice? Although ‘cute’ is probably not the best term for the cranky mouse Limberg (sorry Limberg).\nWhat about the most liked species?\n\nsp_top &lt;- sp[order(-sp$pc_right, sp$n_right), ]\nrownames(sp_top) &lt;- NULL\nhead(sp_top)\n\n  species n_villagers n_left n_right total pc_right\n1    deer          10     85      96   181       53\n2     dog          16    104     115   219       53\n3 octopus           3     22      24    46       52\n4     cat          23    190     191   381       50\n5 ostrich          10     79      72   151       48\n6     cub          16    133     104   237       44\n\n\nDeer (all-around solid designs) and dogs (generally friend-shaped) top the table.\nOctopuses are up there too, although there’s relatively few octopus villagers. Personally, I like Zucker, an octopus who looks like takoyaki and therefore delicious.\nThis wasn’t meant to be about villager tastiness, was it? We may need a new app to rank by apparent edibility…"
  },
  {
    "objectID": "posts/2022-01-07-acnh-swipe-results/index.html#environment",
    "href": "posts/2022-01-07-acnh-swipe-results/index.html#environment",
    "title": "The most popular Animal Crossing villagers",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-02 23:24:17 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] googlesheets4_1.1.1\n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.3       httr_1.4.6        cli_3.6.1         knitr_1.43.1     \n [5] rlang_1.1.1       xfun_0.39         purrr_1.0.1       generics_0.1.3   \n [9] jsonlite_1.8.7    glue_1.6.2        gargle_1.5.1      htmltools_0.5.5  \n[13] fansi_1.0.4       rmarkdown_2.22    cellranger_1.1.0  evaluate_0.21    \n[17] tibble_3.2.1      fastmap_1.1.1     yaml_2.3.7        lifecycle_1.0.3  \n[21] compiler_4.3.1    dplyr_1.1.2       fs_1.6.2          htmlwidgets_1.6.2\n[25] pkgconfig_2.0.3   rstudioapi_0.14   digest_0.6.31     R6_2.5.1         \n[29] tidyselect_1.2.0  utf8_1.2.3        curl_5.0.1        pillar_1.9.0     \n[33] magrittr_2.0.3    tools_4.3.1       googledrive_2.1.1"
  },
  {
    "objectID": "posts/2022-06-07-assign-down/index.html#tldr",
    "href": "posts/2022-06-07-assign-down/index.html#tldr",
    "title": "Down with R’s assignment flamewars!",
    "section": "tl;dr",
    "text": "tl;dr\nAll &lt;- vs = flamewars are nullified forever with the introduction of my new ‘down assign’ operator for the R language:\n\n|\nv\n\n\n❗️ Update\nFolks, nerdsniping works:\n\nMatthew Kay has now written the {explodeAssign} package, which lets you use special (weaponised) down-assign arrows in an interactive session\nAntoine Fabri has followed up with a coded implementation for making this possible with a just a v operator (‘vassign’)\n\nAs Matthew says, this is a ‘terrible idea’ and you should use at your own risk, lol."
  },
  {
    "objectID": "posts/2022-06-07-assign-down/index.html#get-down",
    "href": "posts/2022-06-07-assign-down/index.html#get-down",
    "title": "Down with R’s assignment flamewars!",
    "section": "Get down",
    "text": "Get down\nI no longer set my calendar by the movement of the Earth around the hottest point in the solar system. I now set it by the recurrent emergence of the hottest take in the solar system: that R’s assignment operator &lt;- is garbage and R users should be ashamed of themselves.\nLast time I spoke about this I made clear that our Strong Pointy Lad was the One True Operator for assignment. In that post, like some kind of modern Prometheus, I gave mortals the power to detect and destroy R scripts containing the weak and mundane equals assignment operator.\nBut with deference, I have come to realise something profound: we shouldn’t fight about this. It’s not worth anyone’s time to debate the relative merits of using &lt;- or =. We should all relax. We can live in harmony.\n…Because I’ve invented a new assignment concept. Folks, say hello to the down assign operator.\n\n|\nv\n\nYes, it’s still an ‘arrow’, but I think everyone will agree that it makes sense this time. Lateral assignment is unnatural and inefficient and is out of the natural order of things.\nNow the the value falls effortlessly down your script, under the weight of gravity, into the name of the object. If it’s good enough Sir Isaac Newton, it’s good enough for me. Or don’t you believe in gravity? Exactly.\nSo x &lt;- 1 (or, shudder, x = 1) translates to:\n\n1\n|\nv\nx\n\nElegant, isn’t it?\nWhile R Core perform the trivial task of cementing this feature into base R, I’ve prepared a small function that will take care of rudimentary usage for now.\nNote that this function won’t work in an interactive session; it takes the filepath to a script as its input. But that’s okay: I think &lt;- haters are often computer-scientist types and 1337 h4x0rz who never sully their code by playing around in filthy IDEs and notebooks anyway. Obviously we should emulate them.\nFirst I’ll write a demo script to a temporary file. It assigns the values of 1 and 2 to x and y, respectively, then adds them together.\n\ndemo_script &lt;- \"\n1\n|\nv\nx\n\n2\n|\nv\ny\n\nx + y\n\"\n\ndemo_file &lt;- tempfile(fileext = \".R\")\nwriteLines(demo_script, demo_file)\n\nNow to define the function. It reads our script file, finds the down arrows, substitutes them, returns them back to the expression from whence they came, then executes the script.\n\npoint_down &lt;- function(file) {\n  \n  content &lt;- readLines(file)\n  \n  for (i in seq(content)) {\n    \n    if (content[i] == \"|\" & content[i + 1] == \"v\") {\n      \n      combos &lt;- paste0(\n        content[i - 1], content[i], content[i + 1], content[i + 2]\n      )\n      \n      rm_index &lt;- c(i - 1, i, i + 1, i + 2)\n      \n      content[rm_index[1]] &lt;- combos\n      content[rm_index[2:4]] &lt;- \"\"\n      content &lt;- gsub(\"\\\\|v\", \"-&gt;\", content)\n      \n    }\n    \n  }\n  \n  path &lt;- tempfile(fileext = \".R\")\n  writeLines(content, path)\n  eval(parse(path))\n  \n}\n\nAnd now we execute.\n\npoint_down(demo_file)\n\n[1] 3\n\n\nSimply: wow."
  },
  {
    "objectID": "posts/2022-06-07-assign-down/index.html#down-and-away",
    "href": "posts/2022-06-07-assign-down/index.html#down-and-away",
    "title": "Down with R’s assignment flamewars!",
    "section": "Down and away",
    "text": "Down and away\nMy next step for unifying the community around R operators is the ‘down pipe’:\n\n_\nv\n\nSome use the term ‘down pipe’ to mean the exterior drainage tube that takes wastewater away from their homes. I hope we can use the down pipe operator as a way of siphoning away all the bilge around the %&gt;% vs |&gt; arguments once and for all. You’re welcome."
  },
  {
    "objectID": "posts/2022-06-07-assign-down/index.html#environment",
    "href": "posts/2022-06-07-assign-down/index.html#environment",
    "title": "Down with R’s assignment flamewars!",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-02 15:28:50 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-06-10-basic-search/index.html",
    "href": "posts/2022-06-10-basic-search/index.html",
    "title": "Automated pathfinding in {r.oguelike}",
    "section": "",
    "text": "The enemy E chases the player @ who collects gold $ and and an apple a."
  },
  {
    "objectID": "posts/2022-06-10-basic-search/index.html#tldr",
    "href": "posts/2022-06-10-basic-search/index.html#tldr",
    "title": "Automated pathfinding in {r.oguelike}",
    "section": "tl;dr",
    "text": "tl;dr\nI’ve experimented with simple breadth-first search for {r.oguelike}, a work-in-progress game-in-a-package for R. This means enemies can pathfind and chase down the player character."
  },
  {
    "objectID": "posts/2022-06-10-basic-search/index.html#hunting-the-hunter",
    "href": "posts/2022-06-10-basic-search/index.html#hunting-the-hunter",
    "title": "Automated pathfinding in {r.oguelike}",
    "section": "Hunting the hunter",
    "text": "Hunting the hunter\nI’ve written before about the inception of {r.oguelike}, a concept for a roguelike game written in R, along with a simple method for creating procedural tile-based cave-like dungeons.\n\nSo far the enemies in the game have been stationary.\nI could let them wander randomly on each turn, which is easy to implement, but boring and unrealistic. Far better would be to introduce some kind of pathfinding via an algorithm, which would make enemies head toward the player character to engage in battle.\nIn this post I’ll start with a naive approach—simply labelling all tiles with distance from the target—then show how an approach called ‘breadth-first search’ can alleviate the problem."
  },
  {
    "objectID": "posts/2022-06-10-basic-search/index.html#layers-deep",
    "href": "posts/2022-06-10-basic-search/index.html#layers-deep",
    "title": "Automated pathfinding in {r.oguelike}",
    "section": "Layers deep",
    "text": "Layers deep\nThere’s a number of ways I could implement pathfinding in R. For purposes of this post, I’m using an approach that I think makes it easier to grasp conceptually.\nEach dungeon will be composed of two related matrices: one matrix is the tile map, which holds the tiles the user sees (i.e. # for walls, . for floor, @ for the player character, E for enemy); the second matrix isn’t seen by the user, but holds travel-distance scores used by the enemy character to find a path to the target.\nI’ll use m throughout as the name of the matrix object holding the tile map and d as the name of the matrix object holding the distance map.\nBear in mind that the characters can only move one tile per turn in a north, south, east or west direction, which has implications for how we label tiles with their distances."
  },
  {
    "objectID": "posts/2022-06-10-basic-search/index.html#dont-keep-it-simple-stupid",
    "href": "posts/2022-06-10-basic-search/index.html#dont-keep-it-simple-stupid",
    "title": "Automated pathfinding in {r.oguelike}",
    "section": "Don’t keep it simple, stupid",
    "text": "Don’t keep it simple, stupid\nConsider this very basic dungeon room that hosts an enemy character E that is seeking the player character @. It’s just an R matrix object, but we can print it nicely so it’s easier to read.\n\n\nClick for R code\n\nManually create a basic, rectangular dungeon room:\n\n# Create room\nn_rows &lt;- 9\nn_cols &lt;- 10\nm &lt;- matrix(rep(\".\", n_rows * n_cols), n_rows, n_cols)\nm[1, ] &lt;- \"#\"  # walls\nm[, 1] &lt;- \"#\"\nm[nrow(m), ] &lt;- \"#\"\nm[, ncol(m)] &lt;- \"#\"\n\n# Add player and enemy\nm[7, 3] &lt;- \"@\"  # player\nm[3, 3] &lt;- \"E\"  # enemy\n\nFor convenience, a function that pretty-prints the matrix to the console:\n\n# Function to print the map nicely\nprint_tiles &lt;- function(x) {\n  for (i in seq(nrow(x))) {\n    cat(x[i, ], \"\\n\")\n  }\n}\n\n\nprint_tiles(m)\n\n\n\nprint_tiles(m)\n\n# # # # # # # # # # \n# . . . . . . . . # \n# . E . . . . . . # \n# . . . . . . . . # \n# . . . . . . . . # \n# . . . . . . . . # \n# . @ . . . . . . # \n# . . . . . . . . # \n# # # # # # # # # # \n\n\nWhat’s the simplest way that the enemy can find a path to the player?\nProbably it’s to label every traversable tile with a Manhattan-distance (i.e. like a taxicab would move on the gridded streets of New York) away from the player’s position. Then the enemy can check its neighbouring tiles on each turn and select the next highest distance score until it reaches the player.\nSo, below I’ve created a distance map by assigning the player position a score of 100, then I’ve decreased the score by 1 with each additional tile away from the player (remembering that characters can only move north, south, east or west). Walls score zero, so they’re effectively ignored.\n\n\nClick for R code\n\n\nget_distance &lt;- function(m, peak_score) {\n\n  # Initiate distance matrix filled with zero\n  n_rows &lt;- nrow(m)\n  n_cols &lt;- ncol(m)\n  d &lt;- matrix(rep(0, n_cols * n_rows), n_rows, n_cols)\n\n  # Player location gets peak_score\n  player_loc &lt;- which(m == \"@\", arr.ind = TRUE)\n  m[player_loc[1], player_loc[2]] &lt;- peak_score\n\n  # Surrounding tiles get successively smaller distance scores\n  for (col_ind in seq(n_cols)) {\n    for (row_ind in seq(n_rows)) {\n      distance &lt;- abs(player_loc[1] - row_ind) + abs(player_loc[2] - col_ind)\n      value &lt;- peak_score - distance\n      if (value &lt; 0) value &lt;- 0\n      d[row_ind, col_ind] &lt;- value\n    }\n  }\n\n  # Walls aren't traversable, assign low value\n  walls &lt;- which(m == \"#\")\n  d[walls] &lt;- 0\n\n  d\n\n}\n\n\nget_distance(m, 100)\n\n\n\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    0    0    0    0    0    0    0    0    0     0\n [2,]    0   94   95   94   93   92   91   90   89     0\n [3,]    0   95   96   95   94   93   92   91   90     0\n [4,]    0   96   97   96   95   94   93   92   91     0\n [5,]    0   97   98   97   96   95   94   93   92     0\n [6,]    0   98   99   98   97   96   95   94   93     0\n [7,]    0   99  100   99   98   97   96   95   94     0\n [8,]    0   98   99   98   97   96   95   94   93     0\n [9,]    0    0    0    0    0    0    0    0    0     0\n\n\nSee how the player-position at [7,3] is 100 and the values then drop by 1 in all directions?\nSo the enemy would move south from its start position at [3,3] to the target position at [7,3], moving along a score gradient of 96 to 100.\nThere’s an issue with this though: obstacles. What do you think will happen if we put a dividing wall between the characters? Here’s the same room with a wall splitting the characters, plus the distance matrix using the same approach as above.\n\n\nClick for R code\n\n\nm[5, 2:8] &lt;- \"#\"\n\n\nprint_tiles(m)\n\n\n\n\n# # # # # # # # # # \n# . . . . . . . . # \n# . E . . . . . . # \n# . . . . . . . . # \n# # # # # # # # . # \n# . . . . . . . . # \n# . @ . . . . . . # \n# . . . . . . . . # \n# # # # # # # # # # \n\n\n\n\nClick for R code\n\n\nd &lt;- get_distance(m, 100)\n\nd\n\n\n\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    0    0    0    0    0    0    0    0    0     0\n [2,]    0   94   95   94   93   92   91   90   89     0\n [3,]    0   95   96   95   94   93   92   91   90     0\n [4,]    0   96   97   96   95   94   93   92   91     0\n [5,]    0    0    0    0    0    0    0    0   92     0\n [6,]    0   98   99   98   97   96   95   94   93     0\n [7,]    0   99  100   99   98   97   96   95   94     0\n [8,]    0   98   99   98   97   96   95   94   93     0\n [9,]    0    0    0    0    0    0    0    0    0     0\n\n\nSo, as before, the enemy begins on a distance score of 96 at [3,3] and will move south to 97 on [4,3].\nNow what? The wall has been scored as zero, so the enemy looks around for the largest distance score of its remaining neighbours. They all score 96, so the enemy character just selects randomly one of west, north or east.\nUhoh: this means the enemy will be stuck in an infinite loop between the adjacent scores of 96 and 97. This isn’t very intelligent.\nHow can we account for blockages like this?"
  },
  {
    "objectID": "posts/2022-06-10-basic-search/index.html#here-comes-the-flood-fill",
    "href": "posts/2022-06-10-basic-search/index.html#here-comes-the-flood-fill",
    "title": "Automated pathfinding in {r.oguelike}",
    "section": "Here comes the flood-fill",
    "text": "Here comes the flood-fill\nPerhaps a better approach is to ‘flood fill’ the distance scores. Imagine the start point is a source of water and it’s filling up the dungeon. Obviously the water will have to flow around walls and the hardest-to-reach areas will be filled last.\nA basic flood-fill approach we can implement is ‘breadth-first’, which visits tiles in a ‘frontier’ expanding from the start point. Distance scores are assigned once to frontier tiles and neighbours are consecutively added to a ‘queue’ to be checked.\nThis is slightly expensive because every traversable tile has to be assessed, but it means that multiple enemies can all use the same distance map to navigate.1\nWe don’t need to get too complicated for {r.oguelike}; it just has to work. I’ll illustrate the breadth-first approach with a pretty basic and verbose implementation.2\n\nDeep breadth-first\nNow to implement it in R. Reminder: we’ll use two matrices to represent the tile grid (seen by player) and the distance grid (just holds the distance scores).\nI’m going to use three main functions:\n\ninitiate_distance_map(), which creates a distance-map matrix of equal size to the tile map and fills all traversable spaces with zero and all non-traversable spaces with Infinity (which the character will want to avoid)\npopulate_distance_map, which flood-fills the traversable space by expanding a frontier from the start point, assigning a distance score to each neighbour that’s +1 of the score of the parent tile and adding those neighbours to the frontier queue so they can be inspected next\nmove_enemy() to move the enemy character one tile per turn towards the tile with the lowest distance score (i.e. the tile that holds the player @)\n\n\nCreate the distance-score matrix\nUsing the same obstacle map from earlier in the post, we can first initiate a complementary distance-score matrix:\n\ninitiate_distance_map &lt;- function(m) {\n\n  d &lt;- m  # copy the tile map\n  d[which(d != \"#\")] &lt;- 0  # set non-wall tiles to 0\n  d[which(d == \"#\")] &lt;- Inf  # set wall tiles to infinity\n  matrix(as.numeric(d), nrow(d), ncol(d))  # recast as numeric\n\n}\n\nNow we can adjust those distance scores. The algorithm is basically:\n\nCreate a frontier vector of tile indices (i.e. the edges of the flood-fill as it moves outward) and add the starting tile (i.e. the tile index that holds the player character)\nCreate a vector to hold tile indices that we’ve already visited\nBegin a loop where:\n\nthe first tile in the frontier queue becomes the ‘current’ tile\nthe current tile is removed to the frontier\nthe current tile is added to the visited list\nthe tile indices of the current tile’s neighbours (north, south, east and west) are identified\nif not yet visited, the neighbours are assigned distance scores that are +1 of the current tile\n\nContinue the loop until you run out of tiles in the frontier queue\n\nI’ve written a small sub-function to handle neighbour-finding:\n\nget_neighbours &lt;- function(m, current) {\n\n  n_rows &lt;- nrow(m)\n\n  c(\n    if (m[current - n_rows] != \"#\") current - n_rows,\n    if (m[current - 1] != \"#\") current - 1,\n    if (m[current + 1] != \"#\") current + 1,\n    if (m[current + n_rows] != \"#\") current + n_rows\n  )\n\n}\n\nWhich plugs into the main function for implementing the algorithm that assigns distance scores:\n\npopulate_distance_map &lt;- function(m, d) {\n\n  start &lt;- which(m == \"@\")  # start tile, i.e. player tile\n  \n  # Initiate vectors\n  frontier &lt;- start  # to be assessed\n  visited &lt;- c()  # have been assessed\n\n  while (length(frontier) &gt; 0) {\n\n    current  &lt;- frontier[1]  # set first tile of frontier as current\n    frontier &lt;- frontier[!frontier == current]  # remove current tile from frontier\n    visited  &lt;- append(visited, current)  # mark current as visited\n\n    neighbours &lt;- get_neighbours(m, current)  # get vector of neighbour indices\n    neighbours &lt;- neighbours[!neighbours %in% visited]\n\n    for (neighbour in neighbours) {\n      if (!neighbour %in% visited) {  # only assign distance to unvisited neighbours\n        d[neighbour] &lt;- d[current] + 1  # assign distance, one more than parent\n      }\n    }\n\n    frontier &lt;- append(frontier, neighbours)  # add neighbour to the frontier\n\n  }\n\n  d\n\n}\n\n\n\nMove to target\nFinally, here’s the function that lets the enemy check its neighbours for the lowest distance score and move one tile in that direction:\n\nmove_enemy &lt;- function(m, d) {\n\n  # Find tiles of interest\n  en_loc &lt;- which(m == \"E\")\n  player_loc &lt;- which(m == \"@\")\n  n_rows &lt;- nrow(m)\n\n  # Get neighbour tile indices\n  ind &lt;- c(\n    n = en_loc - 1,\n    s = en_loc + 1,\n    e = en_loc + n_rows,\n    w = en_loc - n_rows\n  )\n\n  # Get tile content for neighbours\n  tiles &lt;- c(\n    n = m[ind[\"n\"]],\n    s = m[ind[\"s\"]],\n    e = m[ind[\"e\"]],\n    w = m[ind[\"w\"]]\n  )\n\n  # Get the distance score for a tile if traversable/target\n  dist &lt;- c(\n    n = if (tiles[\"n\"] %in% c(\".\", \"@\")) d[ind[\"n\"]],\n    s = if (tiles[\"s\"] %in% c(\".\", \"@\")) d[ind[\"s\"]],\n    e = if (tiles[\"e\"] %in% c(\".\", \"@\")) d[ind[\"e\"]],\n    w = if (tiles[\"w\"] %in% c(\".\", \"@\")) d[ind[\"w\"]]\n  )\n\n  # Sample a direction if there's ties, move there\n  direction &lt;- sample(names(dist[dist == min(dist)]), 1)\n  en_loc_new &lt;- ind[names(ind) == direction]\n  m[en_loc] &lt;- \".\"  # replace old location with floor tile\n  m[en_loc_new] &lt;- \"E\"  # place enemy in new location\n\n  m\n\n}\n\n\n\nPut it all together\nNow to apply the functions to our dungeon room, with its minor obstacle. Here’s a reminder of the layout:\n\nprint_tiles(m)\n\n# # # # # # # # # # \n# . . . . . . . . # \n# . E . . . . . . # \n# . . . . . . . . # \n# # # # # # # # . # \n# . . . . . . . . # \n# . @ . . . . . . # \n# . . . . . . . . # \n# # # # # # # # # # \n\n\nNow we can initiate the distance-score matrix:\n\nd &lt;- initiate_distance_map(m)\nd\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf   Inf\n [2,]  Inf    0    0    0    0    0    0    0    0   Inf\n [3,]  Inf    0    0    0    0    0    0    0    0   Inf\n [4,]  Inf    0    0    0    0    0    0    0    0   Inf\n [5,]  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf    0   Inf\n [6,]  Inf    0    0    0    0    0    0    0    0   Inf\n [7,]  Inf    0    0    0    0    0    0    0    0   Inf\n [8,]  Inf    0    0    0    0    0    0    0    0   Inf\n [9,]  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf   Inf\n\n\nThen populate the distance scores from the target:\n\nd &lt;- populate_distance_map(m, d)\nd\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf   Inf\n [2,]  Inf   18   17   16   15   14   13   12   11   Inf\n [3,]  Inf   17   16   15   14   13   12   11   10   Inf\n [4,]  Inf   16   15   14   13   12   11   10    9   Inf\n [5,]  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf    8   Inf\n [6,]  Inf    2    1    2    3    4    5    6    7   Inf\n [7,]  Inf    1    0    1    2    3    4    5    6   Inf\n [8,]  Inf    2    1    2    3    4    5    6    7   Inf\n [9,]  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf   Inf\n\n\nSuccess. You can see the start tile at [7,3] scores zero and emanates out to the right, around the obstacle, before wrapping back to the top-left and toward the enemy at position [3,3].\nThe enemy needs only to move to the neighbouring tile with the lowest distance score. So from 16 to 15 on either [4,3] or [3,4], then to 14, to 13, etc.\nSee how this time the character won’t get stuck trying to move south? The distance scores decrease from left to right before curving round the wall in the direction of the player’s tile.\nFor fun, we can print to the console an animation of the movement, which I’ve captured in gif form.\n\n\nClick for R code\n\n\nrepeat {\n  cat(\"\\014\")  # clear console\n  m &lt;- move_enemy(m, d)  # move enemy\n  print_tiles(m)  # print to console\n  Sys.sleep(0.5)  # wait\n  if (!any(m == \"@\")) break  # stop if player captured\n}\n\n\n\nYou can see the enemy go round the wall and reach the player using a pretty efficient path.\nAnd in a more dungeonlike room:"
  },
  {
    "objectID": "posts/2022-06-10-basic-search/index.html#the-end-of-the-tunnel",
    "href": "posts/2022-06-10-basic-search/index.html#the-end-of-the-tunnel",
    "title": "Automated pathfinding in {r.oguelike}",
    "section": "The end of the tunnel?",
    "text": "The end of the tunnel?\nI’ve smashed this together quickly with some completely un-optimised code. Once I’ve ironed out some kinks, it’ll go into the {r.oguelike} package proper.\nOf course, I’ll need to consider:\n\na moving player-character, so the distances map will need to be updated every turn\nlimiting the range of the frontier to some specified distance away from the player, so that an enemy will only begin pathfinding when a player is closer and more ‘detectable’3\na ‘vision-cone’ so the enemy only ‘sees’ the player if there’s a clear set of floor tiles between them\nallowing different enemy classes to move differently, e.g. attack immediately, randomly, or when the player is within a certain distance\n\nAs a basic preview, here’s what it looks like when you throw the pathfinding into a procedurally-generated dungeon from {r.oguelike}:\n\nThis gives a nice impression of the panic that might set in if you’re down to 1 HP and a monster is chasing you into a dead-end.\nPanic: a quintessential roguelike ‘feature’!"
  },
  {
    "objectID": "posts/2022-06-10-basic-search/index.html#environment",
    "href": "posts/2022-06-10-basic-search/index.html#environment",
    "title": "Automated pathfinding in {r.oguelike}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-02 12:57:10 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-07-08-rproj-dupes/index.html#tldr",
    "href": "posts/2022-07-08-rproj-dupes/index.html#tldr",
    "title": "Stop opening the same RStudio Project twice",
    "section": "tl;dr",
    "text": "tl;dr\nI keep opening more than one instance of the same RStudio Project and it’s annoying me, so I wrote a function to warn me on startup."
  },
  {
    "objectID": "posts/2022-07-08-rproj-dupes/index.html#double-trouble",
    "href": "posts/2022-07-08-rproj-dupes/index.html#double-trouble",
    "title": "Stop opening the same RStudio Project twice",
    "section": "Double trouble",
    "text": "Double trouble\nSometimes I write code in an RStudio Project and then go and do something else. My memory is terrible, so later I might open a second instance of the same project and wonder what happened to that code I’d written before.\nIs there a way to stop this from happening? Maybe there’s a setting in RStudio or something? Maybe I should just Google it?\nNah, instead I hacked together a little function that can be run on startup to warn me—via both text and audio—if I have multiple RStudio sessions open with the same name. It’s called check_rproj_dupes().\nNote that the function checks which OS you’re using with .Platform$OS.type, with the hope that one day I (or you) will write some corresponding code that will work on Windows. I don’t use Windows, so I can’t test anything.\nThe code has a few steps:\n\nPass the ps (process status) command with flag -e (show all running processes) to the shell via the system() function, which is captured in a vector when intern = TRUE\nUse grepl() to isolate the strings that contain the ‘.RProj’ RStudio Project extension\nExtract the full paths to the .RProj files\nExtract the basenames from the paths (i.e. just the filename for the .RProj)\nCompare the basenames to see which are duplicated\nDisplay any matches in a warning message and, if speak = TRUE, read aloud a warning message that’s passed to the say function via system()\n\nYeah, this could be simplified, but I’m no code golfer. I just want it to work and for it to be pretty obvious what it’s doing.\nHere it is (or see it in a GitHub Gist, where you can write your suggestions for how to improve it):\n\ncheck_rproj_dupes &lt;- function(speak = FALSE) {\n\n  os &lt;- .Platform$OS.type\n\n  if (os == \"unix\") {\n\n    ps_out &lt;- system(\"ps -e\", intern = TRUE)\n    ps_rproj &lt;- ps_out[grepl(\".Rproj\", ps_out)]\n    ps_split &lt;- strsplit(ps_rproj, \"\\\\s\")\n    rproj_paths &lt;- lapply(ps_split, function(x) x[grepl(\".Rproj$\", x)])\n    rproj_basenames &lt;- lapply(rproj_paths, basename)\n    rproj_dupes &lt;- sort(unlist(rproj_basenames[duplicated(rproj_basenames)]))\n\n  }\n\n  if (os == \"windows\") {\n    stop(\"Sorry, check_rproj_dupes() doesn't work on Windows yet :-(\")\n  }\n\n  if (length(rproj_dupes) &gt; 0) {\n\n    if (speak & os == \"unix\") {\n\n      dupes_string &lt;- paste(rproj_dupes, collapse = \", \")\n      dupes_string_say &lt;- gsub(\"\\\\.Rproj\", \" dot ar proj \", dupes_string)\n\n      message &lt;- paste(\n        \"say ha, you fool, you have more than one open RStudio Project with\",\n        ifelse(length(rproj_dupes) == 1, \"this name:\", \"these names:\"),\n        dupes_string_say\n      )\n\n      system(message)\n\n    }\n\n    warning(\n      \"You've got open RStudio Projects with the same name:\\n\",\n      paste(\"-\", rproj_dupes, collapse = \"\\n\"), \"\\n\",\n      call. = FALSE\n    )\n\n  }\n\n}\n\ncheck_rproj_dupes()\nrm(check_rproj_dupes)\n\nHow would you actually use this though?\nYou can add it to your ‘hidden’ .Rprofile file, which is a place that you can store code that runs whenever RStudio is started.1 Perhaps the easiest way to open it is with usethis::edit_r_profile(). Then you can paste in all the code from the block above.2\nOn startup, the code will run and if there’s no problem, then you’ll see no message. No news is good news.\nBut let’s say I had opened sandbox.Rproj earlier and was now opening the file again. In this second RStudio instance, the usual R startup message will print, followed by a warning:\nWarning message:\nYou've got open RStudio Projects with the same name:\n- sandbox.Rproj \nIf speak = TRUE then you’ll also hear this:\n\n\n\n\n\nSo hopefully now I will be less confused when trying to manage my RStudio sessions. At worst I’ll be shocked to hear the creepy computer voice tell me I’m a fool."
  },
  {
    "objectID": "posts/2022-07-08-rproj-dupes/index.html#environment",
    "href": "posts/2022-07-08-rproj-dupes/index.html#environment",
    "title": "Stop opening the same RStudio Project twice",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-06-29 23:59:43 CEST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-02-19-backtick/index.html#tldr",
    "href": "posts/2022-02-19-backtick/index.html#tldr",
    "title": "Add in an RStudio Addin to add in backticks",
    "section": "tl;dr",
    "text": "tl;dr\nI wrote a tiny R package called {backtick}, which contains an RStudio Addin with a handful of functions for inserting backticks into your R scripts and R Markdown documents (yes, really)."
  },
  {
    "objectID": "posts/2022-02-19-backtick/index.html#plus-one",
    "href": "posts/2022-02-19-backtick/index.html#plus-one",
    "title": "Add in an RStudio Addin to add in backticks",
    "section": "Plus one",
    "text": "Plus one\nRStudio Addins let you select an R function from a dropdown menu in the RStudio IDE. They’re often functions that you don’t need in your executed script, but can make your life easier by performing some kind of supportive action.\nFor example, you can use the RStudio Addin in the {remedy} package from ThinkR to add Markdown formatting to your text. RStudio’s {reprex} package has a built-in RStudio Addin to create a reproducible example from highlighted code. Or how about Miles McBain’s {datapasta} Addin for pasting conveniently into R scripts from external sources?\nYou can find many more examples in Dean Attali’s {addinslist} package, which itself contains an Addin for… adding more Addins."
  },
  {
    "objectID": "posts/2022-02-19-backtick/index.html#in-addition",
    "href": "posts/2022-02-19-backtick/index.html#in-addition",
    "title": "Add in an RStudio Addin to add in backticks",
    "section": "In addition",
    "text": "In addition\nI’ve written about RStudio Addins before.\nI have a GitHub-hosted package called {blogsnip} with an Addin to help me insert code into these blogposts.1 For example, to insert the session-information block at the end of each post, or to insert HTML to create more accessible images.\n{blogsnip} also hosts a concept function to add a comment to each closing bracket with the name of the function being closed. I’ve found it useful for keeping on top of deeply-nested Shiny apps.\nA while back I also wrote an Addin for the {r2eng} package to let your computer speak R code aloud as an English sentence.\nI also recently created the {snorkel} R package, which contains an Addin to help you insert {roxygen2} formatting to your function documentation. Turns out Jozef wrote a detailed series about how you can do something similar.\n\n\n\nYou put a snorkel in your mouth to help you breathe oxygen; you put a {snorkel} in your addins to help you write with {roxygen2}.\n\n\nI wanted to write something about how to quickly set up a package to insert or replace text, which I think is probably the most common (simple) use of RStudio Addins.\nEventually I was nerdsniped (unintentionally) on Twitter by Calum to do something about it."
  },
  {
    "objectID": "posts/2022-02-19-backtick/index.html#the-problem",
    "href": "posts/2022-02-19-backtick/index.html#the-problem",
    "title": "Add in an RStudio Addin to add in backticks",
    "section": "The problem",
    "text": "The problem\nProblem: Calum’s backtick key, `, is being used to activate additional software that’s awkward to toggle on and off every time they wanted to use the backtick for R coding.2\nTo solve Calum’s problem (and Italy’s?3), you could try to use a custom keyboard shortcut, or maybe a snippet. And RStudio already has a button and shortcut in its IDE for inserting R Markdown code chunks, which require triple backticks to demarcate the start and end of the chunk.\nBut an RStudio Addin is another viable method that means you can bundle up a set of functions that insert each of the backtick ‘constructions’, from a single backtick to an R Markdown chunk.\nAs a bonus, you can also set the functions of an Addin to custom keyboard shortcuts and quickly access them from the RStudio command palette (just hit Shift + Cmd + P, or Shift + Ctrl + P, then type the word ‘backtick’)."
  },
  {
    "objectID": "posts/2022-02-19-backtick/index.html#a-solution",
    "href": "posts/2022-02-19-backtick/index.html#a-solution",
    "title": "Add in an RStudio Addin to add in backticks",
    "section": "A solution",
    "text": "A solution\nSo, the (very specific!) user need was clear and I created the {backtick} package with functions to:\n\ninsert a single backtick (i.e. `)\nsurround selected text with single backticks (i.e. selection becomes `selection`)\nsurround selected text with backticks for execution as inline R code in an R Markdown document (as above, but inserts an r and space after the first backtick)\nsurround selected text with backticks for execution as an R code chunk in an R Markdown document (selection is surrounded by ```{r} above and ``` below)\n\nThat last one is especially neat because the in-built RStudio function doesn’t appear to put selected text inside an R Markdown chunk; it simply inserts the skeleton of a chunk.\nCalum notes that this solution worked, and that they were able to set the insert backtick Addin to the keyboard shortcut Alt + `, lol."
  },
  {
    "objectID": "posts/2022-02-19-backtick/index.html#add-your-own",
    "href": "posts/2022-02-19-backtick/index.html#add-your-own",
    "title": "Add in an RStudio Addin to add in backticks",
    "section": "Add your own",
    "text": "Add your own\nI wanted to record for posterity how you (and me) can create this sort of thing.\n\nFirst, create a new package—I like to use usethis::create_package()—and complete basic things like the DESCRIPTION file (I wrote about this before)\nWrite functions in an R script—I like to use usethis::use_r() to create this script in the package—that insert code or replace selected text using the {rstudioapi} package)\nAdd an inst/rstudio/addins.dcf file4 that declares each of your Addins\n\nPoints 2 and 3 are in scope for this quick post.\n\nUse {rstudioapi}\nWhat do I mean by ‘write functions that insert or replace’ text?\nWell, insertion is straightforward. Here’s the function definition from {backtick} to insert a single backtick:\n\nbt_backtick &lt;- function() {\n  rstudioapi::insertText(\"`\")\n}\n\nIn other words, it’s as simple as a function that contains rstudioapi::insertText(). This fetches information from the IDE to know where the cursor is placed in your script, which is where a supplied text string (a single backtick in this case) will be inserted.\nAnd what about text replacement? A similar story: the {rstudioapi} package is used to detect the selected text, which can then be pasted together with other strings to produce and insert a new compound string. Here’s an example from {backtick} for surrounding selected text with backticks:\n\nbt_backticks &lt;- function() {\n\n  active_doc &lt;- rstudioapi::getSourceEditorContext()\n\n  if (!is.null(active_doc)) {\n\n    selected_text &lt;- active_doc$selection[[1]]$text\n\n    text_replace &lt;- paste0(\"`\", selected_text, \"`\")\n\n    rstudioapi::modifyRange(\n      active_doc$selection[[1]]$range,\n      text_replace\n    )\n\n  }\n\n}\n\nSo, in short, rstudioapi::getSourceEditorContext() fetches information about the script pane, including the current selection. That selection can be pasted with other strings, such as a backtick character at the start and end, and then inserted back into the script pane with rstudioapi::modifyRange() to replace the original selection.\nAnd, well… that’s it for functions. All you need to do now is create a special text file so that the functions can be interpreted as Addins.\n\n\nCreate a dcf\nSo, for example, the bt_bactick() function can be exposed as an Addin function by adding the following to the inst/rstudio/addins.dcf file:\nName: Insert Backtick\nDescription: Insert a single backtick. In R Markdown file, one backtick will be\n    inserted. RStudio automatically adds a second backtick when this function is\n    used in an R script.\nBinding: bt_backtick\nInteractive: false\nThis is pretty straightforward: you provide a name (which will be the name you see in the RStudio Addins dropdown menu) and a description (I just copied the description I wrote for the function documentation), along with the binding (just the function name). There’s also ‘interactive’, which tells RStudio if it needs to wait for the user to do something (no, or false in our example)."
  },
  {
    "objectID": "posts/2022-02-19-backtick/index.html#addintional-resources",
    "href": "posts/2022-02-19-backtick/index.html#addintional-resources",
    "title": "Add in an RStudio Addin to add in backticks",
    "section": "Addintional resources",
    "text": "Addintional resources\nThis was a quick roundup to help you (and me) remember quickly how to create this kind of simple insert/replace type of RStudio Addin.\nI recommend you check out a number of more in-depth resources:\n\nSharon’s excellent video ‘Write your own RStudio addins’\nJozef’s in-depth blog series\nRStudio’s very own introduction\n\nLet me know about other useful Addins or tutorials for making them.\nAnd perhaps begin lobbying the Italian government to a backtick key on their keyboards as a gesture of solidarity with developers."
  },
  {
    "objectID": "posts/2022-02-19-backtick/index.html#environment",
    "href": "posts/2022-02-19-backtick/index.html#environment",
    "title": "Add in an RStudio Addin to add in backticks",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-02 15:51:47 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2021-11-27-lubridate-fns/index.html#tldr",
    "href": "posts/2021-11-27-lubridate-fns/index.html#tldr",
    "title": "{itdepends} on {lubridate}",
    "section": "tl;dr",
    "text": "tl;dr\nI used {itdepends} to see how CRAN packages depend on {lubridate}, which was not removed from CRAN recently."
  },
  {
    "objectID": "posts/2021-11-27-lubridate-fns/index.html#lubrigate",
    "href": "posts/2021-11-27-lubridate-fns/index.html#lubrigate",
    "title": "{itdepends} on {lubridate}",
    "section": "Lubrigate",
    "text": "Lubrigate\nA test failure in {lubridate} led to hundreds of R developers being emailed about its potential expulsion from CRAN, which also threatened the hundreds of packages that depend on it.\nI see the benefit of minimising dependencies. I also understand the drawbacks of reinventing the wheel. Maybe {lubridate} is a good dependency: a simple API, part of the popular {tidyverse}, and it handles stuff you can’t be bothered with (like what’s 29 February plus one year?).\nJim Hester spoke at rstudio::conf(2019) about dependencies. His {itdepends} package helps you understand their scale and impact on your package.1\nSo, for fun, I’m looking at how {lubridate} is used by packages that import it."
  },
  {
    "objectID": "posts/2021-11-27-lubridate-fns/index.html#crank-it-up",
    "href": "posts/2021-11-27-lubridate-fns/index.html#crank-it-up",
    "title": "{itdepends} on {lubridate}",
    "section": "CRANk it up",
    "text": "CRANk it up\nCRAN_package_db() is a convenient function that returns information about packages available on CRAN. We can filter it for the packages that import {lubridate}, i.e. they have {lubridate} in the Imports section of their DESCRIPTION file.\n\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(tidyr)\nlibrary(stringr)\n\ncran &lt;- tools::CRAN_package_db()\n\nimports_lubridate &lt;- cran |&gt; \n  filter(str_detect(Imports, \"lubridate\")) |&gt; \n  pull(Package)\n\nsample(imports_lubridate, 5)  # random sample\n\n[1] \"quantdates\"  \"GetDFPData2\" \"esmprep\"     \"strand\"      \"votesmart\"\nRight, so that’s 494 packages out of 18,515 (3%). Is that a lot? Well, the tidyverse package {dplyr}—the Swiss Army knife of data wrangling—is listed in the Imports of 2353 by comparison."
  },
  {
    "objectID": "posts/2021-11-27-lubridate-fns/index.html#install",
    "href": "posts/2021-11-27-lubridate-fns/index.html#install",
    "title": "{itdepends} on {lubridate}",
    "section": "InstALL",
    "text": "InstALL\nSo, perhaps this is a little nuts, but we’re going to install all the {lubridate}-dependent packages because {itdepends} works with locally-installed packages.\n\ntmp &lt;- tempdir()  # temporary folder\n\npurrr::walk(\n  imports_lubridate,\n  ~install.packages(\n    .x, \n    destdir = tmp, \n    dependencies = FALSE,  # skip installing dependencies\n    repos = \"https://cran.ma.imperial.ac.uk/\"  # mirror\n  )\n)\n\nThis takes a little while. There’s probably faster methods, like maybe the {pak} package, but for now I just used what worked. I’ve also hidden the output, obviously. It’s also possible that some packages will error out and won’t install. Oh no! Ah well."
  },
  {
    "objectID": "posts/2021-11-27-lubridate-fns/index.html#it-depends-on-itdepends",
    "href": "posts/2021-11-27-lubridate-fns/index.html#it-depends-on-itdepends",
    "title": "{itdepends} on {lubridate}",
    "section": "It depends on {itdepends}",
    "text": "It depends on {itdepends}\n{itdepends} is not available from CRAN, but you can install from GitHub.\n\nremotes::install_github(\"jimhester/itdepends\")\n\nNow we can pass each of package name to the dep_usage_package() function of {itdepends} in a loop. We get back a dataframe for each package, listing each function call it makes and the package that the function comes from.\nI’ve added a mildly unorthodox use of next, borrowed from StackOverflow, because I was having trouble with the loop after a failure.\n\ndep_list &lt;- vector(\"list\", length(imports_lubridate)) |&gt; \n  setNames(imports_lubridate)\n\nfor (i in imports_lubridate) {\n  \n  skip &lt;- FALSE\n  \n  tryCatch({ \n    dep_list[[i]] &lt;- itdepends::dep_usage_pkg(i)\n    dep_list[[i]]$focus &lt;- i\n  },\n  error = function(e) { \n    dep_list[[i]] &lt;- data.frame(\n      pkg   = NA_character_,\n      fun   = NA_character_,\n      focus = NA_character_\n    )\n    skip &lt;&lt;- TRUE \n  })\n  \n  if (skip) next\n  \n}\n\nI absolutely do not claim this to be the best, most optimised approach. But it works for me."
  },
  {
    "objectID": "posts/2021-11-27-lubridate-fns/index.html#dependensheeesh",
    "href": "posts/2021-11-27-lubridate-fns/index.html#dependensheeesh",
    "title": "{itdepends} on {lubridate}",
    "section": "Dependensheeesh",
    "text": "Dependensheeesh\nNow that {itdepends} has extracted all the function calls from each of the packages, we can take a look at their frequencies.\n\nExample\nHere’s the top 10 most-used functions from the first package alphabetically: {academictwitteR}.\n\nex_pkg &lt;- \"academictwitteR\"\n\ndep_list[[ex_pkg]] |&gt; \n  count(pkg, fun, sort = TRUE) |&gt;\n  slice(1:5)\n\n# A tibble: 5 × 3\n  pkg   fun       n\n  &lt;chr&gt; &lt;chr&gt; &lt;int&gt;\n1 base  &lt;-      228\n2 base  {       197\n3 base  if      109\n4 base  $        90\n5 base  !        42\nIt’s not particularly exciting to know that the top 5 are made up of base R functions like the assignment arrow (&lt;-), the dollar-sign ($) data accessor2 and the square bracket ([). We also don’t really care about the package’s internal functions. Let’s filter out these packages and re-count\n\nbase_pkgs &lt;- sessionInfo()$basePkgs\n\ndep_list[[ex_pkg]] |&gt;\n  filter(!pkg %in% c(base_pkgs, ex_pkg)) |&gt; \n  count(pkg, fun, sort = TRUE) |&gt; \n  slice(1:10)\n\n# A tibble: 10 × 3\n   pkg       fun                n\n   &lt;chr&gt;     &lt;chr&gt;          &lt;int&gt;\n 1 lifecycle deprecate_soft    16\n 2 magrittr  %&gt;%               14\n 3 dplyr     bind_rows          8\n 4 dplyr     left_join          5\n 5 dplyr     select_if          5\n 6 httr      status_code        4\n 7 jsonlite  read_json          4\n 8 purrr     map_dfr            4\n 9 tibble    tibble             4\n10 dplyr     distinct           3\nAha. We can see immediately that the authors have made use of tidyverse to write their package, since you can see {dplyr}, {tibble}, etc, in there. This makes the use of {lubridate} relatively unsurprising.\nHere’s the {lubridate} functions used by this package.\n\ndep_list[[ex_pkg]] |&gt;\n  filter(pkg == \"lubridate\") |&gt; \n  count(pkg, fun, sort = TRUE)\n\n# A tibble: 4 × 3\n  pkg       fun             n\n  &lt;chr&gt;     &lt;chr&gt;       &lt;int&gt;\n1 lubridate as_datetime     1\n2 lubridate seconds         1\n3 lubridate with_tz         1\n4 lubridate ymd_hms         1\nSo this package uses four {lubridate} functions for conversion and formatting of datetimes.\n\n\nAll packages\nNow let’s take a look at the function calls across all the packages that import {lubridate}. I’m first going to convert the list of results to a dataframe.\n\ndep_df &lt;- do.call(rbind, dep_list)\n\n\nFunction use by package\nThis is a count of the number of uses of each {lubridate} function by each of the the focus packages (i.e. the packages we installed).\n\npkg_fn_count &lt;- dep_df |&gt;\n  filter(pkg == \"lubridate\") |&gt;\n  count(focus, fun, sort = TRUE)\n\npkg_fn_count |&gt; slice(1:5)\n\n# A tibble: 5 × 3\n  focus        fun         n\n  &lt;chr&gt;        &lt;chr&gt;   &lt;int&gt;\n1 PriceIndices month    1096\n2 PriceIndices year      678\n3 tidyndr      as_date    53\n4 RClimacell   with_tz    52\n5 RobinHood    ymd_hms    52\nHoly moley, the {PriceIndices} package calls month() and year(), used to extract elements of a date, over 1400 times combined.\n\n\nUnique function use by package\nWe can also look at things like the packages that make calls to the greatest number of unique {lubridate} functions. Here’s the top 5.\n\nfn_distinct_count &lt;- dep_df |&gt;\n  filter(pkg == \"lubridate\") |&gt;\n  distinct(focus, fun) |&gt;\n  count(focus, sort = TRUE) \n\nfn_distinct_count |&gt; slice(1:5)\n\n# A tibble: 5 × 2\n  focus              n\n  &lt;chr&gt;          &lt;int&gt;\n1 photobiology      26\n2 mctq              25\n3 fmdates           21\n4 finbif            15\n5 xml2relational    15\nSo these packages are using more than 10 unique functions from {lubridate}, which is pretty extensive usage. It may be tricky to do away with the convenience of the dependnecy in these cases, especially.\nConversely, a quick histogram reveals that a large number of packages are actually using just a single {lubridate} function.\n\nhist(\n  fn_distinct_count$n,\n  breaks = 30,\n  main = \"Unique {lubridate} functions used by\\npackages importing {lubridate}\",\n  xlab = \"Function count\"\n)\n\n\nMaybe the dependency could be dropped in these cases?\nOut of interest, which {lubridate} function is the most frequent in packages that use just one?\n\nfocus_one_fn &lt;- fn_distinct_count |&gt;\n  filter(n == 1) |&gt;\n  pull(focus)\n\npkg_fn_count |&gt; \n  filter(focus %in% focus_one_fn) |&gt; \n  count(fun, sort = TRUE) |&gt; \n  slice(1:5)\n\n# A tibble: 5 × 2\n  fun             n\n  &lt;chr&gt;       &lt;int&gt;\n1 as_datetime     7\n2 as_date         6\n3 ymd             6\n4 ymd_hms         6\n5 is.Date         4\nLooks like some pretty standard functions, like converting to a date (as_date(), as_datetime()) or to parse dates with a particular time component (ymd_hms for year, month, date, hour, minute, seconds, and ymd()).\nI think this is interesting: some packages are importing {lubridate} in its entirety to use a single function. And these functions have base R equivalents with no package-dependency cost. Without diving too deep, this implies that people are using {lubridate} because of syntax familiarity or perhaps because they’re already loading other tidyverse packages anyway.\n\n\nNon-unique function use by package\nWhat about total calls to {lubridate} functions by each of the dependent package? This is on-unique, so could include one function being called multiple times by a given package.\n\nfn_nondistinct_count &lt;- dep_df |&gt;\n  filter(pkg == \"lubridate\") |&gt;\n  count(focus, sort = TRUE)\n\ndep_df |&gt; \n  count(focus) |&gt; \n  left_join(\n    fn_nondistinct_count,\n    by = \"focus\",\n    suffix = c(\"_total\", \"_lub\")\n  ) |&gt; \n  mutate(percent_lub = round(100 * n_lub / n_total, 1)) |&gt; \n  arrange(desc(percent_lub)) |&gt;\n  slice(1:5)\n\n# A tibble: 5 × 4\n  focus        n_total n_lub percent_lub\n  &lt;chr&gt;          &lt;int&gt; &lt;int&gt;       &lt;dbl&gt;\n1 RClimacell      2241   225        10  \n2 riem             113     9         8  \n3 quantdates       534    42         7.9\n4 rtrends          101     8         7.9\n5 PriceIndices   23235  1805         7.8\nWow, 10% of calls by the {RClimacell} package involve {lubridate} functions. Make sense: this package relates to weather readings at certain time intervals.\nAnd another quick histogram of what the distribution looks like.\n\nhist(\n  fn_nondistinct_count$n,\n  breaks = 30,\n  main = \"Non-unique {lubridate} functions used by\\npackages importing {lubridate}\",\n  xlab = \"Function count\"\n)\n\n\nHuh, so the number of non-unique {lubridate} calls is almost always less than 50 per package. Seems in general that a small number of {lubridate} functions are called per dependent package, but they might be called a lot."
  },
  {
    "objectID": "posts/2021-11-27-lubridate-fns/index.html#you-do-you",
    "href": "posts/2021-11-27-lubridate-fns/index.html#you-do-you",
    "title": "{itdepends} on {lubridate}",
    "section": "You do you",
    "text": "You do you\nDoes the information here imply that many developers could consider removing their small number of {lubridate} calls in favour of date-related base functions? Maybe. That’s up to the developers.\nUltimately, {itdepends} might be a useful tool for you to work out if you need all the dependencies you have. Other tools are out there; I read recently about Ashley Baldry’s {depcheck} package, for example\nIt might be interesting to redo this investigation for all CRAN packages and their dependencies, but I don’t have a personal CRAN mirror and I don’t write particularly performant code.\nAnyway, don’t listen to me: I write joke packages that I don’t put on CRAN, lol."
  },
  {
    "objectID": "posts/2021-11-27-lubridate-fns/index.html#environment",
    "href": "posts/2021-11-27-lubridate-fns/index.html#environment",
    "title": "{itdepends} on {lubridate}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 20:42:28 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-02-04-soccercolleagues/index.html",
    "href": "posts/2022-02-04-soccercolleagues/index.html",
    "title": "Introduce me to your {soccercolleagues}",
    "section": "",
    "text": "Lee Bowyer and Kieran Dyer: ‘team mates’ (BBC via Giphy)"
  },
  {
    "objectID": "posts/2022-02-04-soccercolleagues/index.html#tldr",
    "href": "posts/2022-02-04-soccercolleagues/index.html#tldr",
    "title": "Introduce me to your {soccercolleagues}",
    "section": "tl;dr",
    "text": "tl;dr\nI made a quick R package called {soccercolleagues} that for a given player, or players, lets you (a) find all their former team mates in common and (b) sample from them for quiz-based purposes."
  },
  {
    "objectID": "posts/2022-02-04-soccercolleagues/index.html#lord-of-the-ings",
    "href": "posts/2022-02-04-soccercolleagues/index.html#lord-of-the-ings",
    "title": "Introduce me to your {soccercolleagues}",
    "section": "Lord of the Ings",
    "text": "Lord of the Ings\nQuiz question:\n\nWhich current Premier League footballer has been team mates with each of the following: Kevin Phillips, Mark Viduka, Dejan Lovren, Danny Ings and Nicky Butt?\n\nI’ve seen this type of question in pub quizzes, on social media and forwarded on by assorted football nerds. Some are harder than a Roy Keane challenge\nBut why use your brain when you could backwards-engineer it programmatically?\nI figured I could use R and the {worldfootballR} package by Jason Zivkovic to fetch squad data from the Transfermarkt website, then isolate team mates that these players have in common.\nAnd why not make it an R package in the process?"
  },
  {
    "objectID": "posts/2022-02-04-soccercolleagues/index.html#announce-soccercolleagues",
    "href": "posts/2022-02-04-soccercolleagues/index.html#announce-soccercolleagues",
    "title": "Introduce me to your {soccercolleagues}",
    "section": "Announce {soccercolleagues}!",
    "text": "Announce {soccercolleagues}!\nI’m pleased to announce the signing of the promising young {soccercolleagues}1 package on a free. Will it live up to the hype?\nThe package is available via GitHub, which you can install with help from {remotes}.\n\ninstall.packages(\"remotes\")  # if not already installed\nremotes::install_github(\"matt-dray/soccercolleagues\")\nlibrary(soccercolleagues)\n\nIn a departure from my usual package production, I’ve made use of the tidyverse in this one. It also uses the native R pipe, so you’ll need R v4.1 or above.2 It works on my computer, which is good enough for me.\nAs with many packages showcased on this blog, you should consider this a low-effort artisanal meme. Definitely a proof of concept. I’m not sure if I’ll ever come back and improve it. Feel free to add issues or submit pull requests."
  },
  {
    "objectID": "posts/2022-02-04-soccercolleagues/index.html#get-stuck-in",
    "href": "posts/2022-02-04-soccercolleagues/index.html#get-stuck-in",
    "title": "Introduce me to your {soccercolleagues}",
    "section": "Get stuck in",
    "text": "Get stuck in\n{soccercolleageus} has three main functions:\n\nget_players() to fetch squad data from Transfermarkt\nget_colleagues() to return all the players by season who have been team mates with a named set of players\nsample_colleagues() to select a random set of team mates for a named player or players\n\nThere’s also a secret tiny Shiny app, accessed with open_colleagues_quiz(), but it (literally) only presents five player names with buttons to (a) reveal a sampled team mate in common, and (b) generate a new set of player names. You’ll need to install {shiny} and {shinyjs} separately if you want to use it (don’t use it).\nLet’s talk through the main functions.\n\n1. Get squads by league and season\nFirst, let’s get all the players from all teams in a given league for a given set of seasons.\nI designed the package entirely with the English Premier League in mind because that’s the league I’m most accustomed to and because Transfermarkt has data for all its seasons, which began in 1992.3\nYou pass to get_players() the seasons you want and the country that the league is from. Beware: this could take several minutes.\n\nepl_players &lt;- get_players(\n  seasons = 1992:2020,\n  country = \"England\"\n)\n\nglimpse(epl_players)\n\nRows: 20,643\nColumns: 11\n$ player_name    &lt;chr&gt; \"Paul Gerrard\", \"Jon Hallworth\", \"John Keeley\", \"Ian Gray\", \"Craig…\n$ player_pos     &lt;chr&gt; \"Goalkeeper\", \"Goalkeeper\", \"Goalkeeper\", \"Goalkeeper\", \"Centre-Ba…\n$ player_age     &lt;dbl&gt; 19, 26, 30, 17, 20, 19, 19, 40, 29, 26, 27, 24, 26, 26, 26, 25, 26…\n$ nationality    &lt;chr&gt; \"England\", \"England\", \"England\", \"England\", \"England\", \"England\", …\n$ in_squad       &lt;dbl&gt; 27, 16, 29, 12, 35, 1, 35, 1, 40, 9, 33, 36, 41, 37, 6, 42, 15, 32…\n$ appearances    &lt;dbl&gt; 25, 16, 1, 0, 24, 0, 33, 0, 40, 5, 33, 31, 41, 32, 6, 42, 14, 32, …\n$ goals          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 3, 0, 5, 9, 0, 3, 3, 6, 0, 3, 3, 2, …\n$ minutes_played &lt;dbl&gt; 2250, 1440, 90, 0, 2114, 0, 2953, 0, 3600, 341, 2799, 2522, 3647, …\n$ team_url       &lt;chr&gt; \"https://www.transfermarkt.com/oldham-athletic/startseite/verein/1…\n$ team_name      &lt;chr&gt; \"oldham-athletic\", \"oldham-athletic\", \"oldham-athletic\", \"oldham-a…\n$ season         &lt;chr&gt; \"1992\", \"1992\", \"1992\", \"1992\", \"1992\", \"1992\", \"1992\", \"1992\", \"1…\nA dataframe is returned with lots of handy stuff like the player name, team name, season and a bunch of player data. Obviously you could take this data away and do whatever you like with it, it’s quite a neat dataset for other, less esoteric analysis of the history of the Premier League.\n\n\n2. Find team mates\nNow to filter this information for a given focus player or players.\nYou provide the dataframe output of get_players() to get_colleagues() as the all_players() argument, along with a vector of players names. The function filters the dataframe down to just the team mates of the selected player or players for the teams and seasons in which they played together.\n\nteammates &lt;- get_colleagues(\n  all_players = epl_players,\n  players = c(\"Kolo Touré\", \"Yaya Touré\")\n)\n\nRows: 348\nColumns: 12\n$ focus_name     &lt;chr&gt; \"Kolo Touré\", \"Kolo Touré\", \"Kolo Touré\", \"Kolo Touré\", \"Kolo Tour…\n$ player_name    &lt;chr&gt; \"Stuart Taylor\", \"Richard Wright\", \"Patrick Vieira\", \"Stuart Taylo…\n$ player_pos     &lt;chr&gt; \"Goalkeeper\", \"Goalkeeper\", \"Defensive Midfield\", \"Goalkeeper\", \"D…\n$ player_age     &lt;dbl&gt; 20, 23, 25, 21, 26, 22, 17, 27, 23, 18, 28, 19, 21, 20, 22, 21, 24…\n$ nationality    &lt;chr&gt; \"England\", \"England\", \"France\", \"England\", \"France\", \"England\", \"F…\n$ in_squad       &lt;dbl&gt; 21, 43, 54, 20, 42, 4, 31, 44, 7, 26, 44, 14, 13, 40, 45, 50, 41, …\n$ appearances    &lt;dbl&gt; 15, 22, 54, 13, 42, 0, 22, 44, 0, 24, 44, 11, 13, 40, 44, 49, 40, …\n$ goals          &lt;dbl&gt; 0, 0, 3, 0, 4, 0, 0, 3, 0, 0, 7, 0, 4, 0, 12, 0, 1, 30, 1, 0, 7, 1…\n$ minutes_played &lt;dbl&gt; 1220, 1929, 4702, 1081, 3563, 0, 1347, 3822, 0, 1456, 3926, 728, 1…\n$ team_url       &lt;chr&gt; \"https://www.transfermarkt.com/fc-arsenal/startseite/verein/11/sai…\n$ team_name      &lt;chr&gt; \"fc-arsenal\", \"fc-arsenal\", \"fc-arsenal\", \"fc-arsenal\", \"fc-arsena…\n$ season         &lt;chr&gt; \"2001\", \"2001\", \"2001\", \"2002\", \"2002\", \"2003\", \"2003\", \"2003\", \"2…\nYou can see how this could be used to solve our original problem: you can take a named player’s unique team mates and find how many are in common with other named players.\nWhile get_colleagues() effectively returns a filtered dataframe, there’s another function to whittle this down to simpler output.\n\n\n3. Sample from common team mates\nGiven a named player or players, the sample_colleagues() function returns a vector of team mates of size n. These are sampled with a weighting by the total number of Premier League minutes played (a very rough way of outputting more well-known players).\nYou could apply the function to a single named player if you want, which outputs five sampled team mates.\n\nsample_colleagues(\n  all_players = epl_players,\n  players = \"Craig Bellamy\"\n)\n\n[1] \"Jordan Henderson\"   \"Rob Lee\"  \"Freddie Ljungberg\"\n[4] \"Patrick Vieira\"   \"Celestine Babayaro\"\nOf course, if your chosen player is the only common team mate for the set of output players, then you’ve got a decent quiz question to test your pals with!\nTo check, we can feed these names back into sample_colleagues(). I’ve set the argument n = 2: if we get two names then we know the player isn’t the only one in common for these five.\n\nsample_colleagues(\n  all_players = epl_players,\n  players = c(\n    \"Jordan Henderson\",\n    \"Rob Lee\",\n    \"Freddie Ljungberg\",\n    \"Patrick Vieira\",\n    \"Celestine Babayaro\"\n  ),\n  n = 2 \n)\n\n[1] Craig Bellamy\nLegend, journeyman."
  },
  {
    "objectID": "posts/2022-02-04-soccercolleagues/index.html#theres-only-one-insert-player",
    "href": "posts/2022-02-04-soccercolleagues/index.html#theres-only-one-insert-player",
    "title": "Introduce me to your {soccercolleagues}",
    "section": "There’s only one [insert player]",
    "text": "There’s only one [insert player]\nSo what’s the answer to the original question?4\n\nWhich current Premier League footballer was team mates with each of the following: Kevin Phillips, Mark Viduka, Dejan Lovren, Danny Ings and Nicky Butt?\n\nNow we can answer programmatically.\n\nsample_colleagues(\n  all_players = epl_players,\n  players = c(\n    \"Kevin Phillips\",\n    \"Mark Viduka\",\n    \"Dejan Lovren\",\n    \"Danny Ings\",\n    \"Nicky Butt\"\n  ),\n  n = 1\n)\n\n\n\nClick for answer!\n\n[1] James Milner\n\nDid you get it? Was it too easy, too boring?5"
  },
  {
    "objectID": "posts/2022-02-04-soccercolleagues/index.html#environment",
    "href": "posts/2022-02-04-soccercolleagues/index.html#environment",
    "title": "Introduce me to your {soccercolleagues}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:32 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] soccercolleagues_0.0.0.9001\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2021-11-04-kanto-locate/index.html#tldr",
    "href": "posts/2021-11-04-kanto-locate/index.html#tldr",
    "title": "Get coordinates from fictitious maps",
    "section": "tl;dr",
    "text": "tl;dr\nUse the locator() function in R to interactively extract arbitrary coordinates from images of imaginary maps. I extracted points of interest from Kanto in the original Pokémon games."
  },
  {
    "objectID": "posts/2021-11-04-kanto-locate/index.html#on-the-road-to-viridian-city",
    "href": "posts/2021-11-04-kanto-locate/index.html#on-the-road-to-viridian-city",
    "title": "Get coordinates from fictitious maps",
    "section": "On the road to Viridian City",
    "text": "On the road to Viridian City\nThere are lots of interesting fictitious maps. For example, Middle Earth from Lord of the Rings, Hyrule from The Legend of Zelda and Sodor from Thomas the Tank Engine.\nThis is excellent fodder for fan-made recreations. I’ve thought before about how I would do this programmatically, but there’s one particularly awkward thing: how can you grab location coordinates from an image of your chosen map?\nThis post outlines a pretty low-effort method for doing this in R. Basically there’s two steps: (1) read and plot an image of a map and (2) click locations interactively to record their coordinates. I’m going to do this with a Pokémon example for simplicity, but also because have you ever visited this blog before?"
  },
  {
    "objectID": "posts/2021-11-04-kanto-locate/index.html#get-map",
    "href": "posts/2021-11-04-kanto-locate/index.html#get-map",
    "title": "Get coordinates from fictitious maps",
    "section": "Get map",
    "text": "Get map\nFor my own convenience, I’ve written a function that downloads a PNG of a map from the web and plots it. This requires {png} and {grid} packages.\n\nplot_map &lt;- function(png_path) {\n  \n  # Return to user's par settings once done\n  original_par &lt;- par()[\"mar\"]\n  on.exit(par(original_par))\n  \n  # Download and read image\n  tmp &lt;- tempfile()\n  download.file(png_path, tmp, quiet = TRUE)\n  img &lt;- png::readPNG(tmp)\n  unlink(tmp)  # clean up\n  \n  # Set up canvas and plot\n  par(mar = rep(0, 4))  # remove margins\n  plot.new()  # start new plot frame\n  grid::grid.raster(img, x = 0.5, y = 0.5)\n  \n}\n\nTo be specific, I’m using the in-game ‘town map’ of the fictitious Kanto region from the first generation of Pokémon Red and Blue for the Nintendo GameBoy,1 downloaded from Bulbapedia. This is good for a demo: the locations are pretty discrete, obvious and clickable.\n\nkanto_path &lt;- \n  \"https://cdn2.bulbagarden.net/upload/8/86/Kanto_Town_Map_RBY.png\"\n\nplot_map(kanto_path)\n\n\n\n\nYou might be thinking that it looks like a schematic map—an abstraction of actual geography—like the London underground map. In fact, the town map is pretty similar to the actual in-game world layout, as demonstrated by folks who have stitched together all the overworld screens."
  },
  {
    "objectID": "posts/2021-11-04-kanto-locate/index.html#get-points",
    "href": "posts/2021-11-04-kanto-locate/index.html#get-points",
    "title": "Get coordinates from fictitious maps",
    "section": "Get points",
    "text": "Get points\nWith the Kanto map drawn in our active plot window, we can run a function to prompt the user to click on points and record their coordinates.\n\nlocate_points &lt;- function(places) {\n  \n  places_list &lt;- vector(\"list\", length(places)) |&gt; \n    setNames(places)\n  \n  for (i in places) {\n    cat(paste0(\"Click on \", i, \"... \"))\n    places_list[[i]] &lt;- locator(1, type = \"p\")\n    cat(\"found.\\n\")\n  }\n  \n  places_df &lt;- do.call(rbind, places_list) |&gt;\n    data.frame()\n  \n}\n\nThis is not magic. It is merely powered by the locator() function, which records the x and y location of a point clicked on a plot by the user.2\nHere’s a simplified version of what’s going on when you use locator(). If you make a plot and call the function, then the top of the plotting window in RStudio says ‘locator active’ and your cursor becomes crosshairs. Clicking on the plot returns a list of the x and y coordinates within the plotting space. The first argument is the number of clicks to collect before the locator is deactivated automatically.\n\nFor our bespoke locate_points() function, we can pass a character vector of place names. For this demo, that’ll be Kanto’s towns, cities and other places of interest. The function loops through the locations and requests you to click the corresponding point on the map. The console will read like Click on Pallet Town... and then found once you’ve clicked it.\n\nkanto_names &lt;- c(\n  \"Pallet Town\", \"Viridian City\", \"Viridian Forest\", \"Pewter City\", \n  \"Mt Moon\", \"Cerulean City\", \"Rock Tunnel\", \"Vermilion City\", \n  \"Lavender Town\", \"Celadon City\", \"Fuchsia City\", \"Saffron City\", \n  \"Seafoam Islands\", \"Cinnabar Island\", \"Victory Road\",\n  \"Indigo Plateau\"\n)\n\nkanto_pts &lt;- locate_points(kanto_names)  # initiates clicking prompts\n\nClick on Pallet Town...\nDuring the clickfest, the locate_points() function has assembled the points lists into a data.frame with one row per location. The locations vector was passed as the rownames of the dataframe as well. Here’s the full list of collected coordindates.\n\nkanto_pts\n\n                        x          y\nPallet Town     0.2470187 0.30648777\nViridian City   0.2451179 0.50103940\nViridian Forest 0.2451179 0.75868886\nPewter City     0.2470187 0.81652853\nMt Moon         0.4275933 0.88225543\nCerulean City   0.6100688 0.87962636\nRock Tunnel     0.7944450 0.81915761\nVermilion City  0.6100688 0.43794158\nLavender Town   0.7963458 0.69296196\nCeladon City    0.4751130 0.69296196\nFuchsia City    0.5207318 0.18292120\nSaffron City    0.6100688 0.69559103\nSeafoam Islands 0.3838752 0.05672554\nCinnabar Island 0.2451179 0.05672554\nVictory Road    0.1538802 0.75343071\nIndigo Plateau  0.1519794 0.87962636\n\n\nThe coordinate values are between 0 to 1 because those are the default x- and y-axis limits that were set up in plot_map(). They’re remarkably precise, but the resolution on the image wasn’t great and my hand-eye coordination is bad, so take these with a grain of salt."
  },
  {
    "objectID": "posts/2021-11-04-kanto-locate/index.html#plot",
    "href": "posts/2021-11-04-kanto-locate/index.html#plot",
    "title": "Get coordinates from fictitious maps",
    "section": "Plot",
    "text": "Plot\nSo! You can now plot the coordinates independently. To demonstrate, I’ve plotted the points and added a label whose style is dependent on the type of location. I’ve added lines to join the locations in the order they appear in a normal playthrough.\n\nkanto_pts$city &lt;- ifelse(\n  grepl(\"Town|City|Island$\", rownames(kanto_pts)), \n  TRUE, FALSE\n)\n\npar(mar = rep(0, 4))\nwith(kanto_pts, plot(x, y, axes = FALSE))\nwith(kanto_pts, lines(x, y, col = \"grey95\", lwd = 5))\n\npoints(\n  kanto_pts$x, kanto_pts$y,\n  pch = 16,\n  cex = ifelse(kanto_pts$city, 2, 1),\n  col = ifelse(kanto_pts$city, \"red\", \"blue\")\n)\n\ntext(\n  kanto_pts$x, kanto_pts$y,\n  gsub(\" \", \"\\n\", row.names(kanto_pts)),\n  cex = ifelse(kanto_pts$city, 0.7, 0.4),\n  pos = c(1, 1, 1, 4, 1, 1, 2, 1, 2, 1, 1, 1, 3, 3, 1, 1),\n  family = \"Press Start 2P\"  # installed locally from Google Fonts\n)\n\n\n\n\nIt might also be fun to do a minimal map of the cities where the points are coloured according to the name of the city. You may have noticed that the city names are all fancy colour names (viridian, fuchsia, etc), so let’s use them. Well, except Pallet, for which can just use a mix of all colours, i.e. white.\n\nkanto_colour &lt;- \n  kanto_pts[kanto_pts$city | \n              rownames(kanto_pts) == \"Indigo Plateau\", ]\n\nkanto_colour$city_col &lt;- c(  # close-enough named R colours\n  \"white\", \"aquamarine4\", \"grey57\", \"royalblue3 \",\n  \"red3 \", \"lavender\", \"darkseagreen2\", \"magenta\",\n  \"tomato2\", \"orangered2\", \"blue\"\n) \npar(mar = rep(0, 4))\nwith(kanto_colour, plot(x, y, axes = FALSE))\nwith(kanto_colour, points(x, y, pch = 22, cex = 4, bg = city_col))\n\n\n\n\nI’ll admit I struggled to make this given my colourblindness, but also because I had no prior notions of what colours like ‘vermilion’ and ‘celadon’ are. Actually they kind of sound more like Pokémon names.\nAnyway, these ‘maps’ are the first steps to create something more exciting. For now they demonstrate the point (literally, lol). Plus they fulfil my belated submission for day one of the #30DayMapChallenge (‘points’)."
  },
  {
    "objectID": "posts/2021-11-04-kanto-locate/index.html#distances",
    "href": "posts/2021-11-04-kanto-locate/index.html#distances",
    "title": "Get coordinates from fictitious maps",
    "section": "Distances",
    "text": "Distances\nBut wait, there’s more.\nSo, obviously, why not work out the distances between towns? Not in arbitrary units, but in actual metres. There’s a few ways we could do this, but basically I’m going to peg a pixel to a known length.3\nFirst, we can create a lookup table of the straight-line ‘distances’ between locations, given our arbitrary 0 to 1 dimensions. We want to avoid being precise with these values (they’re only as good as my ability to click a tiny square on a computer screen), so I’m multiplying and rounding them.\n\nkanto_dist &lt;- raster::pointDistance(\n  kanto_pts[, c(\"x\", \"y\")],\n  lonlat = FALSE\n) |&gt;\n  as.data.frame() |&gt;\n  round(2) * 100\n\nThe legacy packages maptools, rgdal, and rgeos, underpinning the sp package,\nwhich was just loaded, will retire in October 2023.\nPlease refer to R-spatial evolution reports for details, especially\nhttps://r-spatial.org/r/2023/05/15/evolution4.html.\nIt may be desirable to make the sf package available;\npackage maintainers should consider adding sf to Suggests:.\nThe sp package is now running under evolution status 2\n     (status 2 uses the sf package in place of rgdal)\n\nnames(kanto_dist) &lt;- kanto_names\nrownames(kanto_dist) &lt;- kanto_names\n\nkanto_dist[1:3, 1:3]  # first few\n\n                Pallet Town Viridian City Viridian Forest\nPallet Town               0            19              45\nViridian City            19             0              26\nViridian Forest          45            26               0\n\n\nThese values are the number of arbitrary distance units between pairs of locations, which are given by the row and column headers. So, Pallet Town to Viridian City is 19 arbitrary units.\nBased on my own measurements, the centre of Pallet to the centre of Viridian is 64 in-game ‘blocks’, where a block is a 16- by 16-pixel square.4\nIt just so happens that the player-character sprite fills a single block5 and we know that the character is probably about 140 cm tall.6\nThat means Pallet to Viridian is about 64 * 140 cm = 8960 cm. So, one of our arbitrary units equals 8960 cm / 19 = 472 cm. Now we can correct our distance lookup.\n\nkanto_dist_m &lt;- round(kanto_dist * 472 / 100)\nkanto_dist_m[1:3, 1:3]  # first few\n\n                Pallet Town Viridian City Viridian Forest\nPallet Town               0            90             212\nViridian City            90             0             123\nViridian Forest         212           123               0\n\n\nOnce again I’ve removed some precision by calculating the result as a rounded distance in metres. Coward.\n\nSo this means we can now say some really profound things like it’s about 90 m from Pallet Town to Viridian City. Maybe that’s true in the context of the game’s dimensions, but it’s… underwhelming.\nWas this scuffed distance-conversion exercise worthwhile? No. \nBut it might strengthen my belated submission to day two of the #30DayMapChallenge (‘lines’)?"
  },
  {
    "objectID": "posts/2021-11-04-kanto-locate/index.html#environment",
    "href": "posts/2021-11-04-kanto-locate/index.html#environment",
    "title": "Get coordinates from fictitious maps",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-07 20:35:40 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] digest_0.6.31     codetools_0.2-19  fastmap_1.1.1     xfun_0.39        \n [5] lattice_0.21-8    knitr_1.43.1      raster_3.6-20     htmltools_0.5.5  \n [9] png_0.1-8         rmarkdown_2.23    cli_3.6.1         terra_1.7-39     \n[13] grid_4.3.1        compiler_4.3.1    rstudioapi_0.14   tools_4.3.1      \n[17] sp_2.0-0          evaluate_0.21     Rcpp_1.0.10       yaml_2.3.7       \n[21] rlang_1.1.1       jsonlite_1.8.7    htmlwidgets_1.6.2"
  },
  {
    "objectID": "posts/2023-01-08-petrov/index.html#tldr",
    "href": "posts/2023-01-08-petrov/index.html#tldr",
    "title": "Stiliyan Petrov: Jesus?",
    "section": "tl;dr",
    "text": "tl;dr\nIn which I prove wrong a tweeted Opta football statistic, using R and Transfermarkt data. Oh wait, actually Opta were right. Ah, heck."
  },
  {
    "objectID": "posts/2023-01-08-petrov/index.html#petrov-rescue",
    "href": "posts/2023-01-08-petrov/index.html#petrov-rescue",
    "title": "Stiliyan Petrov: Jesus?",
    "section": "Petrov Rescue",
    "text": "Petrov Rescue\nBasically, for little reason, I dislike the style of the tweets on the Twitter feed for Opta1 (the company who do all the football stats).\nWhat is so outrageous? Each tweet always ends in a single, summary word that makes me cringe.\nWait, what? Let’s take a look at their most recent tweet at time of writing:\n\n14 - Harry Kane has scored 14 goals in his last 14 appearances in the FA Cup, averaging a goal every 63 minutes in the competition in this period. Guarantee.\n\n‘Guarantee’. Gah.\nOr this tweet:\n\n16 - Since his first appearance in the competition in January 2016, Leicester’s Kelechi Iheanacho has scored more FA Cup goals than any other player (16). Specialist.\n\n‘Specialist’. Sigh.\nA completely small and pointless thing to be annoyed by, right?\nBut here’s the scenario. Over the yuletide period (on Christmas day!) they ran this tweet:\n\n1 - Stiliyan Petrov (@StanPetrov19) is the only player to have played in the Premier League whose name contains all the letters in the word ‘Nativity’. Star.\n\nObviously, I have absolutely nothing against ‘Big Stan’. He’s a legend; a ‘star’, if you will. Captain of Aston Villa! Bulgaria! Battled leukaemia and still made it to nearly 600 games. One of the best Bulgarian/Premier League ‘Petrovs’, along with cult legend Martin.\nBut could this stat possibly be true? Surely there’s at least one other player. Perhaps a window of opportunity for me to avenge my feelings of cringe?\nOh, and obviously you can ignore the candid dismissals in the tweet’s replies, for example:\n\nWhat are we supposed to do with this information? [Picture of wryly-smiling duck.]\n\nNo, this is more important than any Opta tweet ever: what if it’s… wrong?"
  },
  {
    "objectID": "posts/2023-01-08-petrov/index.html#stan-in-r-but-not-rstan",
    "href": "posts/2023-01-08-petrov/index.html#stan-in-r-but-not-rstan",
    "title": "Stiliyan Petrov: Jesus?",
    "section": "Stan in R, but not {rstan}",
    "text": "Stan in R, but not {rstan}\nSo I looked into it using R, of course.\nTurns out it’s pretty straightforward with the excellent {worldfootballR} package by Jason Zivkovic, which helps fetch player data from Transfermarkt (among other suppliers).\nBasically, we can fetch data about footballers from every team in a given league’s season since its inception. So, aha, you cannot escape, Opta!\nMy little {soccercolleagues} package that I wrote about in early 2022 is built heavily (heavily!) around {worldfootballR} and has a convenience function we can use.\nThe niche2 primary objective of {soccercolleagues} is to let you find pairs of football players that were colleagues at some point. Like: ‘which current Premier League footballer has been team mates with each of the following: Kevin Phillips, Mark Viduka, Dejan Lovren, Danny Ings and Nicky Butt?’3\nFollow along. As ever, you can install the {soccercolleagues} package from GitHub:\n\nif(!require(remotes)) install.packages(\"remotes\")\nremotes::install_github(\"matt-dray/soccercolleagues\")\n\nWe’ll also use the {tidyverse} for wrangling.\n\nlibrary(soccercolleagues)\nlibrary(tidyverse)\n\nSo we can ask Transfermarkt for all the years of the English Premier League, which began in 1992:\n\n# This will take quite a long time...\nepl_players &lt;- soccercolleagues::get_players(\n  seasons = 1992:2022,\n  country = \"England\"\n)\n\nAnd now we can look for the players whose names contain the letters in ‘nativity’:\n\nepl_players |&gt;\n  distinct(player_name) |&gt;\n  mutate(\n    player_name = str_remove_all(tolower(player_name), \" \"),\n    n_count = str_count(player_name, \"n\"),\n    a_count = str_count(player_name, \"a\"),\n    t_count = str_count(player_name, \"t\"),\n    i_count = str_count(player_name, \"i\"),\n    v_count = str_count(player_name, \"v\"),\n    y_count = str_count(player_name, \"y\")\n  ) |&gt;\n  filter(\n    n_count &gt;= 1 &\n      a_count &gt;= 1 &\n      t_count &gt;= 2 &\n      i_count &gt;= 2 &\n      v_count &gt;= 1 &\n      y_count &gt;= 1\n  )\n\n# A tibble: 1 × 7\n  player_name    n_count a_count t_count i_count v_count y_count\n  &lt;chr&gt;            &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n1 stiliyanpetrov       1       1       2       2       1       1\nOof… they were right. He is the only one.\nWow, this humble pie is so delicious, thank you so much Opta for unintentionally spoonfeeding it to me.\nTo be clear: Opta’s data analysts have a good track record, as far as I know. But I’ve got my eye on you! You’ll slip up one day!\n…But wait. Opta were misnaming Stan as ‘Stylian Petrov’ in tweets as late as 2012. Get rekt! You missed the extra ‘i’ you need in ‘nativity’, fools! Put respect on Stiliyan’s name!\n‘Result’.4"
  },
  {
    "objectID": "posts/2023-01-08-petrov/index.html#environment",
    "href": "posts/2023-01-08-petrov/index.html#environment",
    "title": "Stiliyan Petrov: Jesus?",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:34 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-09-24-pixeltrix/index.html#tldr",
    "href": "posts/2022-09-24-pixeltrix/index.html#tldr",
    "title": "Interactive pixel art in R with {pixeltrix}",
    "section": "tl;dr",
    "text": "tl;dr\nI’ve written {pixeltrix}, an R package that lets you select ‘pixels’ interactively from a plot window and returns your final image as a matrix. You could use it to design sprites, for example."
  },
  {
    "objectID": "posts/2022-09-24-pixeltrix/index.html#pixel-perfect",
    "href": "posts/2022-09-24-pixeltrix/index.html#pixel-perfect",
    "title": "Interactive pixel art in R with {pixeltrix}",
    "section": "Pixel perfect",
    "text": "Pixel perfect\nI’ve written before about creating very simple pixel art in R. To create a sprite of Link from The Legend of Zelda I had to write out by hand a vector that encoded its pixel values. It was tedious.\nThere are, however, a couple of options in R to take an image and extract the pixels from it: see Florian Privé’s Shiny app in the {pixelart} package and Mike Cheng’s (AKA coolbutuseless) blog post that also describes how to animate them.1\nBut what if you want to create a sprite from scratch? It would be great if you could click pixels interactively and be returned a matrix encoding your image.\nI couldn’t find an R package to do this, so I decided to make a very simple one: {pixeltrix} (as in ‘pixel’ and ‘matrix’, but also as in ‘tricks’2, lol).\nIt’s written entirely in base R (no Shiny or server needed) and can be run in the R console. It’s basically a repeat loop that runs image() to plot squares3 (hereafter ‘pixels’) and locator()4 to let you click those pixels on and off. The coordinates of each click are matched to the nearest pixel centre, the pixel’s value is incremented by 1 (or wrapped back to zero) and the image is redrawn.\nThe package is still in development, but I think it’s reached a useable state for my own purposes.\n\nℹ️ Update\nI lied. The package has been updated since this post. You can read about the changes in a more recent blogpost. Highlight: you can make animations now."
  },
  {
    "objectID": "posts/2022-09-24-pixeltrix/index.html#enter-the-matrix",
    "href": "posts/2022-09-24-pixeltrix/index.html#enter-the-matrix",
    "title": "Interactive pixel art in R with {pixeltrix}",
    "section": "Enter the matrix",
    "text": "Enter the matrix\nThe package is available for download from GitHub. I have some ideas on how to improve it; go ahead and add your own ideas to the issues tracker.\n\n# install.packages(remotes)  # if not yet installed\nremotes::install_github(\"matt-dray/pixeltrix\") # v0.1 in this post\nlibrary(pixeltrix)\n\nThe main function is click_pixels(), to which you pass plot dimensions (how many pixels tall and wide), the number of pixel ‘states’ (the number of values a pixel can take, so binary would be 2) and whether you want to put a grid over the plot (makes it easier to see where the pixels are).\n\nclick_pixels(\n  n_rows   = 3,\n  n_cols   = 3,\n  n_states = 2,\n  grid = TRUE\n) -&gt; x\n\nThis opens a plot window. Repeatedly click a pixel to cycle it through the number of states you asked for. For example, n_states = 4 means you cycle it through values of 0, 1, 2 and 3 (wrapping back to 0), which will be manifested in the plot as different shades of grey.\nNote that you can only click one pixel at a time, so you’ll have to do a lot of clicking if your n_states value is high. Colouring stuff in really slowly is called ‘mindfulness’, I believe; good for your wellbeing.\nWhen you’re done, you press the Esc key, or the ‘Finish’ button in the plot window of RStudio. I saved all the images below via the ‘Export’ button in RStudio.\n\nYou’re returned a matrix that contains the value of each pixel in your image. So if you had set n_states = 3, a twice-clicked pixel gets the value 2, an unclicked pixel defaults to a value of 0, etc.\n\nx\n\n     [,1] [,2] [,3]\n[1,]    1    0    1\n[2,]    0    1    0\n[3,]    1    0    1\nThis matrix is basically a blueprint of the image you created. You can take this and do other things with it. Maybe you’ll make art by passing it to ggplot() to match each of the pixel-state values to a colour. Maybe you’ll use it to plan your crochet or cross-stitch5, or to teach spatial epidemiology (!).\nIf you want to edit your matrix, you can pass it into edit_pixels(). This means you don’t have to start over from scratch with click_pixels() if you only want to change something small. Note that you can provide a higher n_states value to edit_pixels() than the current maximum in the matrix you provided."
  },
  {
    "objectID": "posts/2022-09-24-pixeltrix/index.html#sprite-club",
    "href": "posts/2022-09-24-pixeltrix/index.html#sprite-club",
    "title": "Interactive pixel art in R with {pixeltrix}",
    "section": "Sprite club",
    "text": "Sprite club\nMy main purpose for the package is to create simple sprites.\nI used {pixeltrix} to make each of the sprites below. They took about a minute each. It would’ve taken much longer to write their matrices by hand and to keep passing them to image() to visuliase them and make sure there weren’t any mistakes.\n\nTamagotchi\nHere’s a 1-bit original kuchipatchi sprite from the original 90s Tamagotchi digital pets. It uses the default of two pixel states (binary): so 0 for white and 1 for grey.\n\nclick_pixels(14, 14) -&gt; tam_sprite\n\n\n\n\nClick to expand matrix\n\n\ntam_sprite\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14]\n [1,]    0    0    0    0    1    1    1    1    1     1     0     0     0     0\n [2,]    0    0    0    1    0    0    0    0    0     0     1     0     0     0\n [3,]    0    1    1    0    1    0    0    0    0     1     0     1     0     0\n [4,]    1    0    0    0    0    0    0    0    0     0     0     0     1     0\n [5,]    0    1    1    1    0    0    0    0    0     0     0     0     1     0\n [6,]    1    0    0    0    0    0    0    0    0     0     0     0     1     0\n [7,]    0    1    1    1    0    0    0    0    0     0     0     0     1     0\n [8,]    0    0    0    1    0    0    0    0    1     0     1     0     0     1\n [9,]    0    0    0    1    0    0    0    0    1     0     1     0     0     1\n[10,]    0    0    0    1    0    0    0    0    0     1     0     0     0     1\n[11,]    0    0    0    0    1    0    0    0    0     0     0     0     1     0\n[12,]    0    0    0    0    0    1    0    1    1     1     0     1     0     0\n[13,]    0    0    0    0    0    1    0    1    0     1     0     1     0     0\n[14,]    0    0    0    0    0    0    1    0    0     0     1     0     0     0\n\n\nPokémon\nHere’s the player character from the first generation of Pokémon games on the Game Boy. It uses three states (n_states = 3): value 0 is white, 1 is light grey and 2 is dark grey.\n\nclick_pixels(14, 16, 3) -&gt; poke_sprite\n\n\n\n\nClick to expand matrix\n\n\npoke_sprite\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14]\n [1,]    0    0    0    0    2    2    2    2    2     2     0     0     0     0\n [2,]    0    0    0    2    1    1    1    1    1     1     2     0     0     0\n [3,]    0    0    2    1    1    1    1    1    1     1     1     2     0     0\n [4,]    0    0    2    1    1    1    1    1    1     1     1     2     0     0\n [5,]    0    2    2    2    1    0    0    0    0     1     2     2     2     0\n [6,]    0    2    2    0    2    2    2    2    2     2     0     2     2     0\n [7,]    2    0    2    0    0    0    0    0    0     0     0     2     0     2\n [8,]    2    0    0    0    0    2    0    0    2     0     0     0     0     2\n [9,]    0    2    2    0    0    2    0    0    2     0     0     2     2     0\n[10,]    0    2    2    2    0    0    1    1    0     0     2     2     2     0\n[11,]    2    0    0    2    2    2    2    2    2     2     2     0     0     2\n[12,]    2    0    0    2    2    2    2    2    2     2     2     0     0     2\n[13,]    0    2    2    2    1    1    2    2    1     1     2     2     2     0\n[14,]    0    0    2    1    2    2    1    1    2     2     1     2     0     0\n[15,]    0    0    2    1    1    1    2    2    1     1     1     2     0     0\n[16,]    0    0    0    2    2    2    0    0    2     2     2     0     0     0"
  },
  {
    "objectID": "posts/2022-09-24-pixeltrix/index.html#why",
    "href": "posts/2022-09-24-pixeltrix/index.html#why",
    "title": "Interactive pixel art in R with {pixeltrix}",
    "section": "Why?",
    "text": "Why?\nTurns out the {pixeltrix} package is actually yak-shaving for another package I’m developing: {tamRgo}.\n{tamRgo} is a (very much work-in-progress) conceptual package for a Tamagotchi-like experience in the R console. You get a persistent interactive digital pet on your computer whose stats update in ‘real time’ while you’re away.\nI want to print a largeish canvas of pixels to visualise multiple pet ‘species’ and for the various interactions you can have (playing, feeding, cleaning). {pixeltrix} makes it much easier to design these scenes and returns matrices that I can add directly to {tamRgo}.\n\nℹ️ Update\nI’ve now written a post about {tamRgo}, where you can see how {pixeltrix} was used for the character sprites."
  },
  {
    "objectID": "posts/2022-09-24-pixeltrix/index.html#environment",
    "href": "posts/2022-09-24-pixeltrix/index.html#environment",
    "title": "Interactive pixel art in R with {pixeltrix}",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-06-29 18:52:13 CEST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] pixeltrix_0.2.1.9000\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-03-15-renv-profiles/index.html#tldr",
    "href": "posts/2022-03-15-renv-profiles/index.html#tldr",
    "title": "Reproducible {distill} posts with {renv} profiles",
    "section": "tl;dr",
    "text": "tl;dr\nI think you can use the {renv} package to create separate reproducible environment profiles for each of your {distill} blog posts."
  },
  {
    "objectID": "posts/2022-03-15-renv-profiles/index.html#profiled",
    "href": "posts/2022-03-15-renv-profiles/index.html#profiled",
    "title": "Reproducible {distill} posts with {renv} profiles",
    "section": "Profiled",
    "text": "Profiled\nFunctionality comes and goes in R packages. How do you deal with that in the context of a blog built with R? What if you need to go back and change something in a post from four years ago?1\nI built a demo {distill} blog to test whether the {renv} package might be a viable solution for reproducibility on a post-by-post basis.\n{renv} is a package by Kevin Ushey that records your dependencies in a text ‘lockfile’. It typically works on the scale of a whole project, but since version 0.13.0 you can have multiple profiles within a given project.\nI think this means that each post can have its own profile with its own distinct set of packages and package versions.\nThat means you can easily recreate a specific environment for a given post at a given time if you need to alter and re-render it in future."
  },
  {
    "objectID": "posts/2022-03-15-renv-profiles/index.html#example",
    "href": "posts/2022-03-15-renv-profiles/index.html#example",
    "title": "Reproducible {distill} posts with {renv} profiles",
    "section": "Example",
    "text": "Example\nI’m presenting this here as a theory, really, but I’ve also made a demo blog to try it out. It seems to work.\nThere are two posts on the demo blog. They both use the {dplyr} package, but one depends on an old version (0.8.5) and one depends on the current version (1.0.8).\nUsing {renv} profiles means that these package versions don’t interfere with each other.\nThe post depending on the older {dplyr} version can’t access the across() function, but the post depending on the newer {dplyr} version can use across().\nIn other words, the environments associated with the profiles for each post are totally isolated from each other."
  },
  {
    "objectID": "posts/2022-03-15-renv-profiles/index.html#how-to",
    "href": "posts/2022-03-15-renv-profiles/index.html#how-to",
    "title": "Reproducible {distill} posts with {renv} profiles",
    "section": "How to",
    "text": "How to\nOf course, you first need a blog. I used {distill}2 for the demo, a package by JJ Allaire, Rich Iannone, Alison Presmanes Hill and Yihui Xie. You can follow the guidance from RStudio, but basically:\n\nCreate your blog with distill::create_blog()\nBuild it with rmarkdown::render_site() (or ‘Build Website’ from the Build pane of RStudio)\nInitiate a reproducible environment for the blog as a whole with renv::init()\n\nAnd then a new-post workflow could look like this:\n\nCreate a new post with distill_create_post()\nActivate a profile for the new post with renv::activate(), providing a unique name to the profile argument (I suggest the post’s folder name as seen in the blog’s _posts/ folder)\nInstall the packages you need for the post with renv::install()\nCapture the dependencies in the profile’s lockfile with renv::snapshot()\n\nIn code, that might look a bit like this:\n\ndistill::create_post(\"new-post\")\n\nrenv::activate(profile = \"YYYY-MM-DD-new-post\")\n\nrenv::install(\n  \"distill\",\n  \"rmarkdown\",\n  \"palmerpenguins\",\n  \"dplyr\"\n)\n\nrenv::snapshot()\n\nFor the demo blog, I called the two profiles ‘2022-03-14-dplyr-085’ and ‘2022-03-14-dplyr-108’, which you can see in the renv/profiles/ folder of the project repo.\nThese are named uniquely for the two separate folders in the _posts/ directory that contain each post’s files. This naming structure should make it easy to remember the profile associated with each post.\nAs I worked on the posts, I switched between the two profiles with renv::activate(), passing the relevant profile name to the profile argument.\nNote that passing NULL as the profile argument means you switch to the default profile associated with the project as a whole, i.e. when you ran renv::init()."
  },
  {
    "objectID": "posts/2022-03-15-renv-profiles/index.html#yeah-but",
    "href": "posts/2022-03-15-renv-profiles/index.html#yeah-but",
    "title": "Reproducible {distill} posts with {renv} profiles",
    "section": "Yeah, but?",
    "text": "Yeah, but?\nThere are obvious pros and cons to this approach.\nFor example, maybe it’s a bit too dependent on the user: they have to remember to switch between the profiles, etc.\nAnd I don’t think you can properly rebuild the site again with rmarkdown::render_site(), because this function will run based only the currently active {renv} profile, rather than rendering each post in the context of its own specific profile.\nBut ultimately isn’t it worthwhile to be able to rebuild a post in future if you need to change or update something? Maybe.\nI’d be interested to hear other criticisms, especially before I try and use this approach for real.\nMeanwhile, I know that Danielle Navarro has approached this with a more thought-out and sophisticated approach and has created a work-in-progress package called {refinery} to help build a separate environment for each post in a {distill} blog.\nIn general, Danielle’s blog does a brilliant job of explaining the problem of blog reproducibility and the technicals behind it. I suggest you read that post if you want to know more."
  },
  {
    "objectID": "posts/2022-03-15-renv-profiles/index.html#environment",
    "href": "posts/2022-03-15-renv-profiles/index.html#environment",
    "title": "Reproducible {distill} posts with {renv} profiles",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:37 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2023-06-13-panic-in-the-toolshed/index.html#tldr",
    "href": "posts/2023-06-13-panic-in-the-toolshed/index.html#tldr",
    "title": "Panic! In The Toolshed",
    "section": "tl;dr",
    "text": "tl;dr\nI wrote some slides to tell data scientists in the public sector what they already know: share the tools you’ve developed."
  },
  {
    "objectID": "posts/2023-06-13-panic-in-the-toolshed/index.html#an-axe-to-grind",
    "href": "posts/2023-06-13-panic-in-the-toolshed/index.html#an-axe-to-grind",
    "title": "Panic! In The Toolshed",
    "section": "An axe to grind",
    "text": "An axe to grind\nI’m speaking today at an event for UK government data scientists with a theme of ‘the data science toolshed’. My plea is small: I want public sector workers to share the tools they make1.\nWe should build modular things like R packages that are easy to use and develop; make them available to everyone to minimise duplication and encourage collaboration; and maximise reach by telling everyone about it. This is how we improve quality and build our community. And save money for the taxpayer.\nHandily, this is already expressed in the government’s Technology Code of Practice:\n\nShare, reuse and collaborate: avoid duplicating effort and unnecessary costs by collaborating across government and sharing and reusing technology, data, and services.\n\nI’ve had a small experience with this: I made the {a11ytables} R package to help producers of stats publications automate the creation of best-practice, accessible spreadsheets. It’s now being used in several organisations and is referenced from the government’s best-practice guidance.\nSuccess? Maybe. But also PANIK: I’ve left the organisation where I made it; I was the sole developer; I worry that I should have thought about this sooner; that I should fork and update it; that updating users will be hard; that links to the old package will break; and so on. Hopefully people will learn something from these missteps."
  },
  {
    "objectID": "posts/2023-06-13-panic-in-the-toolshed/index.html#burying-the-hatchet",
    "href": "posts/2023-06-13-panic-in-the-toolshed/index.html#burying-the-hatchet",
    "title": "Panic! In The Toolshed",
    "section": "Burying the hatchet",
    "text": "Burying the hatchet\nThe slides are live on the internet and embedded below, or you can view the source on GitHub. Press s to pop out the speaker notes, o for a slide overview and f for fullscreen.\n\n\n\n\n\n\n\n\nThe slides were made with Revealjs via Quarto, because of course they were."
  },
  {
    "objectID": "posts/2023-06-13-panic-in-the-toolshed/index.html#clamp-down",
    "href": "posts/2023-06-13-panic-in-the-toolshed/index.html#clamp-down",
    "title": "Panic! In The Toolshed",
    "section": "Clamp down",
    "text": "Clamp down\nSo, we should sustainabilise (not a word), centralise and advertise the useful things we make. Maybe we could have a list of tools we’ve produced collectively in the public sector? Something like an ‘Awesome’ list or a CRAN task view. Maybe that would make it easier to find and develop existing solutions instead of building from scratch all the time.\nBuild a toolshed. They will come?"
  },
  {
    "objectID": "posts/2023-06-13-panic-in-the-toolshed/index.html#environment",
    "href": "posts/2023-06-13-panic-in-the-toolshed/index.html#environment",
    "title": "Panic! In The Toolshed",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-06-29 16:13:50 CEST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2   compiler_4.3.1      fastmap_1.1.1      \n [4] cli_3.6.1           tools_4.3.1         htmltools_0.5.5    \n [7] xaringanExtra_0.7.0 rstudioapi_0.14     yaml_2.3.7         \n[10] rmarkdown_2.22      knitr_1.43.1        jsonlite_1.8.5     \n[13] xfun_0.39           digest_0.6.31       rlang_1.1.1        \n[16] evaluate_0.21"
  },
  {
    "objectID": "posts/2021-09-12-punct-lit/index.html",
    "href": "posts/2021-09-12-punct-lit/index.html",
    "title": "Extract punctuation from books with R",
    "section": "",
    "text": "The start of ‘Moby Dick’ by Herman Melville"
  },
  {
    "objectID": "posts/2021-09-12-punct-lit/index.html#tldr",
    "href": "posts/2021-09-12-punct-lit/index.html#tldr",
    "title": "Extract punctuation from books with R",
    "section": "tl;dr",
    "text": "tl;dr\nI wrote an R function to extract only the punctuation marks from a provided text. It prints prettily to the console, but you can also take a character vector away for further analysis."
  },
  {
    "objectID": "posts/2021-09-12-punct-lit/index.html#punct-rock",
    "href": "posts/2021-09-12-punct-lit/index.html#punct-rock",
    "title": "Extract punctuation from books with R",
    "section": "Punct rock",
    "text": "Punct rock\nA few years ago Adam J Calhoun did a small but really neat thing: extracted and presented only the punctuation from some books. It appeared again recently in my Twitter timeline.\nI love the aesthetic of the neatly printed characters, but it also tells us something (obvious?) about writing styles.\nLong story short: old-timey folk often wrote convoluted sentences; literature and essays from a hundred or more years ago are especially rich with semi-colons, commas, more commas and of course, as the audience is well-aware, even more commas, which to modern eyes can be a little tiring; certainly it’s a style that is out of fashion, but was pretty hip for, let’s say, Herman Melville, when writing his behemoth of a novel, Moby Dick; Or, The Whale.\nWhereas Hemingway was terse."
  },
  {
    "objectID": "posts/2021-09-12-punct-lit/index.html#youve-been-punct",
    "href": "posts/2021-09-12-punct-lit/index.html#youve-been-punct",
    "title": "Extract punctuation from books with R",
    "section": "You’ve been punct",
    "text": "You’ve been punct\nSo I wrote a small, opinionated R function called extract_punct() that grabs the punctuation characters for a given text.\nSomeone has probably done this in R before. I saw that Julia Silge wrote a post on quantifying punctuation like Calhoun’s original, but it doesn’t involve printing the characters.\nThe purpose of this post is just to show how to do the extraction and print it nicely to the console, though the function allows you to take away a character vector for further analysis.\n\nFunctuation\nBelow is the definition for extract_punct(). You supply your content to text, and then you set the arguments:\n\nsort = FALSE to return the punctuation in the order it appears in the text, or TRUE to order it ‘alphabetically’\nvec_only = TRUE to early-return the punctuation characters as a vector for you to do with as you please\nvec_only = FALSE to print the results to the console with cat()\nwidth to decide where the line breaks will go in the printed output (defaults to 80)\ncolour = TRUE to have each punctuation character returned in colour thanks to the {crayon} package by Gábor Csárdi1, or FALSE to return without colour\n\n\nextract_punct &lt;- function(\n    text,              # input text\n    sort = FALSE,      # order the characters?\n    vec_only = FALSE,  # return as char vector?\n    width = 80,        # width of output\n    colour = TRUE      # colour output?\n) {   \n  \n  # Extract punctuation with regular expression\n  punct_rx  &lt;- \"[\\\\.,:;!?\\\"\\'\\\\()]\"\n  matches   &lt;- regexpr(punct_rx, text)\n  punct_vec &lt;- regmatches(text, matches)\n  \n  # Sort alphabetically?\n  if (sort) punct_vec &lt;- punct_vec[order(punct_vec)]\n  \n  # Early return of character vector\n  if (vec_only) return(punct_vec)\n  \n  # Colour the characters\n  punct_vec &lt;- sapply(\n    punct_vec, switch,\n    \".\"  = crayon::blue(\".\"),\n    \"!\"  = crayon::blue(\"!\"),\n    \"?\"  = crayon::blue(\"?\"),\n    \",\"  = crayon::yellow(\",\"),\n    \";\"  = crayon::yellow(\";\"),\n    \":\"  = crayon::yellow(\":\"),\n    \"\\\"\" = crayon::red(\"\\\"\"),\n    \"'\"  = crayon::red(\"'\"),\n    \"(\"  = crayon::silver(\"(\"),\n    \")\"  = crayon::silver(\")\")\n  )\n  \n  # Print without colour\n  if (!is.null(width) & !colour) {\n    cat(names(punct_vec), sep = \"\", fill = width)\n  }\n  \n  # Convoluted colour printing, requires flattening a matrix\n  if (!is.null(width) & colour) {\n    div_size &lt;- length(punct_vec) %/% width * width\n    mat_flat &lt;- c(rbind(\"\\n\", matrix(punct_vec[1:div_size], nrow = width)))\n    leftover &lt;- c(\"\\n\", punct_vec[div_size:length(punct_vec)])\n    cat(mat_flat[2:length(mat_flat)], leftover, sep = \"\")\n  }\n  \n}\n\nThere’s no defensive programming or testing here; this is just for fun for the purposes of this blog post. Maybe it’ll work on your machine?\nNote that I’ve selected a subset of possible punctuation marks. There’s no reason why you couldn’t update the punct_rx object, which contains a regular expression, to include more marks. You could even use R’s built-in \"[[:punct:]]\" declaration to capture them all.\nI decided to colour by ‘type’ of mark: terminal (period, exclamation and question), ‘continuing’ marks (comma, semi-colon and colon), parenthetical (open and close) and quote signifiers (quotation marks and apostrophes, recognising that apostrophes are more likely to be used for contractions).\nThere were a couple of technical annoyances to deal with in the function definition; let me know what you would improve.2\n\n\n{gutenbergr}, dead ahead!\nLet’s inspect the punctuation from some books on Project Gutenberg, ‘a volunteer effort to digitize, archive, and distribute literary works’.\nHelpfully, we can interact with Project Gutenberg’s library via the {gutenbergr} package by David Robinson.3\n\nlibrary(gutenbergr)\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(stringr)\n\nsample_n(gutenberg_metadata, 5) %&gt;% select(1:3)\n\n# A tibble: 5 × 3\n  gutenberg_id title                                                      author\n         &lt;int&gt; &lt;chr&gt;                                                      &lt;chr&gt; \n1         8484 \"Scientific American Supplement, No. 430, March 29, 1884\"  Vario…\n2        49536 \"Syyn sovitus: Murhenäytelmä yhdessä näytöksessä\"          Körne…\n3        32143 \"The Romantic Analogue\"                                    Skupe…\n4         5129 \"The Prodigal Judge\"                                       Keste…\n5        22791 \"King Henry the Fifth\\nArranged for Representation at the… Shake…\n\n\nYou could filter for a particular author or title, like Franz Kafka.\n\ngutenberg_metadata %&gt;% \n  filter(str_detect(author, \"Kafka\")) %&gt;%\n  select(1:3) %&gt;%\n  slice(1:5)\n\n# A tibble: 5 × 3\n  gutenberg_id title                    author      \n         &lt;int&gt; &lt;chr&gt;                    &lt;chr&gt;       \n1         5200 Metamorphosis            Kafka, Franz\n2         7849 The Trial                Kafka, Franz\n3        16304 Der Heizer: Ein Fragment Kafka, Franz\n4        19638 Auf der Galerie          Kafka, Franz\n5        20045 Großer Lärm              Kafka, Franz\n\n\nI’ve chosen Edwin A Abbott’s Flatland (1884) as our example text. It’s relatively short, so we can get the gist of the output from extract_punct() without printing hundreds of lines. Also it’s a really fun little book that blew my mind.4\nYou can get a Gutenberg book by finding its ‘Gutenberg ID’ to input into extract_punct()? One way is to look at the URL for a given book on the Project Gutenberg website, another is to search the gutenberg_metadata()5 dataframe. I’ll also load {dplyr} and {stringr} for wrangling.\n\nid &lt;- gutenberg_works() %&gt;% \n  filter(str_detect(title, \"^Flatland: A Romance of Many Dimensions$\")) %&gt;%\n  pull(gutenberg_id)\n\nbook &lt;- gutenberg_download(id, verbose = FALSE)\n\nbook %&gt;% filter(!is.na(text)) %&gt;% sample_n(5) %&gt;% select(text)\n\n# A tibble: 5 × 1\n  text                                                                   \n  &lt;chr&gt;                                                                  \n1 Chief Clerk of the High Council. It was found recorded on each occasion\n2 with the hinder half green. Look at her from one side. Obviously you   \n3 investigations indirectly by making them liable to a heavy tax, the    \n4 there could not be a doubt of it. Then followed a dialogue, which I    \n5 _I_. “More merciful, more loving!” But these are the qualities of      \n\n\nRight so, we can pass the text to the extract_punct() function to return all the punctuation in the order it appears, with linebreak every 70 characters so the text fits the width of this blog.\n\nextract_punct(book$text, width = 70, colour = FALSE)\n\n,,...,,,,,,,,.,,,,.:.,;,..,.;,,(),(),,,,..;,;(..,(),.,.;;,.:.,.,,,;.;.\n),,.,..,,,,.,,,.:,,,?.,,,;;!.,,;;,(,(,:,,,.,.,.;,.....,(.(;.;..(),,,,,\n;,.;,,,.(.,.,,(..,,.?,?.;;..,,.,,,,,,,,.,,,.,,).,,.!,!,,..,;,,;.,;,,,;\n.,.,,,,,....,,.,,;,..;;;;?,,,,,.:.;.,,).,.,,,,;,;.,.,;.,,.,.,,..,,.,,,\n.;..,.,,,..,,..;,,.,..,,,..;;,..,;.;,,.,,,;.;.;,,.,,;.;.,,.,,,,?.,,,.;\n,,,,,,..,,,.,,,,,.,,.,..,;.,.,,,.;,..;.,...,,....!,,,,,.,,,,,.,,..,,,,\n,,?,.,,..,(,,,,.,,,,.;,.,,.;,,.,,,,,.,,..;.,,,..;:.,..;.,,,..,;.,,;,..\n.,?,,((.(,;,;,((,:,.,,.,,,.,,,,,,()..,,,,,,,.,.,,,.,.,,.,,,,,,.,..,,..\n,.(;,,...,,;,,,...,,.,,,,;,,,.,.,;;,...,,...,,..;,;;,?,,,,.,:,:?.;.;,,\n.:.,,,.,,,,;,;;,!,,.;.,?,???!,!,,.(,.,:.,.;,,.,.,;,,.;,,,,?.,.,,,.,,.;\n;,..,...;.,..,...,,(),;,.,,,..;;.,;,,;,,,,..;..,;,..,,,.,,,,,,,,,.,,,,\n,(),,;.,,,,..,,.,,,(.,,(;(((,;,.;;,...,;,,.,,....,,,.,,.,,,.,..,.;.,.,\n.;,...;,,.,,(.,;,,...,,.;.;,.,.;,,,.,,,,,,,.,.,.,;..;;,,,.,,,,;.,,;,,;\n,.,,..,,,.;...,,.;,,..,.,..,,;.,..,..,,;,,;,;,,,,.,,:,.,,,,,,.;,.:,.,.\n,,.,.,.,,.;,;,;,.,,,,,...,,..,;,,,,,,.,,,;,;,,;.,,,;;.,,.,??,.,,,.,;,,\n,,,;.;,;,,.,.,,,:,..,.;,,.,...,,;,;;,,,.,;.,,.,,,,;.,,.,;..,.,,,,,;,;;\n,;:..,,,..;.,.,!,.,.(),.,;,,,.,,,,?,.,;.;.:,,.,,,.,,;.,;,.;...,,...,,.\n,,;.(,,,,??,;.,....,.,.?.,??;.;,.,,,.,,;,.!?!,?;.,.,,..,;.,..,,,.,,.?,\n;,;,;.,.,;,,,.,,.,..,..,,???,;.!,,,.,;,.,?,,,,,:!,.,.,..!!!!;,.,,,,.,,\n.,...,.........,.....,?,,.?.,..,,,,,,.;,,,?.,,.,..;,,..,,!.!;,..:,,.;,\n,.;,...;,,,;,.,,.,.;.,,.,,,,,:.;:;,.,,,.,,,,,,(.,,;,;..;,.,.;,??,.;,,.\n!;,.,.,.?.?,,.,.,,,?,;.,;,,,..,:..,,,,),,,,.,..,,...?.,,,.?..,...;,.,.\n..,...,...,;...,.(),...,,,.,,..,.?....?.,,,,,,....,.,;..?...,,?.:..,.,\n.....,,,,,.,..,,,,,,,,..,;,..;..??..,.,,,,,,.,.,,.,.,..,....,.?.....,.\n.,..,,;..,,?..,,.,...:.....?.,..,?.,,;,?....,,,..,.,:;,...,:...,,;.,..\n...,.,:,;....,,;;,,.,,.,,,,,,?..!,.,.,,..:.,....!!.!.,.;;..,.,,.:;,,,,\n,,.,,..,,,...,!,,,.!,;.,.,,,,.,,,,...,,,,,.,::.,..,.,?.!,...,.?,,,.,.,\n,,.,.:,,,,,,,,.,..,,.,.(,,,.!,;,..,...,,,,,,;,,,.,...,.,..,.,;,,.,;..,\n,;,.;.,,.,,,,,:,,;,.!,.,.,,.,.,;....?.,.,,.,,,,,,,,.....,,..;?..,,,,,.\n......,;,.,,,,,,...,,,,,,,,.?,?,?,,?,,?,??,,?,,:,,;.;.,,,?..(..,....,,\n?(.;..,.,,,,,.,,.,,.,...,.!..;,..,,,.,,;,,..;,.;,,.,.,.,.,,,.,;;,,..;,\n;;.,..;,,!,,,,,,,,?,,,,:,,,,.,,.!,!,!,,.:.,,,;.,,,.,,...,..,,,..,,.,;,\n.,,,,,,.,?,;,.,,.,,.,,,.,,.,.,,.!.,.,,,;;,,,!,,,,,,,,..,;.,;..,,,,,:,,\n;(..,,.,,.,;(.;,.?,.,,.,,;,.,,,,,.,;,.?,,.;,,.,;.,,:.,.)?,,,.,.,,.,.,,\n.;.,,,.,.,,,.,,..,;,,;;,,,,,,,,,,,.,,,,,,((,),,.,,,,..,,;..,(,.;,,;,:,\n;(,,,..??.,(),,,?,.!,,.,()..(.;,..,,.(.(,;..,,,,,,,.;,,,,,.\n\n\nI passed colour = FALSE because the blog can’t render the colours. Set colour = TRUE to have the characters returned in your console with a different colour for each type of mark. That looks like this:\n\n\n\nAll punctuation from ‘Flatland’ by Edward A Abbott\n\n\nFor fun, we can also get the same output as before, but ordered by character.\n\nextract_punct(book$text, sort = TRUE, width = 70, colour = FALSE)\n\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;::::::::::::::::::::::::::::::::::::::!!!!!!!!!!!!!\n!!!!!!!!!!!!!!!!!!!!!!!???????????????????????????????????????????????\n??????????????????????????............................................\n......................................................................\n......................................................................\n......................................................................\n......................................................................\n......................................................................\n......................................................................\n......................................................................\n......................................................................\n......................................................................\n......................................................................\n..................................................................((((\n(((((((((((((((((((((((((((((((((((((((((()))))))))))))))))\n\n\n\n\nFull stop\nSo that’s the general gist.\nHere’s a few more books from Project Gutenberg. Expand to see the punctuation for each one:\n\n\nPride and Prejudice by Jane Austen (1813)\n\n\nextract_punct(\n  gutenberg_download(1342, verbose = FALSE)$text,\n  width = 70\n)\n\n::..,:...:,:.,..;,.,.,.,,,.,.,,;.,;.,,;);,;,,,;,.,);,,,,,.;.,;,,,,,,.,\n,,.;,,.,,,,,,;,.,.,,,.,,.,.,;.,.,..,,,.,.,;,,..;),.,,,,,,,,.,,.,.,,;.,\n,..,.;.,,.:.,.,,,.;.,.;,,.,.;.,;)(),.,.,.,.;,...,,,,,,,,,,,....,.,,.(,\n.,.,.,,.,.,.;.,,?,,.,,,.;.,,..,,.(;,,.,,(,)().;..;.,..,,..,,.,,,,.,,..\n;,,.,.;,,,,,..;,..,,,.;,,,,,.,,,,,,.,?.;,.,.,...:.........,...........\n?,.....!......,..:.,.,,..?.,..?,:..,;,.,.?.?,.?..??,..,,.,.,,,.,..;.,,\n;..:.,;...,..,,.,.,..,..,.::.:....,;..,..,,,...,..,,.,.,,.,;.,.,;...,,\n..!?,,?,,,..;,...;,.,..,.,,,.,,.,.,,..::..,.,;,..,.;.,.,..,;,,;.,,,.;,\n.:.;..;,.,,.,.;,,,,.,;,,,..:,...,,.,..,;..,......,!;.,,,,.:.?,:.,..,,.\n..,.;,.,.,.;.,,,;.;.;,..,,,!.,!....,,,;.!!,.,..,,!,...?.?.,.!,..;.:,!.\n,,,,.;.,;,,.;;;;,;.;..,.;,,,.;,;,.,.;,,.,,.,,;,.;..;,;.,,...,.;.:..,.,\n;,,,,,,,.,.,.;.,,;,,..?,,,:!,,.?,..:.,.,;.,..,,;....,.,,,,..,,,,,,,,.;\n.,,,;.;;....,.;,,,,,;,,,..,;.,.,;..,,,.,,,,,,...,;,;,.;...;.:,,,,.,,.;\n.,,..:;,..,;,:,.;,...?.,.,:.,,,,,,?;..,,!!,.,.,.,,,,,.;,,.,,,,..,,,,.,\n:.,,,,.,?.,.,;.:;,,,.,,,,,..,.,;,..,;?,,,..,.,!,..,...!??.;,,..,;,:...\n,,,...,.;,,.,,,;,.;.....,.,,.,,,..,,,.,.,,;,,....,;,.,;.;.,,,,,,;..,.!\n.,?,;,.,..,,:.,.;....,,,.:,,...,,,,,.,.,.,:.,,..,?,;,;.,,.,,:,,,,.,,,;\n......,.;,,,..,,.,,,,.;.,.,.,.::.,.,..,,;,.,.;..,,,,.,,,,..,!,,,.,...,\n..,,?.,.,.,,,,,.?;,,.,;,.,,,,.,,,,?,,,,,.,.;;..,.,,...!...,.:,,.,;,,??\n..!.!,.!,.,.,.;..,,.;,.,,,.,...?.,.,,.,.,;;,...,.;,.;...,.:..,..,..,,;\n,.,;.,..,..!,,..,,,,....,,,.,,.;,..,.,.;.,..,.,..;.,,,,,,,,,.,.,.,,...\n,.,,!;.?,,;,.;,,,;..,.,,,,!,,..;.,.,,,,..;..,;.,,,,,..,,..;.,..,.,...,\n,..,..,.,,,.!...!,.,...?.,,.?.,,;.,.,,..,.;.,,..?;,,.,.,,,,,.,..;.;,,,\n,..,.;,..?,.,.,,,...,.,..,.,,,,?,,,,,,;..,,.,..,;,..,.,,..,,.,.,,..,;,\n,?,.,.;,.;..,;,.,.,.,,,,,,.,.:,.?....,,,...,,,...,..,,,..,..:..,,;..,.\n,,.;,..;,.,...,..,..,..,,,.,,!!!..;,,,?;.,,,.,;..,.,.,,,,..,:.,,,..,,.\n,,.,.,,:;.,.,.,..;,..,..,,.,.,.....,...?..,,..,...,..,,.,.,..,;..,,.,,\n.,;,.;,.,;;;.,;....;,.:,,,,,,,..,,,;,,.,;..;;.,,.,;...,!!....;.,:;.,.,\n.,;..:;,,.,.,,.?,,,,;,:.;,,,,.,;,,.,,;,,,,,,.,,.,.,,.,,.,,.,.,.?,,..,.\n..,.,...,,.,.,,.;,,;.,,.,.,,..;.,.,..,,.;.,,,,,,.;,..,.,;,.,,,,,..,,,.\n,.,,;.,,,..?.;,.;.;,..,.,;,..;,,.,,:..;)...,,,?.,;,,,.,..,;,,...;;.;,,\n.;,,,,,;,.;,..,;..,,,,,;,..,.;,:;.;,,,.;,,.;,.,,.,,,,,...;,,,.,,..:,;,\n,.,...,;,.,.?..,..,,..,,,.,,.,,,.;,,,.,,,.,,.,,,,,;,...,,,.,..,,;,..,,\n,;;,,,,.,,,;,,.,,.:,,,;,,,:..,;,,,..,;..,,,;,..,;,,,,,...;.,,.,.,.,,.,\n,.,...,.,..,,;,,,..,.;....,,,,..;,.,;.,,.,.,,.,.,.;,.!...;.!?.,,,,,,.,\n.,!.,,.,?,.,,..,,,!,,,.,.,,!.,,.,:,,;..,;,,.!.,.,;.;.?;,.,,,,;.?.;.;.,\n,.,,.,?..,.;...;,.,,...,,.,,.,,..,.,.,;,..,.,.,..;,,,;,;,,.,,.....;,,;\n.,,.:.,..;.;,.,,.,.,?.,..,.,?..;,,.;,,.,,;,.,...,..,..,.,.,,,,.,.;.,..\n,;,,.,,;,;,,.;!,,.,,,,,,;,.,.,,;,.,..,..,...,,.,,,.,,,.,;,,.,,.;,;,,.:\n,,..,,,,,,,:.!!.,,,.,..;,,,..,,,,.;;.,.;,.,?,.,,.,.,.;,.,..,,,.;.,,.,,\n;,.,..:,)!,:..;,,,,....?!.;.;.?.,,,;.?,?.,.?,.?..,;,.,.,,;,,.,,,,;,.;,\n,..;,.,.;,,,.,,;!....,.;,.,,,.,.,.,.;,,..;..,....,,,.,.,.;,,.,.,.!,...\n...;.,,,,,,,;.,.,;,.,,,.;.,;,.,.,..,..,;.,.;(...,;,.,;,,.,;.,.,;....,.\n.,...;..,,.;,.,,,;,.,;.,.,,,.,,.,,;.,..,,.,;.,.,,,,,,;,.;,,..,.,.;;..,\n..,,..;.,.,..,.,...,.,!,;.,.;,..,,.,;,.:...,,..,,?,,!.,,,..,,,.;,,.,,,\n;.,;.,,,.,,,,(;;,.!,,.,,.,,.;,.;,.,(,,...,;.,,..,..,.,,,;.,,.(.,..,.,,\n,,.,,,,,,,,;,.,.,.,.:,.,;,.,.,,,..,..,.!;,.,,,...;,,,.,,,.,,.,.,.,,,.,\n,,,..,,,,.;..,.,...?.....,...?,..,,...;.,,.,,;.,..,;,,.;..,.,!,:,;,,.,\n..,,.,..,.....,.,.,,.,,.,,.:,,,,:,,;,.,,,.,;.,;,..,,,.;,,...,.,,,,,..,\n.,.;,,,:;.:.,,,,,;,;.,:,;.,,,.,;,.;:.,.,.,,?..,;,,,.:,.,.,..?..;.,.,,.\n;;,.,,?,;;(!?,...,..,;.,:,,;.,,;,,..;..:,,?,,,,?,.;.,..;,.,,;,,.,,.,.;\n,..;,.,,.;:..,.;,.,,;,.,,...;,;,.;,.;.,;.:.,,,...;...,,.:,,.,.,.;,;,.,\n,,.,;,.,,.;,,?.,,..;,.,;.,,.,.,:;,,....:;,,.;,,.?;,,.,,,..,.;.;..;,.!,\n.:...,,,.,;,,!.:;,.,,;,,,,..;.;;;,;;...:;..;,,!:;.,;..,..;.,,,,..,.,,,\n,,,....;.,....;,..,,.,,.,:;.,,....,.,.:.,...,.,..,,,,..,.,?..,;?,.,,.,\n,,.,...,..,.;,,,.,;.,;,,;,,;,,!...,.,...,,,.,;..,.,,,,.,;,..!,..,;,.,;\n,.,;..,,.,;..,......,..;,,.?;.,,.;..:,,,.;..,?;,.,.,;..;,.,,;,,.,,....\n.,.,,....,;..:,..,.,,.;,.,,.,,..,,...,..,.,....,..,,.,..,,.,,..,,:.,..\n,,,.;,,;.?,!..?.,.,.,,.;,!,,..?.,,,,.,.;,,.;,.,.,.,,;,...,.;,....,,..,\n;..:?..:,,;.,.:,..,,,,,.,....;,;,,,,?..,.,,...,.;,..;,;,,,,,.,,..,..,.\n,..:,.:.;,.:,,;.,.,.;,,;....,,,,,.,.:,...,;.,;,.:,,.,,,;,.,,,,,.,;.,.,\n,,.,,,,..,.,..,...,;,..;,,..,..,,,.;,,,,..,;,.,,.;,,..,.:.,,,.;,.,;,.;\n...,.,,,..,,,,,,;,..,,..;,,.,,,.,,.,.;,,.,,...,.,??;,.,.,??,,?..?..,,,\n.,;.,.,,,.,;,.,.?,..,,..:.;,.,,...,.,,..,,:;.,,,.;,,.,;.,,..,,,,.;,.,,\n.,.,,.,,,,,,.,.,,..,,,,.....,,,,.,;,,,.,..,,;,,,:.,!,;,;.?,!!....?,.,.\n..;,,.;.,.:,...,,.,..(?,,...,,,,,....,,.,;.,.,.,.,,.,.,,,,,,,..,,,,,.,\n,.:,;.,.,..,,,,.,,.,.,,.,,.,,.,,.,..,,,.,;,...,,.,,,?,,.,..?..,..?,?,,\n...,?.!!.,.?.,.,.,,.,..,,.?,,,!!?,.,...,.,.;.,..,.;..,,..,,,..,,,.;,,,\n,,...;,.,,;,,.;:,;.,.,,.,..;,..;,,.,,,.,,.:;,,..,:,.,,,..,,.;,,,,,.;,:\n..;,.,,,.,,,.,.,.,,,,,,,.,.;.?:;.,.:.,.,;,,..,.,.,;,.:;,,,;,.;,,,?,.!,\n,,,...,;.,..,,.,,,....,;.,,.,,...,;,,.,,,,.,,.,,.,,,!,...;,,,?.,?,.,.,\n,,.,..,..,.,,,.,,,:;,,,.;..,.,.;,,,,,.,.,,,,.;.,;,.?;..,,.,.,..;.,....\n,,...,.??.,..,,;,..,......;,?,,.,,:.?..,,,,.,;,.,.,;,,,...;,.,;,:,,.,.\n,,;,,,.,,,:.,.;,.,,,.,;,.,.?.,.,,,,,.,,?,,.?..,..,.,..,.??.,.,.,.,;?,,\n,,..;.,.,?;.,,...,...,,!.,..?,...,;,...?,.,..,.??.;.,,.,.,.,.,......,,\n;.,;,.,,,,,.,.,;,.;.,,;..,..,,,,,,..,,,;,.,;,,,,.,...,....,.,.,,,.,,,;\n.,;...;,,,.,,.....,..,..!,,,,,,.,,,?,,,..,,,,.,..?,,.,,,...??,,?!.,...\n!.,!.,,,.,,,,.??;,,,.;.;.,,,,,;.,,,.,..,,..,,!.,,.,.,:..:;.,,.,.,,.,.,\n:.,...,,.,.,,,,.,,,,,,,,.;.,,,,,.,,,,,.,,.,,,,...,,.,;.,;,.,.,.,.;.,;.\n,,.,,,:.,.,,.,,.:,...,,,,...,,.,.;,.,,,,.,.;..,;.;,.,,..,,,,..,.;,,...\n,,..;..,,.,,,.,.,.,,.,..,..,..,.;;,.;,,.,,.;,..;.,;..;,.,,....,,,.,;,.\n..,,.,.;,,,.;,.;,.;..,,.,,!,,,,,;,.;,.,;,.,,,.,....,,.:...,,,.,..,,..,\n;.,,....,.,..;.,;,,.!;,:,.;.;,,;;,;,;..,,!!,.!..,,.,.;.,?;..,,.,.;,,..\n;,,,.,,,,;,.,;,,.;.:.;,,.;,.,,;.?..,.;!;,...,;,,.,,;.,....:.,.,,,,,.,.\n.....,,.,..;..!.,.;;,:;,..;.:,;,;.,,.,;,;?,;.,,.;,.,.,,,,..;,,,,,.:...\n;.,;..,,;..;,.,.,,.,..,,,;,.,,.;.....,..!,.,,,,.,,.,,.:,,.:.!!!,,!,,.,\n,,..,,,,,,,,.:.,,,,,,,.,,?,,,;,.,,,.,.,;!.,!,.,,,..,.,,..:!;!.,,..?,,!\n,;,,!,,..?.!!.;!.!,;:;,,,;,..,,,.,.;,,,;:,,,;,.,,;;,,..!,,....,,..,,,.\n.,,.;,,.;,..;.;.,;.,.,!?.,.,.!,,,,..;.,,,!.!!.,..;.!!....,,;.,.,.,,...\n..,.,...;,,,..,.....,.,..;.,.!,..,,;,,.,?...;,:.,;,,..,,.,.,,,...,.;.,\n.:...,..,,.!.?;.,.,!!.,...;.;.,,,.,..,,..,,,.,;,.,.,.,.,,,.!?..,,,,.,,\n;;;;,..,,?.,,;,..;....,.;,,;,.,..,.,,,.:.,,..;,..,;,.,,,;,,,,,,,.,,,;.\n,?.?,.,!,??,,.,.,,;,;,,,.,.,,.,,.,.,.,;.,..;,,;,.:.,.,.,..;..;.,.,,,,,\n,,.,.;,;,,,,.,,.;,,,:;,,,,,.;.;.,,;,,;,.,,.,;,,,,.;..,;,,,,;,,,,:;;.,.\n,....,,,,.;,.,,..,,;,;,.,,?...,:..,..;..,.,.,,,?,;,,.,:.,;,,,.,.,,,.,;\n,.,.;!,,..;.;,.,.,,;,,;.;,,.,!,.,;.,;,.!..,.,.,..,..,;....,,,;,,....?,\n!:..:,.?,;,,,..,,,,,.,.:,..,.,,..,,.,.,.,,,,.....!,..;,,;,.,...,.,.;,,\n.,...,.,..,..?!!!;,,:.,;,,;,.;,,.;,.;.,.,,,.,;,.,,,.,,.,;,.!!!,,;..,!!\n.,!.,,:;,,.,.,.;.,.,,,;,,,,..;,,:,,.,,.,,,,,,,,,,.,,.;,;;,,....;,,,.,,\n;.:,...,,,;,,,.,..;?...,,,.,..,,;,..,,..;.,,,?;.,,;.;;..,.,,.,...;.;.;\n.,,;,..;.,,.?:,.,.,.,.,.,..!.,.;,,;,,,,.,;,.,.;,,..;.;.,,,.,,.,,..,.;;\n.,,.,..,..,,.,...;,,;,.,...,.,.;.,,;,.,.:.,.,,,,..;,,,,,;,,;,.;..,,,,.\n;,,,.,,,,,.;,.,,.,,,,,,.,,,,.,,....,.,;,,.,,,..;.,,;,,,,;;,.,.,;,..,,.\n,,,,,,,,,;,,,,,,;.,.,.:.,,.,.,,.,..,,.,.,.,;,;,,,.,;::,,,,.,,;.,;,.,.;\n,..,.;,,.,;.,,,;,,.:;;,.,,,,;,,,..,,,.,.,,,.;,.;,:;..,.!..,,.,.;;,,.;,\n,;;.,,;,!,.,;.,..,..,;,..;;,,..;,..,,,,;.,,;.,,,),.,;,......,,,.,,.,.,\n,.,.,,..;,,.,,,....,;,,!:,,,.;.;,,,,.,..,.;,!,;,,,,..!;,;;.,,.,,,.?,..\n,.:,..;....,!,,.,,,,.,,,;?..,,..;.;,;,,;,,,;;,,,,,,!,,.,..,,,,,;,,,.,.\n,,,,,,.;,....,;.,,,.,;.,.,!!,,;;,,.,,,.,.,.,,.?;;.?.?;.,;,,.,;,,:.,;.,\n.?,.?,.,.?...?,.,!.,,;,,??,..,?,.,;,,,.,?,,..;,.,,,,?..,,?,?.;.?.,.,.;\n,,.??,...,;,,...,.,,.;.,.:;,,,,,.,.;,.,,,,,;,,,,.,.?,?.,.,?,..!?!,,,.,\n,,.,;,,.,,,.,,.?,.;!,?;.;,,.,,.;,.,.,.;.,..;,,,.!.,;,,,;,,,.,.,,,.,,,,\n.,,:,,.,..,;.,,,.??,,.,:,??;,,.,,?,..,..?,??.,.,!,,,.?.,:,,,.,,,,,..,,\n.;..,.,..,...!,?:.,.....,,,.,.:,.,,..,,,..;,,,.;,.:..,,;,;.,;.,..,..,,\n,.,,,,;.,;,,,..:,.;,,,;,,.:,,.,,...;.,,,;,;..;..,,;,:,,,,.,,,,;,.,:.;,\n,..,:,?,;.,,.,.;,;,..,;..,;.;.,,.,.!.,...,.,;.,,.;,,,....;;.,;,..,.!..\n?;,,.,,,,.,!,,,,!!.,,,.,,,...,,,,,,,,.,,;;,,,.,,.,,,,,,?;.,.,,,,,.::.,\n:;,,,;,,,,,,.,,,,.;..,...??,.?;.!.,.,,?.!!,:;.!,.,.!.,:.!?..,!..,,,,,,\n?,,...,.!!!,:,.,.,,.,.,.?,,.,..,...,,!,.,..,!,.,..,?,.,!,.;,,,.;.,,.,?\n?..,,,.,,,:...,,.,..;,..;,.,,......,.,,,.,.;,,.,;.,.;.;.;..,,.,,,..,..\n,,,.;,.,,.,.,,.,;;...,,.,.,,;,.,;.;.,...,,....,.,!,.,,,:,,..,..,.,;.,.\n,.,.;.,.;,,.,.,,..;....,.,,,,.!..,,.,,,,,,,.;,,,.:..;.,,,,...;,;.;,...\n..,;,,,.;,,,;,...;,,...,,.!.,;,,;,,,..,.,,,...,;.,,?..;.,,,.!,;.,..,..\n,.;.;,;,;,..;;.,,,,?,.!,...,,.,.,.,;.,.,,.,,.,.,..,!!,.,.,,,,;..,,;,;,\n,.,,,.,;.,;,.;:,:...,,;.,,,,.;,...,,,;..,,,..,..,..;;..,..,,.,.;...,,,\n..;.,,,.;.;.,..,.,,..;,,.;,,..,.:.,..;)..,,;,,...,,.,,,.;.,,.,;,.;.,;,\n,,.,.,;.,,.,),;,..,....,.,.,,,,!;,,,..;,,....;;,...,!..,.,,.,.,.,.....\n.,,,.,?,..,;..,....;?.,..;?..!.?..,,!?,,!,,;,.!,,;,,..:,:...,;.;,,.,,,\n....,,,...,.,....,,.,.,,),.,..,:;,,,.;,;...;,.,;,,.,,!,,.,,,.,,,,,.,..\n,..,.,;..,;.,.,.,..,..,,.;..,,.!.!...,,.....,,.;,,,.,.,,;,.,,.,,,,,,.,\n..,,.,.,,.,.:..;,,.,.?;.,,..;.....,,,.,..,;.,.,!.,.,;.,...,!,..,.!!,,.\n.;,,;.,,.,,..,..;,.:.,,..,?.,;,.,.,..,.,.,.;,,.;,,,,..;.,;,..,,,,;..,.\n,.;,,.;,.,,.,.;;,,.,,?.,,!!??.,;?;?..;,,,,;,,.;,,.;,,?.,.;;..?!,:..;,,\n,,..,.,.,,,.!!?.,;.:,.,,..,,,,.?,.,.,,.,.,,!,,..,,,.,?,;,,,,,.,..,,..,\n.;,.;,,,;,..;,.,;...,,.,,.,;,,.;,,,;,!?,,.,,,,.!,,,,.,!,,.?.,..;,,,,.;\n,..,,..,;,,,.,..,,...!?.!.!,.!,..;.,,;,.;:,.;,,!.,?.,.,,.,..,,?,.,.;,.\n!.?!.,.,.,.;..,,,;..;,,,.,,:;,.,,,..,,,?.,,.,,,.,,:.,..,,,.:;,..,.;.,,\n,.;.:.?.,:,...,.,.,;,.,,,,,,.,,..,,.!??.,...,.;...,,..;..,.,.,..,;,,??\n??;,..,?,,,,;.,,.,??;..;.!.,,.;?,!.,...?.,,,,,,..?.,.....;?,?.,,;..,..\n,?,?,,...,,?,?.,,.,,,,.,,.!..;,,.;,.,.,!!,,,;.:.;.,..,,,,..,,.,.,;.,;,\n,.,,,,,.;.,,..,.,,..,,,;.,.,,...,,,.;..,,,...,.,;.,,.,,.,:,..,?,!,..?,\n,;,.,,.,,.,.;.,.!,,,,?,!,;!,.,.?;,....,,:..,..,,.,...;;,;.;,.....,,,..\n;.,,.,,...,,;.,,,,.;.,:;,..,,,;,,.,,.,.,.,.?,..,,..,,,.,,...,,.,..??,.\n,.,..,;,.,;.,.,....,,.,,,..,,,,.,!...?.,,..!..,.,.,,,.,.,;,,.,.,,...;.\n?.,,.,,..,;,.,,.;,..,.,,....;..,..:..,,.,.,,;;,;.:;..,,:,,.....;...,!.\n?..?,.?.?,.?,.,.?,.,;..,.;,,!,.;:..!,!?,,.;.,,,?...,..,.,,;,;,:.;;,;,.\n,..,,,,,;,.,,?,;,.,,?,?..,.;.,,..,,.....,,,,,,,.,.,,.,,!.;.,.,,;,.,,.,\n.,.,,.,!?!!.!.!!;,..,,.,,;,,;,,.;.,;.:...,.?;?,..,,.;..,.,,:,.,..,?!.;\n;?,,,....,!,!.,,?.....,.??,.,,?,;.,,,.,;,,:,,,;,.....,,.,...,....,.,.,\n..,..,..,,.,,..,,.,.;;..,,;,,......,,,,...,.,:;,,.,;,,;,,;..;,.,.;,.,,\n,:,.,;.;.;.,,.,,.,,;.,.,:,.,.;,,.;,;,.;.,;,.,..,.;,,,.,,,;,,..,,,::,\n\n\n\n\n\nThe Metamorphosis by Franz Kafka (1915)\n\n\nextract_punct(\n  gutenberg_download(5200, verbose = FALSE)$text,\n  width = 70\n)\n\n,.,,.,?,.,,..,,,.,,,.,.,,,.!;;..,.,.;,,,!,....,!,.;.?,?,.,.,?.,.?,.,,.\n.?,.,,.,:,,.,,,,::?,.:,,.,,.,.,.;.,;,,;,.,,;;,,,,.,.,..,,,,..,.,.,,.:.\n,...,.,.,.;,,,?...,..,,.?,?,,?,,,,.;.,.;.,.:..,...,,.!;...,;.;;,,.,,,.\n?,;.?.?,?..,.,,.,.,?,.,,,.,...,.;,,,,,,...!,.!.;..,,!,,,.,;..,,.,;...?\n,,....?.,,,.?;.,,,,.,,.,,..,..,..,;,,.,;:!,.,,.,:..,.,.,,..,,..,.,.,.;\n;.;,.,..,,.,.,,,,.,.,...,,.,,,,,.!,.,..,,,..;,.,!!.;.,,,;,,,,;,;..,:,,\n;;;.,,..;;.;;.,,,,(),.,.,,,,.,.,,.,;,.,.!,.,,....,;;,.,,,.,...,..,,,.,\n.;..,,.;.,,.,.,,.,,.,.?,.,;;.,;.,,,.,,.;.,,.,,,..,,,,,,,,,.,.,.,,?,,..\n.,,.,;;;.,,,..,.,,.,;,.,.,.,.,.,.,,,.,,..,,.,,,.,,,.,.,,;..,.,;.,,.,.,\n,,,....,,.,.,..,,,,,..,.,.,.,,,.,,.,.,..,,,.,,.,;,;...?,.,,,.,,.,.,,,,\n,;,,,.,.;,,..,.,.;,.,,,.,,..,.,.,...,.,.,,,,...:?,,,,..,,,,,.;;,.,,,,,\n.;,;.,,;..,.,.,,.,,.;,.(,,?.,,.,?,.,,;;.,,.,,,,,,,....,.,,.,,,,.,.,.,,\n,.,.;;,,.,.,,.,.,..;.,.,,,,.!.,,,:.,.;,;;;;;;;.,,;,,.,,,.?.:.,,.,.,,,.\n,!..;.,,;,,,,;,.,;;,.,,,,,.,,.,.,.,.,,..;;,,,.;.,.,.,,;,,(),,.,.,,,.,,\n.,(.,,,.,,..;;;,.!.,;,..,,.,,.,..,,..,!,.,?;;.,,.,,.,;,.,,,..,;,,.,,;,\n,,,,,,,,,,,,,.,..,;..,,,,,.;,,;;,,.,,.,.,.,...,,,.!,.,.,.,..,,,.,.,.,.\n,.,,...,.,,.,,,.,.,,,,.,..,,,,.,..,.,,,.,.,,.,,..,?,,?..,.;,;;.;,..;,.\n,.,;,,,.,...,..?.,,,;;,?.,,,.,.,.,...,..,,,,..,.,,.,,..:..,,.,.,...,,.\n.,.,,...,,.,,,,,,?,,.,,.,....,.!,.,.,.,,...,.,....,.,.,,..,...,!,...,.\n,....,.,.,.,.,.,:,.....;,.,.,,......,,.,,...,;?....;...,.,....,;...,.;\n;.;;,,,;.,.,.,..,.,,..,,.;,.,,,,...,..,,.,.,;,,.,,...,.\n\n\n\n\n\nMoby Dick; Or, The Whale by Herman Melville (1851)\n\n\nextract_punct(\n  gutenberg_download(2489, verbose = FALSE)$text,\n  width = 70\n)\n\n'.(.,,..;,;,,'.;.,.,.,,..,?.;!,;,?!.;...,,?.,,.,,,,...,.,;.,.'.?!?,,?,\n,,?,.,,,;,,,..',,,.,.,,,;,,.,.,,,,.,,,,.,..,?,,??,;,,.,,....,,,.!,.().\n.,,;,.,..:\"\"\",,,,;,,,...;,.;..,.,,,,,,,,.,,,,,,,,,;.,?,,?,,.,.,,,,,,\",\n,,,,,.,.?.,.!,,.,.;.,?\",..;.'.,,,,,\"?..,,,,,,',.,\",,.,,,.;.,,,.(;;.???\n;?,,.,,,.,,,.,,,,.,,,,,,,,..,,.....'.??,.;;,..;;.,..,.,,,,.,.,,,.,'''.\n,(,..,.,,,.,,,.'';,(,,'\"',.,.'.'..,;,.\".\"\".'\"?\",\",.,,..,;';,,,.,',.,,,\n.,,.,,.(,.,.,.,.,,.,,?',....,,.,,,,,.,,,.?\"'\",.,;,..,,.,,.,;,.,,,,.,,?\n.,,,'..',,\"?,.,,,,\"?,,?\",\"\"\"'\"''\"'\"\"\"\"\",;.,,,.,.,,;.\".,,(''''.,,,?\"\",.\n;,.,,;,,;;,,,.\";;,,,;,,.,'.,.?,.,..,?,,.,..,,,..,',,.,,.,,.,..,,,.,',,\n.;.,,..,.,,.,.;';.,.,.,....,.,..,,.,.,.,;,,.,..,,.,,,..,,,,..,.,;,.,);\n.;,,.,.,,,.,,,,,,;,,,.\".\".\",.,,\".\"?\"?,\".\"....',.\";..,'\",,..;,,,,.,;..,\n,.,;,,.,,...,,,,,:.,,,;,.;;,,.,,.;,..,,'.,.,.\";.',,,,;,,,.,,,,,,,,;,,,\n.'.,,.,;;,....,;.,,,.,,,,,.,;,,,.,,,,,.,.,,',..,;,,.,,;,,;..';.;,;?',\"\n.,,,;,,,..,;..;,.!,,.,;,.'.',,,,,.,..;..;;.,,,,,.,..!,',.,.,.,,,...,,;\n;,;.?,,..,,;,.,.,.;',;.,,,.',.,..,,..,.,.:,,,,.,,,',,,.,,,.,,..;,.,;,,\n.!,.!!,..,,,,,;;,;;;.,.,,,..,..?.,...,;,.,.,,;,',,,.,,.,,,,,,,,,,,.,,,\n.,,,,.,,,..,.;,,?,,.,',.,;'',;..',.?;.,.,.,.!,'.;,.,;,,,'.,;,,,.,;,.,,\n.,.,,'.\".'!',;?;.,,.,.,.;.\",.'..,,.,;,,!,.,,.,.;,,.;.,;'.',,;,...,,\"'!\n.,;,,...?,',\",,;.,'..,.;'.,',.,','\"',,;,.,..,!!\",;,,,''\",.!..,,'.,,.,.\n,,,.,,.,,.\",;,,..?,,,,.\"!!;,,,;.,.\",,.;,',..,,.,,...,,';;,.,;,,,:\".;,,\n,,.,,.,,,,.''.,,;;,'!\".!!!,,,!;,,,.?,.,.,.,,.,!..?,,.,;.,;,.,,;,.;,,..\n..;,.,..,,;.,,,.,,,.,,...,..;.,;;..,.,,;,;,;.....,..,;'.,,,..,,.',.;,;\n;,,.,.,;,,',.;,.;.?,??.?.;;;,.;.;.',,;,,,,;,,,,.,.,,,,.,...,;,,.;,.'.,\n;.,.,,...,,,,,.,,.,.,;..;.'.,.,.,.,,;;,.;;.,.,,,,.,;,;.;,..,,,,;.;..,,\n.,.,,.,,;.,,,,',,.,,''.,,\".,,.,.,,,.,,,,.,.,;;,.,,;.,,'.',,,,,,,;.,,;.\n\",.,,,;,,;;..,,.!;.,;.;,;,,,;.,...,;,,.\"\"\",?\"\".\",;\";,.,,,;.,.;.,,,,,,,\n.,.,.,,,...;?.;,,\".;,!;.;.,';;;,,,,......,,,!;,,;';,!,,;,,,';.;.,.;;;,\n,,;,,;,.,,,,,.,,;,,.,,.,,.,,.;,;'!?,,,.\"\";.,,,,\"\"\",,,\",\"?,.,.,!.,,:..\"\n,,;,'\"',;,..;.,',',,;,;\"'',;.).,\"..,,,,,,,;,,';,.,;'.,,.,;,,,,,'.,;;,.\n,;;.;.,'..,.,.,,,,'....,,..,,.,..,,;,.,.,,',.,;'.;.,;,,,..\".\"?\"\"?\"\"\"'\"\n?..,??.,,,.\".\"\"\"\"\"\".,.,,,.\"\",!,,,,.\".?\"\"\"'!?\"\"'\",\",?,.,,'.,,.;.\"?\"'\",'\n,..\"...;,;,.,.,,,..;,;,,,,;,,;,,'.,..,,,,,,,,,,..,;,.,,'.,;,,.,,.,,.,,\n,,,,,..,,,.;,;;.\",.,,,\"\"\"\"\".,,,'..;,';,,.,,,.,,,.,,.,:;,,',,.,;,,\"?\"',\n,!,,,,,;\"!\";.\",,\",,.\".\",.\",,;,\".',.!,,,,,.,.,,.',.'.\"?\"\".\"?\"\",'.,;,,;,\n,,...\".\"\"';;,.,',,;.!,\"?\"....,,.;,.;,,,.',.,:?!,,.,.;;;,,.',',;,,.,,,.\n;,.,,.,,.\"!.;;.,.',;,,\"!,..;..!..,,.\"!!,,\"\"!\";??,.,.,''!?,,.,,.\",,..\",\n;.,,!;..\"?\",,,,,\",,;,,.,.,',..,(,',.;;,.\"..,,,;..,.,,;.,;;,,,';;..,,,,\n,;.,,.;..,;.;.',\".,,;,;'.,.,;,,.,.;,,,,,,,\",\"\"',?\",.\"',,,.\",\"'\"''\";.\",\n,,,;;;.\"\";',',;,?,,;,\",''\";\",.,,.,',,?,,,;',,,\"',;;,.;!'.\".'.;.,.\",;.,\n?\",!?;,.;;,..,.\",,,.;.,,\"\".\",.\"\"\"\"\"''\"\",.\";\",\".\"\"\"'\".\".;\"\"\",\"..,??,,?,\n,'\"'.,.\"\",,,?;';,.\",;\".!'\".\"\".\"!',,,.,,..,,,;;;;.,..,,,,',:;.'',.,,.,.\n,,.',,.,,,,.,.,;,,',,.''',,,,,.,..,.,,.,,.,;.,,,.,.,..'.\",!\",,,\"\"\"\"\",\"\n,.\",.\"\"\".\",,?,;\";,?\"\",;..,,,,,,...\".,,;;.;.\"\".\",,,',.,,,,;,,;;,,,,\"\",,\n,.;.\"\"\".\"\",.\";,.;;..,,,,,,,\",'\",!,.;,,,,.,,.,.,\".\";,.\".,.,,,,,.,;',.;,\n,.,;,..\"\",;,,..,,,,;,.,,,,\".,...,,,,,..,,,;;;;,;;;;;;,,\",,.,,,!!,'.\",,\n,;.'.',.,.,\",;;,.,,',!,,.;.,.;,.;,.'';,;;,,,,,!!,;;,.,,.,,,.).,;...,,.\n;'','.!,;!,;;'?,?,;;,,.?;,,,,,,,...,,,.,,,,,.,.,'!,,.,,.,.,;.,.,,,.,;,\n,,.,.,??,,?,.?.,,.;.?,,.?',,.,.?.,,..,;;;,,;,.,,?,,..?,,,,,,..?,,,,!,.\n,..,..,,..,,,,..,.,.,;,.,,,,,.,.,.\"'\",;;.,,.;.,;'?,,,.;,,,,,,,.,';.;;,\n.,;..,.;,!!,,;,';,!!,,;;!;!.,;;,.,.,.,,...,,,,.,,,;...,,;.,,;,;,;,.,,;\n,;;,,.,;'.;;;,;,.,',,;,,,,,;'.,.,',..,,,,;.,.,,,,..,;;,.;.,.,,,,.,,..,\n,,,,,.!,'.,',,;,.,;,.,.,;,.',..,,.,,.,,.,,;,,;,.,,,,.,.,.,,,,,,,,,,,.,\n',,,,,,.,,,,.';..',.;',,;,,,;.,,,.,,.,,.;,,,,.,,.,,,,.,;,,.,,,,,..,;.'\n;..,,',.,,,,;,;,.,,,,.,,,,;,,.\"?,.,\",\".\",\"',,\",.,?.,.!.;'',,?;..,,?.,,\n,';',,,...?;.,;,.,,,,?.,,,.!;,.?,..;..\",,,.,,,,.,,,,,,.;,.,,,,.,?,,,,,\n.'.,'.',,?,;,;,;',.,\"\",,.\",\",'';.';.,.,.\",\".(\"\"\".,.,,,,;;;;;,.;.,.,...\n,,;,..,,.,.;,.,,,,.,;.,...;.;,!.?;;.:,.,.,,.,,,.,,..,,,..;:..,.,,,,,.,\n;,...,(.,,;.:(,.;;.;;..,,.;;,..,,;,..,..,;...,.\".:;.?;;;,,..;.,.,..,,,\n,,,.,,,.,.,,,...;;,,.,,,,;,\",,,,,?,.,,;.;,..,,.'.,.,;,....,..,...,,...\n,.,.;.,..:;.,,,,..,,.,.,.,..',..,,...,,,,,,..,.,,,.,.,.;.;,,..,..',..,\n,;,,.,.,,,..,...,.,.;..';.,...,,,,,....;.,..,..,....,.....,,,.;.,.,;.)\n.,',,..,..,,;,,,,;;;,,;,:,.,.;,..,,,.',,,.,,;,.,.;.,,),,;.,,,,.'.(),,,\n;;,,,.;,.;,;,,,.,,.,.,,,,',,.,.,;.,,.,;,;.,!;,,;,.,,,,',,,,,,,.,;,,',,\n,,,,,,;',;?;.,;',.,,.,,...'.,.,';,;,,,;,...,.;,,,,,,,!....,,,;.,,,..,.\n:',,,,',.,..',.,.;.,,.,,.',.,;.,',,,.,',;,..,;.,,,.,,,,;;.,,.,,,,,;,.,\n,',.;,.;,,.,,,!,.',.,,,.,,.;,,;,'.,,:;,,,.,;;,,;;.,;,,,.,;;,,;,,.;,,,,\n,,,.,;(.:.,,,.,;.;;;,,,.,,,,.'('',;;,,(,.,.,,.,,;,'.,,(.;.,.,,,.'(,;,.\n,','\"'';,,,,,'.,,,';.,,,,.,.'.,!;.,;,.,,.,:\".,\",.;;.\",.;;,,,,,,.;'.,;.\n,.,,.(,,.,.,,,,,,.,,,,.\".;,.,,.\".\"',,,;.,;..\"\".\".\"\"\"\",;,.,,,\".\"?,,,,.,\n,,;,,,\".\":;,,.\".\"\".\",\",\"\"\";,;.!\",.,?\";.,\"!:,',,..\":!\"\"'!\",,,?\".,,,\",\"!\n,\".,.,?,',;,,,,,.!...,.;,?.,;,,.,(..\",;;,.;;.,,.,\",.,,;.,!\".,....\",;.!\n..\".,;;,...\",..,??.,,,,\"?.,.\",!.'!;.,;,;;..,.;,;;',,!?,;,!!',.;!',!!.,\n,;...!,,'!;;,,;,.;!,,...'..,!.!,,,,!,,!,,!(!,',..,,.,,!!?'',,.?(,,(,,,\n',,,,.,,',,!',!,.,!,';'';'.,.!(',',!'..;,!;,,!(,!(.(,!,,!!'.,!'..!,(.!\n!('.!!,(!!!((,,!;!'?!'!.,!,,,,!!!!!,.,;,?'((.(..''';(,(!!('!!!.,'!!(?!\n,?'!,!!',!,;,,..,.;;,;,,,;;,.,,,;,.,;;,,..,;,.,,;;,.,.,,,,,.;;,,,;,.,,\n,.,,..,,,,,,,,,;,,.,.;,.'.,\".;,,,,,,;,...,;,,.,,;.,.,;,;,,.,,,..,,,()(\n).,,;;,);,,.,.,,,;,,,;,,.,,,,,.,,,..,;,,.,,,',,;,.,',.,,,.,.;;;;,;;;,.\n;,.,;,,,,;;,,,,,,,,,',;;;.,.;,,;..,;,.;,,,',,,,.,;.,,,;,.,,,.,,,,,,.,;\n.,.,.,!,..,',,,,,.',;,,,,,,??;.,,,',;,..;,,,,;\";;;,,;,,,,,;,,;;;,;,,;,\n,,,;,,;,,.,,,,;?,..,,,;,;,.,.,,..\",,,,,?,.,,,,,.,,.,,.,,;!'',...,;,;.?\n;;,.,,;,,,..,.,,,.,,;.,;,..,,..?,,...,,!,.,,;,,.;,,.,,.,?,,;?..,,,.,,,\n,?,,(,,,,,,,,,?,,,?,;;,(,,'.;;.,;,..:,;,,;;;,,?:,,.,,.;,,,.,;,,,,,,?,;\n?;.,,,;;!;.,.,;,,'.,,?;;,?,;,;,,;,,,,,,..?!\":,..,.,.,,,\"\"\".\"\",\".!\"\"'.\"\n;.,.\",,,,;.,,,,,,,.,,;.,.,.,',;,.,',,..,,,;.;;;,,,,,,.',,('.,.,,,,...,\n,,;.,,,,;,.,,.,,,,..,,.;;.,,;.,.,..,.;,,,,.,';,,,?,.,,,,!...,,,,;,,,;;\n,.,.,,.;,,,.,,;,.,.,,,.;;.;,,;,,.;,,.:,(,,;;,,,,.;;,.;,.,',,.:,.;,,.,,\n.,,,.,,,;,'?!??!,..,,,,,,.,,,.,,,,:,,,,,,,'?.?,,'!':;,;,..,,;:.,;,.\".,\n,,;,.,;;.';,,.:,,,.,...,'.'?.',,.:\",,..,,,,.,.,;.',.,,,...:.,,',,,.',;\n,;,,.,,,,.,.,,,,.;,,!.,,;,,.;,,(.,,.,,.,,,..,,..,,..,.,.,,,,.,,,.,;;'.\n,.,,.,,;,,,;.',',.'.,;(),.;,,,..;,,,,,,,,.,.,,,..';,,,,.,,.,,,;.,,.,,,\n.,,.,,,,;,,,.,,.;.',;,;,.,;,,,.,,.,,.,'',,,.\"\"\".,..\".\",.,.,.,,;,.,.;,.\n,.'..,,.,',.,.,.,;,,.',,\"\"\"\",;,,,.',,,,,.\"\",\".!\"\"',\",.?..;,,,:,.'',,'.\n!',...,,,.,,.,.,',\"!\";'\"\"!,..,!\",,..',';,.;,;'.,.,,.;,.,,;';.,..,,\"!,,\n.,,.',,..,.,,.\".,,.\"\".,',.,.,.,;,..,;',.,.;,..;,,,,!,;,,.,,,,...\";,.,,\n..,'.!,;'\",,,,,?;',;.,,,\"',.,;,!;,;,;;;;,,;,;;,,.,.;;.,,.;.\";.,;:,,,;.\n,.\";.,;..;,,.,.;,,!.;.,,;,..,.,.,,,.,,.,';.,..,,,',,,.,;,.,,,.,,.\",;?.\n\",,,,'\".\";,'\"'.!,.,;;',;'',.,,..,.;.;,.,,.'\",.\"\";,\",,.,..;;;?.,,,,.,.,\n,;,,:,,;,,;,';.;.'.,;;,,,.,,,.,';;.,,,,,',,,;,,,;;;,,,,.;.,,,.,;,;,,!;\n,,.,'.,,,;,.'.,.,,,,,;.,,,,.,,,;,;,,,.,,,,,,,,;,,,.,;,,,,.,.,;,,,.;,.,\n,.,..,,.,;,,.,.;;..',;,..,.,,.!,,,.,,,.,..,.,,;,,.\",,;..';,,,,!\",,,,',\n.\",.,,,!?,,,,,.,;.:,,.,.,,,;,,;:,',,.,,;.,;.,.',,;..,.;,.,.,.;,,,,,;.,\n.',,;',,.,.'\"?,',!?;\".';....,.?,;,.,,.;',..,,'.,.;',,.,.;,.,;,.,',;',,\n,,,'(,,.,..',,.,,..,,,,.,,',.,.','.;,\",,..,.,;,,,,;,,,.\",,,;,,,,.\",\",,\n;.,,'.,,,;,;,;,;,;,,;;,.,;,;,;,,'.;,\",,.,;,,,,!,.,,\",;,.,,,,.,;,.\";,;'\n.,,',,,,\",.\",,.;,',',...\"'',,'.\",,.,;,,.\";.;.,.,,;,.\",.;.,;,,,.\",,,;.;\n'.\";,,,.\",.,;.;,:\".,;;,,(..;.\".\",?\".\",\";.\";;,;;;;,.;,,,,\",\",\",.:,,;!.\"\n,.,,.;.;.;;,,,;,,.,,.\".'..\",,,,,;,,.,.;,,.\",,\";,.,.\".\",!\",..\",;';;?;;.\n\"\"',;;'\"\",,,\"'\";,\",,.,,,\",,.;,.\";,;.;,,.,.,..\"\"\"\",,;,;(),,.;,.,,,;..\",\n,,.,,,;;\".,,.;,.'\",,,,,\"',,,\",,\",,!\".\"\"\",,,,,,,.;,.\"\".,.,.\";,,'.',,,,,\n,,;,.\",).',,.,\",,,,.'.,.\"\"\"';,\"\"\"\",,;,'.',,\"...\",,!\"?\".\"\",\";\",,.',;,,.\n,.,,,,,,.,,;,.,,,,;;.\",,,;,.,\".;,\".,,,.;;,,,.\".;,.,,.\"\"'\"\",.\",,!\",\",,;\n.,\",,,\",;.\"\"\"?!.\"'\"?\"..\"\";..\".',\".\",;.,.,.,.,,,',,.,',,,..,,.,.,,'..?\"\n,,,.,.',.'.,;,.,,,\".,,.,\",,,,.,,,.\",.,,.!,.,\";,.,,.,(,.,..,.,(,,,,',.,\n:..;,.,.,;,,,;,',.,,..',,;'.,,,..,,,,.,..,;..,,,.;'.;',.,...,.,,.,,,..\n,,.,',,..;;.,.,,.,.,,.,.;,,,.,,..,,;,?,.,,.,,.,,,,.(.,,\",;,,..:,(;.;;,\n;,.;;,(,;).,..,.,,,,,,,,,.;,.,.,;,,,,,;.,,,,,,.,,...,.;\".,,,.,;.,,,,,,\n.,,..,.',!,,..,,,,.,;,.\",,,,.,.,,,.,...;,,?.,;;;',,,,,.,.;..,?;.,;;.,,\n.,.;,.,.;,;;?,,.,,;,,..,,,;.,,,,..,\"!,.,,.,;;,.;.,,,.,,,.;;.,,\",\"\".;.,\n,.,;.,;,;.;,.,,.,,,,,,,,;,;;'.;,(,,..,;..,,\"\".,.,,.;.;,,;,.,.;,.,.,.',\n,,;,,,';,,,,;,,;,.,.;,.,,,;.?,,',,,,,,,,;,,.:,,,,,..;,.,,,.\",,,.;,,;,.\n,;.,.,.,;;;,,,,,.';,,.\".;,,,,.,.,.\"'.,,...,.,\".',..,,.\";,,,,,!\";..!.\"'\n.,.\"...,,.;',,,.\")....,,;,.,,.;,.,,.,.\",.,;'...,,,,;(,.\".',,,..\",,,.,!\n,,,.\"\";..,,,,;,.,;,;'..,\",,.,;;;;,,!,,,.,.,.;,.;,.,,.,,.,,,..,,;;,.,,,\n.,,.,(..:,,,,.,,,,..,,.'';.,,;;.,;,.;;.,,,.,,,,;,,';,,,',,..,;(,,.,,,;\n,.,,.,.,..\"!,,();;,,',,,')..,.,.,',;',,;,,,,;,,,,,,,,.\",,;,,,,;,,,',,,\n\",,,,!,..;,;,,,,\".,!\",',,\"\".\",!'\"'.\",.;..'?.;;,.\"\",';;'\",,,\"'\",.\".\"\",\"\n\"\",,,.\"\",\"\";.\".\",?.,,\"?\"\",,\"\"\"'\",.\"?\".\"??\"\".',,.?'!,\",.\";',.;,;,,\"'!\"'\n;,,.,,.,.,...,,,,..,..\",'.,..'.;,.,...,),;,,'.'.,,;:,;;;.'?;,,.,,,????\n.,,,.;;,,,.,;,,,,,,.',,.,;,,,,,,,;.';,..,.'.;';,.,,\";;,.;.,,,',,;,,.,,\n.;;.,;;,.,.,\",,;,,,.,,.,,.,,;,.,,,..;,,.,.,;,.,.,';',,,,;,,,,.,.,,;.;,\n;,,,.,',.,.,.,,;,.,.,..,,,.,.;..,.;,,,,,;,;,;,,;,,,.,.,,.!..,.!.!!.;.,\n,,.,,..,,.',.;....,,,',,,.;,!,,.,,.,,:;,,,,,,;,.?,..;,,'.''.,,;'',..,.\n,.,',,.;,,,,.',;.'.;,;;,,\"\",.\"!\"!;,.',,,.,..,;,,,';,;''.,,',;,..,,),;.\n,.',.,.;.,\"!,.,.:,,;,,,,''...;,,,.,,',,.,,.,;.;,,.,,;,..\",.\"!\",.\".\"!\".\n,'.,;,.,,,,,,;,,,,;,.,.,,;.,,.,,,,',,,.,..;,,..,,\",\"!;;,,.,..,.,\";,,.,\n(,\".\".\"\",.',,,.,.,,.,.,;..'.?,',..,,.,,,'('.,,..,;.;,...,,;'.;.,,;,.,,\n.,.,;.,.,..,.;.,.,,..,..,,.,,,,?,,!;?!\"\",,,???,.\",..,,,?\"\";,,\";.\",..\"\"\n;?\",.;.;''.,,,,.;,;,,..,,.,.,.;,,,',,.;,..;,,,,.,,.,,,',,.,.,,.\",.\"\",'\n?\"\"''.'\",,\".?',,\".\",\"\"\"\",,'\"\",,,,,.,,,'.\",\",\",?\";?'?\"\";'''\",',?\"\"\"\"?\"'\n,,,,,;,\"\";,,',;,.\"\"\"\",.\"',',.;;..,,;,,.,.,.;,,.',,,...;',:?,.'',,,\",,,\n,'.,,.',.;.,,.,,,,;',;.,;..,,'...;.,,,;.,,,.,,,,,..,;,,..,,;.,.,,,,'';\n?.,',,..,.,,,,!.,,;',,,.,,,;,.;,.;..',''().',.,,,.,,\",',;\",..!'.,.,.,,\n!,;,,,.,,.,,',..,.\":\",,,..,\"..,,;;.,',,?,..;.,.;';,.,;.',.,''?;.,,,,.,\n,.,;,;,.;;;.'.,,;..,,.,:,,,'..,?,,...,,,,,;;,,.,.,,,;.;;,,,..;??..',,;\n.,,...,.,,,..,.,;,.,;.,,,.,,,';,,,',;,.,,,.,',,.,.,.,.,..,,,,,.,,,,',.\n.,,.,;.,;;,;;!,,!\".,,..,;.,;,,.,;.\",;,,\"??\".,,,;',!,..,.,.\";;.\",.,,,,,\n,.,,,;..,,,;.,',','',,;.,,,,.,,,,,;;.,,,,?,;.,.,,..,,;,.;;,.,;.',,,.,.\n.,,.,..'.,.',',.,.;,,,.,'.?,..,.;,.,;;..'..','.,...,.;';,.,.,.,',,.,,.\n);,,,.',.,...,,...,...;,,,.;,,.',.,,',...,,,;,.,,,.\".\",?,\"',,;.,;;,,;(\n.,';,.,,',,..,,,,,.,,,.,,,.\"','?,;,.,\",\".,,,.;'.,.,.\"!!\";',?''.?\",,,',\n,!,'.\".;?\",;.,,,!,,.,,,,.'.,,;.,,,,,,;,,.',,,,,;.!,,.\";..!!,;.!!'.;,;,\n,.,,,;;.,;,.;,!.,.,;,,,!.?\"?,;!.,,,,'!\",,.,,.\",,,'.,,.,,,;,.,;,.,,,,.,\n,,,..,,.,,.,.\"\".,,,,.,;;;,,.,.,,.,,,.,,,;.,.?..,,,;,;,..,.,,,.\"!.,.\",.\n,,,;.,.,;,.,,.,..;;.,,.;.,,,.';,.'..,,!.,;,,,.,,.,,;,,,.;.;,,.,.,,.;,.\n,,.,.,.;,,,';.,,.,,;,.,,.(),.,:,,,.;.,;.?,.,.,,;,.,,,,,;,.?,!?..,,;,':\n,'(),,,'.'.;.(,',,,,,;\",..,,''.?.,,,,.,.,.,,..,,.,;;,;;.,,,'..;,,,,,,.\n,,.,,.,.,.;,,.,,;,,.;,.;.,,,',,.,,,\";,,!,.,.,.,,;,,'),.,.,;,.,..,';..,\n,,,;,,..,(;.,.,,.;,,.,.,;,,.,.;,,,.,.!,;,.;,;;,...,,,(,,.,.,,,;.;,,.;.\n.,.,.?;?..,;,,.,;,,',..,,,,.,,,.,..,:,;,,.,,,.;,.,;.,;,,,'.,.,,,.,;.',\n,,,.,..,.;,,;.,,,.,,,;.,,;..,,,,,,.,;,,,.,,,'.;,:...,,.:,,,.,.;,,,.,,:\n;',;.,',.;,.:,,.!.;,.:,;,,.'...,,.,,.,.,..,,,,.,.,',.,;;,,,.,.,;.,.,,,\n,;,,,,,.;.,;,,:,,,,,.,,,,,.,,,.,;,,,;,,,.,;,,.??,'.;,';',,.,,;.;!,,,;,\n.,,.,,.,,,,,.,,,;.,,.,,,.',,,,,,,;;,;,.,.,!,;.,.;;.,;,,,,,.,;.,,;;',.;\n,,,.,;.,,,,.,',,,,;,.,,,,.,..,.,,,.,.,..,,',.,.,,,.',.,;.,.,;,;,,.,;,,\n,...,.!.,,,',,..;.,,.,..,,,.,,,,;,,;,,.,,.,.,,;,,,,.;.;,,,,..,;;;,.,;.\n;.,.,,.;,;;,,,,,.;,,'.\"!\"\",;;,.,,..,,,;:,.'.;..,,;.,,.,,;,.,,.,(,;,,.,\n,,.,;;,,.,,..,;;..,,;\",!!!,.;,,,,',.,;,.,.;,,.,.,.,.,,,.,,,,.,.;,.,...\n.,,.,,.,,.,,!;,;;,,.,,'.,.,;,,;,,,;;;;;,,,.,.,,,,,,,.,..;,.,,,,,,..,,.\n,,.!,,.,,,,;,,;,,,.,.,.''.,..,.:,,,.;,.;.,..,;;,.,.,,,.,,..,,,,.,,,;,'\n..,,,;,;,;.;,.,,;,;,.',.,??;,,;'(,?,,,,..,??.???,\",,,,.,.;,,,,,.,,.,,.\n;.,,,;,;,',,;,.,\"\"\"\"\"'?\"\"?\"\".\"\"\",.,,,.(,(),,...,.,,\",'';.?;'.,,.,\",.,,\n'..\"..,,.;,,,.;.,.,.,;.,.,.,.\"';,,';,.!',.,',...;,.',,,;.,,.,,.\";,,;,\"\n?\".\"\"\"\"\",,\",,,.\"\",.\"?,\".\"',?.\";,.\"...,...,.,.',.,',.,,,.,.,,,.,,,..,,.\n,.\"\",'\",,.,\"\",..\";,,,.\".\"'.\".,(.\"\"'\",,',,,',,.;,',,.,;,.,.,,,,,,,\",,,;\n;,;,'.,,.,.,,,,,,,..,,!,,'',,',;.,.,.,,,',,.?,,,;,;,.,,,.,,,,,(,,.;,,;\n,;,,,;,'.,,?,';.,,.,',.,,.,,.,,;,'',,,,;,,,;.,;,,.;,.,,,,,;,,,,,,,,,,;\n,...,,,,\".,.,,.,.;,,;,,.,,,.;;;,.,,.....,,,..,.?,,,,;;,.,,',.;,,,;,,,.\n,',;..;.'',,,,,,,,,...;,,,;,,;,,;;,;,.!;;'.;,,,;;.!,,;;;.,.,,.,,...'.,\n,,...,,.,,.,,,,.,.,,...',,,,,.,,,,,'.,,,.',,?;,,,';,,,;;,,.,,,.,.,;,,,\n..,.;,,';!!.,,,,...,.,,,,.,.,.,,.,,,.,,,.,.,..'..\"....,..,.,.,;..;.,,.\n.,,.,.,,,.,,,,,,,.,;,,;,,,;,,.,.,,,,.,..,,;.,,..,.,,,.',,,!,!;.;,,',.,\n.,.'.',;;,,.,\".,;,.;,',.,.,.,,'',,,;.,,.;;;);,,;,,:.,;,,,;,.,,.,,.;',;\n;.,!,...;,....,;;',;,.,,;.,.,:,,.,;,,,;,,,\",,';,;,'!,,,,,,,.,,;,,,,,.,\n,,.,,.,,.,,.;,',..,;,,.:,;.';,,.,.\";.,;,.;;,!,,\",,';,.,.,.,,,\";.,'..,,\n,?!,'.;:!'.,,,,,',;!;,!,;!,;,,,',;,,.,,,;\",?,,;\";.,;;'.\".;.;?.\",.?,,,'\n;.,,;.,,,!\"\"!\"\"\"\"\",!;.\",,,\".,'!,;?,.'.,,\",.,,,,;'\"\",.\"\",,.,,,',',.,,;.\n,,,,,,;.,,.,,,,(,,,.,,,)!,?\",;\",\"\"\".,;'.,,\".\",\",,\".\";;,',,.,',,',.,',.\n,,,,.,.,;\",;,(,.,,.;;,.,\",\",\".;\",',,,!,.\",;,,;\";.\",,,...\"',,.,,\";\".?,\"\n.\"'',.\"\"\"\"?.\".\",'';,,,;,,,,,\",..;,.\",'?\",!!'\"?\"\"?,'''.,.,,,;,.,;;(,.;.\n,,,.,',.:,,.,.,\".,,;.,.,..,,;.;),;,,;,,.,;,,,..;.,.';;.,,;;..,,,;.;,,,\n.,,.,\"..,,;,,;:,,,,,,,,.,;,,,,,;,.,,,,.,,,,,,,,,'.,;;;;.,,.,;.,,,.,,?;\n?,?;;,;.,;.,,.,?,,,,,,.,,;,,,,,,.,,.;,,;,..,',,;;,.!?!;;;.;,.;.,,,;.,,\n,,..,,;;,.,!,;,.,.,,.,\".,,,',,.,',.;.;;.,,.,;.',,.,';,,,;.,,,,.;;,,.,:\n;.,.,.,,,,,.;,,,....,,.,,;..,,,,,,,;;..,',.,,.,.,.',..;,.,;,.,,....,;'\n.,.?.!,,,,,.!.,,,,,,;,,;,.,,.,,,,,,;,..,,..,,.,.;,.,,;,,.,;,''.?.,,.,;\n,.,,,.,.,,\";.,.,,','),,.,,',,,.,().,,...,;,,,,!,().,).?',,,;,,,'.;.,';\n;,,,.,,,,;,..,;;.,,,(,,,,,,(,,.,,,,,,;,.:,.;,,,,,.,,;.,,,.,,,,,.:,,.,,\n;.,,;,',,,',..,(,,,,,,.',;,,.,;;.,.:,';,.,,;.,;,.,.,,,,,;,';..,,;,.,,,\n';,,;,,(,,,;.;,.,;,,,,,,,;.,,.:,,;,.,;,,.:,.,,..;,..,;,,.;,.,;,;,,,;,;\n',;?;;,;,,;..,,;,,,,,,,,.,.,;,,.(,..,,..,(.'(;(;.,.',,,;;((,,,!!,,,;,,\n,.!,.,,;.';?;.,;,?.,?',,,.,?,??',,'?,,,;,?,,,.,;.,,,;,!;,!;',?,,,!.;(.\n,.(,''.''.,',,,,.,,.,.,,,!;.,,;;..,,;,;,.,,.;,,,,.\".\".\"?\".,\"\"\"!,';,.\"\"\n?,,'\",;;,\"!\",(',.,.,,;,\",',;,\":,.,,,,.;,,,;.;,,,,,;,...,,.,;.,;,,.,!,,\n,.;;'.,.,;,,,,,.,,,.,,,,.;.,,;,;,,;,,.,,:,;.,'.,,.,,'.\".,,,.,,,.,,,;,.\n,.,.;,;,,,,,...,,;\"?,?';..\",,.,.;\"?!;!''!,!.,,;,',;,:..,,,,,,,(),,.,,,\n;,.,,;;;;,,\"!;,;.,;..',,,;.,.,,,,,';,',(;.,,;;,!,,,,',,;.,,...,..,,.;.\n,,,..,',',;,.,,,',,,,',;.,,,;,,,.?;;;;;;;!;;,,,,,,,;;!,,!,,.,,,,,,,,.\"\n;;\";.\"..?,?\"\"?\"\",\"\"',;,'\"\"'!.,,...\".\".,.',,!,,,,,,.\",;,,,\"\"\"?\",.,.\"!,,\n,,\"!?,,\",.,,.,,,\",;;'.,;,,.,.,,,;.,;,;,',.,,;,,'.;,,.;.,.,.,,,,.:,;:,,\n.,??:.,,\",.;.,:\"!,,,,,.;;.,;,;.,;.,,,';,,;,;;,,.,;,,,.;,,.,.,,.,',.,;,\n.\".\"\".\"\",,\",,!,;,;.,,,.,,,.;;;;,,,,,,.,,.\",;.!;;,'!.\";,,,,\"!,,,;,\".,;;\n;;;',,'',,,,.\"?\"\";;.\"..\"\"\"\",?.\"\"\",,'.;,,,;.;.,.';',,,.,',.;.':??.;,,,\"\n;,,:;!',,'.!;;.;!,,,,\";,,.,,\";,,\",',;:.:.,,,.,.,,;.,.',\"\",,,;!,',,''',\n,,,',,\";.\".,..\"\"?\",,??,!\"\",..;;,,.\"\";.,;,,;,,'',,\",,\".,,\";,,.\",,\"!,,,;\n'\",;,.,.,;,.;.,..\",?.;',''..\",';,,,,,.\"!;;,;.\",;.;.;,,;,,;;',.,;.\";.,;\n,.,,!...;..,..,,;!\"',;;,',;,,.',,',,\",:!.,,,;..,.\".\"\"\"\".!.,..!.,.,.?,,\n?\",;?,,.?,,;,?,?,,.,''?\"\".,.,,,;,,,,.,,;;,,..\"?.,.,,,';.,,,.,;;,..,!!,\n!.,,,.,.,,,..,,.\";.,;..'.;.???,'?,,..,.;...?';;,;.?..,?\"'\",!',?!\"',.',\n,\".,',.;.,,,,',,.\".!,,\"\"\";;.,;.,,,.,\".,.';,,,;'.;,;,,,,.,.,,.,.;'.,.\",\n.;!,,,.,,,\",;.,;.,,,,,,,,,.;,,,!,,.,.,.',;,,.,.;.,,.;\".\",,,,,,.,,,.\".\"\n'\"',\";?\"\"\"\"';,!.,,.\"!.\".,.\".!.\"';.!!\"\"\"\"\"\".!\";!\".,,..\",,;;,\".,;,,'\"\"',\n'''.,,.,,,',,,.,.,.,;..,,,.,,,.,.;(),,,,.,;,,,,,..;,.;;,,,,.\"\"\".\"..\"\"\"\n.\"\".!.\".;'?;';.,,;....;..;',.'!,,,.',.'!,,;..;.!\"!\"\"\"?\"\"\"'\",,?.\"\"?;.\",\n.\"',.,\"\"\".\"\"\"!\".,,,.,(\"!,.!'.!,',.?,!!,,;,,.\",,\"\",,,.'..\"\",',,,;.,.;;,\n,;,.,;.;;,;.,.;,\"''?'\"\",.,,,\"?\";,,'',,;',,.,';'.,,;''.,,.\".,,,\"\",,,;,.\n;,;,,;;,,,,..(,,....;\";.\"!;\",,.\";\"\",.,;.(\",,...,.,..,!?!,...;.,,,;;;,;\n,,,.,,.,..,',;';,;;,',..,,,;,;,;,;,.;;.;:,,;'.;,;.,,;.,,;,..,,,'!,;';.\n,,\"!;,;,,,,,,,;.,,,,,.,;,,.;,;;',;;.;.,;,.\",,.':.',..;,,;;,,,;',,,\"\".\"\n\",.\",!;,\"\";;\";\"\";,.,'\"\"!.;,,.,;,,,,;.,;,,,;;;;.,!',;.,,.,,,,,.;.;.,..\"\n\"\"!!!,!.;',!,!,,,?,,,!,,?,?.!,.!,?;.,,.!\"!!';,!!,\".;;.\",'!,',\",;,,??;;\n;,,,!,?,,.,;!';,.,,,'.,,,,,,,,,\",,.\"\"\",;,,.!,.,,',,..\".\",\"..!,'!,!!;.\"\n;\"!';.;,.;,,,,..,,,;.,;,',,.,.;;;!.,,.,;.,.,,,,;,,,,.,,\"'..;\",',..,,,,\n.,;.,'.,,.,,.;,,,',.,'.,;,,,,,;,.,,,.,.,';.',,.,,;,;.,..(,,.,;,.'.','.\n;,.,.,,,.,',;,,.,!'.,';,,.,.,';,;.\"\"\"\"\".\"!!;,,.,,,,,.,.,,;,;,,,'.;,,,,\n,.,';,';!\",(.\".\",';;,?!;,\"\"\"\",;!,.,;,,!,,.,\".\"\";.,,.,;,,.,,;,,:,,,',.,\n,,,,;,.,'?,.;,.\"'!,!\".\",!!.,.;,.;;,;.;.,,;,;,,...,,;.!\",\",;,;,.,,!,;.,\n,.,.\".,,,\"!.,,;.\".,,,.,,'.',,;,.;;,,,,;,.;!!,,'.,,;;,;,,,.,,,;;';,,,,,\n,;,;,.,,',,,.;;;.';,,,\";\".\"\",,,.?\"\"..\"\"!\"\".!'.\"\"!.\".\",,,!!,!;!\"\",;:???\n!\"',,'..,;',;,,,,.,\"\":,'!':!,,;,.',;;,,\"\";!,.;'.;.,,;,.;.,,!,.?,,.;,,!\n',,,,.;,!\"\",'..!,,.\",,.\"\"\".;.,.\"!,!;.,!.,..!'';,..,,',;,,.;.;,,\"\"\"\"\"!\"\n\";.;\";\"\".\";\";.;,,;.;.;,,.\"\"?,;,.,,;,.;;?!!!\"!!,,,;,.\"!:;,.;,.;.,,.\";,.\n,,;'';,;',,;..\"...;,,,?;,,;,.,.\",!,,,,,,;,.,.;.,,,';:';.;;,.\"!.\"\"\"?!.,\n',;,,.,,,,.,;,,,,,.,,,\"!,;;;;,;.\"\",:,,;.,;,;,.\",'?,!,!\";!?;!.,,,!!\"','\n,,,,.,,'..,\"\",;,,\".;,??.,,;;.,,!;;;,,',.,?,;,.,,,.,,,;,.,;,;,,,,;;.\".'\n.,';,,,,.,,,,,,,.,,,(,.,..\",,,\";'\";',,,,,,,,,,,,(,,,,,,,',.,,;;,,,,!!;\n,,,!\".\"..\".\"..\",;\"',.\",.'\",,,.\",.,.'.\"',,.\"..\"'\".'\"...\"..\".\",','.\"..\",\n...\".'.'\"('\".'\",..\",,;,.\".'\",,.'\",;'\",..\".'\".',,..,\",).'\",,'.\"'.\",.'\",\n'\",,'.\",..\"..\",.,\",,,.'\",'\"'.\".\",,.\"','\",.\",,.,\",'.\",'\".\",'.\",,,;:',,,\n,'\"';,.'\",'.\",'\",.\".'\".'\".\",.,,\";,,..\",.\",..\";;;,,,),,.\"\",,...\"\"\"\"\"\"!\"\n\"!\"\"\".\",.\",;;..\".,.'.\".\"'..\".(,.\",,'\";.\".,,.\",,..\",..\"(..\"..\",..\",'.\",\n,;.\"!.\",..\n\n\n\nFeel free to experiment with extract_punct() and let me know how it goes. Maybe include en and em dashes, or interrobang or something."
  },
  {
    "objectID": "posts/2021-09-12-punct-lit/index.html#environment",
    "href": "posts/2021-09-12-punct-lit/index.html#environment",
    "title": "Extract punctuation from books with R",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-08 13:11:39 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] stringr_1.5.0    dplyr_1.1.2      gutenbergr_0.2.3\n\nloaded via a namespace (and not attached):\n [1] bit_4.0.5         jsonlite_1.8.7    compiler_4.3.1    crayon_1.5.2     \n [5] Rcpp_1.0.10       tidyselect_1.2.0  urltools_1.7.3    parallel_4.3.1   \n [9] triebeard_0.4.1   yaml_2.3.7        fastmap_1.1.1     readr_2.1.4      \n[13] R6_2.5.1          generics_0.1.3    curl_5.0.1        knitr_1.43.1     \n[17] htmlwidgets_1.6.2 tibble_3.2.1      pillar_1.9.0      tzdb_0.4.0       \n[21] rlang_1.1.1       utf8_1.2.3        stringi_1.7.12    xfun_0.39        \n[25] lazyeval_0.2.2    bit64_4.0.5       cli_3.6.1         withr_2.5.0      \n[29] magrittr_2.0.3    digest_0.6.31     vroom_1.6.3       rstudioapi_0.14  \n[33] hms_1.1.3         lifecycle_1.0.3   vctrs_0.6.3       evaluate_0.21    \n[37] glue_1.6.2        fansi_1.0.4       purrr_1.0.1       rmarkdown_2.23   \n[41] tools_4.3.1       pkgconfig_2.0.3   htmltools_0.5.5"
  },
  {
    "objectID": "posts/2022-01-14-wordle/index.html#tldr",
    "href": "posts/2022-01-14-wordle/index.html#tldr",
    "title": "Wordle, twirdle and eldrow",
    "section": "tl;dr",
    "text": "tl;dr\nTwo toy R functions for playing with Wordle results: twirdle() extracts gameplay data from tweets, and eldrow() finds potential prior guesses given the answer.\n\n❗️ Warning\nThe Twitter API is pretty borked as of mid-2023, so the functions in this post are unlikely to work anymore."
  },
  {
    "objectID": "posts/2022-01-14-wordle/index.html#whats-the-wordle",
    "href": "posts/2022-01-14-wordle/index.html#whats-the-wordle",
    "title": "Wordle, twirdle and eldrow",
    "section": "What’s the Wordle?",
    "text": "What’s the Wordle?\nNothing is more zeitgeisty right now than Wordle, a once-a-day web-based five-letter-word-guessing puzzle-logic game.\nThe app lets you copy your results in a consistent format for pasting into a tweet or whatever.\n\nIt begins with a string of meta information, ‘Wordle X Y/Z’, where X is the edition number, Y is the attempts taken and Z is the maximum allowed guesses. Then there’s a grid of coloured emoji squares, where each row represents a guessed word and each emoji a letter.\nGreen emojis (orange in colorblind mode) represent a letter in the correct place, yellow (blue in colorblind mode) in the wrong place and white for an incorrect letter (or black if playing in dark mode). The emojis obscure your guesses so that people can see how well you did without spoiling the answer.\nFolks have already put together some neat R tools, like solvers and ways to play in the console or in other languages. See mikefc’s {wordle} R package and Pachá’s Shiny app, for example."
  },
  {
    "objectID": "posts/2022-01-14-wordle/index.html#wordle-up",
    "href": "posts/2022-01-14-wordle/index.html#wordle-up",
    "title": "Wordle, twirdle and eldrow",
    "section": "Wordle up",
    "text": "Wordle up\nSurprise: I haven’t actually played the game.1\nBut that didn’t stop me from writing a couple of modest functions to practice my regex and base-R skills: twirdle() and eldrow().2\nAs ever, I can call them ‘toy’ functions and get away without proper error-checking and code optimisation.\n\ntwirdle\nThe consistent Wordle template makes it straightforward to extract people’s results from tweets. I’ve made the twirdle() function to do this.3\ntwirdle() makes use of regular expressions and functions like regmatches() and regexpr() to extract:\n\nthe Wordle edition number, e.g. ‘206’\nthe attempts required, e.g. ‘4’, but also failures symbolised with ‘X’\nthe maximum allowed attempts (max), i.e. ‘6’\nwhether the user was playing in light or dark mode\nwhether the user was using colorblind mode\na string of characters representing the emoji grid, e.g. \"YG----G-GYGGGGG\", to symbolise a correct guess (i.e. a Green emoji), a correct letter but in the wrong place (i.e. Yellow), and a miss (-)\nthe tweet status_id so you can visit the original tweets\n\n\nCode\n\n\nClick for the full twirdle() function definition\n\n\ntwirdle &lt;- function(tweets) {\n  \n  g   &lt;- \"\\U1F7E9\"\n  o   &lt;- \"\\U1F7E7\"\n  y   &lt;- \"\\U1F7E8\"\n  blu &lt;- \"\\U1F7E6\"\n  bla &lt;- \"\\U2B1B\"\n  w   &lt;- \"\\U2B1C\"\n  \n  rx_all   &lt;- paste(g, o, y, blu, bla, w, sep = \"|\")\n  rx_right &lt;- paste(g, o, sep = \"|\")\n  rx_place &lt;- paste(y, blu, sep = \"|\")\n  rx_wrong &lt;- paste(bla, w, sep = \"|\")\n  rx_color &lt;- paste(o, blu, sep = \"|\")\n\n  tweets$meta &lt;- regexpr(\n    \"Wordle \\\\d{1,} [\\\\d{1}|X]/\\\\d{1}\",\n    tweets$text,\n    perl = TRUE\n  )\n  \n  tweets$meta &lt;- setNames(\n    tweets$meta, \n    ifelse(tweets$meta &lt; 0, FALSE, TRUE)\n  )\n  \n  tweets$meta &lt;- ifelse(\n    names(tweets$meta),\n    regmatches(tweets$text, tweets$meta),\n    NA_character_\n  )\n  \n  tweets &lt;- tweets[!is.na(tweets$meta), ]\n  \n  tweets$edition &lt;- as.numeric(\n    regmatches(\n      tweets$meta, \n      regexpr(\"\\\\d{1,}\", tweets$meta)\n    )\n  )\n  \n  tweets$attempts &lt;- regmatches(\n    tweets$meta,\n    regexpr(\"[\\\\d{1}|X](?=/)\", tweets$meta, perl = TRUE)\n  )\n  \n  tweets$attempts &lt;- ifelse(\n    tweets$attempts == \"X\",\n    NA_character_,\n    tweets$attempts\n  )\n  \n  tweets$attempts &lt;- as.numeric(tweets$attempts)\n  \n  tweets$allowed &lt;- as.numeric(\n    regmatches(\n      tweets$meta, \n      regexpr(\"(?&lt;=/)\\\\d{1}\", tweets$meta, perl = TRUE)\n    )\n  )\n  \n  tweets$grid &lt;- regmatches(\n    tweets$text, \n    gregexpr(rx_all, tweets$text) \n  )\n  \n  tweets$grid &lt;- lapply(\n    tweets$grid, \n    function(x) paste(x, collapse = \"\")\n  )\n  \n  tweets$colorblind &lt;- ifelse(\n    grepl(rx_color, tweets$grid), TRUE, FALSE\n  )\n  \n  tweets$mode &lt;- ifelse(\n    grepl(bla, tweets$grid), \"dark\",\n    ifelse(grepl(w, tweets$grid), \"light\", \"unknown\")\n  )\n  \n  tweets$grid &lt;- gsub(rx_right, \"G\", tweets$grid)\n  tweets$grid &lt;- gsub(rx_place, \"Y\", tweets$grid)\n  tweets$grid &lt;- gsub(rx_wrong, \"-\", tweets$grid)\n  \n  tweets[, c(\"edition\", \"attempts\", \"allowed\", \"mode\",\n             \"colorblind\", \"grid\", \"status_id\")]\n  \n}\n\n\nI also put the code for the function in a GitHub Gist.\n\n\nExample\nTo give an example of twirdle() in action, let’s first grab a small number of tweets using the {rtweet} package by Mike Kearney. I think it’s best to supply the query string of search_tweets() with the word ‘Wordle’ and at least one white or black emoji (signifying an incorrect letter).4\n\ntweets &lt;- rtweet::search_tweets(\n  q = \"Wordle \\U2B1B OR \\U2B1C\",\n  n = 10,  # return 10 tweets\n  include_rts = FALSE  # no retweets\n)\n\nAnd now we can pass the returned dataframe of tweets to twirdle(). It outputs a row per tweet, but there may be fewer tweets than we asked for because the content doesn’t conform to the output provided by Wordle. Sometimes people add their own comments into the results, disrupting the expected format. There’s also a Spanish version that has ‘(ES)’ in the meta information that we’re going to exclude for our purposes.\nNote that anyone who didn’t complete the puzzle in six tries gets a score of ‘X/6’, which is returned as NA_real_ in the attempts column.\n\ntwirdle(tweets)\n\n# A tibble: 7 × 7\n  edition attempts allowed mode  colorblind grid                 status_id      \n    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt;      &lt;chr&gt;                &lt;chr&gt;          \n1     213        5       6 light FALSE      GY--YGGG--GGG--GGG-… 14834445690229…\n2     213        3       6 dark  FALSE      Y-----YY--GGGGG      14834445680161…\n3     213        6       6 dark  FALSE      --Y-----YG-G--G--G-… 14834445678988…\n4     213        6       6 light FALSE      -----Y------Y-G-G--… 14834445674540…\n5     213       NA       6 light FALSE      ---Y---G-YGGG--GGG-… 14834445662083…\n6     213        5       6 dark  FALSE      -G------YYGGG--GGG-… 14834445661120…\n7     213        3       6 dark  FALSE      ----Y--GY--GG--GGG-… 14834445648075…\nYou could use this to do a number of things, like calculate the mean number of attempts for each day’s puzzle, look for guess patterns at scale, or maybe see whether dark-mode users are more skilled than light-mode users.\n\n\n\neldrow\nOf course, the whole purpose of sharing an encoded emoji grid is to prevent spoilers. No-one reading your result can see the answer or your guesses.\nBut, if you do know the answer, could you backwards-engineer prior guesses from the emoji grid?\nIntroducing eldrow(),5 which does exactly this with some help from mikefc’s {wordle} package for filtering from the Wordle wordlist.6\nYou pass to it the answer and the encoding of the last guess in the form \"Y-GY-\". As per the twirdle() output, the characters G, Y and - refer to a letter in the right place, wrong place, or not in the word. The function returns a vector of all the possible words given the guess and the answer.\nOne thing it doesn’t deal with is whether people are playing in ‘hard mode’, where ‘any revealed hints must be used in subsequent guesses’. I think you could infer if someone was playing this way, but you could never be completely sure.\n\nCode\n\n\nClick for the full eldrow() definition\n\n\neldrow &lt;- function(guess, answer, words = wordle::wordle_dict){\n  \n  answer &lt;- tolower(answer)\n  guess &lt;- toupper(guess)\n  \n  guess_chars &lt;- strsplit(guess, \"\")[[1]]\n  answer_chars &lt;- strsplit(answer, \"\")[[1]]\n  \n  exact &lt;- ifelse(guess_chars == \"G\", answer_chars, \".\") |&gt;\n    paste0(collapse = \"\")\n  \n  wrong_spot &lt;- gsub(\n    \"\\\\.\", \"\", ifelse(guess_chars == \"Y\", answer_chars, \".\")\n  )\n  \n  exact_chars &lt;- regmatches(exact, gregexpr(\"\\\\w\", exact))[[1]]\n  correct_chars_table &lt;- table(\n    c(exact_chars, wrong_spot[wrong_spot != \"\"])\n  )\n  min_count &lt;- as.vector(correct_chars_table)\n  names(min_count) &lt;- names(correct_chars_table)\n  \n  possibles &lt;- wordle::filter_words(\n    words, exact, wrong_spot, min_count, min_count\n  )\n  \n  possibles &lt;- possibles[which(possibles != answer)]\n  possibles[order(possibles)]\n  \n}\n\n\nI also put the code for this in a GitHub Gist.\n\n\nExample\nSo, let’s say someone took three attempts at the word ‘shirt’7 and their first and second guesses gave encodings of \"YGG--\" then \"-GGG-\".\nWe can start by passing the answer and the encoding for the prior guess.\n\nguess_2 &lt;- eldrow(guess = \"-GGG-\", answer = \"shirt\")\nguess_2\n\n [1] \"chirk\" \"chirl\" \"chirm\" \"chiro\" \"chirp\" \"chirt\" \"chiru\" \"shire\" \"shirk\"\n[10] \"shirs\" \"third\" \"thirl\" \"whirl\" \"whirs\"\nOkay, so logicically they could have guessed any of these 14 options before their final, correct guess.\nNaturally, we can extrapolate one step further back and infer the earlier potential guesses.\nYou can iterate over these 14 possible words as the answer argument to eldrow(), setting the guess argument to the encoding for the previous attempt (i.e. \"YGG--\" was the first guess in our example).\n\nguesses_1_2 &lt;- lapply(\n  guess_2,\n  \\(x) eldrow(\"YGG--\", x)\n) |&gt; \n  lapply(\\(x) x[which(x != \"shirt\")]) |&gt;\n  setNames(guess_2)\n\nstr(guesses_1_2)\n\nList of 14\n $ chirk: chr \"thick\"\n $ chirl: chr \"thick\"\n $ chirm: chr \"thick\"\n $ chiro: chr \"thick\"\n $ chirp: chr \"thick\"\n $ chirt: chr \"thick\"\n $ chiru: chr \"thick\"\n $ shire: chr [1:22] \"chias\" \"chibs\" \"chics\" \"chiks\" ...\n $ shirk: chr [1:22] \"chias\" \"chibs\" \"chics\" \"chiks\" ...\n $ shirs: chr [1:22] \"chias\" \"chibs\" \"chics\" \"chiks\" ...\n $ third: chr [1:13] \"ahint\" \"chirt\" \"chits\" \"shift\" ...\n $ thirl: chr [1:13] \"ahint\" \"chirt\" \"chits\" \"shift\" ...\n $ whirl: chr(0) \n $ whirs: chr(0)\nThe output is a list with elements containing the potential first guesses and is named for each of the potential second guesses. So, logically, a possible set of guesses by this imaginary person was ‘shift’ then ‘third’ then ‘shirts’.\nOf course, you can eliminate any potential second guesses that failed to yield a potential first guess, like ‘whirl’ in this example.\nYou’ll also notice a number of the potential first guesses are the same word. The more they appear, the more likely that word is to have been the actual starting guess, I suppose?\n\nwords &lt;- c()\nfor (i in guesses_1_2) {\n  words &lt;- c(words, i)\n}\n\ncounts &lt;- as.data.frame(\n  table(words),\n  responseName = \"n\"\n)\ncounts$total &lt;- sum(counts$n)\ncounts$percent &lt;- round(100 * (counts$n / counts$total), 1)\n\nlikeliest &lt;- counts[order(-counts$percent), ]\nrownames(likeliest) &lt;- NULL\nhead(likeliest, 3)\n\n  words n total percent\n1 thick 7    99     7.1\n2 chits 5    99     5.1\n3 whist 5    99     5.1\nSo, purely on the basis of this frequency, ‘thick’ was most likely to be the first guess in this contrived example. You might want to consider how likely someone is to actually submit some of these words, given their obscurity.8"
  },
  {
    "objectID": "posts/2022-01-14-wordle/index.html#hurdle",
    "href": "posts/2022-01-14-wordle/index.html#hurdle",
    "title": "Wordle, twirdle and eldrow",
    "section": "Hurdle?",
    "text": "Hurdle?\nI hope you weren’t expecting anything more from this post. Maybe consider some meme variants, like Curdle, Birdle, Tetris, or this absolute banger.\nOkay, show’s over, you can stop the Wordling now."
  },
  {
    "objectID": "posts/2022-01-14-wordle/index.html#environment",
    "href": "posts/2022-01-14-wordle/index.html#environment",
    "title": "Wordle, twirdle and eldrow",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-06 19:27:40 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2022-07-22-mapbot-rtweet-v1/index.html#tldr",
    "href": "posts/2022-07-22-mapbot-rtweet-v1/index.html#tldr",
    "title": "Fixing londonmapbot for {rtweet} v1.0",
    "section": "tl;dr",
    "text": "tl;dr\nVersion 1.0 of the {rtweet} package has been released with breaking changes. I’ve updated the R script of londonmapbot so that its scheduled GitHub Action doesn’t fail.\n\nℹ️ Update\nlondonmapbot no longer posts to Twitter due to API changes. It can be found on Mastodon instead at botsin.space/@londonmapbot. You can read about that in a more recent post."
  },
  {
    "objectID": "posts/2022-07-22-mapbot-rtweet-v1/index.html#new-hymn-sheet",
    "href": "posts/2022-07-22-mapbot-rtweet-v1/index.html#new-hymn-sheet",
    "title": "Fixing londonmapbot for {rtweet} v1.0",
    "section": "New hymn sheet",
    "text": "New hymn sheet\nI wrote a Twitter bot a while ago called londonmapbot. See the recent talk at LondonR or the blogpost about its inception.\nBasically, an R script runs on schedule via a GitHub Action. It generates a random point in Greater London and pulls a corresponding satellite image from MapBox. The picture, the coordinates and an OpenStreetMap link are then posted to Twitter with the {rtweet} package.\nI updated recently the R script in the londonmapbot source code due to some breaking changes in {rtweet}, which Lluís Revilla Sancho recently bumped to the landmark version 1.0. Congratulations!"
  },
  {
    "objectID": "posts/2022-07-22-mapbot-rtweet-v1/index.html#change-your-tune",
    "href": "posts/2022-07-22-mapbot-rtweet-v1/index.html#change-your-tune",
    "title": "Fixing londonmapbot for {rtweet} v1.0",
    "section": "Change your tune",
    "text": "Change your tune\nI made two major changes to the londonmapbot R script given {rtweet} v1.0:\n\nI used rtweet_bot() to authorise with the Twitter API, instead of create_token()\nI provided alt text with the media_alt_text argument to post_tweet()\n\nOther folks who use the same approach as londonmapbot will likely need to make these fundamental changes as well.1\nI also made a third change—to specify the filetype of the downloaded MapBox image—that will only be relevant if you forked londonmapbot or if your tweets use a downloaded image.\n\n1. Authentication\nYou need to authenticate with the Twitter API before a tweet can be posted.\nPrior to {rtweet} v1.0 you provided your tokens and keys in the create_token() function, but this will now fail with the error create_token() was deprecated in rtweet 1.0.0..\nThere are now three options for passing tokens and keys, depending on the need: rtweet_app(), rtweet_user() and rtweet_bot(). The last of these is what we need, because:\n\n[It] authenticates a bot that takes actions on behalf of an app [which] is most appropriate if you want to create a Twitter account that is run by a computer, rather than a human\n\nAs with create_token(), we still need to provide the api_key, api_secret, access_token and access_secret. As outlined in the first londonmapbot blogpost, these can be stored as named secrets in the GitHub repo itself and called into the environment with Sys.getenv().\nSo, I changed the R code to this:\n\nlondonmapbot_token &lt;- rtweet::rtweet_bot(\n  api_key       = Sys.getenv(\"TWITTER_CONSUMER_API_KEY\"),\n  api_secret    = Sys.getenv(\"TWITTER_CONSUMER_API_SECRET\"),\n  access_token  = Sys.getenv(\"TWITTER_ACCESS_TOKEN\"),\n  access_secret = Sys.getenv(\"TWITTER_ACCESS_TOKEN_SECRET\")\n)\n\nWhere it was previously this:\n\nlondonmapbot_token &lt;- rtweet::create_token(\n  app = \"londonmapbot\",\n  consumer_key    = Sys.getenv(\"TWITTER_CONSUMER_API_KEY\"),\n  consumer_secret = Sys.getenv(\"TWITTER_CONSUMER_API_SECRET\"),\n  access_token    = Sys.getenv(\"TWITTER_ACCESS_TOKEN\"),\n  access_secret   = Sys.getenv(\"TWITTER_ACCESS_TOKEN_SECRET\")\n)\n\nNote that you no longer need to pass the app name as an argument and that you use api_* rather than consumer_* in the arguments.\n\n\n2. Alt text\nYou can no longer post an image without alt text, which is a positive move for the package. If you try to upload without alt text, you’ll get Error: Media and alt_text must be character vectors.\nTo add alt text, you must add the argument media_alt_text to the post_tweet() function.\nSince the sampled location is different in every londonmapbot tweet, it’s not ideal to provide a single blanket statement for all images that are returned from MapBox. Sometimes the image will contain an airport, sometimes the Thames, usually a golf course.\nFor now I’ve settled on a fixed string that will be posted as the alt text for every image. This is better than nothing, but should be improved so that it’s more dynamic.\nMaybe we could infer something from the average colour of the image (I wrote about this before) or maybe predict what the terrain is, given there’s plenty of training data from old londonmapbot tweets.\nRegardless, I added alt text to the code like this:\n\nalt_text &lt;- paste(\n  \"A satellite image of a random location in Greater London,\",\n  \"provided by MapBox. Typically contains a residential or\",\n  \"industrial area, some fields or a golf course.\"\n)\n\nrtweet::post_tweet(\n  status         = latlon_details,\n  media          = temp_file,\n  media_alt_text = alt_text,\n  token          = londonmapbot_token\n)\n\nWhere it was previously like this:\n\nrtweet::post_tweet(\n  status = latlon_details,\n  media  = temp_file,\n  token  = londonmapbot_token\n)\n\nSee the image at the top of this blogpost for an example of the alt text now provided to each londonmapbot tweet.\n\n\n3. File extension\nThe R script behind londonmapbot downloads a MapBox satellite image to a temporary file created with tempfile(). It was always bad practice to omit the argument fileext = \".jpeg\" from this function, which is used to provide a file extension to the temporary filepath of the downloaded image.\nI noticed that the absence of an explicit file extension seemed to be causing an error in the execution of the R script, so I made sure to change the code to this:\n\ntemp_file &lt;- tempfile(fileext = \".jpeg\")\ndownload.file(img_url, temp_file)\n\nFrom this:\n\ntemp_file &lt;- tempfile()\ndownload.file(img_url, temp_file)\n\nA subtle change, but a necessary one. You may need to do this too if you followed what londonmapbot was doing previously."
  },
  {
    "objectID": "posts/2022-07-22-mapbot-rtweet-v1/index.html#rest",
    "href": "posts/2022-07-22-mapbot-rtweet-v1/index.html#rest",
    "title": "Fixing londonmapbot for {rtweet} v1.0",
    "section": "Rest",
    "text": "Rest\nThis post may not have impacted you if you aren’t the in niche user group of ‘people who may have forked or used a repo template for londonmapbot to adapt and make their own Twitter bot based on {rtweet} and GitHub Actions, or otherwise used it as inspiration to create their own bot’.2\nBut it’s worth recording this in long-form in case you ever come across the sorts of {rtweet} errors I’m talking about here."
  },
  {
    "objectID": "posts/2022-07-22-mapbot-rtweet-v1/index.html#environment",
    "href": "posts/2022-07-22-mapbot-rtweet-v1/index.html#environment",
    "title": "Fixing londonmapbot for {rtweet} v1.0",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-06-29 23:43:57 CEST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "posts/2021-09-14-wot-ldn-emojis/index.html",
    "href": "posts/2021-09-14-wot-ldn-emojis/index.html",
    "title": "Wot3LdnEmojis",
    "section": "",
    "text": "I made Wot3LdnEmojis: a London-only clone of What3Emojis using London-related emojis and very little R code.\n\n\n\n\n\n\nHover over a grid cell to get the emoji-triplet reference. Zoom and pan, change to dark mode, toggle the grid."
  },
  {
    "objectID": "posts/2021-09-14-wot-ldn-emojis/index.html#tldr",
    "href": "posts/2021-09-14-wot-ldn-emojis/index.html#tldr",
    "title": "Wot3LdnEmojis",
    "section": "",
    "text": "I made Wot3LdnEmojis: a London-only clone of What3Emojis using London-related emojis and very little R code.\n\n\n\n\n\n\nHover over a grid cell to get the emoji-triplet reference. Zoom and pan, change to dark mode, toggle the grid."
  },
  {
    "objectID": "posts/2021-09-14-wot-ldn-emojis/index.html#u-wot-m8",
    "href": "posts/2021-09-14-wot-ldn-emojis/index.html#u-wot-m8",
    "title": "Wot3LdnEmojis",
    "section": "U wot m8",
    "text": "U wot m8\nBy now you’ve heard about various ‘alternative’ location systems that split the world into a grid and assign each with a value that’s more human-interpretable than latitude and longitude. For example, Google Plus Codes and What3Words.\nThe latter has been in the news a lot.1 In the meantime, their product has spawned a raft of spoofs, like the NSFW Four Kings Map, What3Emojis and What2Numbers, lol.2\nI like What3Emojis because it’s tongue-in-cheek3, yes, but they also understand the 21st Century mantra that:\n\nNo system is perfect, except for emoji.\n\nThe What3Emojis code is openly available, but of course I wondered how easy it would be to make something like this in R.\nI’ve limited it to London because us Londoners aren’t aware of anything outside of the M25. Read on for the how-to of this obnoxiously-named, cockney-baiting Wot3LdnEmojis system."
  },
  {
    "objectID": "posts/2021-09-14-wot-ldn-emojis/index.html#adam-n-eve-it",
    "href": "posts/2021-09-14-wot-ldn-emojis/index.html#adam-n-eve-it",
    "title": "Wot3LdnEmojis",
    "section": "Adam ‘n’ Eve it",
    "text": "Adam ‘n’ Eve it\nFirst we need to attach the {sf} package for geospatial operations; {leaflet} for interactive mapping; and {tidyverse} for data wrangling. We’ll also set a seed here for reproducible results.4\n\nlibrary(sf)\nlibrary(leaflet)\nsuppressPackageStartupMessages(library(tidyverse))\nset.seed(9002488)\n\nWe can grab the official Greater London boundary from a GeoJSON of geographic units in the UK5, which is served by the Open Geography Portal from the Office for National Statistics.\nOr we would, if the site wasn’t down when I went to run this. Instead, we can use the handy JSONs hosted by Martin Chorley on GitHub. Hero.\n\nnuts_path &lt;- paste0(\n  \"https://raw.githubusercontent.com/martinjc/UK-GeoJSON/\",\n  \"master/json/eurostat/ew/nuts1.json\"\n)\n\nldn_sf &lt;- st_read(nuts_path, quiet = TRUE) %&gt;% \n  filter(NUTS112NM == \"London\")\n\nldn_sf\n\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -0.5102962 ymin: 51.28676 xmax: 0.3339957 ymax: 51.69187\nGeodetic CRS:  WGS 84\n  NUTS112CD NUTS112NM                       geometry\n1       UKI    London MULTIPOLYGON (((-0.3210316 ...\n\n\nSo, it’s an sf-class object that behaves like a dataframe, but has some extra geospatial information stored in it.\nWe’ve got the boundary, how do we do a grid?\nWhat3Emojis say they used ‘gazillions of 4m×4m triangles’ in their grid, but I don’t have the computing power for that and I can’t count that high.\nInstead, I bring you low-fidelity, massive hexagons. But hexagons are the patron shape of R users, so I think that’s okay.\n{sf} has st_make_grid() makes gridding easy. We can pass arguments for size and shape, then st_intersection() limits the grid to the area inside the London boundary only.\n\ngrid_sf &lt;- ldn_sf %&gt;% \n  st_make_grid(cellsize = 0.01, square = FALSE, flat_topped = TRUE) %&gt;% \n  st_intersection(ldn_sf)\n\nlength(grid_sf)\n\n[1] 2554\n\n\nI’ve checked the length of the object so we know how many grid cells we need to label uniquely. The fewest number of emoji we’ll need is therefore 14, since 14^3 is 2744.\nOf course, I have chosen emojis that at least vaguely represent London. Below I’ve added names and commented with my interpretation. Let me know if you have better ideas.\n\nldn_emo &lt;- c(\n  metro           = \"🚇\",  # the tube\n  guard           = \"💂\",  # Queen's Guard\n  queen           = \"👸\",  # HMQE2\n  castle          = \"🏰\",  # Tower of London\n  ferris_wheel    = \"🎡\",  # London Eye\n  bell            = \"🔔\",  # Big Ben (not a clock!)\n  whale           = \"🐋\",  # Natural History Museum\n  cityscape       = \"🏙️\",  # Canary Wharf\n  cucumber        = \"🥒\",  # The Gherkin\n  performing_arts = \"🎭\",  # Theatre District\n  stadium         = \"🏟️\",  # Wembley Stadium\n  dragon          = \"🐉\",  # City of London emblem\n  bird            = \"🐦\",  # pigeon\n  deciduous_tree  = \"🌳\"   # London plane tree\n)\n\nDepending on your operating system, there’s a chance you might note be able to see some of these emoji. Oh no! Ah well.\nYou may also have noticed that it’s utterly ridiculous to use London-related emojis to label locations in London. ‘Where are you?’ ‘London Eye, London Eye, London Eye’. ‘You’re at the London Eye?’ ‘No.’ Oh no! Ah well.\nAnyway, we can get all three-way combinations of these with expand.grid(), then shuffle them randomly.\n\nldn_emo_combo &lt;- expand.grid(\n  emo_a = ldn_emo, emo_b = ldn_emo, emo_c = ldn_emo\n) %&gt;% \n  sample_n(length(grid_sf)) %&gt;%\n  transmute(emo_triplet = paste(emo_a, emo_b, emo_c))\n\nldn_emo_combo$emo_triplet[1:3]\n\n[1] \"🐋 🏟️ 🌳\"  \"🚇 🏰 🎡\" \"🏟️ 🎭 🥒\" \n\n\nThen it’s a case of adding the emoji information into the grid_sf object, which can be done via st_df().\n\ngrid_sf_emo &lt;- grid_sf %&gt;% \n  st_sf(ldn_emo_combo) %&gt;%\n  rename(., geometry = .)\n\nhead(grid_sf_emo)\n\nSimple feature collection with 6 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -0.1289476 ymin: 51.28676 xmax: 0.07882465 ymax: 51.29676\nGeodetic CRS:  WGS 84\n  emo_triplet                       geometry\n1     🐋 🏟️ 🌳 POLYGON ((-0.123496 51.2868...\n2    🚇 🏰 🎡 POLYGON ((-0.114679 51.2917...\n3     🏟️ 🎭 🥒 POLYGON ((0.06512026 51.290...\n4    🐦 🎡 🐋 POLYGON ((0.07882465 51.291...\n5     🏟️ 🌳 🎭 POLYGON ((-0.1149681 51.291...\n6       🏟️ 🏟️ 🏟️ POLYGON ((-0.1003241 51.296...\n\n\nYou can see the triplets have been added as an extra column so there’s one triplet per grid cell.\nTime to create the interactive map with {leaflet}, which is built up in layers.\nI’ve added a light and a dark underlying map that you can toggle between6 I’ve also made the hexagons transparent with thin borders to it’s easier to see the map, but you can toggle the grid on and off to help pinpoint a location.\n\nleaflet() %&gt;% \n  addProviderTiles(\"CartoDB.Voyager\", group = \"Light\") %&gt;%\n  addProviderTiles(\"CartoDB.DarkMatter\", group = \"Dark\") %&gt;%\n  addPolygons(\n    data = grid_sf_emo, group = \"Grid\", \n    color = \"grey\", weight = 1, opacity = 0.5,\n    fill = TRUE, fillOpacity = 0,\n    label = paste(grid_sf_emo$emo_triplet),\n    labelOptions = labelOptions(\n      direction = \"top\", style = list(\"font-size\" = \"35px\")\n    ),\n    highlightOptions = highlightOptions(color = \"blue\", weight = 3,)\n  ) %&gt;% \n  addLayersControl(\n    baseGroups = c(\"Light\", \"Dark\"),\n    overlayGroups = \"Grid\",\n    position = \"topright\",\n    options = layersControlOptions(collapsed = FALSE)\n  )\n\nI found:\n\nBuckingham Palace at 🔔🐦🥒 (Big Ben, pigeon, gherkin)\nLeicester Square at 🌳🌳🏙️ (plane tree, plane tree, Canary Wharf)\nThe Shard at 🐦🐋💂 (pigeon, whale, guard)\nWimbledon at 💂🌳🏟 (guard, plane tree, Wembley)\nThe Millennium Dome at 👸🚇🐉 (Queen, tube, dragon)\n\nLiterally minutes of fun. Of course, you shouldn’t use this map for anything whatsoever, possibly not even for your own amusement. I, on the other hand, can do whatever I like."
  },
  {
    "objectID": "posts/2021-09-14-wot-ldn-emojis/index.html#environment",
    "href": "posts/2021-09-14-wot-ldn-emojis/index.html#environment",
    "title": "Wot3LdnEmojis",
    "section": "Environment",
    "text": "Environment\n\n\n\nSession info\n\n\n\nLast rendered: 2023-07-08 12:39:37 BST\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] leaflet_2.1.2   lubridate_1.9.2 forcats_1.0.0   stringr_1.5.0  \n [5] dplyr_1.1.2     purrr_1.0.1     readr_2.1.4     tidyr_1.3.0    \n [9] tibble_3.2.1    ggplot2_3.4.2   tidyverse_2.0.0 sf_1.0-13      \n\nloaded via a namespace (and not attached):\n [1] s2_1.1.4                utf8_1.2.3              generics_0.1.3         \n [4] class_7.3-22            KernSmooth_2.23-21      stringi_1.7.12         \n [7] hms_1.1.3               digest_0.6.31           magrittr_2.0.3         \n[10] timechange_0.2.0        evaluate_0.21           grid_4.3.1             \n[13] fastmap_1.1.1           jsonlite_1.8.7          e1071_1.7-13           \n[16] DBI_1.1.3               fansi_1.0.4             crosstalk_1.2.0        \n[19] scales_1.2.1            cli_3.6.1               rlang_1.1.1            \n[22] units_0.8-2             ellipsis_0.3.2          munsell_0.5.0          \n[25] withr_2.5.0             yaml_2.3.7              tools_4.3.1            \n[28] tzdb_0.4.0              colorspace_2.1-0        vctrs_0.6.3            \n[31] R6_2.5.1                proxy_0.4-27            lifecycle_1.0.3        \n[34] classInt_0.4-9          leaflet.providers_1.9.0 htmlwidgets_1.6.2      \n[37] pkgconfig_2.0.3         pillar_1.9.0            gtable_0.3.3           \n[40] glue_1.6.2              Rcpp_1.0.10             xfun_0.39              \n[43] tidyselect_1.2.0        rstudioapi_0.14         knitr_1.43.1           \n[46] htmltools_0.5.5         rmarkdown_2.23          wk_0.7.3               \n[49] compiler_4.3.1"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "rostrum.blog (test)",
    "section": "",
    "text": "Convert a Word table to Markdown\n\n\n\n2023-06-21\n\n\n\n\n\n\n\n\n\n\n\nPanic! In The Toolshed\n\n\n\n2023-06-13\n\n\n\n\n\n\n\n\n\n\n\nExtract run data from Apple Health (redux)\n\n\n\n2023-06-11\n\n\n\n\n\n\n\n\n\n\n\nRectangularise Word tables extracted by {officer}\n\n\n\n2023-06-07\n\n\n\n\n\n\n\n\n\n\n\nRecreating a dataviz with {ggplot2}\n\n\n\n2023-05-10\n\n\n\n\n\n\n\n\n\n\n\nAutomate {blogdown} to Quarto\n\n\n\n2023-05-07\n\n\n\n\n\n\n\n\n\n\n\nMatt Dray Teaches (Data) Typing\n\n\n\n2023-04-23\n\n\n\n\n\n\n\n\n\n\n\nR is a game engine, fight me\n\n\n\n2023-04-02\n\n\n\n\n\n\n\n\n\n\n\nPlaygrounds with WebR and Quarto\n\n\n\n2023-03-16\n\n\n\n\n\n\n\n\n\n\n\nFun and learning. In a dungeon!\n\n\n\n2023-03-15\n\n\n\n\n\n\n\n\n\n\n\nI can’t be parsed, mate\n\n\n\n2023-03-03\n\n\n\n\n\n\n\n\n\n\n\nRepaying Tom Nook with {S7}\n\n\n\n2023-02-26\n\n\n\n\n\n\n\n\n\n\n\nPorting a Twitter bot to Mastodon\n\n\n\n2023-02-09\n\n\n\n\n\n\n\n\n\n\n\nWrapping PokéAPI with {trapinch}\n\n\n\n2023-02-02\n\n\n\n\n\n\n\n\n\n\n\nStiliyan Petrov: Jesus?\n\n\n\n2023-01-08\n\n\n\n\n\n\n\n\n\n\n\n.-././–/—/.-./…/.\n\n\n\n2023-01-06\n\n\n\n\n\n\n\n\n\n\n\nDing! Sound effects in {r.oguelike}\n\n\n\n2023-01-04\n\n\n\n\n\n\n\n\n\n\n\nAnimate sprites in R with {pixeltrix}\n\n\n\n2022-12-11\n\n\n\n\n\n\n\n\n\n\n\nTamagotchi in R?\n\n\n\n2022-11-13\n\n\n\n\n\n\n\n\n\n\n\nInteractive pixel art in R with {pixeltrix}\n\n\n\n2022-09-24\n\n\n\n\n\n\n\n\n\n\n\nYou are a halfling, trying to harvest {potato}\n\n\n\n2022-09-13\n\n\n\n\n\n\n\n\n\n\n\nEARL 22: {a11ytables} for better spreadsheets\n\n\n\n2022-09-07\n\n\n\n\n\n\n\n\n\n\n\nTwo RStudio Addins: {quartostamp} and {snorkel}\n\n\n\n2022-08-11\n\n\n\n\n\n\n\n\n\n\n\nFixing londonmapbot for {rtweet} v1.0\n\n\n\n2022-07-22\n\n\n\n\n\n\n\n\n\n\n\nStop opening the same RStudio Project twice\n\n\n\n2022-07-08\n\n\n\n\n\n\n\n\n\n\n\nAn isometric dungeon chase in R\n\n\n\n2022-06-28\n\n\n\n\n\n\n\n\n\n\n\nAutomated pathfinding in {r.oguelike}\n\n\n\n2022-06-10\n\n\n\n\n\n\n\n\n\n\n\nDown with R’s assignment flamewars!\n\n\n\n2022-06-07\n\n\n\n\n\n\n\n\n\n\n\nTry R v4.2 in your browser\n\n\n\n2022-06-01\n\n\n\n\n\n\n\n\n\n\n\nSimple procedural dungeons in R\n\n\n\n2022-05-01\n\n\n\n\n\n\n\n\n\n\n\nTurn the {tide} on R’s secret spreadsheet editor\n\n\n\n2022-04-27\n\n\n\n\n\n\n\n\n\n\n\nBuilding a {r.oguelike} in R\n\n\n\n2022-04-25\n\n\n\n\n\n\n\n\n\n\n\nInteractive maps of Hastings Half Marathon\n\n\n\n2022-03-31\n\n\n\n\n\n\n\n\n\n\n\nReproducible {distill} posts with {renv} profiles\n\n\n\n2022-03-15\n\n\n\n\n\n\n\n\n\n\n\nAdd in an RStudio Addin to add in backticks\n\n\n\n2022-02-19\n\n\n\n\n\n\n\n\n\n\n\nlondonmapbot at LondonR\n\n\n\n2022-02-12\n\n\n\n\n\n\n\n\n\n\n\nIntroduce me to your {soccercolleagues}\n\n\n\n2022-02-04\n\n\n\n\n\n\n\n\n\n\n\nImpress with {keypress} minigames\n\n\n\n2022-01-19\n\n\n\n\n\n\n\n\n\n\n\nWordle, twirdle and eldrow\n\n\n\n2022-01-14\n\n\n\n\n\n\n\n\n\n\n\nThe most popular Animal Crossing villagers\n\n\n\n2022-01-07\n\n\n\n\n\n\n\n\n\n\n\nYour workout route (in three dimensions!)\n\n\n\n2021-12-30\n\n\n\n\n\n\n\n\n\n\n\nR has obscenely long function names\n\n\n\n2021-11-27\n\n\n\n\n\n\n\n\n\n\n\n{itdepends} on {lubridate}\n\n\n\n2021-11-27\n\n\n\n\n\n\n\n\n\n\n\nDeep fried memes in R\n\n\n\n2021-11-07\n\n\n\n\n\n\n\n\n\n\n\nGet coordinates from fictitious maps\n\n\n\n2021-11-04\n\n\n\n\n\n\n\n\n\n\n\nReveal a hidden gorilla with {magick}\n\n\n\n2021-10-05\n\n\n\n\n\n\n\n\n\n\n\n{ActionSquirrel}: a game in the R console\n\n\n\n2021-10-03\n\n\n\n\n\n\n\n\n\n\n\nWot3LdnEmojis\n\n\n\n2021-09-14\n\n\n\n\n\n\n\n\n\n\n\nExtract punctuation from books with R\n\n\n\n2021-09-12\n\n\n\n\n\n\n\n\n\n\n\nAuto-label closing parentheses in RStudio\n\n\n\n2021-08-31\n\n\n\n\n\n\n\n\n\n\n\nAdding a Shiny app to {dehex}\n\n\n\n2021-08-27\n\n\n\n\n\n\n\n\n\n\n\nExploring R package startup messages\n\n\n\n2021-08-27\n\n\n\n\n\n\n\n\n\n\n\nRead a hex colour code with {dehex}\n\n\n\n2021-08-10\n\n\n\n\n\n\n\n\nNo matching items"
  }
]