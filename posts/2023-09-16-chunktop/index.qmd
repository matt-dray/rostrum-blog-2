---
title: Dear John, I'm sorry
date: 2023-09-16
slug: chunktop
categories:
  - parsermd
  - r
  - r-markdown
---

![](resources/chunktop.png){fig.alt="Crudely drawn picture of an apologetic face with two documents pointing to each other. One says Rmd on it, one says CSV."}

## tl;dr

I developed a convenience function for parsing chunk options out of an R Markdown document for collaborators to edit. But it doesn't work in reverse, which is the whole point. Some notes on failure.

<div class="tip"> 
`r fontawesome::fa("exclamation-circle")` <b>Note</b>

Since this was posted, the folks at ThinkR have a pretty good solution with [the {lightparser} package](https://github.com/ThinkR-open/lightparser): 'From Rmd And Qmd To Tibble And Back'. The 'And Back' being the crucial part.

</div>

## A very simple problem (?)

John asked about [parsing chunk options](https://fosstodon.org/@johnmackintosh/111047625054222865) from R Markdown files (Rmd), passing the content to editors, then reincorporating the edited text back into the chunk whence it came.

Well, John, have I got the solution for you. Oh wait, I absolutely don't. Rather I've looked into [{parsermd}](https://CRAN.R-project.org/package=parsermd), messed around and... gave up. C'est la vie.

In my hubris, I began the package [{chunktop}](https://github.com/matt-dray/chunktop) to solve John's problem. Goal: parse Rmd chunk options, write them to file, allow for edits, read them back in and reintegrate the strings into the chunks they came from. Then re-write the Rmd with the changes. Boom.

Spoiler: I was na√Øve.

## A good start

My advice: don't install {chunktop}; it's already archived on GitHub.

```{r install, eval=FALSE}
install.packages("remotes")  # if not yet installed
remotes::install_github("matt-dray/chunktop")
```

It steals functionality from the excellent [{parsermd} package](https://CRAN.R-project.org/package=parsermd) to grab Rmd chunk options using the very appropriate `rmd_get_options()` function.

The package contains a demo Rmd for testing purposes.

```{r path}
path <- system.file("extdata/demo1.Rmd", package = "chunktop")
```

You can read in this demo Rmd with `parsermd::parse_rmd()`, which is actually a little abstract syntax tree (AST) that demonstrates the hierarchy of the page and contains all the data.

```{r parsermd-chunks}
if (!require("parsermd")) install.packages(parsermd)
(rmd <- parse_rmd(path))
```
And we can take a look at the lines in the Rmd doc.

```{r parsemd-as-doc}
(rmd_doc <- parsermd::as_document(rmd))
```

So it contains a bunch of chunks with various options.

So, here's as far as I got. First off, given our Rmd file, we can use `get_chunktop()` to read the chunk options of interest using {parsermd} and stick them a nice little list. Trivially.

```{r chunktop-list}
library(chunktop)
(chunktop_list <- get_chunktop(rmd_file = path, opts = c("fig.cap", "eval")))
```

Which is trivially massaged into a data.frame.

```{r chunktop-df}
(chunktop_df <- chunktop_to_df(chunktop_list))
```

Which is trivially written to a CSV to share with your colleagues for editing.

```{r write-csv}
csv_file <- tempfile(fileext = ".csv")
write.csv(chunktop_df, csv_file, row.names = FALSE)
```

Which is trivially read back into R.

```{r read-csv}
(chunktop_df2 <- read.csv(csv_file))
```

Which is trivially converted back into a list.

```{r df-to-chunktop}
(chunktop_list2 <- df_to_chunktop(chunktop_df2))
```

And then we trivially, um, well, I don't know, actually. I just assumed there would be an elegant way to convert the listed options back into the chunk options. 

The function `parsermd::rmd_set_options()` exists, but appears to set options for _all_ chunks, not _selected_ options. Maybe I misunderstood, let me know.

For sure you could do a thing where you parse the strings out of the Rmd and replace them with the new option values. You are welcome to do that, friend.

## Descent into masochism

Anyway, having implied that I am too lazy to do that, I actually tried something much more procastinatory when I hit a brick wall. Enjoy this bonus content.

I wondered if I could just... extract the chunk options from the original Rmd myself, dependency-free. For 'fun'. 

But I turned I into a sort of unhinged [code golf](remotes::install_github("matt-dray/chunktop")
). Well, maybe 'code wild-goose-chase'. The challenge: is it possible to extract chunk options from an arbitrary Rmd using only base R in a single base-R pipe (`|>`) chain? Haha, of course.

First, I've got a few input checks that I've put into a `.check_inputs()` so that it causes less clutter in the main function.

<details><summary>Click for function to check inputs</summary>
```{r checks}
.check_inputs <- function(rmd_lines, engine, yaml_out) {
  
  if (!inherits(rmd_lines, "character")) {
    stop("Argument 'rmd_lines' must be a character vector.", call. = FALSE)
  }
  
  if (engine != "r") {
    stop("For now, argument 'engine' must be 'r'.", call. = FALSE)
  }
  
  if (!is.null(yaml_out) & !inherits(yaml_out, "character")) {
    stop("Argument 'yaml_out' must be NULL or character.", call. = FALSE)
  }
  
  if (!is.null(yaml_out)) {
    
    if (tools::file_ext(yaml_out) != "yaml") {
      stop("Argument 'yaml_out' must have extension '.yaml'.", call. = FALSE)
    }
    
    if (!dir.exists(dirname(yaml_out))) {
      stop("The directory in 'yaml_out' does not exist.", call. = FALSE)
    }
    
  }
  
}
```
</details>

So here's an overengineered `grab_chunktop()` function that extracts Rmd chunk options.

```{r grab-chunktop}
grab_chunktop <- function(rmd_lines, engine = "r", yaml_out = NULL) {
  
  .check_inputs(rmd_lines, engine, yaml_out)
  
  rmd_lines[grep("```\\{", rmd_lines)] |>  # isolate Rmd chunks
    gsub(paste0("```\\{", engine , " |\\}$"), "", x = _) |>  # retain options
    strsplit(", ") |>  # list of chunks, split by commas
    (\(chunk_str) {
      setNames(object = chunk_str, sapply(chunk_str, "[[", 1))  # name-value
    })() |>  # name the list elements after chunks
    sapply("[", -1) |>  # forget first element (engine)
    lapply(  # split options/values into nested list under named chunk
      \(opt_str) {
        strsplit(opt_str, "=") |>  # "eval=TRUE" to "eval" and "TRUE"
          (\(opt_str) {  # first element to name
            setNames(object = opt_str, trimws(sapply(opt_str, "[[", 1)))}
          )() |>
          sapply("[", -1) |>  # now remove first element
          trimws() |> 
          as.list() |>
          type.convert(as.is = TRUE)  # make sure "1" becomes 1
      }
    )
  
}
```

Absolutely disgusting. But it works!

```{r grab-chunktop-in-action}
grab_chunktop(rmd_doc)
```

Note the exclusive use of `|>` base pipe, `_` placeholder, `\()` anonymous function and `()()` 'dog's balls'. Welcome to base R circa 2023.

I'm telling you this works and you can see that's the case. But gosh bless you if you actually try to grok that code by eye.

## Brief grief

Nothing good has come of this. I just have more respect for {parsermd}. But here's a brief timeline of my activites on this task:

* there's no way this isn't trivial (denial)
* I can't believe I can't batter {parsermd} into doing this (anger)
* I'll start a package and see where we get (bargaining)
* what if I simply ignore the package and lark about with base R instead (depression)
* I'll just write a blog post and move on (acceptance)

Don't worry, you only lost a few braincells reading this. I lost an afternoon, woe is me.

## Environment {.appendix}

<details><summary>Session info</summary>
```{r sessioninfo, eval=TRUE, echo=FALSE}
cat("Last rendered:", format(Sys.time(), usetz = TRUE)); sessionInfo()
```
</details>
