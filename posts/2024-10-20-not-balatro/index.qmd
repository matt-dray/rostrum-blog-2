---
title: "Interactive cards games with {shiny}"
date: 2024-10-20
slug: "not-balatro"
image: resources/full-house.gif
categories:
  - games
  - r
  - shiny
  - shinylive
  - sortable
---

![Why on earth is called a full house?](resources/full-house.gif){fig-align="left" fig.alt="Two rows of playing cards labelled 'pool' and 'hand'. Cards are dragged from the pool to the hand. A jack is dragged and the text updates from 'no hand' to 'high card'. Another jack and it changes to 'a pair'. Then two nines and it changes to 'two pair'. Finally a third nine is added and it updates to say 'full house'." width='100%'}

## tl;dr

Using [{sortable}]() in a [{shiny}]() app to build card games, maybe? I mocked up a starting point and [made it available on the web]() with [{shinylive}]().

## Balatro.

LocalThunk[^r]—the anonymous creator of the hit poker-inspired roguelike[^roguelike] videogame _Balatro_—revealed recently that 11,000 _years_ of gameplay have been sunk into the game. 

The average productivity of the universe has continued to drop now that the game is available on mobile. I am one of the suckers that made the purchase.

As a result, I wondered how viable a card game in R might be. Not just a simple blackjack simulator in the console, but a drag-and-droppable interface in the broswer.

It must be possible, since [R is a game engine (fight me)](https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/).

## Badlatro

And so I began experimenting.

I wanted to use {shiny} and existing R packages and to avoid writing much JavaScript and CSS. After all, it's hard to fit in this frivolity after I've finished grinding at work and then grinding _Balatro_.

Luckily, the [{sortable}]() package does most of the hard work. The package by Andrie, Barrett and Kent wraps the [SortableJS]() library and lets you drag list elements around, including into other lists.

Typically, you would use {sortable} to drag little boxes of text. The order can then be read to record preference or perhaps as part of a quiz. But now I've hijacked it to show little images of cards that you can drag between a 'pool' (randomly drawn cards) and a 'hand' (cards selected by the user).

And so we can match the player's hand against known poker hands and give them a score.

## App

You can check out [the source on GitHub]() and [find the app deployed online](), thanks to {shinylive} and GitHub Pages. I've embedded it below as well (will take a moment to load.

## Some technicals

### Creating cards

I used {magick} to pick up a blank image and apply all suits and ranks, which I provided with an `expand.grid()` call.

### Images in {sortable}

Normally you would pass text into the `label` argument of sortable::list(). The trick here is to read the cards PNGs into a shiny::tagList() and pass them as the labels instead.

### Dragging between lists

{sortable} has a nice feature where you can drag list elements between 'buckets'. This was my original approach, but Barrett responded to [a Posit community post]() with some code that doesn't depend on buckets.

The approach also allowed restriction of the size of the lists too, meaning you can restrict people to only have 8 cards in the pool and 5 in hand.

### Matching to poker hands

I read about lots of very clever alogrithms for detecting poker hands. It's tricky because you want to recognise that two jacks and three kings is a full house, not a pair of jacks or a three-of-a-kind, for example.

But I basically just brute-forced it. I wrote some `if` statements that evaluate and return strongest hands first. So the function will assess a royal flush (i.e. ace, king, queen jack and 10 of the same suit) and confirm it before it tries to assess the hand for a more basic straight (consecutive ranks of any suit) or a flush (any suit of non-consecutive rank).

### Dynamic deck

The deck is stored as a `reactieValues()` element. When cards are removed, they're removed from the deck and can't be redrawn. Well, this functionality exists in the code but isn't currently used in the app, other than to count the cards remaining in the deck.

## What next?

Obviously this isn't yet a 'game'. There's a few ways this could go:

* remake _Balatro_ in R (absolutely no chance)
* make a small simulator of something like [video poker]() (too basic?)
* create a new, simple game to chase high scores with combos of poker hands, discards and chip 'bets', perhaps incorporating some _Balatro_-inspired joker-activated bonuses (might actually be fun)
* do nothing (appealing option!)

And of course, as a proof of concept, it means that I havent paid much attention to the user interface and experience. You can imagine making prettier cards, a nice green baise to mimic a poker table and even some animations to show cards being dealt.

### Environment {.appendix}

<details><summary>Session info</summary>
```{r sessioninfo, eval=TRUE, echo=FALSE}
cat("Last rendered:", format(Sys.time(), usetz = TRUE)); sessionInfo()
```
</details>

[^r]: Turns out that LocalThunk's name [was inspired partly by R](https://youtu.be/iaIu0PT8n_o?t=47). Their partner was learning R and asked about naming variables. They always called their R variables 'thunk', while in Lua, which _Balatro_ is programmed in, you can declare variables with `local`.
[^roguelike]: If you've been here before, you know I've toyed around with roguelikes in R with the concept packages [{r.oguelike}]() and [{tilebased}]().