---
title: "A roguelike sprite randomiser with Shiny"
date: 2024-12-15
slug: "sprite-builder"
image: resources/itch.png
categories:
  - kenney
  - r
  - shiny
  - shinylive
---

![](resources/sprites.gif){fig-align="left" fig-alt="A web app titled 'roguelike sprite builder'. A 'reroll' button is pressed several times, which causes a 16-by-16 pixel character sprite to be regenerated with random hair, shirt, weapons, etc. There are additional buttons to download the image. The art is attributed to Kenney." width='50%'}

## tl;dr

I made [a quick Shiny app](https://matt-dray.github.io/roguelike-sprite-builder/) that generates randomised characters for your next roguelike game, made with parts designed by [Kenney](https://www.kenney.nl/).

## Standing on the shoulders of Kenney

[Kenney](https://www.kenney.nl/) makes free ([CC0](http://creativecommons.org/publicdomain/zero/1.0/)) assets for videogames, like [the 16×16-pixel sprites](https://www.kenney.nl/assets?search=tiny&sort=update) I used in [a previous post](https://www.rostrum.blog/posts/2024-07-14-tilebased/), where you could move a little character move around a procedural forest glade while being chased by a mouse.

Kenney also has [a roguelike characters pack](https://kenney.nl/assets/roguelike-characters) where you can create your own characters by mixing and matching bodies, clothes and weapons. I've had a stab at making [a toy roguelike in R](https://github.com/matt-dray/r.oguelike) before, but the 'art' and interface were purely composed of text.

With a long-term goal of creating a 'real' [roguelike](https://en.wikipedia.org/wiki/Roguelike) game ([maybe in R?](https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/)), I made a small app to combine sprite parts randomly to create new characters. It's a pretty simple implementation for now, but I'm recording its current state in case I never come back to it.

## An 'applike'

The app is made with Shiny, deployed for the browser with [{shinylive}](https://posit-dev.github.io/r-shinylive/) and served with GitHub Pages. The source for the app is [on GitHub](https://github.com/matt-dray/roguelike-sprite-builder/). I've embedded it below, but you can also visit it in [a standalone window](https://matt-dray.github.io/roguelike-sprite-builder/). It might take a moment to load.

<iframe width='800' height='550' src='https://matt-dray.github.io/roguelike-sprite-builder/' title='roguelike-sprite-builder'></iframe>

Hit the reroll button to randomise the sprite parts. You can also download as PNG at 16×16 and 1024×1024 pixels or as an R-specific RDS file containing a nativeRaster representation of the sprite.

## Going rogue

The basic approach was to:

1. ['Cut out' and save each individual sprite part](https://github.com/matt-dray/roguelike-sprite-builder/blob/main/data-raw/extract.R) from a single 'spritesheet'.
1. Select sprite parts at random given some weighting (bodies are always selected, but weapons aren't).
1. Store the part names in a `reactiveValues()` object so they can be called by the draw method (to display the sprite onscreen) and via the download options.
1. Use `image_mosaic()` from [the {magick package}](https://docs.ropensci.org/magick/articles/intro.html#layers) to print sprite parts on top of each other and store this as a nativeRaster object.
1. Read the nativeRaster and use {grid} functions to draw it.

Why not just draw the `image_mosaic()` object? Two reasons: I specifically want to download the nativeRaster version of the sprite (for later use in R) and because nativeRaster can then be used to produce an image at any size. The nativeRaster object is just a matrix of colour information, where each cell is a pixel of the image. That means you can re-plot it any size you want.

Of course, I could use [{nara} by Mike](https://coolbutuseless.github.io/package/nara/index.html) (coolbutuseless) to 'blit' sprite parts to a single object, but I had some trouble using the package in a {shinylive} context as its not on CRAN and the GitHub repo [doesn't have any releases with the necessary WebAssembly binaries](https://github.com/matt-dray/roguelike-sprite-builder/issues/15) (yet?).

## Expanding the inventory

As ever, there were some learning points, like how:

* I used `ignoreNULL = FALSE` in `shiny::bindEvent()` on the step that chooses sprite parts, so that a sprite is created on startup without the need for the user to click the reroll button
* there's [a {shinylive} deployment GitHub Action](https://github.com/posit-dev/r-shinylive/tree/actions-v1/examples) that can save the step of having to `shinylive::export()` your app whenever you make changes
* the Chrome browser appears to have a problem downloading the files when the buttons are clicked, so there is a workaround at time of writing that's used in [one of the examples](https://shinylive.io/r/examples/#r-file-download) on the {shinylive} website

Even something this simple can be a learning experience.

## Permadeath

Obviously this app is more of a proof-of-concept (as ever on this blog). It's not particularly special or all that useful outside of my needs.

Next steps might involve letting the user [select parts manually](https://github.com/matt-dray/roguelike-sprite-builder/issues/1), [styling and theming the app](https://github.com/matt-dray/roguelike-sprite-builder/issues/5) and giving the sprites [a transparent background](https://github.com/matt-dray/roguelike-sprite-builder/issues/9).

You can add a pull request [to the GitHub repo](https://github.com/matt-dray/roguelike-sprite-builder) if this interests you. But beware, adventurer, I can't promise my code is less labyrinthine than a classic Rogue dungeon.

### Environment {.appendix}

<details><summary>Session info</summary>
```{r sessioninfo, eval=TRUE, echo=FALSE}
cat("Last rendered:", format(Sys.time(), usetz = TRUE)); sessionInfo()
```
</details>
