---
title: Up-to-date blog stats in your README
date: 2021-04-14
slug: gha-readme
categories:
  - github-actions
  - r
  - rmarkdown  
---

![Yesterday's render of the GitHub [README for this blog](https://github.com/matt-dray/rostrum-blog/blob/master/README.md).](resources/readme.png){fig-alt="The README file for this blog on GitHub showing up-to-date stats on things like the number of posts, posting rates and a chart showing posts over time." width="100%"}

## tl;dr

You can use a scheduled [GitHub Action](https://github.com/features/actions) to render up-to-date stats about your blog into its README.

## Happy blogday

This blog has been knocking around for three years now. I wrote [a post on its first birthday](https://www.rostrum.blog/2019/04/14/one-year/) with a simple, interactive 2D plot of the posts to date.

Only now, two years later, have I thought to put this info into the blog's README on GitHub---along with some other little stats, like total number of posts---and have it update automatically on a schedule using [a GitHub Action](https://github.com/features/actions).[^gha]

This is useful for me so I can keep track of things without counting on my fingers, but it also signals activity on the blog to any curious visitors. I may change its content at some point, but it does what I want it to do for now.

## Unwrap your GitHub Action

I've scheduled a GitHub Action for the early hours of each day. [The YAML file](https://github.com/matt-dray/rostrum-blog/blob/master/.github/workflows/render-rmarkdown.yaml) for it reads like 'at the specified time[^cron], set up a remote environment with R and some dependencies, then render the R Markdown file and push the changes to GitHub.' 

I've modified [r-lib's pre-written YAML for this](https://github.com/r-lib/actions/blob/master/examples/render-rmarkdown.yaml), which can be generated in the correct location in your project with `usethis::use_github_action("render-rmarkdown.yaml")`.

<details><summary>Click for the GitHub Action YAML</summary>
```
name: Render README

on:
  schedule:
    - cron: '09 05 * * *'

jobs:
  render:
    name: Render README
    runs-on: macOS-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@v1
      - uses: r-lib/actions/setup-pandoc@v1
      - name: Install CRAN packages
        run: Rscript -e 'install.packages(c("remotes", "rmarkdown", "knitr", "tidyverse"))'
      - name: Install GitHub packages
        run: Rscript -e 'remotes::install_github("hadley/emo")'
      - name: Render README
        run: Rscript -e 'rmarkdown::render("README.Rmd")'
      - name: Commit results
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git commit README.md README_files/ -m 'Re-build README.Rmd' || echo "No changes to commit"
          git push origin || echo "No changes to commit"
```
</details>

Basically, the action knits the repo's [README.Rmd](https://github.com/matt-dray/rostrum-blog/blob/master/README.Rmd) (R Markdown format containing R code) to a counterpart [README.md](https://github.com/matt-dray/rostrum-blog/blob/master/README.md) (GitHub-flavoured markdown), which is displayed when you [visit the repo](https://github.com/matt-dray/rostrum-blog).

## PaRty time

The real magic is in some R code chunks at the top of [the README.Rmd file](https://github.com/matt-dray/rostrum-blog/blob/master/README.md) itself. There's some R code there that uses {rvest} to scrape the archive page of the blog and create a dataframe of the titles, links and publish dates of each post.

<details><summary>Click for the scraping code</summary>
```{r scrape, eval=FALSE}
# Attach packages
library(tidyverse) # CRAN v1.3.0
library(rvest)     # CRAN v1.0.0

# Scrape the rostrum.blog home page
html <- read_html("https://rostrum.blog/")

# Extract the post titles
title <- html %>%
  html_nodes(".archive-item-link") %>%  # extract title node
  html_text()                           # extract text

# Extract the post URLs
link <- html %>% 
  html_nodes(".archive-item-link") %>%  # extract title node
  html_attr("href")                     # extract href attribute

# Extract the post dates
date <- html %>%
  html_nodes(".archive-item-date") %>%  # extract date nodes only
  html_text() %>%                       # extract text
  str_replace_all("[:space:]", "")      # remove newline/space

# Dataframe of titles and dates
posts <- tibble(date, title link), %>% 
  transmute(
    n = nrow(.):1,             # number starting from first post
    publish_date = ymd(date),  # convert to date class
    title,                     # title text
    link = paste0("https://www.rostrum.blog", link)  # create full URL
  )
```
</details>

That information can be cajoled to show some basic stats. The README includes inline R code that renders to show:

* the total number of posts
* posting rates (posts per month and days per post)
* the number of days since since the last post and a link to it
* a clickable details block containing a table of all the posts to date
* a simple 2D plot showing the distribution of posts over time[^chart] (preview below)

<details><summary>Click for plot code</summary>
```{r plot, eval=FALSE}
# Create plot object
p <- posts %>%
  ggplot(aes(x = publish_date, y = 1)) +
  geom_point(shape = "|", size = 10, stroke = 1, color = "#1D8016") + 
  theme_void()
```
</details>

![](resources/posts.png){fig-alt="A 2D chart where each point represents a post on an axis of time spanning from 2018 to the present. There are some gaps, but posts have been relatively consistent over time." width="100%"}

I also added a call to `lubridate::today()` at the bottom of the README.Rmd so it's obvious when the stats were last updated.

## Until next year

Finally, and most importantly, I included a tiny Easter egg: an emoji balloon ðŸŽˆ will appear on the page when the README is rendered on the anniversary of the blog's inception.[^balloon]

## Environment {.appendix}

<details><summary>Session info</summary>
```{r sessioninfo, eval=TRUE, echo=FALSE}
cat("Last rendered:", format(Sys.time(), usetz = TRUE)); sessionInfo()
```
</details>

[^gha]: I've written before about GitHub Actions to create [a Twitter bot](https://www.rostrum.blog/2020/09/21/londonmapbot/) and for [continuous integration of R packages](https://www.rostrum.blog/2020/08/09/ghactions-pkgs/).
[^cron]: I wrote about scheduling with cron strings in [an earlier post](https://www.rostrum.blog/2021/04/10/dialga/), which details [the {dialga} package](https://github.com/matt-dray/dialga) for translating from R to cron to English.
[^chart]: The original chart was made with {plotly}, so you could hover over the points to see the post titles and publishing dates. Plotly isn't supported in GitHub Markdown, so I included a static chart instead. I used a similar 'barcode' format in [a recent post about health data](https://www.rostrum.blog/2021/03/23/xml-health/).
[^balloon]: That's today if you're reading this on the day it was published.
