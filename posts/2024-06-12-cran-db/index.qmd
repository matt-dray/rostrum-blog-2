---
title: "Expose CRAN deadlines and DOIs"
date: 2024-06-12
slug: "cran-db"
image: resources/app.png
categories:
  - badgr
  - base
  - bslib
  - cran
  - r
  - shiny
---

![Red alert!](resources/app.png){fig.alt="Screenshot of webpage called 'CRAN Deadlines'. There are individual cards with the names of R packages in them. The header of each card says how many days remain for fixes to be made and is coloured according to the amount of time left (e.g. red for 0 days). The footer says e.g. 'issues need fixing before 2024-06-12' with a link to the CRAN page detailing the errors." width='100%'}

## tl;dr

You can now programmatically access deadlines and DOIs for CRAN packages. I larked about with them to make [a Shiny app](https://mattdray.shinyapps.io/cran-deadlines/) and [a README-badge-making function](https://github.com/matt-dray/badgr).

## Scan CRAN

If you didn't know, base R has functions that return information about packages on CRAN[^cran]. The main one is probably `CRAN_package_db()`. Here's a few columns:

```{r db}
db <- tools::CRAN_package_db()
db[1:5, c("Package", "Version", "Maintainer")]
```

This post is about two new columns that have appeared recently in that dataframe—`Deadline` and `DOI`—and a couple of little tools I've built around them.

### Meet the deadline

If your package-builds fail on CRAN then you need to fix them. The CRAN database now contains the date by which fixes need to be made. The simple way to access this information is:

```{r deadline}
db_dead <- db[!is.na(db$Deadline), c("Package", "Deadline")]
db_dead |> sort_by(~Deadline) |> head()
```

You can get this information in an R terminal, sure, but it's ripe for displaying in a web app that can be refreshed for the latest news. This seemed a good excuse for me to learn a couple of (newish-to-me) Shiny things: [{bslib}](https://rstudio.github.io/bslib/) as a framework and a way to create arbitrary numbers of UI elements (the number of packages with deadlines will vary).

In short, I made the Shiny app embedded below.

<iframe width='780' height='500' src='https://mattdray.shinyapps.io/cran-deadlines/' title='CRAN deadlines'></iframe>

[You can also visit directly on shinyapps.io](https://mattdray.shinyapps.io/cran-deadlines/)[^live] or [find the source on GitHub](https://github.com/matt-dray/cran-deadlines). The data refreshes with each visit so it stays up to date.

To handle on the fly an arbitrary number of UI elements, I looped over the deadlined packages to build a `tagList` of `bslib::card()` elements. Each contains the package's name, title, deadline date and days left, linking also to the CRAN and CRAN check pages. This object was then interpreted by `renderUI()` and the cards were spat out. For added spice, I coloured the card headers by threat level.

Some other new-to-me bits-and-bobs I used were [an emoji as a favicon](https://twitter.com/LeaVerou/status/1241619866475474946), {bslib}'s very simple [dark-mode toggle](https://rstudio.github.io/bslib/reference/input_dark_mode.html), and [`htmltools::tagAppendChild()`](https://rstudio.github.io/htmltools/reference/tagAppendChild.html) to splice breaks between cards in the `tagList`.

So this was an excuse chance to refresh some Shiny knowledge, basically. Simpler versions of this tool are possible, of course; I started out this mini project with just a basic {reactable} of the deadline information. I see [Hadley has now done something similar to that](https://hadley.github.io/cran-deadlines/)[^hadley] and it's a better tool[^shame].

Ah well. By now you've come to expect overengineering from this blog, I suspect.

<div class="tip"> 
`r fontawesome::fa("exclamation-circle")` <b>Note</b>

I noticed that Dirk also calculated the number of potential 'orphans' that archival would cause. This is useful information to gauge relative 'danger' for a given package to fall off CRAN. Hadley has since added this feature to his table and I will [probably implement it too](https://github.com/matt-dray/cran-deadlines/issues/2).
</div>

### Oi! DOI!

A [DOI](https://www.doi.org/) is a 'digital object identifier'. These are used extensively in publishing and can be useful for citation, tracking and gathering usage statistics. CRAN has been adding these to packages recently and the string has been added to the `CRAN_package_db()` dataframe in the `DOI` column.

```{r doi}
db[!is.na(db$DOI), c("Package", "DOI")][1:5, ]
```

[Dirk wondered aloud on Mastodon](https://fosstodon.org/@eddelbuettel@mastodon.social/112597923361268334) about making a badge service for DOIs. I don't know about a 'service' but I once wrote a package called [{badgr}](https://github.com/matt-dray/badgr) to build customised [shields.io](https://shields.io/) metadata badges within R. It's a small leap to make a {badgr} function that builds CRAN DOI badges.

So, as of of {badgr} v0.2.0, you can use `get_cran_doi_badge()`. You can download the package from my R-universe:

```{r badgr, eval=FALSE}
install.packages("badgr", repos = "https://matt-dray.r-universe.dev")
```

You pass it a CRAN package name. If you want, you can pass other arguments to `get_badge()` to change its colour, etc (but the default colour is the tasteful blue of the R logo, so you probably want to keep that). For purposes of this blog post, I've turned off the arguments that open a browser preview of the badge and copy it to your clipboard.

```{r get-badge}
badgr::get_cran_doi_badge(
  package_name = "datapasta",
  browser_preview = FALSE,
  to_clipboard = FALSE
)
```

The code outputs a Markdown string that you can paste into your repository's README, for example. It looks like this when rendered:

[![](https://img.shields.io/badge/DOI-10.32614/CRAN.package.datapasta-1f57b6?style=flat&link=https://doi.org/10.32614/CRAN.package.datapasta)](https://doi.org/10.32614/CRAN.package.datapasta)

You can click it to be taken to the resource, which is the CRAN listing for the package. The whole process looks like this:

![[{datapasta}](https://milesmcbain.github.io/datapasta/) is great, even if you don't pronounce it 'dah-tah pars-tah'.](resources/doi-badge.gif){fig.alt="A gif of the function get_cran_doi_badge running in RStudio with the package name 'datapasta' passed as the only argument. The console prints 'opening browser to display badge preview' and 'badge markdown added to clipboard' The markdown has also printed in the console. The badge opens in a browser window. It says 'DOI' on the left side and the DOIc ode on the right. Clicking it takes you to the CRAN page for hte package." width='100%'}

In retrospect, this function probably doesn't need to use `CRAN_package_db()` because the DOIs look fairly standardised in structure (e.g. `10.32614/CRAN.package.datapasta`). But at time of writing, not every package has a DOI yet; checking the database means an error can be raised if the DOI isn't yet active.

Ah well. By now you've come to expect overengineering from this blog, I suspect.

<div class="tip"> 
`r fontawesome::fa("exclamation-circle")` <b>Note</b>

Dirk mentioned in [another Mastodon post](https://mastodon.social/@eddelbuettel/112609970727005448) that he's added a simple deadline fetcher to {littler} and also pointed out the simple form for a Markdown badge.

Mike also [started a list](https://fosstodon.org/@coolbutuseless/112611459027946296) of CRAN-related dashboards/search tools and has asked for any that have been missed. Which implies we need a tool to search for such tools, lol?

</div>

### Environment {.appendix}

<details><summary>Session info</summary>
```{r sessioninfo, eval=TRUE, echo=FALSE}
cat("Last rendered:", format(Sys.time(), usetz = TRUE)); sessionInfo()
```
</details>

[^cran]: The Comprehensive R Archive Network, not [the unit of uncleaned herring](https://www.rostrum.blog/posts/2020-09-12-herring-units/).
[^live]: I initially tried making this as [a Shinylive app](https://posit-dev.github.io/r-shinylive/), but the cards didn't appear on the page. But don't worry, [Eric is on the case](https://github.com/matt-dray/cran-deadlines/issues/1#issuecomment-2163322390) (thank you).
[^hadley]: The absolute cheek of using the same (completely obvious and utterly non-plagiarised) repository name, can you believe it.
[^shame]: Though I chose not to shame the package owners by putting their names in my app, lol.