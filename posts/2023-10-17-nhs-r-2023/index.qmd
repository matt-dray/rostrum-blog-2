---
title: Base slaps!
date: 2023-10-17
slug: nhs-r-2023
categories:
  - base
  - public-sector
  - r
---

## tl;dr

I'm giving [a quick talk](https://matt-dray.github.io/nhs-r-2023/) at the NHS-R Conference 2023 about base R. I think there'll be a video; I'll link to it here when it's released.

## Slides

The slides are embedded below. Click on them and press <kbd>→</kbd> to advance, <kbd>F</kbd> to go fullscreen, and <kbd>S</kbd> to pop-out the speaker notes.

```{r embed-slides, echo=FALSE, eval=TRUE}
xaringanExtra::embed_xaringan(
  "https://matt-dray.github.io/nhs-r-2023/",
  ratio = "16:9"
)
```

The source is [on GitHub](https://github.com/matt-dray/nhs-r-2023). The slides are [written with Quarto](https://quarto.org/docs/presentations/), of course.

## Premise

The content of the talk is neither new nor earth-shattering. The basic premise is 'base R is pretty neat, remember it exists'.

I have a narrow window of experience. I work in the public sector, mostly with people who publish statistical reports. The default for this purpose is often the tidyverse. That's fine, for many reasons.

But—in my opinion, with my limited experience—people default to using `library(tidyverse)` without a second thought. At best, this may be overkill for small projects, at worst, reproducibility may be jeopardised.

The bottom line: consider if base R can do it alone. It might not, but maybe you can think about it. If it helps (it absolutely won't), you can imagine me standing over your shoulder, stroking my beard, every time you do `library(tidyverse)`.

But to be clear: I don't think you should 'just replace all your code with base R code'. There's very few examples of where that would make sense. But is it worth importing all of {dplyr} if you just want to `select()`, `filter()` and `mutate()` a data.frame?

## Content

The talk mentions three things:

1. Stability: vanilla R has changed little over time and will (likely) continue to run for a long time into the future[^julia].
2. Dependency: R's extensibility is one of its greatest strengths, but simplifying dependencies could help improve the reproducibility of your work.
3. Modernity: high stability hasn't stopped base R from adapting to the expectation of a modern R coder (e.g. inclusion of a base pipe operator).

Re stability, I contend that R is a horseshoe crab. And that R users are Milhouse (you know this to be true).

![](resources/nice-doggie.gif){fig-alt="Milhouse from the Simpsons pats a happy horseshoe crab on the head. Milhouse is not wearig his glasses. He thinks the crab is a dog." width="50%"}

Re dependency, I use an obligatory (adapted) xkcd.

![](resources/xkcd.png){fig-alt="Comic from xkcd. Lots of blocks are stacked on top of each other. One small block near the bottom is indicated. The implication is that removing the one small block will bring the whole thing down. The stack is labelled 'your project', the small block is labelled 'some dependency' and the big stable blocks underneath it at the bottom are labelled 'base'." width="50%"}

Re modernity, I morph the janky old R logo to the (perhaps already-outdated, lol) contemporary 'flat' design of the new logo.

![](resources/logo.gif){fig-alt="The old R logo morphs into the new R logo. The old has bevels, highlights and shadows. The new one is simpler with peak 'flat' design." width="25%"}

## Bonus

And, as a bonus fourth point raised in the talk:

4. 'Oddity': base R has some hidden-gem functions like `locator()` to click a plot and have coordinates returned (e.g. [my experimental {pixeltrix} package](https://github.com/matt-dray/pixeltrix) for interactive pixel art), `readline()` to accept user input interactively (e.g. [my experimental {r.oguelike} package](https://github.com/matt-dray/r.oguelike) for a 'procedural dungeon-crawler' in the R console), and `R-user-dir()` as a location for storing user data (e.g. [my experimental {tamRgo} package](https://github.com/matt-dray/tamRgo) for a persistent cyber pet in the R console).

But ultimately, I just wanted to do this terrible 'base slaps' pun because like, slap bass is a guitar technique and, like, zoomers say something 'slaps' to mean 'cool'. I think. Oh dear, this was a flimsy premise for a talk. Cringe-driven development?

## Environment {.appendix}

<details><summary>Session info</summary>
```{r sessioninfo, eval=TRUE, echo=FALSE}
cat("Last rendered:", format(Sys.time(), usetz = TRUE)); sessionInfo()
```
</details>

[^julia]: Until we all switch to the Julia and/or Rust languages, amirite.