---
title: "Start an argument with R"
date: 2024-02-03
slug: "base-args"
image: resources/argument.png
categories:
  - r
---

![](resources/argument.png){fig.alt="Two poorly drawn angry faces. One says 'str(x)' above it and the other says str(x, max.level = 1)'."}

## tl;dr

Some (lesser-known?) arguments to some common base-R functions.

## Getting argumentative

There's been a recent glut of posts about useful base-R functions, like the ones by [Maëlle](https://masalmon.eu/2023/10/20/three-neat-functions/), [Isabella](https://ivelasq.rbind.io/blog/not-so-basic-base-r-functions/) and [Yihui](https://yihui.org/en/2023/10/three-functions/).

I bring you a twist on the theme. Four useful _arguments_ from four everyday base functions:

* `max.level` in `str()`
* `n` in `print()`
* `include.only` in `library()`
* `drop` in `` `[` ``

Feel free to move on if you know all of these.

### Structural integrity

`str()` prints an object's structure. It's especially helpful for viewing lists in a compact hierarchical fashion. Consider this nested list:

```{r}
#| label: nested-list

nested_list <- list(
  x = list(x1 = 1:3, x2 = list(x3 = 4:6, x4 = 7:9)),
  y = list(y1 = list(y2 = list(y3 = mtcars))),
  z = list(z1 = CO2, z2 = list(z4 = 100, z5 = chickwts), z3 = list(z5 = 1))
)
```

Here's the output we get from a simple `str()` call:

```{r}
#| label: str-list

str(nested_list)
```

Oof, that's a little bit too much information to flood my console with.

Luckily you can use the `max.level` argument to restrict the depth to which the list is printed. Here's the top layer only, which has a depth of 1:

```{r}
#| label: str-list-1

str(nested_list, max.level = 1)
```

Now I have a very high-level overview: this is list containing three list objects of certain lengths.

Let's go deeper.

```{r}
#| label: str-list-2

str(nested_list, max.level = 2)
```

Now we've unpacked the next layer of the onion and can see that the contained objects are made up of vectors and more yet more lists.

For me, this is a nice way to get the sense of structure without seeing the entire content. I think it beats the interactive list `View()` in RStudio as well, which can't be opened to an arbitrary depth in one go.

### Carriage feed

`print()` is a ubiquitous function across most programming languages. In R, you might just type an object's name to show it. Here's a tibble with 21 rows to demonstrate.

```{r}
#| label: chick-tbl

chick_tbl <- tibble::as_tibble(ChickWeight[1:21, ])
chick_tbl
```

You might use `head()` on a data.frame to prevent printing the whole thing, which defaults to showing 6 rows. Tibbles are truncated by default to 10, but a nice feature is that they'll show a few more if there's slightly more than 10 rows total. But what if you want more control?

Well, in both `print()` and `head()` is the `n` argument. No surprise: it lets you select how many rows of your data.frame or tibble get shown in the console.

I particularly like this when I have a tibble I'd like to inspect the entirety of, but it gets truncated by default. I'll often find myself doing this:

```{r}
#| label: chick-tbl-print

print(chick_tbl, n = Inf)
```

You can set an `option()` to see more tibble rows by default, but I'm usually okay with its normal truncating behaviour.

### Library check out

`library()` calls are a staple of R scripts. Let's say I'm attaching the {lme4} package because I want to use the famous `cake` data set[^baath].

```{r}
#| label: library

library(lme4, quietly = TRUE)
```

Aha, no, it's not the `quietly` argument I want to talk about[^shh], though it is handy for stopping messages from being printed.

Of course, what `library()` does is let you access objects—like functions and data sets—from a named package. How many objects did we attach from {lme4}?

```{r}
#| label: library-objects

length(ls("package:lme4"))
```

Blimey, all we wanted was `cake`. But actually, we can be more selective with `library()` using the `include.only` argument (note that you can `exclude` as well).

```{r}
#| label: library-select

detach("package:lme4")
library(lme4, include.only = "cake")
ls("package:lme4")
```

Why would you want to do this? This can keep your environment tidy—if that's something you care about—but also helps prevent conflicts between objects that might already exist in your environment. 

It also means you've been explicit about the origin of any objects used in your script. If I see `cake` referenced in your script but can't see how it was derived, I can take a look at that library call to see that you imported it from {lme4}.

At worst, this might be a nice thing for Python users, who love to `from x import y`.

### Score a drop goal

The square bracket, `` `[` ``, is a function[^fn] for extracting elements out of objects, like rows and columns of a data.frame. Of course, it's typically used as a pair of square brackets.

So the following will give you the first three rows of the `cake` data.frame for the columns `temp` and `angle`. 

```{r}
#| label: no-drop

cake[1:3, c("temp", "angle")]
```

What happens when you select a single column? You get one column back, right?

```{r}
#| label: drop-true

cake[1:3, "temp"]
```

Ha, lol, no. You get a vector. This might be a problem if you're programmatically passing column names into `` `[` `` and you're always expecting a data.frame as output.

Luckily, you can guard against this by ensuring the returned doesn't `drop` to its simplest dimension.

```{r}
#| label: drop-false

cake[1:3, "angle", drop = FALSE]
```

I can see how a third argument inside the square brackets may look spooky if you though you could only pass two when working on a data.frame[^dt].

## Mutual agreement

These were unlikely to have blown your mind, especially if you're a seasoned user. But I've live-coded recently with some folks who hadn't seen them before.

Let me know if you want to argue your case for some other under-appreciated arguments.

## Environment {.appendix}

<details><summary>Session info</summary>
```{r sessioninfo, eval=TRUE, echo=FALSE}
cat("Last rendered:", format(Sys.time(), usetz = TRUE)); sessionInfo()
```
</details>

[^fn]: Recall that `` `[` `` is actually a function so you can write `` `[`(mtcars, 1:3, c("cyl", "hp")) `` to achieve the same things as `mtcars[1:3, c("cyl", "hp"]`.
[^shh]: Note that package startup messages can also be controlled en masse by wrapping library calls in `suppressPackageStartupMessages()`, which I've [talked about before](https://www.rostrum.blog/posts/2021-08-27-zzz/). And also written about [the sheer length of this function name](https://www.rostrum.blog/posts/2021-11-27-long-fns/).
[^dt]: Of course, three arguments to `` [` `` is bread and butter for {data.table} users!
[^baath]: Rasmus recently [did some sleuthing](https://www.sumsar.net/blog/source-of-the-cake-dataset/) to discover the source of this data set! A great read.