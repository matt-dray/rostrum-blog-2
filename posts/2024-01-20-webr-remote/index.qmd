---
title: "Pseudo-apps in the browser with WebR and Quarto?"
date: 2024-01-20
slug: webr-remote
categories:
  - dialga
  - r
  - webR
filters:
  - "webr"
---

![](resources/browser.png){fig-alt="Meme from Super Mario Movie. Top panel is the king penguin from the start of the film labelled 'R Stats' and saying 'do you yield?' Lower panel is Bowser labelled 'the browser', laughing and saying 'I do not', except the 'not' has been censored with a black bar." width="75%"}

```{webr-r}
#| context: setup
webr::install("dialga", repos = "https://matt-dray.r-universe.dev")
```

## tl;dr

A demo post to test out embedded [WebR chunks](https://docs.r-wasm.org/webr/latest/) that [source a non-CRAN R package](https://jamesgoldie.dev/writing/your-new-r-package-webr). Readers can edit and re-run code later in this blog post, entirely within the browser.

## World Wide WebR

[WebR](https://docs.r-wasm.org/webr/latest/) lets you run R code in a browser with no need for a server, thanks in large part to [George Stagg](https://gws.phd/)'s efforts. And these days you can embed editable R chunks into Quarto documents, thanks to [James Balamuta's quarto-webr extension](https://quarto-webr.thecoatlessprofessor.com/).

I've [written before](https://www.rostrum.blog/posts/2023-03-16-webr-quarto/) about how powerful this could be for demonstrating how to use code. Readers can adjust the code themselves to better understand the approach without having to install anything.

This blog has been [ported to Quarto](https://www.rostrum.blog/posts/2023-08-26-cheerio-blogdown/) since I wrote that post, so it's now possible for me to include WebR chunks in my posts directly. 

Even better, it's now possible to install remote, non-CRAN packages for use in WebR sessions. Thanks to [James Goldie](https://jamesgoldie.dev/writing/your-new-r-package-webr) for his excellent blog post on how you can get this set up and running[^style]. That post should be your first port of call; I'm not going to repeat all of his advice here because you should read his post in the first instance.

So much of this blog could have benefited from the inclusion of WebR chunks and I hope to use it a lot more in future. The rest of this post is a chance for me to try out the process of using WebR and installing a GitHub-hosted package.

## A 'pseudo-app'?

In some cases, WebR helps could help your blog post become a pseudo web app[^shinylive]. Load a package and provide some code that performs basic functionality, which readers can then fiddle with. If the package is simple enough, people may not need to install the package at all; they could just visit your blog post.

I call it a 'pseudo' app because of the lack of control: in a Shiny app I can force you to select certain elements from a dropdown, or only show you certain outputs. With WebR and Quarto I can only demo functions and let you adjust the arguments; if you delete all the code, that's on you.

### Example

So here's an example of what I mean. My [{dialga} package](https://www.rostrum.blog/posts/2021-04-10-dialga/) is very focused: its goal is to make it easier to compose [cron strings](https://en.wikipedia.org/wiki/Cron) programmatically. Provide numeric values to its arguments, convert them to cron strings and then convert those to an English interpretation. 

The package is not on CRAN, but I've added it to [my R-universe](https://matt-dray.r-universe.dev/builds), thanks to the amazing [R-universe project](https://r-universe.dev/search/) by rOpenSci and particularly the mighty Jeroen Ooms[^runiverse]. This is crucial for sourcing the package with WebR.

#### Setup

So, I added the chunk below to this post[^context], which grabs a WebR-ready version of the package from R-universe. As [James G notes](https://jamesgoldie.dev/writing/your-new-r-package-webr), you then need to add `filters: "webr"` to your Quarto YAML and use the 'webr-r' engine in relevant code chunks.

````
```{webr-r}
#| context: setup
webr::install("dialga", repos = "https://matt-dray.r-universe.dev")
```
````

How do you know this has worked? You may have noticed when you arrived here that the page briefly showed messages about how it's loading packages, before 'WEBR STATUS: ðŸŸ¡ Loading...' at the top of the post changes to 'ðŸŸ¢ Ready!'

#### Run

Now let's use the {dialga} package.

Use `r2cron()` to convert values into a cron string. The integer values for each argument below show the full range of possibilities, which you can adjust. The output will be `* * * * *`, which means 'every minute'. Start by running the code with the 'Run Code' button.

```{webr-r}
(cron_string <- dialga::r2cron(
  minutes    = 0L:59L,
  hours      = 0L:23L,
  days_month = 1L:31L,
  months     = 1L:12L,
  days_week  = 1L:7L
))
```

Let's say you wanted 'every 12 hours' instead. Change the `hours` argument to `12` and press the 'Run Code' button again. And so on as you please.

For completeness, you can convert the output above into English with `cron2eng()`.

```{webr-r}
dialga::cron2eng(cron = cron_string)
```

In other words... if you don't want to install {dialga} you can just visit this page and adjust the WebR chunks! 

That, or you can use one of the already-existing, excellent sites like [crontab.guru](https://crontab.guru/), lol. Your call. 

Regardless, I think this is a good indication of how a WebR post can help readers understandâ€”or simply just useâ€”your package in a demonstrative blog post.

## Environment {.appendix}

<details><summary>Session info</summary>
```{r sessioninfo, eval=TRUE, echo=FALSE}
cat("Last rendered:", format(Sys.time(), usetz = TRUE)); sessionInfo()
```
</details>

[^style]: I note also that James G has clearly written some CSS on his blog to make the WebR code blocks match the theme of his blog. I haven't done this yet at time of writing, so the chunks do a look a bit conspicuous.
[^shinylive]: Although these days you can also use [{shinylive}](https://posit-dev.github.io/r-shinylive/) to write a Shiny app that can run entirely in the browser! I wrote about this in [a previous post](https://www.rostrum.blog/posts/2023-10-08-govspeakify-tables/).
[^runiverse]: There really isn't enough space in this post to talk about the R-universe, but you can [learn more on the rOpenSci site](https://ropensci.org/r-universe/).
[^context]: A James G noted, the `context: setup` specification means that the code will run automatically when the page is opened, so the package will load as soon as the user arrives. It also means the chunk is hidden from the user by default, hence why I'm showing it here explicitly.