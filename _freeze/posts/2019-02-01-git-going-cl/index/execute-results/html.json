{
  "hash": "f32479bb70976ce687161e7949336ea3",
  "result": {
    "markdown": "---\ntitle: 'Git going: the command line'\ndate: 2019-02-01\nslug: git-going-cl\ncategories:\n  - command-line\n  - git\n  - nano\n  - terminal\n---\n\n\n![Examples of inputs and outputs at the command line](resources/terminal-example.png){fig-alt=\"A window showing inputs and outputs to the command line, including 'ls', 'mv' and 'cd'.\" width=\"100%\"}\n\n\n\n\n\n## tl;dr\n\nThis post is a basic introduction to the command line, focusing on macOS's Terminal. Here are some commonly-used commands:\n\n| Command | Example                     | Short explanation                   |\n| :------ | :-------------------------- | :---------------------------------- |\n| `pwd`   | `pwd`                       | **P**rint **w**orking **d**irectory |\n| `cd`    | `cd <filepath>`             | **C**hange **d**irectory            |\n| `ls`    | `ls`                        | **L**i**s**t folder contents        |\n| `mkdir` | `mkdir <folder name>`       | **M**a**k**e **dir**ectory (folder) |\n| `touch` | `touch <filename>`          | Create a file                       |\n| `nano`  | `nano <filename>`           | Open **Nano** editor                |\n| `open`  | `open <filename>`           | Open a file in its default program  |\n| `mv`    | `mv <filename> <filepath>`  | **M**o**v**e a file                 |\n| `rm`    | `rm <filename>`             | **R**e**m**ove (delete) a file      |\n| `man`   | `man <command name>`        | **Man**ual for a command            |\n\n## New Year's R-solution\n\nPeople shared recently on Twitter their R goals for 2019 (see [MaÃ«lle Salmon's post](https://masalmon.eu/2019/01/01/r-goals/)). Some of them referenced the use of Git and GitHub (see [Jason Baik's scraped dataset](https://github.com/jasonbaik94/rstats-2019-goals/blob/master/goals_raw.csv)) for version-control of their projects. \n\nIt wasn't that long ago that I began working with the command line, Git and GitHub. Now seems a good time to record what I learnt and maybe someone else will find it useful, or suggest better approaches.\n\nI'm splitting this into two posts: one introducing the basics of the command line and one about a basic Git workflow.\n\nIn these posts I assume that you:\n\n* have little-to-no understanding of the command line and Git commands, but some experience of coding\n* want to version control your R project\n* intend to store your version-controlled files in the cloud with GitHub\n* want to interact with Git via the command line, rather than with a Graphical User Interface (GUI)\n* are using a Mac and will access the command line via the Terminal application\n\nThese are relatively narrow constraints, but there will likely be some overlap with your particular configuration. \n\n## The command line\n\nOur goal is to start writing Git commands at [the command line](https://en.wikipedia.org/wiki/Command-line_interface). Before we get to Git, we need to know what the command line is and get some experience of working there.\n\nYou probably interact with your computer primarily via a Graphical User Interface (GUI) composed of windows and visual representations of files and folders, and probably use a mouse to do this.\n\nBut there's another way: you can write text commands directly to your computer to manipulate files and folders. One benefit is that you can save and re-execute commands in a script, which is much more reproducible than an unknown series of mouse-based interactions.\n\nWhat language are we going to use to communicate?  We'll be writing in our computer's default scripting language, called [bash](https://en.wikipedia.org/wiki/Bash_(Unix_shell)). In this post we'll be looking at a few basic commands.\n\n### Terminal\n\nOpen the Terminal application (tap command and space to search for it). Terminal acts as a Command Line Interface (CLI): a place where you can chat with your machine.\n\nTerminal is a simple application where you type commands and execute them. You're presented with the [prompt](https://en.wikipedia.org/wiki/Command-line_interface#Command_prompt), which is the form `<computer name>:<current directory> <user>$`. For example:\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nbros:~ luigi$\n```\n:::\n\n\nThe prompt will appear each time your computer is awaiting an instruction. You just need to write your command after the `$` and hit <kbd>Enter</kbd>.\n\n### Where are we?\n\nThe commands we input are going to affect the current folder we're in, or other files and folders relative to it.\n\nWhere are you when you start Terminal? The prompt helps you orient yourself: see the `<current directory>` bit of `<computer name>:<current directory> <user>$`.\n\nWhen you start, the prompt will show the tilde `~` by default. This is a shortcut symbol for your 'home' directory, which on a Mac will be set to the path `/Users/<your-username>`.\n\nWe can prove this by typing `pwd` at the prompt and hitting the <kbd>Enter</kbd> key.\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nbros:~ luigi$ pwd\n/Users/luigi\n```\n:::\n\n\nThis command prints the path for the current working directory. The folder we're working in at any given moment is called 'the working directory'.\n\n### Look around with `ls`\n\nWe can look at the contents of our current working directory with `ls`, which means 'list the files'.\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nbros:~ luigi$ ls\nApplications  Desktop               Documents\nDownloads     Movies                Music\nPictures      plumbing-invoice.txt  \n```\n:::\n\n\nIt holds some folders and a text file. This command is analogous to double-clicking a folder to open it and look inside.\n\n### Flags\n\nWe can go one better: we can add 'flags' to the command. These are arguments prefixed with a hyphen that change the command's default behaviour. We're going to ask for *all* the files and folders (some are hidden!) with `-a` and also we'll use `-p` to append the folders with a forward slash to make them more obvious.\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nbros:~ luigi$ ls -a -p\n./\n../\n.luigi-profile\n.gameboy-horror-token\n.poltergust-key\nApplications/\nDesktop/\nDocuments/\nDownloads/\nMovies/\nMusic/\nPictures/\nplumbing-invoice.txt\n```\n:::\n\n\nSo now can see all the files, including the hidden ones. Hidden files are often settings or profiles for various programs, or tokens stored for API access. One example of a hidden file for R is [an .Rprofile](https://www.rostrum.blog/2019/01/04/rprofile-motivate/).\n\nYou can see a description of the command and the list of available flags using the `man` command. For example, try `man ls` to learn about the list command. Sometimes the contents of the man file don't fit the screen; keep hitting return until the bottom, or tap `q` to quit.\n\n### Navigation with `cd`\n\nKnowing what's in our working directory is useful because it helps us navigate. We can switch to another folder with the change directory command `cd`. We don't have to type the full path, just the path relative to where we are. So instead of `/Users/luigi/Documents`, we can just type `Documents`. In fact, you can start typing and hit the tab key for autocompletion, assuming there's no conflicts.\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nbros:~ luigi$ cd Documents\nbros:Documents luigi$ pwd\n/Users/luigi/Documents\n```\n:::\n\n\nSee how the prompt changed to say 'Documents'? This is a handy reference in case we forget where we are. To return to the parent folder (i.e. back where we were), we can use `cd ..` to go up the file structure by one level.\n\n### Create/edit a file with `touch`/`nano`\n\nLet's create a file in our current working directory with the `touch` command and then convince ourselves it's there by listing the folder contents. I'm choosing to write [a Markdown file](https://daringfireball.net/projects/markdown/) with the `.md` extension, but you could just as easily have specified a `.txt` text file, for example.\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nbros:Documents luigi$ touch  mushroom-top3.md\nbros:Documents luigi$ ls -p\ncoin-balance/         mushroom-top3.md  monty-mole-fanfic.txt\nmoustache-wiggle.gif  plumbing/         star-locations/\n```\n:::\n\n\nOkay great, but the file is empty. How do we write something in it? Well, you could use `open characters.md` at the prompt to open the file in your default text editor (TextEdit or something), but we can also write text from _within_ Terminal itself. Perhaps the simplest way is to use the Nano editor, which you can think of as a text editor built into Terminal.\n\nYou just need to type `nano <file name>`.\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nbros:important-notes luigi$ nano mushroom-top3.md\n```\n:::\n\nThe prompt will disappear and you'll see a header saying `File: characters.md`. You're now editing this file with Nano. Start typing.\n\n<div class=\"figure\">\n<img src=\"resources/nano-example.png\" alt=\"A window showing the Nano text editor accessed form the command line, with the file name at the top, some text in the middle and a range of options like 'exit' at the bottom.\">\n<p class=\"caption\">The Nano text editor running from the command line</p>\n</div>\n\nNotice the options at the bottom of the window. We can exit Nano with <kbd>^</kbd> and <kbd>x</kbd> ('control' and 'x' keys). You'll be asked if you want to save; hit <kbd>Y</kbd> for yes. Then you'll be asked for a `File name to write: characters.md`. You can edit the name or hit <kbd>Enter</kbd> to confirm. The content is now saved.\n\n### Create a folder with `mkdir`\n\nAs well as files, the command `mkdir <folder name>` will create a new folder in our current working directory. We can switch to the new folder with `cd` and can again convince ourselves by looking at the <current directory> bit of the prompt, or by executing `pwd` to print our working directory.\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nbros:Documents luigi$ mkdir new-games-starring-luigi\nbros:Documents luigi$ cd \nbros:new-games-starring-luigi luigi$ pwd\n/Users/luigi/Documents/important-notes\nbros:new-games-starring-luigi luigi$ ls\nbros:new-games-starring-luigi luigi$\n```\n:::\n\n\nNote that `ls` on an empty directory will return nothing.\n\n### Move your files with `mv`\n\nLet's say we have a rogue text file in our home directory (remember this is denoted with the tilde, `~`) that should really be in a subfolder of `Documents/`. The command `mv` allows us to move it. It's like dragging and dropping a file from one folder into another.\n\nYou can specify this in the form `mv <filepath> <filepath>` to move files to and from any path, or navigate with `cd` to the folder containing the file and use the form `mv <file> <filepath>`. The code below does the latter, using `cd` and `ls` to move between folders and show where the file is.\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nbros:Documents luigi$ cd ~\nbros:~ luigi$ ls\nApplications  Desktop               Documents\nDownloads     Movies                Music\nPictures      plumbing-invoice.txt\nbros:~ luigi$ mv plumbing-invoice.txt ~/Documents/important-notes/plumbing\nbros:~ luigi$ ls\nApplications  Desktop               Documents\nDownloads     Movies                Music\nPictures\nbros:~ luigi$ cd /Documents/plumbing/important-notes/plumbing\nbros:plumbing luigi$ ls\noveralls.jpg  plumbing-invoice.txt  tighten-warp-pipes.txt\n```\n:::\n\n\n### Delete with `rm`\n\nWhile we're in this folder, we might want to prune our files a bit. You can remove files with the `rm` command.\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nbros:plumbing luigi$ ls\noveralls.jpg  plumbing-invoice.txt  tighten-warp-pipes.txt\nbros:plumbing luigi$ rm tighten-warp-pipes.txt\nbros:plumbing luigi$ ls\noveralls.jpg  plumbing-invoice.txt\n```\n:::\n\n\n## Next steps\n\nSo we should have enough knowledge now to navigate and manipulate folders. This will be extremely helpful when we start using Git commands at the command line in part two of the 'Git going' series.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-08-04 08:37:50 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}