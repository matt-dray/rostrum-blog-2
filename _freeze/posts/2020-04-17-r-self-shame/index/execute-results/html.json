{
  "hash": "7a0e5a08768d349a8c398962aa3a654d",
  "result": {
    "markdown": "---\ntitle: Owning the shame of my old R code\nauthor: Matt Dray\ndate: '2020-04-17'\nslug: r-self-shame\ncategories:\n  - r\n  - reproducibility\n  - self-help\n---\n\n\n![Scorn (all images from Brehm's Life of Animals, 1895).](resources/brehm-1895-lemur.jpg){fig-alt=\"Line drawing of a lemur in a aggressive posture.\" width=\"75%\" fig-align=\"left\"}\n\n## tl;dr\n\nIn which I reflect on my past-self's journey toward better R code.\n\nThis post suggests alternatives to `file.choose()`, `setwd()` and `attach()`; encourages sensible project structure; and talks about the benefit of writing functions.\n\n## A startling discovery\n\nI dug up a time capsule from a decade ago. It contained poorly constructed R code.\n\nTwist: _it was me who wrote it_.\n\nReading these scripts brought back the sweet nostalgia of running the vanilla R GUI on my [precious white MacBook](https://en.wikipedia.org/wiki/MacBook_(2006%E2%80%932012)), using R as little more than an interactive calculator for [ecological analyses](https://www.rostrum.blog/2019/04/30/markov-chain-phd-2/).\n\nThere were some things in that code that look alien to me now (click to jump ahead):\n\n1. [`file.choose()` and `setwd()` for non-reproducible file locations](#files)\n1. [The `attach()` function for basically hiding his data and forgetting it exists](#attach)\n1. [Working in the same R workspace at all times regardless of context](#env)\n1. [Repeating code over and over and over and over and...](#repeat)\n\nThis post is about learning. It's about looking for improvements. Everyone is a beginner at some point and everyone is taught in a different way. There's no shame in that.\n\nHopefully this post might act as a shortcut for you to hear about some alternative techniques.\n\n![Agony.](resources/brehm-1895-otter.jpg){fig-alt=\"Line drawing of an otter in agony with its paw trapped in some fishing tackle.\" width=\"75%\" fig-align=\"left\"}\n\n## 1. Falling foul of a file-finding fail {#files}\n\nCan't remember where a file is? Don't want long file paths cluttering your scripts? Nevermind! Past-Matthew was using `file.choose()`, which opens your file explorer so you can navigate to the correct file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv(file.choose())\n```\n:::\n\n\nBut how can anyone reading your script (including you) know what file you actually read in? It's not recorded in your script. You can't re-run this code without that information.\n\nSolutions: \n\n* good project-folder structure that puts all the elements of your analysis --- data, scripts, outputs --- in one place so its portable and others can use it without having to change anything\n* relative file paths that start from your project folder, so you can use computer-agnostic paths like `data/cool-data.csv` rather `path/specific/to/my/machine/data/cool-data.csv`\n\nTools:\n\n* [RStudio Projects](https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects) encourage good folder structure and have the bonus of relative file paths, which start from the directory containing the .Rproj file. \n* [the {here} package](https://here.r-lib.org/) by [Kirill Müller](https://twitter.com/krlmlr) also helps with relative file paths; `here()` finds a file based on the perceived 'home' for the project, or just where a manually-placed hidden `.here` file is placed with `set_here()`\n\n### Justified arson\n\nYou may wonder why I haven't mentioned `setwd()` as a solution here. It's because [Jenny Bryan](https://jennybryan.org/) will [set your computer on fire](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/).\n\nBut past-Matthew did this.[^melt] He used `setwd()` to point to where a project was stored locally:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"/Users/Matthew//local/path/to/project/\")\ndf <- read.csv(\"data/some_file.csv\")\n```\n:::\n\n\nWhat's the problem? The bit in `setwd()` is not reproducible --- it's the file location on one particular machine only.\n\n![Mirth.](resources/brehm-1895-mouse.jpg){fig-alt=\"Line drawing of two mice that look like they're laughing.\" width=\"75%\" fig-align=\"left\"}\n\n## 2. Getting too attached {#attach}\n\nThis problem begins with a question: how does R know where to look for a variable?\n\nHere's three ways to calculate Pokémon body mass index by reference to variables in a data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read Pokémon data from URL\ndf <- suppressMessages(readr::read_csv(\n  \"https://raw.githubusercontent.com/mwdray/datasets/master/pokemon_go_captures.csv\",\n))\n\n# BMI calculation three ways\nx <- mean(df$weight_kg / df$height_m ^ 2)  # dollar notation\ny <- mean(df[[\"weight_kg\"]] / df[[\"height_m\"]] ^ 2)  # square brackets\nz <- with(df, mean(weight_kg / height_m ^ 2))  # with() function\n\n# All produce the same results?\nall(x == y, y == z, x == z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nSo each line specifies the data frame object where R should look for the named variables. If you don't provide this object, R will error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(weight_kg / height_m ^ 2)\n```\n:::\n\n\n```\n## Error in mean(weight_kg / height_m ^ 2) : object 'weight_kg' not found\n```\n\nR was searching for the `weight_kg` variable in a few places, starting with the global environment, but couldn't find it. You can see the search path it takes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n[4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n[7] \"package:methods\"   \"Autoloads\"         \"package:base\"     \n```\n:::\n:::\n\n\nThe data object isn't in there, so that's why it can't find those variables. \n\nPast-Matthew got around this by using `attach()`, which lets you add objects to the search path.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattach(df)\nsearch()  # now 'df' is in the search path\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \".GlobalEnv\"        \"df\"                \"package:stats\"    \n [4] \"package:graphics\"  \"package:grDevices\" \"package:utils\"    \n [7] \"package:datasets\"  \"package:methods\"   \"Autoloads\"        \n[10] \"package:base\"     \n```\n:::\n:::\n\n\nThe following expression can now be calculated because R can find the variable names in the attached `df` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(weight_kg / height_m ^ 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 31.17416\n```\n:::\n:::\n\n\nSo we never need to refer to the data frame name at all. Wow, how can that be bad?\n\nHere's one reason. Consider a data set with column names that match our original:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- df[species == \"caterpie\", ]\nattach(df2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from df:\n\n    charge_attack, combat_power, fast_attack, height_bin, height_m,\n    hit_points, species, weight_bin, weight_kg\n```\n:::\n:::\n\n\nYou might be able to guess the problem: R will get variables from `df2` first, since it was the most recently attached.\n\nBad news: this means the code we wrote earlier will get a different result.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(weight_kg / height_m ^ 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 31.64357\n```\n:::\n:::\n\n\nThis has serious implications for reproducibility and the confidence you can have in your results.\n\nSee also the 'search list shuffle' danger of `attach()` referenced in Circle 8.1.35 of [The R Inferno](https://www.burns-stat.com/pages/Tutor/R_inferno.pdf) by Patrick Burns.\n\nPast-Matthew was using this approach because he was taught with [Mick Crawley's R Book](https://www.wiley.com/en-gb/The+R+Book%2C+2nd+Edition-p-9780470973929). Mick says `attach()` 'makes the code easier to understand for beginners' (page 18)[^beginner] --- possibly because expressions end up looking less cluttered. But this only sets up beginners (like me) for problems later. In fact, Mick even says, perhaps confusingly, to 'avoid using attach wherever possible' in his book.\n\nPro tip: if you do ever use `attach()` (don't), you'll want to make sure you `detach()` your objects from the search path.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndetach(df)\ndetach(df2)\n```\n:::\n\n\n![Bemusement.](resources/brehm-1895-hare.jpg){fig-alt=\"Line drawing of two hares, one of which is standing on its hind legs.\" width=\"75%\" fig-align=\"left\"}\n\n## 3. Polluting the environment {#env}\n\nPast-Matthew clearly executed different projects and scripts in the same running instance of R.\n\nThe potential for confusion and error is high in this scenario. Was the object `results` created from `analysis1.R` or `analysis2.R`? Maybe `results` is now out of date because the code has been updated.\n\nI'm also certain that the content of past-Matthew's workspace was being saved at the end of each session --- the default behaviour --- meaning all that trash would come back next time he fired up R. \n\nThere were also some strange defensive lines like the following, which pre-emptively unloads the {nlme} package because of a namespace conflict with {lme4}:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndetach(\"package:nlme\")  # conflicts with lme4\n```\n:::\n\n\nI assume this was because past-Matthew was never quite sure of the state of his current working environment.\n\nThese days I treat everything in my environment with suspicion and restart R regularly and rebuild objects from scratch. This means I can have confidence that my script does what I think it does and also stops interference from older objects that are clogging up my environment.\n\nI also modified the default behaviour of RStudio to prevent my workspace being saved, which means I can start afresh when I open a project. To do this, untick 'Restore .Rdata on startup' and set 'Save workspace to .RData on exit' to 'Never' in Tools > Global Options > General > Basic > Workspace.\n\n[Read more about workflow in the R for Data Science book](https://r4ds.had.co.nz/workflow-projects.html) by Garrett Grolemund and Hadley Wickham. \n\n![Disgust.](resources/brehm-1895-gopher.jpg){fig-alt=\"Line drawing of two gophers, one side-on and one with its face popping up from a hole.\" width=\"75%\" fig-align=\"left\"}\n\n## 4. There's a function for that {#repeat}\n\nTurns out past-Matthew repeated loads of code because functions looked too much like Real Programming and were therefore Quite Hard.\n\nHere's a simple example of code repetition that was pretty common in past-Matthew's scripts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subset the data and then get a mean value\nsub_koffing <- subset(df, species == \"koffing\")\nmean_koffing <- round(mean(sub_koffing[[\"weight_kg\"]]), 2)\n\n# Do it again for a different species\nsub_paras <- subset(df, species == \"paras\")\nmean_paras <- round(mean(sub_paras[[\"weight_kg\"]]), 2)\n\n# Do it again for a different species\nsub_geodude <- subset(df, species == \"geodude\")\nmean_geodude <- round(mean(sub_koffing[[\"weight_kg\"]]), 2)\n\n# Print results\nmean_koffing; mean_paras; mean_geodude\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.92\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.39\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.92\n```\n:::\n:::\n\n\nYou know this is bad news; copy-pasting leads to mistakes. See how two of those outputs are suspiciously similar? Oops.[^rock]\n\n(Note the use of semi-colons here as well. Past-Matthew seemed to like using these to print multiple results, but I don't use these anymore and don't see anyone else doing it.)\n\nFunctions let you write the meat of the code just once, eliminating the copy-paste error. You can then loop over the variables of interest to get your results.\n\nThe effort of learning to write your own functions is worth it to avoid the problems. See [R for Data Science](https://r4ds.had.co.nz/functions.html) for more on this.\n\nHere's one way to tackle the code repetition above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to calcuate a rounded mean value for a given species\nget_sp_mean <- function(\n  sp, data = df, var = \"weight_kg\", dp = 2\n) {\n  \n  sub_sp <- subset(data, species == sp)  # subset data\n  mean_sp <- round(mean(sub_sp[[var]]), dp)  # get mean\n  return(mean_sp)  # function will output the mean value\n  \n}\n\n# Create a named vector to iterate over\nspecies <- c(\"koffing\", \"paras\", \"geodude\")\nnames(species) <- species  # make it a named vector\n\n# Iterate over the vector to apply the function\npurrr::map(species, get_sp_mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$koffing\n[1] 0.92\n\n$paras\n[1] 5.39\n\n$geodude\n[1] 23.24\n```\n:::\n:::\n\n\nFriendship ended with code repetition. Now bespoke functions and {purrr} are my best friends.\n\n![Empathy.](resources/brehm-1895-loris.jpg){fig-alt=\"Line drawing of la loris staring into the foreground.\" width=\"75%\" fig-align=\"left\"}\n\n## Reflections\n\nI think it's a good exercise to look back and critique your old code. What changes have you made to your coding practices over time?\n\nThere's no shame in writing code that does what you want it to do. I can see why past-Matthew did the things he did. But I'm also glad he stopped doing them.\n\nSee you in ten years to look back on the inevitably terrible code I've written in this blog.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-22 11:47:37 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] crayon_1.5.2      vctrs_0.6.3       cli_3.6.1         knitr_1.43.1     \n [5] rlang_1.1.1       xfun_0.39         purrr_1.0.1       jsonlite_1.8.7   \n [9] bit_4.0.5         glue_1.6.2        htmltools_0.5.5   hms_1.1.3        \n[13] fansi_1.0.4       rmarkdown_2.23    evaluate_0.21     tibble_3.2.1     \n[17] tzdb_0.4.0        fastmap_1.1.1     yaml_2.3.7        lifecycle_1.0.3  \n[21] compiler_4.3.1    htmlwidgets_1.6.2 pkgconfig_2.0.3   rstudioapi_0.15.0\n[25] digest_0.6.33     R6_2.5.1          tidyselect_1.2.0  readr_2.1.4      \n[29] utf8_1.2.3        curl_5.0.1        parallel_4.3.1    vroom_1.6.3      \n[33] pillar_1.9.0      magrittr_2.0.3    tools_4.3.1       bit64_4.0.5      \n```\n:::\n:::\n\n</details>\n\n[^melt]: My darling white plastic MacBook would have melted horribly if set on fire.\n[^beginner]: To be fair, Mick has taught _a lot_ of R classes in his time.\n[^rock]: Especially because Geodude is made of rock and Koffing is basically just made of gas.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}