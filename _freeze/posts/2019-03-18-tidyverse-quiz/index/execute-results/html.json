{
  "hash": "93d4dbe5096959e9033763ba2e63c790",
  "result": {
    "markdown": "---\ntitle: A tidyverse functions quiz with {learnr}\ndate: 2019-03-18\nslug: tidyverse-quiz\ncategories:\n  - learnr\n  - pacman\n  - r\n---\n\n\n![](resources/tidyverse-quiz.gif){fig-alt=\"A demonstration of how to use the quiz by clicking 'get question', answering it, clicking 'submit answer', then fetching a new question with 'start over'.\" width=\"60%\"}\n\n## tl;dr\n\nCan you match the tidyverse function to its package? I used [{learnr}](https://rstudio.github.io/learnr/) innapropriately to hack a ['tidyquiz'](https://github.com/matt-dray/tidyquiz) to test you.\n\nThe app isn't hosted online, but it's in a package that you can install and run locally with the very latest tidyverse functions:\n\n1. `remotes::install_github(\"matt-dray/tidyquiz\")` to install {tidyquiz} (it's a package!)\n1. `library(tidyquiz)` to load it\n1. `learnr::run_tutorial(\"tidy\", package = \"tidyquiz\")` to open in your browser\n\n## The problem\n\nI saw a (probably) tongue-in-cheek tweet from [Ryan Timpe](https://twitter.com/ryantimpe/status/1102666979909996545):\n\n>Hardest part about #rstats package development: remembering which functions are from {dplyr} and which are from {tidyr}.\n\nIt's easy enough to get out of this pickle, but maybe there's a deeper problem? What if the purpose of each [tidyverse](https://www.tidyverse.org/) isn't clear enough?[^wide-long] Is there too much arbitrary jargon in the tidyverse?\n\nEnjoy your existential crisis. Meanwhile, I've made a little quiz to see if you can remember whether `unnest()` is from {dplyr} or {tidyr}[^trick]. In fact, it's an interactive multi-choice test that presents you a random function from the tidyverse and challenges you to select the correct package.\n\n## Step 0: the approach\n\nI wanted:\n\n1. To get a tidy data frame of all the tidyverse package-function combos\n1. A user to be presented with an interactive question about one of these tidyverse functions\n1. The ability to generate a new question from within the document\n1. To share this quiz easily, without a server\n\nRead the rest of this post to see how I tackled these. Or, you know, spoilers:\n\n1. The `tidyverse_packages()` function from [{tidyverse}](https://cran.r-project.org/web/packages/tidyverse/index.html)\n1. The [{learnr}](https://rstudio.github.io/learnr/) package\n1. An [`actionButton()`](http://shiny.rstudio.com/gallery/actionbutton-demo.html) and Shiny reactivity\n1. You can [put a {learnr} quiz in a package](https://rstudio.github.io/learnr/publishing.html) and call it from there!\n\n## Step 1: package-function combos\n\nThe {tidyverse} package is a package that loads packages.[^meme] It's a convenient way to load the eight core packages of the tidyverse.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(tidyverse))\n```\n:::\n\n\nBut there's more than these core eight. To access a list of functions for each package, we first need to load all the packages. We can get a character vector of them all with `tidyverse_packages()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_pkgs <- tidyverse_packages()\ntidy_pkgs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"broom\"         \"conflicted\"    \"cli\"           \"dbplyr\"       \n [5] \"dplyr\"         \"dtplyr\"        \"forcats\"       \"ggplot2\"      \n [9] \"googledrive\"   \"googlesheets4\" \"haven\"         \"hms\"          \n[13] \"httr\"          \"jsonlite\"      \"lubridate\"     \"magrittr\"     \n[17] \"modelr\"        \"pillar\"        \"purrr\"         \"ragg\"         \n[21] \"readr\"         \"readxl\"        \"reprex\"        \"rlang\"        \n[25] \"rstudioapi\"    \"rvest\"         \"stringr\"       \"tibble\"       \n[29] \"tidyr\"         \"xml2\"          \"tidyverse\"    \n```\n:::\n:::\n\n\n<div class=\"tip\"> \n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nI re-rendered this post in August 2023, when more packages had been added to the tidyverse. For example, the {conflicted} package, which is why I have to namespace-qualify my use of `filter()` later in this post!\n</div><p>\n\nWe can pass this character vector to `p_load()`. This convenient function from [{pacman}](https://cran.r-project.org/web/packages/pacman/vignettes/Introduction_to_pacman.html) installs and loads them all for us.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\n\np_load(\n  char = tidy_pkgs,\n  character.only = TRUE  # read elements of character vector\n)\n```\n:::\n\n\nNow we can get the functions from each package by mapping over them with [{purrr}](https://purrr.tidyverse.org/) and {pacman}'s `p_functions()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_funs <- tidy_pkgs %>% \n  enframe(name = NULL, value = \"package\") %>%  # make tibble\n  mutate(\n    functions = map(\n      package,  # for each package...\n      ~p_functions(.x, character.only = TRUE)  # ...get the functions within\n    )\n  ) %>% \n  unnest()  # unpack the listcol elements\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using `unnest()`.\nℹ Please use `cols = c(functions)`.\n```\n:::\n:::\n\n\nHere's a small sample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_n(tidy_funs, 10)  # random sample\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   package    functions          \n   <chr>      <chr>              \n 1 ggplot2    draw_key_abline    \n 2 ggplot2    geom_curve         \n 3 cli        pb_percent         \n 4 httr       oauth_service_token\n 5 conflicted conflict_prefer    \n 6 ggplot2    GeomErrorbar       \n 7 cli        bg_red             \n 8 rstudioapi documentSaveAll    \n 9 httr       hmac_sha1          \n10 dbplyr     sql_quote          \n```\n:::\n:::\n\n\nOut of interest we can look at the packages with the most and fewest functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(tidy_funs, package, sort = TRUE) %>% slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  package       n\n  <chr>     <int>\n1 ggplot2     536\n2 rlang       440\n3 dplyr       293\n4 cli         231\n5 lubridate   205\n```\n:::\n\n```{.r .cell-code}\ncount(tidy_funs, package) %>% arrange(n) %>% slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  package        n\n  <chr>      <int>\n1 dtplyr         2\n2 conflicted     5\n3 tidyverse      6\n4 broom          9\n5 ragg          10\n```\n:::\n:::\n\n\nAnother source of confusion might be that some functions exist in multiple packages. How many functions?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(tidy_funs, functions, sort = TRUE) %>% \n  dplyr::filter(n > 1) %>%\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 111\n```\n:::\n:::\n\n\nOkay, we have our data set, so let's get quizzical.\n\n## Step 2: interactive questions with {learnr}\n\nThe [{learnr} package](https://rstudio.github.io/learnr/) helps you turn an R Markdown document into an interactive tutorial with a little help from Shiny. One option is to create a multiple-choice question, which is exactly what we need.\n\nI should say that {learnr} wasn't really intended for what I've done -- it's better suited to longform tutorials -- but using it means that I didn't have to write the logic for a multi-choice quiz question. Shrug. \n\nHaving installed the package and [started a {learnr}-flavoured R Markdown](https://rstudio.github.io/learnr/#getting_started)[^learnr-rmd] we can create a question inside a code chunk in this form:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquiz(\n  caption = \"Question 1\",\n  question(\n    text = \"What is Pokemon #399?\",  # question\n    answer(\"Bidoof\"), correct = TRUE),  # right answer\n    answer(\"Drifloom\"),   # wrong\n    answer(\"Pyukumuku\"),  # wrong\n    answer(\"Rayquaza\"),   # wrong\n    random_answer_order = TRUE  # answers ordered randomly\n  )\n)\n```\n:::\n\n\nBut this example is hard-coded. In our case we want to replace the subject of the question and the answers any time we want to be presented with a new question.\n\nLooks like we'll need a button for users to press to signal that they want a new question.\n\n## Step 3: generate new questions with Shiny\n\nSince {learnr} operates in a Shiny runtime in our R Markdown file, it's no problem to use Shiny's `actionButton()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nactionButton(\"goButton\", \"Get Question\")  # button\n```\n:::\n\n\nYou can press the button in the app to generate a new seed base don the current time and date. The seed is then used to randomly select a new question for the user.\n\nTo make this reactive -- so that nothing will happen until the button is pressed -- we can write Shiny server code in an R Markdown chunk by setting `context=\"server\"` in the chunk options. So here's how we get a new seed after clicking:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseed <- eventReactive(\n  input$goButton,\n  {\n    seed_temp <- as.numeric(Sys.time())\n    return(seed_temp)\n  }\n)\n```\n:::\n\n\nThen our code needs to sample a row from the full data frame of package-function combos and isolate the name of the function the user will be quizzed on. This code is within `eventReactive()` and will only trigger when the button has been activated. Second, we use `renderText()` to take the function name and paste it into a string to create our question. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the reactive element\nfun_name <- eventReactive(\n  input$goButton,  # on input\n  { \n    seed_val <- seed()  # the newly-generated seed value\n    set.seed(seed_val)  # user-selected value is seed value\n    fun_sample <- sample_n(tidy_funs, 1)  # sample a package-function combo\n    fun_name <- select(fun_sample, functions) %>% pull()  # just the function name\n    return(fun_name)  # return the package value\n  }\n)\n\n# Set the output\n# Generate a question that includes the sampled function name \noutput$fun_name_out <- renderText({\n  paste0(\"The function `\", fun_name(), \"` is from which tidyverse package?\")\n})\n```\n:::\n\n\nWe can repeat this for getting the right answer and alter the code slightly to generate a few wrong answers. A wrong answer is selected randomly from the data frame of tidyverse functions, but only once the correct answer and already-selected wrong answers have been removed. I've also coded it so that any package that has a function with the same name -- a conflict -- will also be removed before a 'wrong' answer is chosen. \n\nSo rather than the hard-coded example of a multi-choice question in Step 2, our quiz question code will look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquiz(\n  caption = \"Question \",\n  question(\n    text = as.character(textOutput(\"fun_name_out\")),\n    answer(as.character(textOutput(\"ans_correct_out\")), correct = TRUE),\n    answer(as.character(textOutput(\"ans_wrong1_out\"))),\n    answer(as.character(textOutput(\"ans_wrong2_out\"))),\n    answer(as.character(textOutput(\"ans_wrong3_out\"))),\n    random_answer_order = TRUE\n  )\n)\n```\n:::\n\n\nSo now the text outputs will be rendered into the quiz question and this won't change until the the 'Get Question' button is clicked.\n\nActually, that's sort-of a lie. {learnr} remembers how it's users have performed; it saves their progress. To erase this, we need to click 'Start Over' from the menu pane to clear that memory.\n\n## Get the code\n\nBrowse the code [on GitHub](https://github.com/matt-dray/tidyquiz) and [leave an issue](https://github.com/matt-dray/tidyquiz/issues) with thoughts or suggestions.\n\nFor example, it could definitely be improved if the user got a set of 10 questions that were graded to give a final mark. Maybe I'll implement this one day.\n\nFor now, give it a go and let me know if you ever find out if `drop_na()` is in {dplyr} or {tidyr}.[^trick]\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-08-02 22:56:40 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] xml2_1.3.5          rvest_1.0.3         rstudioapi_0.15.0  \n [4] rlang_1.1.1         reprex_2.0.2        readxl_1.4.2       \n [7] ragg_1.2.5          pillar_1.9.0        modelr_0.1.11      \n[10] magrittr_2.0.3      jsonlite_1.8.7      httr_1.4.6         \n[13] hms_1.1.3           haven_2.5.2         googlesheets4_1.1.1\n[16] googledrive_2.1.1   dtplyr_1.3.1        dbplyr_2.3.2       \n[19] cli_3.6.1           conflicted_1.2.0    broom_1.0.5        \n[22] pacman_0.5.1        lubridate_1.9.2     forcats_1.0.0      \n[25] stringr_1.5.0       dplyr_1.1.2         purrr_1.0.1        \n[28] readr_2.1.4         tidyr_1.3.0         tibble_3.2.1       \n[31] ggplot2_3.4.2       tidyverse_2.0.0    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.3      xfun_0.39         htmlwidgets_1.6.2 gargle_1.5.1     \n [5] tzdb_0.4.0        vctrs_0.6.3       tools_4.3.1       generics_0.1.3   \n [9] fansi_1.0.4       pkgconfig_2.0.3   data.table_1.14.8 lifecycle_1.0.3  \n[13] compiler_4.3.1    textshaping_0.3.6 munsell_0.5.0     fontawesome_0.5.1\n[17] htmltools_0.5.5   yaml_2.3.7        cachem_1.0.8      tidyselect_1.2.0 \n[21] digest_0.6.33     stringi_1.7.12    fastmap_1.1.1     grid_4.3.1       \n[25] colorspace_2.1-0  utf8_1.2.3        withr_2.5.0       scales_1.2.1     \n[29] backports_1.4.1   timechange_0.2.0  rmarkdown_2.23    cellranger_1.1.0 \n[33] memoise_2.0.1     evaluate_0.21     knitr_1.43.1      glue_1.6.2       \n[37] DBI_1.1.3         R6_2.5.1          systemfonts_1.0.4 fs_1.6.3         \n```\n:::\n:::\n\n</details>\n\n[^trick]: Am I tricking you? Is it actually from neither?\n[^wide-long]: Seems [even Hadley gets it wrong](https://twitter.com/gerlach_d/status/1107718881970438144) sometimes.\n[^meme]: The meme writes itself. Or rather, [you can do it for me](https://imgflip.com/memegenerator/Yo-Dawg-Heard-You).\n[^learnr-rmd]: After installing {learnr} you can go to new R Markdown > From Template > Interactive Tutorial.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}