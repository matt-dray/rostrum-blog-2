{
  "hash": "068af63850670114a2a311307f23f0a0",
  "result": {
    "markdown": "---\ntitle: \"Keeping jot's options open\"\ndate: 2025-08-30\nslug: \"jot-options\"\nimage: resources/jot.png\ncategories:\n  - cli\n  - jot\n  - python\n  - uv\n---\n\n\n![](resources/jot.png){fig-align=\"left\" fig-alt=\"Terribly drawn image of the word 'jot' in cursive with a pencil at the end of the letter 't'.  The dot of the letter 'i' is a red love heart.\" width='200px'}\n\n## tl;dr\n\nI've added a small set of options to [jot](https://github.com/matt-dray/jot), my minimal opinionated Python command-line tool that helps me remember stuff.\n\n## Forget me jot\n\nYou may recall [I made a Python CLI tool called jot](https://www.rostrum.blog/posts/2025-08-25-jot/) to help me record work tasks. I go to my terminal and type `jot \"corrected a typo\"` and it gets added to a simple text file with a timestamp.\n\nTo give it a go, I recommend installing [uv](https://docs.astral.sh/uv/) and then install [from GitHub](https://github.com/matt-dray/jot) like `uv tool install git+https://github.com/matt-dray/jot`. \n\n## Opt in\n\nI've been using jot for the past couple of weeks and it's helping me record things I would typically forget about. As a result, I've found it easier to unobscure '[invisible work](https://www.youtube.com/watch?v=HiF83i1OLOM)' and reflect on what I've achieved.\n\nBut my list of jottings is getting harder to manage as it gets longer. There's a couple of things that would make it easier for me: to be able to peek at the past few jottings and to search them for specific terms.\n\nSo, I've added two options and will demonstrate them against some imaginary data:\n\n<details><summary>`breakfast-jot.txt`</summary>\n\n```\n[2025-08-30 09:27] granola and yoghurt\n[2025-08-29 07:47] pancakes, blueberries and maple syrup\n[2025-08-28 08:00] fried egg on sourdough toast\n[2025-08-27 08:06] yoghurt and strawberries\n[2025-08-26 08:19] strawberry jam on toast\n[2025-08-25 08:52] wholemeal toast and poached eggs\n[2025-08-24 09:15] muesli and milk\n[2025-08-23 09:23] muesli with berries and milk\n[2025-08-22 08:13] hash browns and scrambled eggs\n[2025-08-21 07:48] granola and yoghurt\n[2025-08-20 07:54] cereal and milk\n```\n\nBelieve me, my actual breakfast is more boring than this. Also sometimes I have a hobbitesque second breakfast.\n\n</details>\n\nEverything below is correct as of jot v0.2.3, but I may work to improve some features. Feel free to [make suggestions](https://github.com/matt-dray/jot/issues) too.\n\n### 1. List \n\nThe first option is simple: print out the last _n_ jottings. You can use the flag `--list`, or `-l` for short, and then provide an integer for the number of entries to show.\n\nSo let's print the most recent three entries:\n\n\n::: {.cell}\n\n```{.sh .cell-code}\n$ jot -l 3\n```\n:::\n\n```\n[2025-08-30 09:27] granola and yoghurt\n[2025-08-29 07:47] pancakes, blueberries and maple syrup\n[2025-08-28 08:00] fried egg on sourdough toast\n```\n\nThis is handy for a quick peek at the last few things you've been doing.\n\nIt reminds me of returning to games like [_Pokémon FireRed_](https://en.wikipedia.org/wiki/Pok%C3%A9mon_FireRed_and_LeafGreen) after some time away and being given a quick recap.\n\n![_To collect parcels is my real test_ (thanks [Reddit user AIMWSTRN](https://www.reddit.com/r/pokemon/comments/f0m0ne/fire_redleaf_green_were_ahead_of_their_time/)).](resources/previously.png){fig-align=\"left\" fig-alt=\"A greyscale screengrab of the game Pokemon FireRed showing a recap of what the player did before their last save. At the top it says 'previously on your quest'. At the bottom, 'here in Viridian City, Red obtained the item Oak's Parcel. In the centre is an image of the player's sprite in a Pokémart, facing the shopkeeper.\" width='300px'}\n\n### 2. Search \n\nThe second option is also simple. But much more powerful. It lets you search  for words and phrases, powered by [re](https://docs.python.org/3/library/re.html)'s regular-expression handling.\n\nA simple example would be to look for a single word, this time with the `--search` or `-s` flag[^overload]:\n\n\n::: {.cell}\n\n```{.sh .cell-code}\njot -s egg\n```\n:::\n\n```\n[2025-08-28 08:00] fried egg on sourdough toast\n[2025-08-25 08:52] wholemeal toast and poached eggs\n[2025-08-22 08:13] hash browns and scrambled eggs\n```\n\nBut we can use a regular expression to be more specific. We can even specify a date range, thanks to the timestamps. \n\nSo, when did I have eggs last work-week, specifically? Let's use a suitable ~~regeggs~~ regex:\n\n\n::: {.cell}\n\n```{.sh .cell-code}\n$ jot -s \"2025-08-2([5-9]).*egg\"\n```\n:::\n\n```\n[2025-08-28 08:00] fried egg on sourdough toast\n[2025-08-25 08:52] wholemeal toast and poached eggs\n```\n\nWith that regex I'm asking for the string 'egg' used in jottings between 25 and 29 August 2025'[^regeggs].\n\n## Pain in the argparse?\n\nA new learning for me has been [argparse package](https://docs.python.org/3/library/argparse.html), which allows your Python function to accept inputs at the command line.\n\nThat's been crucial for this update to jot (v0.2.3). At the start of the `main()` function I've set up some argparse steps.\n\nTo initiate the parser:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport argparse\n\nparser = argparse.ArgumentParser(\n    prog=\"jot\",\n    description=\"Minimal opinionated Python CLI to jot timestamped thoughts.\",\n    epilog=\"Source: https://github.com/matt-dray/jot\",\n)\n```\n:::\n\n\nThen we can add arguments to the parser. Here's how we do that for the search argument, for which I've written a corresponding `search_jottings()` Python function:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nparser.add_argument(\n    \"-s\",\n    \"--search\",\n    nargs=\"?\",\n    type=str,\n    help=\"search jottings (regex supported)\",\n)\n```\n:::\n\n\nAfter these declarations, we can collect the parsed arguments:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nargs = parser.parse_args()\n```\n:::\n\n\nLater in the body of the `main()` function we can use the named elements of `args` to pass into our Python functions. For our search option, that looks like this:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsearch_jottings(jot_path, args.search)\n```\n:::\n\n\nAs a result of this set up, we also get a nice help file for free with `--help` or `-h`, which should be helpful for users:\n\n\n::: {.cell}\n\n```{.sh .cell-code}\njot -h\n```\n:::\n\n```\nusage: jot [-h] [-l [LIST]] [-s [SEARCH]] [text]\n\nMinimal opinionated Python CLI to jot timestamped thoughts.\n\npositional arguments:\n  text                  text to write to file\n\noptions:\n  -h, --help            show this help message and exit\n  -l [LIST], --list [LIST]\n                        show last n jottings\n  -s [SEARCH], --search [SEARCH]\n                        search jottings (regex supported)\n\nSource: https://github.com/matt-dray/jot\n```\n\n## Jot on\n\nAs I've mentioned before, jot was built by me for me. It's basically feature-complete from my perspective. The plan is to extend it minimally and only as a way to learn more Python. But [I welcome suggestions](https://github.com/matt-dray/jot/issues)!\n\n### Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[project]\nname = \"2025-08-30-jot-options\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\ndependencies = []\n```\n:::\n:::\n\n</details>\n\n[^regeggs]: More literally, it matches the string '2025-08-2', replacing the final digit of the date with 5, 6, 7, 8 or 9; then allows for any number of any characters until it finds the string 'egg'.\n[^overload]: In future I want an argument to limit the number of jottings returned, otherwise we might flood the console. With eggs. Which could get messy.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}