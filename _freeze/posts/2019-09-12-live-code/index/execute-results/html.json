{
  "hash": "c4a4b820046d68834e21240950117cf7",
  "result": {
    "markdown": "---\ntitle: 'The Carpentries: teach with live coding'\ndate: 2019-09-12\nslug: live-code\ncategories:\n  - carpentries\n  - pedagogy\n  - r\n---\n\n\n![An example of hardware carpentry, lol (Wikimedia Commons, CC BY-SA 2.0).](resources/apple1.jpg){fig-alt=\"An early Apple I computer with a wooden chassis.\" width=\"100%\"}\n\n## tl;dr\n\nI learnt a lot about how to teach live coding by becoming a Carpentries instructor. \n\n<div class=\"tip\"> \n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nThis post was [cross-posted to The Carpentries blog](https://carpentries.org/blog/2019/09/live-coding-experience/) on 30 September 2019.\n</div><p>\n\n## Carving new coders\n\n[The Carpentries](https://carpentries.org/about/) is a global non-profit initiative to help build foundational skills in coding and data science. For example, [Software Carpentry](https://software-carpentry.org/) contains [lessons about the shell, git, R and Python](https://software-carpentry.org/lessons/), while [Data Carpentry](https://datacarpentry.org/) and [Library Carpentry](https://librarycarpentry.org/) teach more domain-specific knowledge.\n\nI took part in a two-day remote workshop to learn how to become a badged Carpentries instructor. There was a strong focus on understanding how people learn and how best to teach them to maintain motivation.\n\nThe schedule and materials from the workshop [are available openly online](https://carpentries.github.io/instructor-training/). I encourage you to take a look and [consider becoming an instructor yourself](https://carpentries.org/become-instructor/).\n\n## Whittling down the complexity\n\nI learnt a lot from the part of the workshop about live coding and wanted to share the experience.\n\nThe Carpentries use [a specific workshop format](https://carpentries.org/workshops/) with an emphasis on using participatory live coding. This means people follow along with the instructor who is sharing their code on a screen at the front of the room. There are no slideshows to sit through, so no ['death by PowerPoint'](https://dilbert.com/strip/2010-02-22).\n\nThere are some features of live coding that make it conducive to learning:\n\n* it slows down the pace so all learners can keep up\n* instructors must explain what they're doing with every line, encouraging detailed explanation\n* learners become familiarised with running code given the particulars of their machine and software\n* it's beneficial for learners to see the instructor make mistakes and correct them\n\nI recommend looking at [The Carpentries top ten tips for participatory live coding](https://carpentries.github.io/instructor-training/14-live/index.html#top-ten-tips-for-participatory-live-coding-in-a-workshop), which is a short but excellent resource to make sure people get the most out of your session.\n\n## Say what you saw\n\nYou can probably remember a workshop that you enjoyed and learnt a lot from. Maybe you can think of one that didn't go so well. What was the difference? How can you, as an instructor, engage with participants and motivate learning?\n\nIn [the 'live coding is a skill' lesson](https://carpentries.github.io/instructor-training/14-live/index.html) we watched two contrasting videos staged by [Lex Nederbragt](https://lexnederbragt.com/about)[^lex] that show an instructor live-coding in front of a class.\n\nThese videos are linked in the sections below. Pay attention to whether they follow the [top tips for live coding](https://carpentries.github.io/instructor-training/14-live/index.html#top-ten-tips-for-participatory-live-coding-in-a-workshop) in particular.\n\n### Clamp down on negative behaviours\n\nFirst, take a look at [this video of an instructor who has room to improve](https://www.youtube.com/embed/bXxBeNkKmJE). \n\n<div align=\"center\">\n   <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/bXxBeNkKmJE\" frameborder=\"0\" allowfullscreen>\n   </iframe>\n</div>\n\nWhat did you notice? What would make it difficult for you to engage?\n\nFor example, the instructor didn't:\n\n* check if everyone could see the small white-on-black text on the screen\n* explain each line as it was executed\n* turn off notifications on their computer and phone\n* notice a participant's sticky note (which [signals that help is needed](https://carpentries.github.io/instructor-training/14-live/#sticky-notes))\n\nThese are all behaviours that can be improved upon given feedback and reflection.\n\n### Make it plane\n\n[The second video](https://www.youtube.com/embed/SkPmwe_WjeY) demonstrated more positive behaviours. \n\n<div align=\"center\">\n  <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SkPmwe_WjeY\" frameborder=\"0\" allowfullscreen>\n  </iframe>\n</div>\n\nFor example, the instructor:\n\n* explained each line as it was being typed\n* re-sized the shell so people will always see the last-typed line\n* physically pointed out things on the projector screen to reinforce what was happening in the code\n* made an error, but talked it through\n\nThis time the instructor considered the needs of the audience and kept them engaged.\n\n## Hammer it home\n\nWe then did short, three-minute, live-coding demos of Carpentries materials in small groups. We [provided feedback](https://carpentries.github.io/instructor-training/11-practice-teaching/index.html) to help each other improve and engage better with learners.\n\nWe ran the demo twice each: [the first time](https://carpentries.github.io/instructor-training/14-live/index.html) was relatively cold with little preparation, but for [the second attempt](https://carpentries.github.io/instructor-training/17-performance/index.html) we had a chance to react to the feedback and to think about [the teaching demo assessment rubric](https://carpentries.github.io/instructor-training/demos_rubric/).\n\n### Sanding the rough edges\n\nI chose to do the ['exploring data frames'](http://swcarpentry.github.io/r-novice-gapminder/05-data-structures-part2/index.html) episode of the [R for Reproducible Scientific Research lesson](http://swcarpentry.github.io/r-novice-gapminder/) of [Software Carpentry](https://software-carpentry.org/).\n\nPositive feedback from my first attempt included that I:\n\n* made sure everyone could see what was on my screen and it was at a sufficient zoom level (I had reset RStudio to its defaults because this is what beginners would see)\n* gave the learning objectives and recap of the previous session to remind people what we were doing and what we had done already\n* executed code line by line at an appropriate speed with clear instructions\n\nSome points to improve upon where that I:\n\n* didn't say out loud the keyboard shortcut that I was using to execute the lines\n* said that the `c()` function was for 'concatenating' elements into vectors, which is a word that some people may not be familiar with\n* used the word 'simply' when describing how to do something, a phrase that could undermine a learner's progress if they aren't able to complete that task (a case of an 'expert blind spot', as [discussed in the 'expertise and instruction' lesson](https://carpentries.github.io/instructor-training/03-expertise/#expertise-and-teaching) of the workshop)\n\n### Nailing it\n\nI reacted to the feedback to help improve things for my second live-coding demo. For example, I:\n\n* said out-loud every action I was doing, including physical key presses when necessary (e.g. \"and run this line with the command and enter shortcut\")\n* avoided phrases like 'simply do this' and 'just do that'\n* said that the 'c' in the `c()` function means to 'combine' rather than to 'concatenate'[^c]\n\nI also did a couple of extra things:\n\n* added three lines of comments at the top of the file to explain the objectives and goals\n* pre-loaded an object into the environment (they learnt how to do this in the previous session) to avoid a slightly awkward  explanation at the beginning\n* expanded my RStudio window so more code be seen at once\n\nThe second attempt was well-received, thanks to feedback and a greater appreciation of the audience's needs.\n\n## I axe one thing of you\n\nI got a lot out of the workshop and will be continuing [the checkout process](https://carpentries.github.io/instructor-training/checkout/) to get badged as a Carpentries instructor.\n\nDo take a look at [the workshop materials](https://carpentries.github.io/instructor-training/), particularly the [top ten tips for participatory live coding](https://carpentries.github.io/instructor-training/14-live/index.html#top-ten-tips-for-participatory-live-coding-in-a-workshop), and [consider becoming an instructor yourself](https://carpentries.org/become-instructor/).\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-24 20:25:27 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.33     rlang_1.1.1       fontawesome_0.5.1 evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^lex]: [Lex Nederbragt](https://lexnederbragt.com/about) is an instructor with [many contributions to The Carpentries](https://zenodo.org/search?page=1&size=20&q=lex%20nederbragt&type=lesson). I also recommend you [check out the 'good enough practices in scientific computing' paper](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510), of which he is an author.\n[^c]: To explain: [the help page for `c()`](https://stat.ethz.ch/R-manual/R-patched/library/base/html/c.html) actually says 'combine' in the title---'Combine Values into a Vector or List'---but also says that the elements passed to it are 'the objects to be concatenated'.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}