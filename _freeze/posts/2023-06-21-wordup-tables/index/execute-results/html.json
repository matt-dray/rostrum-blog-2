{
  "hash": "e5b97a523969bbe030d77d486b4dfbf9",
  "result": {
    "markdown": "---\ntitle: Convert a Word table to Markdown\ndate: 2023-06-21\nslug: wordup-tables\ncategories:\n  - clipr\n  - markdown\n  - ms-office\n  - public-sector\n  - quarto\n  - r\n  - wordup\n---\n\n::: {.cell}\n\n:::\n\n\n![](resources/wordup.gif){fig-alt=\"A gif that shows a table of numbers being copied. Then  a function called table_to_govspeak is run in an RStudio window and the output is a special Markdown version of that copied table.\" width=\"100%\"}\n\n## tl;dr\n\nI made a function that shouldn't need to exist in an ideal world: it takes a copied Microsoft Word table and outputs a Markdown version (well, a [Govspeak](https://govspeak-preview.publishing.service.gov.uk/guide) version). \n\n## Govspeak when you're spoken to\n\nI've written about three painful things recently: \n\n1. Forcing data scientists to [expose their tools](https://www.rostrum.blog/2023/06/13/panic-in-the-toolshed/) so we can all use and learn from them.\n1. ['Rectangularising' tables scraped out of a Word document](https://www.rostrum.blog/2023/06/13/panic-in-the-toolshed/) via the {officer} package.\n1. Easier ways to [coerce dataframe columns to their 'intended' data type](https://www.rostrum.blog/2023/04/23/type-convert/).\n\nToday I bring you a terrible Cerberus with these three heads[^cerberus].\n\nThe challenge: sometimes public sector statisticians produce Word documents that need to be converted to a special type of simplified plaintext Markdown, called [Govspeak](https://govspeak-preview.publishing.service.gov.uk/guide), before they can be uploaded for publication as HTML files on GOV.UK[^rap]. \n\nThis is fine: we have specific publishing specialists who can take care of it. It can be a little tedious, however. What if we could speed up and make more efficient the process of converting from Word to Govspeak?\n\nThere's a specific [Govspeak converter](https://govspeak-preview.publishing.service.gov.uk/) online that you can paste into. But it doesn't have full coverage of the things that might appear in a Word doc, including tables. Other online converters exist, but I don't think we should rely on third parties that are probably intended for producing general Markdown rather than Govspeak, specifically\n\n## Markdown? Word up.\n\nI've started an R package called [{wordup}](https://github.com/matt-dray/wordup) that aims to take a Word document and convert it to Govspeak. It's early days in the sense that it doesn't yet do, well... very much. But I thought the package name was funny (if unoriginal) and worth squatting. Maybe I'll never get around to developing it, who knows.\n\nTo install (which is really not worth it right now, unless you want to [raise an issue](https://github.com/matt-dray/wordup/issues) or pull request): \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/wordup\")\nlibrary(wordup)\n```\n:::\n\n\nFor now, the principle is that you can unzip a Word document to expose a bunch of xml files (yet another thing I've been [writing about recently](https://www.rostrum.blog/2023/06/11/apple-health-redux/), lol) that contain all the information needed to build the Word document[^unzip]. As such, you can read that xml and extract all the information, styles, etc, and massage it programmatically into Govspeak format.\n\nPart of the process will involve taking a Word table, specifically, and converting it to a [Govspeak-friendly form](https://www.gov.uk/guidance/how-to-publish-on-gov-uk/markdown#tables). I figured this might be a nice standalone tool in its itself, so I had a stab at what it could look like.\n\n## Fantabulars\n\nSo right now the `wordup::table_to_govspeak()` function (whose name could change at any time) does three things:\n\n1. Handles inputs.\n1. Guesses data types.\n1. Applies extra styles.\n\nYou can either (a) copy-paste a Word table into the function, or (b) simply copy it to the clipboard, where it can be read by the function using [the {clipr} package](http://matthewlincoln.net/clipr/). The function will take the string—which is basically tabs (`\\t`) to indicate gaps between cells and newlines (`\\n`) to indicate rows—and reorient it initially into a dataframe.\n\nOf course, all the columns will be character-class at this point. We can immediately run `type.convert()` over the whole dataframe to coerce each column to a more appropriate data type, if appropriate. So a character column composed of `c(\"10\", \"20\", \"30)` will become a numeric column of values `c(10, 20, 30)`. But this doesn't work for numeric values that have symbols in them, like commas as thousands separators (`1,200`), per cent symbols (`82%`) and placeholder markers to indicate things like suppressed values (`[c]`)[^guidance]. To get around this, we can strip the nuisance characters and then see if what remains looks like a number.\n\nFinally, there's some specific features of Govspeak tables that need attention. It's acceptable to have row labels, where each value in every cell of the first column should be prefaced with an octothorpe (`#`), and totals columns, where the entire row should be emboldened with double-asterisks (`**`) either side of the cells' values.\n\nWhat results can be sort of... magic really. You copy a Word table in its entirety to your clipboard, run the function, and bang: the Govspeak Markdown is returned. You can see this in action in the gif at the top of this page.\n\nSo I can literally copy a table like this to my clipboard:\n\n| Column 1 | Column 2 | Column 3 | Column 4 | Column 5 |\n| ------- | ------: | ------: | ------: | ------: |\n| X | 100 | 1,000 | 1% | 15 |\n| Y | 200 | 2,000 | 2% | 12 |\n| Z | 300 | 3,000 | 3% | [c] |\n| Totals | 600 | 6,000 | 6% | [c] |\n\nAnd run this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwordup::table_to_govspeak()\n```\n:::\n\n\nTo print this (and have it copied to your clipboard as the message says):\n\n```\n| Column 1 | Column 2 | Column 3 | Column 4 | Column 5 |\n| ------- | ------: | ------: | ------: | ------: |\n| X | 100 | 1,000 | 1% | 15 |\n| Y | 200 | 2,000 | 2% | 12 |\n| Z | 300 | 3,000 | 3% | [c] |\n| Totals | 600 | 6,000 | 6% | [c] |\nThe output table has been written to the clipboard.\n```\n\nBoom. Note the crucial feature that the third, fourth and fifth columns are recognised as numeric---despite containing the strings `,`, `%` and `[c]`---and therefore right-aligned (`------:`). This is entirely due to the argument `ignore_regex`, which defaults to removing commas, percentage symbols or anything in square brackets before it guesses what data type the column is[^readr].\n\nAnd we can do fancy things like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwordup::table_to_govspeak(\n  has_row_titles = TRUE,\n  totals_rows = 4L\n)\n```\n:::\n\n\nWhich outputs this thing:\n\n```\n| Column 1 | Column 2 | Column 3 | Column 4 | Column 5 |\n| ------- | ------: | ------: | ------: | ------: |\n| # X | 100 | 1,000 | 1% | 15 |\n| # Y | 200 | 2,000 | 2% | 12 |\n| # Z | 300 | 3,000 | 3% | [c] |\n| # **Totals** | **600** | **6,000** | **6%** | **[c]** |\nThe output table has been written to the clipboard.\n```\n\nOf course, in practice this might get a little more complicated if you need to manually specify in the function declaration that there's a column of row titles or some totals rows. Pish-posh. The point is that I think this is probably better than trying to (a) write the Govspeak table by hand or (b) trying to use the Govspeak converter, which just doesn't work for this task. This also has mild, opinionated, Govspeak-related benefits over using a straightforward `knitr::kable()`.\n\nIs this perfect? Ahaha, no. There's a lot to add or improve, but I think this is a decent start and solves a (niche) problem for now[^welcome].\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-04 09:56:28 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] wordup_0.0.0.9000\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^rap]: In case you were wondering: yes, this is a 'solved' problem where teams use [Reproducible Analytical Pipelines (RAP)](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/) to produce statistical publications. They can convert directly from R Markdown to Govspeak using something like [{mojspeakr}](https://github.com/moj-analytical-services/mojspeakr). But not every team is using R to produce their statistical publications. The wider R community on social media may be aware of [Bruno's recently-released book](https://rap4mads.eu/) on the principles of RAP. The RAP movement [started in the UK government](https://dataingovernment.blog.gov.uk/2017/03/27/reproducible-analytical-pipeline/) but appears to be taking off internationally.\n[^unzip]: This technique is currently in the news (if you move in certain geeky circles, which you do, because you're reading this), because an unzipped Excel file appeared to [expose a... suspicious sequence of formulae executions](https://datacolada.org/109) that underpinned a published academic paper.\n[^guidance]: There's specific [best-practice government guidance](https://analysisfunction.civilservice.gov.uk/policy-store/symbols-in-tables-definitions-and-help/) for the symbols that should be used for this purpose, such as '[c]' to mean that the data is suppressed due to reasons of confidentiality.\n[^cerberus]: Wrangling Word content with R is certainly a Herculean labour, amirite, classics fans? I know there are classicists who write R. Own up. There's no shame. Adriana is one of you.\n[^welcome]: I think you might be used to that by now if you've read this blog more than once.\n[^readr]: There are pre-existing functions that can parse numbers containing strings, like `readr::parse_number(\"10%\")` returns `10`. But this particular function can't handle arbitrary strings in your number, like the placeholder `[c]` used to represent suppressed values.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}