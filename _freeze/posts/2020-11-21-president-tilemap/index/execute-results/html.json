{
  "hash": "f834a1eb6579f37925dc639ed98cb1a4",
  "result": {
    "markdown": "---\ntitle: The US electoral college with {tilegramsR}\ndate: 2020-11-21\nslug: president-tilegram\ncategories:\n  - dataviz\n  - geospatial\n  - ggtext\n  - r\n  - tilegramsR\n---\n\n::: {.cell}\n\n:::\n\n\n![](resources/tile.png){fig-alt=\"A zoomed-in portion of a tilegram map, with hexagons coloured red and blue to indicate the winning party.\" width=\"100%\"}\n\n## tl;dr\n\n[The {tilegramsR} package](https://bhaskarvk.github.io/tilegramsR/) for R contains a geospatial object for mapping [the US electoral college](https://en.wikipedia.org/wiki/United_States_Electoral_College). I amended it for states that use the [congressional district method](https://www.fairvote.org/maine_nebraska) and generated a minimalist map of the results for the 2020 US presidential election.[^us]\n\n## Send a cartogram\n\nIt's usually best to scale subnational divisions by voter count when visualising election results. This is because election outcomes are decided by people, not land area. [Cartograms](https://en.wikipedia.org/wiki/Cartogram) are a good choice for this: they're maps where geographic units are resized according to something other than area.\n\nOne format of the cartogram is the tilegram. Tilegrams disregard the shape of the geographic units entirely and represent them with uniformly-shaped 'tiles' instead. Squares are often used, but hexagons give you a bit more freedom to pack the units and approximate geographic location. [Hexagons are the bestagons](https://www.youtube.com/watch?v=thOifuHs6eY), after all.\n\nA tilegram may end up looking strange if you're used to looking at Mercator-projected maps, but it's a better reflection of relative voter contribution.\n\n## Back to college\n\nSo we could make a tilegram of the recent US presidential election with a separate shape for each state. Right? Well, yeah, but there's a better way.\n\nThe US presidential election is special because the total vote count doesn't directly elect the leader. Instead there's [an 'electoral college' system](https://en.wikipedia.org/wiki/United_States_Electoral_College). Put extremely simply, each state has a number of representatives ('electors') that are sent to vote for the candidate that got the majority vote share in their state. The winning national candidate has the majority of state electors declaring for them (270 of 538).\n\nSo it's electors, not states, that should be represented by each unit in a tilegram of US presidential election results.\n\n## Tile style\n\nFortunately for us, [the {tilegramsR} package by Bhaskar V. Karambelkar](https://bhaskarvk.github.io/tilegramsR/) has an `sf_FiveThirtyEightElectoralCollege`[^f38] object that contains tilegram data for the US where each elector is represented by one hexagon.\n\nIt's [an sf-class object](https://r-spatial.github.io/sf/), which means it contains tidy geospatial information: each row is an elector, with a column for the state abbreviation and a column for the hexagon geometries.\n\nBefore we take a look, let's load the packages used in this post.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\n  # Data wrangling\n  library(dplyr)       # data manipulation\n  library(stringr)     # string manipulation\n  # Mapping\n  library(tilegramsR)  # tilegram objects\n  library(ggplot2)     # plotting\n  library(ggtext)      # text rendering in plots\n  library(ggthemes)    # has a map theme\n  library(patchwork)   # organise plots\n})\n```\n:::\n\n\nThe default print method for sf-class objects shows us a few things. We can see there are 538 two-dimensional shapes: one for each elector. Note that this map is built in arbitrary space: the bounding box doesn't reflect actual geography and there's no coordinate reference system (CRS). The preview of the features shows us each row of the dataset with each state labelled with its abbreviation (CA is California, for example).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsf_FiveThirtyEightElectoralCollege\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 538 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 293.6239 ymin: 16.95238 xmax: 2495.803 ymax: 1661.333\nCRS:           NA\nFirst 10 features:\n   FID state tilegramVa                       geometry\n1   02    AK          3 POLYGON ((293.6239 237.3333...\n2   06    CA         55 POLYGON ((352.3486 847.619,...\n3   06    CA         55 POLYGON ((322.9862 796.7619...\n4   06    CA         55 POLYGON ((352.3486 745.9048...\n5   06    CA         55 POLYGON ((322.9862 695.0476...\n6   06    CA         55 POLYGON ((352.3486 644.1905...\n7   02    AK          3 POLYGON ((322.9862 288.1905...\n8   02    AK          3 POLYGON ((352.3486 237.3333...\n9   06    CA         55 POLYGON ((411.0734 949.3333...\n10  06    CA         55 POLYGON ((381.711 898.4762,...\n```\n:::\n:::\n\n\nSimilarly, there's an object called `sf_FiveThirtyEightElectoralCollege.states` that contains geometry to delineate state boundaries in the `sf_FiveThirtyEightElectoralCollege` object. We can combine these and look at a quick tilegram of the US electoral college using {ggplot2} and the special `geom_sf()` geom for visualising geospatial data stored in sf format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = sf_FiveThirtyEightElectoralCollege) + \n  geom_sf(\n    data = sf_FiveThirtyEightElectoralCollege.states,\n    color = \"black\", alpha = 0, size = 1\n  ) + \n  theme_map()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/college-538-map-1.png){width=672}\n:::\n:::\n\n\nYou can see that each elector is represented by a single hexagon and groups of hexagons are combined into states (thick outlines). Hexagons are placed roughly in the familiar shape of the US despite the change to the apparent area of each one. The non-contiguous regions in the lower left are Alaska (three electors) and Hawaii (four).\n\n## District-structure strictures\n\nIn general, the winner of the popular vote within a state gains all the electors for that state. There are two exceptions: Nebraska (NE) and Maine (ME). These states use [the 'congressional district method'](https://www.fairvote.org/maine_nebraska).\n\nThe popular-vote winner gets two electors by default and the remaining electors are won by the winner of the popular vote in each district (three in Nebraska and two in Maine). In other words, the electors from these states could be from more than one party.\n\nThis is sometimes represented in electoral college maps by colouring Nebraska and Maine with stripes of with each party's colour. We can avoid that suboptimal representation with a tilegram because we can individually colour our tiles.\n\nUnfortunately, the `sf_FiveThirtyEightElectoralCollege` doesn't account for the congressional district method, so we'll have to build this in ourselves. We can isolate rows for Nebraska and Maine and then generate a new column to create distinct names for the districts, which we'll number sequentially.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Isolate/update states with the congressional district method\ncdm_sf <- sf_FiveThirtyEightElectoralCollege %>% \n  filter(state %in% c(\"NE\", \"ME\")) %>% \n  mutate(\n    state_cdm = c(\n      \"NE\", \"NE\", \"NE1\", \"NE2\", \"NE3\", \n      \"ME\", \"ME\", \"ME1\", \"ME2\"\n    )\n  ) %>% \n  select(state, state_cdm, everything())\n\n# Preview\ncdm_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 9 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 851.5092 ymin: 932.381 xmax: 2407.716 ymax: 1661.333\nCRS:           NA\n  state state_cdm FID tilegramVa                       geometry\n1    NE        NE  31          5 POLYGON ((851.5092 1000.19,...\n2    NE        NE  31          5 POLYGON ((910.2339 1000.19,...\n3    NE       NE1  31          5 POLYGON ((939.5963 949.3333...\n4    NE       NE2  31          5 POLYGON ((968.9587 1000.19,...\n5    NE       NE3  31          5 POLYGON ((998.3211 949.3333...\n6    ME        ME  23          4 POLYGON ((2290.266 1559.619...\n7    ME        ME  23          4 POLYGON ((2319.628 1610.476...\n8    ME       ME1  23          4 POLYGON ((2348.991 1559.619...\n9    ME       ME2  23          4 POLYGON ((2319.628 1508.762...\n```\n:::\n:::\n\n\nYou can see that we've retained the original `state` column and now also have a `state_cdm` column that contains tiles named by district.\n\nNow we can replace the data for these states in our original sf-class object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Update the original object with the new information\nf38_cdm_sf <- sf_FiveThirtyEightElectoralCollege %>% \n  mutate(state_cdm = state) %>%  # generate column\n  filter(!state %in% c(\"ME\", \"NE\")) %>%  # remove old NE and ME\n  bind_rows(cdm_sf) %>% # bind updated NE and ME \n  select(state, state_cdm, everything())  # relocate cols\n```\n:::\n\n\n## Party time\n\nWe have our geospatial information sorted; now to create vectors of the states won by each candidate as declared by [the Associated Press (AP)](https://blog.ap.org/behind-the-news/understanding-the-election-how-ap-declares-winners) at time of writing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vector of states/districts won by Democrat candidate\nd_states <- c(\n  \"AZ\", \"CA\", \"CO\", \"CT\", \"DC\", \"DE\", \"GA\", \"HI\",\n  \"IL\", \"MA\", \"MD\", \"ME\", \"ME1\", \"MI\", \"MN\", \"NE2\",\n  \"NH\", \"NJ\", \"NM\", \"NV\", \"NY\", \"OR\", \"PA\", \"RI\",\n  \"VA\", \"VT\", \"WA\", \"WI\"\n)\n\n# Vector of states/districts won by Republican candidate\nr_states <- c(\n  \"AK\", \"AL\", \"AR\", \"FL\", \"IA\", \"ID\", \"IN\", \"KS\",\n  \"KY\", \"LA\", \"ME2\", \"MO\", \"MS\", \"MT\", \"NC\", \"ND\",\n  \"NE\", \"NE1\", \"NE3\", \"OH\", \"OK\", \"SC\", \"SD\", \"TN\",\n  \"TX\", \"UT\", \"WV\", \"WY\"\n)\n```\n:::\n\n\nWith this information we can add a couple of columns to our geospatial object: `result` to indicate a `D`emocrat or `R`epublican winner, and the symbolic `colour` of the party (blue for Democrat and red for Republican). We'll refer to this colour column in the plot so we can colour the tiles correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mark districts with winning party and provide colour\nresults_sf <- f38_cdm_sf %>% \n  mutate(\n    result = case_when(\n      state_cdm %in% d_states ~ \"D\",  # Democrat\n      state_cdm %in% r_states ~ \"R\"   # Republican\n    ),\n    colour = case_when(\n      result == \"D\" ~ \"#0000FF\",  # blue\n      result == \"R\" ~ \"#FF0000\"   # red\n    )\n  ) %>% \n  select(state, state_cdm, result, colour, everything())\n\n# Preview\nresults_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 538 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 293.6239 ymin: 16.95238 xmax: 2495.803 ymax: 1661.333\nCRS:           NA\nFirst 10 features:\n   state state_cdm result  colour FID tilegramVa                       geometry\n1     AK        AK      R #FF0000  02          3 POLYGON ((293.6239 237.3333...\n2     CA        CA      D #0000FF  06         55 POLYGON ((352.3486 847.619,...\n3     CA        CA      D #0000FF  06         55 POLYGON ((322.9862 796.7619...\n4     CA        CA      D #0000FF  06         55 POLYGON ((352.3486 745.9048...\n5     CA        CA      D #0000FF  06         55 POLYGON ((322.9862 695.0476...\n6     CA        CA      D #0000FF  06         55 POLYGON ((352.3486 644.1905...\n7     AK        AK      R #FF0000  02          3 POLYGON ((322.9862 288.1905...\n8     AK        AK      R #FF0000  02          3 POLYGON ((352.3486 237.3333...\n9     CA        CA      D #0000FF  06         55 POLYGON ((411.0734 949.3333...\n10    CA        CA      D #0000FF  06         55 POLYGON ((381.711 898.4762,...\n```\n:::\n:::\n\n\n## Gram them tiles\n\nThe plot will be built from our sf-class object that has been edited for the congressional district method and contains the results; the state boundaries from `sf_FiveThirtyEightElectoralCollege.states`; and the title with coloured as a key matching the candidate's party.\n\nNote that Nebraska (centre-left) and Maine (upper-right) are indeed coloured to represent more than one party, given the share of votes in their congressional district systems.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build plot object\np <- ggplot() +\n  geom_sf(  # layer containing district hexagons\n    data = results_sf,\n    fill = results_sf$colour,  # hex interiors\n    color = results_sf$colour  # hex outlines\n  ) + \n  geom_sf(  # layer containing state hexagons\n    data = sf_FiveThirtyEightElectoralCollege.states,\n    color = \"white\",  # state boundaries\n    alpha = 0,  # transparent\n    size = 1  # thickness\n  ) +\n  theme_map() # remove non-data plot elements\n\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-1.png){fig-alt='A map of the US where each state is made of hexagons that represent congressional districts.' width=672}\n:::\n:::\n\n\nI think that's quite pleasing. \n\nWe can add some more contextual information with titles. In particular, we can use the text rendering of {ggtext} to create a subtitle with the candidates' names coloured as a key to the map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +  # the original plot object\n  labs(  # {ggtext} to colour names by party\n    title = \"<span style='font-size:15pt'>\n    US Presidential Election 2020\",\n    subtitle = \"<span style='font-size:10pt'>Electoral college votes for\n    <span style='color:#0000FF;'>Joe Biden</span> (306) and \n    <span style='color:#FF0000;'>Donald Trump</span> (232)\n    </span>\",\n    caption = \"Made with {ggplot2}, {tilemapsR} and {ggtext}\"\n  ) +\n  theme(\n    plot.title = element_markdown(lineheight = 1.1),\n    plot.subtitle = element_markdown(lineheight = 1.1)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-title-1.png){fig-alt='A map of the US where each state is made of hexagins that represent congressional districts. There are more blue than red hexagons. The subtitle says that this equates to 306 Biden votes to 232 Trump votes.' width=672}\n:::\n:::\n\n\n## Zoom! Enhance!\n\nIn case you didn't spot Nebraska and Maine, we can plot these two alone and label them by `state_cdm` to expose the district names. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Quick and dirty function to plot each state\nplot_state <- function(state_abbrev) {\n  \n  # Isolate state data\n  state_sf <- results_sf %>% \n    filter(str_detect(state, paste0(\"^\", state_abbrev)))\n  \n  # Build plot\n  p <- ggplot() +\n    geom_sf(\n      data = state_sf,\n      fill = state_sf$colour, color = state_sf$colour\n    ) +\n    geom_sf_text(  # overlay state abbrev\n      data = state_sf, aes(label = state_cdm),\n      size = 5, color = \"white\"\n    ) +\n    theme_map()\n  \n  # Provide a \n  if (state_abbrev == \"NE\") {\n    p <- p + labs(title = \"Nebraska\")\n  } else if (state_abbrev == \"ME\"){\n    p <- p + labs(title = \"Maine\")\n  }\n  \n  return(p)\n  \n}\n\n# Arrange plots side-by-side with {patchwork}\nplot_state(\"NE\") + plot_state(\"ME\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot2-1.png){width=672}\n:::\n:::\n\n\nNote that the districts aren't necessarily placed in geographically-accurate locations within each state, relatively speaking. But that's okay, because the tilegram is not an accurate representation of geography anyway.\n\n## Development\n\nI've chosen to keep these maps very simple, partly for the aesthetics, but also because the purpose is to communicate the share of electoral college votes with minimal distraction.\n\nYou could do a number of other things to provide further information, like label states with `geom_sf_text()`, colour the tiles by vote share rather than outright winner, or make it interactive with [the {leaflet} package](https://rstudio.github.io/leaflet/) and include mouseovers to show a full breakdown of results.\n\n## Other solutions\n\nYou can find many, many examples of cartograms or other map types used to display the presidential election results. For example, check out:\n\n* [The Wall Street Journal](https://www.wsj.com/election-results-2020/) has a square version of the hexagonal map in this post\n* [The Financial Times](https://ig.ft.com/us-election-2020/) shows a regular map with each state's electoral college contribution overlaid as squares\n* The [BBC](https://www.bbc.co.uk/news/election/us2020/results) and [Reuters](https://graphics.reuters.com/USA-ELECTION/RESULTS-LIVE-US/jbyprxelqpe/) have a regular map with the option to switch to a cartogram with one square per state\n\nLet me know if you seen any particularly good examples.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-18 20:56:59 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] patchwork_1.1.2  ggthemes_4.2.4   ggtext_0.1.2     ggplot2_3.4.2   \n[5] tilegramsR_0.2.0 sf_1.0-14        stringr_1.5.0    dplyr_1.1.2     \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3         generics_0.1.3     class_7.3-22       xml2_1.3.5        \n [5] KernSmooth_2.23-21 stringi_1.7.12     digest_0.6.31      magrittr_2.0.3    \n [9] evaluate_0.21      grid_4.3.1         fastmap_1.1.1      jsonlite_1.8.7    \n[13] e1071_1.7-13       DBI_1.1.3          purrr_1.0.1        fansi_1.0.4       \n[17] scales_1.2.1       cli_3.6.1          rlang_1.1.1        units_0.8-2       \n[21] commonmark_1.9.0   munsell_0.5.0      withr_2.5.0        yaml_2.3.7        \n[25] tools_4.3.1        colorspace_2.1-0   vctrs_0.6.3        R6_2.5.1          \n[29] proxy_0.4-27       lifecycle_1.0.3    classInt_0.4-9     htmlwidgets_1.6.2 \n[33] pkgconfig_2.0.3    pillar_1.9.0       gtable_0.3.3       glue_1.6.2        \n[37] Rcpp_1.0.11        xfun_0.39          tibble_3.2.1       tidyselect_1.2.0  \n[41] rstudioapi_0.15.0  knitr_1.43.1       farver_2.1.1       htmltools_0.5.5   \n[45] rmarkdown_2.23     compiler_4.3.1     markdown_1.7       gridtext_0.1.5    \n```\n:::\n:::\n\n</details><p>\n\n[^us]: Disclaimer: I am not a US citizen.\n[^f38]: The object was created and named for the tilegrams by [fivethirtyeight](https://fivethirtyeight.com/), a company named after the total count of electors in the US electoral college.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}