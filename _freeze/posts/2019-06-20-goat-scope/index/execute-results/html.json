{
  "hash": "c471eb238c64af10de6ea9c564053409",
  "result": {
    "markdown": "---\ntitle: The Mountain Goats with {trelliscopejs}\ndate: 2019-06-20\nslug: goat-scope\ncategories:\n  - dataviz\n  - music\n  - r\n  - spotifyr\n  - trelliscope\n  - trelliscopejs\n---\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"shareagain\" style=\"min-width:300px;margin:1em auto;\" data-exeternal=\"1\">\n<iframe src=\"https://matt-dray.github.io/goat-scope/\" width=\"400\" height=\"300\" style=\"border:FALSE;\" loading=\"lazy\" allowfullscreen></iframe>\n<script>fitvids('.shareagain', {players: 'iframe'});</script>\n</div>\n```\n:::\n:::\n\n\n## tl;dr\n\nI used [{trelliscopejs}](https://hafen.github.io/trelliscopejs/) to make an interactive 'small multiples' display for [The Mountain Goats](http://www.mountain-goats.com/) discography. You can interact with an embedded version above or [click here to open full screen](https://matt-dray.github.io/goat-scope/).\n\n<div class=\"tip\"> \n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nThe {trelliscopejs} package has been superseded by [{trelliscope}](https://github.com/trelliscope/trelliscope).\n</div><p>\n\n## Small multiples\n\nThe [{trelliscopejs}](https://hafen.github.io/trelliscopejs/) R package by [Ryan Hafen](https://ryanhafen.com/) harnesses the power of his [trelliscopejs-lib](https://github.com/hafen/trelliscopejs-lib) JavaScript library.\n\nWhat does it do? It provides an interactive interface for visualising, organising and exploring data visualisations in small multiples.\n\nWhat are 'small multiples'? Rather than over-plotting data for multiple levels of some variable, you can facet by them into separate 'panels' and display the outputs side by side for easy comparison.\n\nRyan has written [documentation](https://hafen.github.io/trelliscopejs/index.html), an [introductory post](https://ryanhafen.com/blog/trelliscopejs/) and has created some trelliscopes using using  [gapminder](http://hafen.github.io/trelliscopejs-demo/gapminder/) and [Pokémon](https://ryanhafen.com/blog/pokemon/) data, for example.[^education] His package is relatively simple to use and does a lot of legwork to provide a nice interface for your data. \n\n## Goat discography\n\n[In a previous post](https://www.rostrum.blog/2019/04/25/gen-tmg-lyrics/) I used the [{spotifyr}](https://www.rcharlie.com/spotifyr/), [{genius}](https://github.com/josiahparry/genius) and [{markovifyR}](https://github.com/abresler/markovifyR) packages to generate new lyrics for the band [The Mountain Goats](https://en.wikipedia.org/wiki/The_Mountain_Goats).\n\nThe data from Spotify is interesting. It has musical information like key and tempo, but also [audio features](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/) like 'danceability' and 'acousticness' scaled from 0 to 1. We also got links to album art in that data set.\n\nI'm going to use these data in this post to provide a trelliscope example. Each panel will be a track; the visualisation will be album artwork rather than a plot; and audio features will be available to sort and filter data.\n\n## Ready the data\n\nWe'll load {trelliscopejs} and some [tidyverse packages](https://www.tidyverse.org/) to help us out.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\n  library(trelliscopejs)\n  library(dplyr)\n  library(readr)\n  library(tidyr)\n})\n```\n:::\n\n\n### Get data and simplify\n\nYou can follow the instructions [in the previous post](https://www.rostrum.blog/2019/04/25/gen-tmg-lyrics/#get-lyrics) to get the data. I'm going to load those data from a pre-prepared [RDS file](https://www.r-bloggers.com/remember-to-use-the-rds-format/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read the file from a local source and check number of columns\nraw_goat <- read_rds(\"resources/goat_discography.RDS\")\nlength(raw_goat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 41\n```\n:::\n:::\n\n\nThere's 41 variables, so let's simplify.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_goat <- raw_goat %>% \n  unnest(available_markets) %>%  # unnest character vector\n  filter(available_markets == \"US\") %>%  # releases from one country only\n  select(\n    track_name, album_name, track_n, album_release_year,  # track detail\n    duration_ms, key_mode, time_signature, # musical info\n    danceability, energy, speechiness, acousticness,  # audio features\n    instrumentalness, liveness, valence, loudness  # audio features\n  ) %>%\n  arrange(desc(energy))  # order by 'energy' audio feature\n\nglimpse(small_goat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 313\nColumns: 15\n$ track_name         <chr> \"Choked Out\", \"Pure Intentions\", \"If You See Light\"…\n$ album_name         <chr> \"Beat the Champ\", \"Bitter Melon Farm\", \"Get Lonely\"…\n$ track_n            <int> 5, 18, 10, 16, 14, 20, 17, 8, 21, 4, 2, 13, 3, 9, 8…\n$ album_release_year <dbl> 2015, 2002, 2006, 2011, 1996, 2012, 2002, 2002, 201…\n$ duration_ms        <int> 102653, 134333, 118013, 167120, 234600, 165840, 137…\n$ key_mode           <chr> \"D major\", \"A major\", \"C major\", \"B minor\", \"D majo…\n$ time_signature     <int> 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, …\n$ danceability       <dbl> 0.565, 0.648, 0.566, 0.422, 0.281, 0.681, 0.592, 0.…\n$ energy             <dbl> 0.951, 0.934, 0.927, 0.903, 0.899, 0.895, 0.884, 0.…\n$ speechiness        <dbl> 0.0808, 0.0989, 0.0642, 0.0682, 0.0526, 0.0253, 0.0…\n$ acousticness       <dbl> 0.000239, 0.646000, 0.002930, 0.000620, 0.262000, 0…\n$ instrumentalness   <dbl> 2.78e-05, 2.14e-01, 8.52e-01, 1.01e-02, 2.72e-02, 4…\n$ liveness           <dbl> 0.1320, 0.3890, 0.1990, 0.3420, 0.2080, 0.1390, 0.4…\n$ valence            <dbl> 0.726, 0.424, 0.324, 0.860, 0.350, 0.970, 0.591, 0.…\n$ loudness           <dbl> -3.970, -15.557, -8.047, -8.562, -9.177, -6.936, -1…\n```\n:::\n:::\n\n\nNote that I've ordered by 'energy'. The trelliscope output being created will be sorted in this variable.\n\n### Album artwork\n\nUnnesting the `available_markets` character vector removed the `album_image` variable, which is a nested data frame with URLs to different-sized album artwork. We can grab unique album image URLs and join them back to our data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngoat_pics <- raw_goat %>%\n  unnest(album_images) %>%  # unnest dataframe fo URLs\n  filter(width == 640) %>%  # just the largest images\n  select(album_name, url) %>%  # simplify dataset\n  distinct(album_name, .keep_all = TRUE)  # one unique entry per album\n\nglimpse(goat_pics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 21\nColumns: 2\n$ album_name <chr> \"In League with Dragons\", \"Goths\", \"Beat the Champ\", \"Trans…\n$ url        <chr> \"https://i.scdn.co/image/3896e2b47b548a33d0c9e9f662011a2a09…\n```\n:::\n:::\n\n\nAnd now to join the album image URLs back to our simplified data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_goat_pics <- left_join(\n  x = small_goat,\n  y = goat_pics,\n  by = \"album_name\"\n)\n\nglimpse(small_goat_pics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 313\nColumns: 16\n$ track_name         <chr> \"Choked Out\", \"Pure Intentions\", \"If You See Light\"…\n$ album_name         <chr> \"Beat the Champ\", \"Bitter Melon Farm\", \"Get Lonely\"…\n$ track_n            <int> 5, 18, 10, 16, 14, 20, 17, 8, 21, 4, 2, 13, 3, 9, 8…\n$ album_release_year <dbl> 2015, 2002, 2006, 2011, 1996, 2012, 2002, 2002, 201…\n$ duration_ms        <int> 102653, 134333, 118013, 167120, 234600, 165840, 137…\n$ key_mode           <chr> \"D major\", \"A major\", \"C major\", \"B minor\", \"D majo…\n$ time_signature     <int> 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, …\n$ danceability       <dbl> 0.565, 0.648, 0.566, 0.422, 0.281, 0.681, 0.592, 0.…\n$ energy             <dbl> 0.951, 0.934, 0.927, 0.903, 0.899, 0.895, 0.884, 0.…\n$ speechiness        <dbl> 0.0808, 0.0989, 0.0642, 0.0682, 0.0526, 0.0253, 0.0…\n$ acousticness       <dbl> 0.000239, 0.646000, 0.002930, 0.000620, 0.262000, 0…\n$ instrumentalness   <dbl> 2.78e-05, 2.14e-01, 8.52e-01, 1.01e-02, 2.72e-02, 4…\n$ liveness           <dbl> 0.1320, 0.3890, 0.1990, 0.3420, 0.2080, 0.1390, 0.4…\n$ valence            <dbl> 0.726, 0.424, 0.324, 0.860, 0.350, 0.970, 0.591, 0.…\n$ loudness           <dbl> -3.970, -15.557, -8.047, -8.562, -9.177, -6.936, -1…\n$ url                <chr> \"https://i.scdn.co/image/ecf370a7190fa0673b0aa2ff0c…\n```\n:::\n:::\n\n\nSo the album artwork URL has been added to the `url` column.\n\n### Prep for trelliscope\n\nNow we have a nice [tidy data frame](https://r4ds.had.co.nz/tidy-data.html), but I'm going to make a couple more changes to prepare the data for trelliscoping[^verb]. First, I need to use the `img_panel()` function to declare that the album images should be the thing being visualised in each panel. Then I can rename the variables to make them look nicer when displayed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprepared_goat <- small_goat_pics %>% \n  mutate(panel = img_panel(url)) %>%  # identify as viz for panel\n  rename_all(tools::toTitleCase) %>%  # first letter capitalised\n  rename(\n    Track = Track_name,\n    Album = Album_name,\n    `Track #` = Track_n,\n    Year = Album_release_year,\n    `Duration (ms)` = Duration_ms,\n    `Key mode` = Key_mode,\n    `Time sig` = Time_signature\n  ) %>% \n  select(-Url)  # discard unneeded variable\n```\n:::\n\n\n## Generate trelliscope\n\nNow we're ready. The call to `trelliscope()` takes the data set and then a bunch of other arguments like a title and subtitle and the default state for the number of rows and columns of panels and the default data to show on the panel under the visualisation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrelliscope(\n  prepared_goat,\n  name = \"The Mountain Goats discography\",\n  desc = \"Explore the Mountain Goats backcatalogue and filter and sort by audio features\",\n  md_desc = \"[The Mountain Goats](http://www.mountain-goats.com/) are a band. Data were collected from [Genius](https://genius.com/) and [Spotify](https://www.spotify.com/) APIs using the [{genius}](https://github.com/josiahparry/genius) and [{spotifyr}](https://www.rcharlie.com/spotifyr/) R packages, respectively.\",\n  nrow = 2, ncol = 5,  # arrangement of panels\n  state = list(labels = c(\"Track\", \"Album\", \"Track #\", \"Year\", \"Energy\")),  # display on panels\n)\n```\n:::\n\n\nI've embedded the trelliscope at the top of this post, but I recommend you [click here to open it full screen](https://matt-dray.github.io/goat-scope/).\n\nExplore the data by altering the defaults in the grid, labels, filter and sort buttons in the left-hand navigation panel. Cycle through the panels with the arrows in the upper right. Hit the '?' button in the upper right to get more information on trelliscope and its shortcuts.\n\n### Host your trelliscope\n\nUse the argument `path = \"<file path to save to>\"` in the `trelliscope()` function to save the files (I learnt this from [a GitHub issue](https://github.com/hafen/trelliscopejs/issues/24#issuecomment-276883861)). You can then host the folder's contents somewhere. I put mine in [a GitHub repo](https://github.com/matt-dray/goat-scope) so it could be served via GitHub Pages.\n\n## Energy\n\nI've ordered the panels of the trelliscope by the 'energy' of the tracks; most energetic first. The top track for energy is one of my favourites: 'Choked Out' from 'Beat the Champ'. Here's an embedded Spotify snippet.\n\n<iframe src=\"https://open.spotify.com/embed/track/6VAOhkoZypZtGFgrnIGr48\" width=\"300\" height=\"380\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-08-02 16:18:25 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] tidyr_1.3.0         readr_2.1.4         dplyr_1.1.2        \n[4] trelliscopejs_0.2.6\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.3            jsonlite_1.8.7          compiler_4.3.1         \n [4] crayon_1.5.2            webshot_0.5.5           tidyselect_1.2.0       \n [7] progress_1.2.2          scales_1.2.1            yaml_2.3.7             \n[10] fastmap_1.1.1           ggplot2_3.4.2           R6_2.5.1               \n[13] autocogs_0.1.4          generics_0.1.3          knitr_1.43.1           \n[16] backports_1.4.1         htmlwidgets_1.6.2       checkmate_2.2.0        \n[19] tibble_3.2.1            munsell_0.5.0           xaringanExtra_0.7.0    \n[22] tzdb_0.4.0              pillar_1.9.0            rlang_1.1.1            \n[25] utf8_1.2.3              xfun_0.39               cli_3.6.1              \n[28] withr_2.5.0             magrittr_2.0.3          digest_0.6.33          \n[31] grid_4.3.1              rstudioapi_0.15.0       fontawesome_0.5.1      \n[34] base64enc_0.1-3         DistributionUtils_0.6-0 hms_1.1.3              \n[37] mclust_6.0.0            lifecycle_1.0.3         prettyunits_1.1.1      \n[40] vctrs_0.6.3             evaluate_0.21           glue_1.6.2             \n[43] fansi_1.0.4             colorspace_2.1-0        purrr_1.0.1            \n[46] rmarkdown_2.23          tools_4.3.1             pkgconfig_2.0.3        \n[49] htmltools_0.5.5        \n```\n:::\n:::\n\n</details>\n\n[^education]: I also once explored the use of [Trelliscope for UK education data](https://matt-dray.github.io/stem-trelliscope/) and have been meaning to write about it ever since.\n[^verb]: Definitely a real verb.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/fitvids-2.1.1/fitvids.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}