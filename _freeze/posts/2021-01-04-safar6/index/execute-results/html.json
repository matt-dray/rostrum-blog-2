{
  "hash": "9d67de821cf69f17c4ee8d1ebe32d16d",
  "result": {
    "markdown": "---\ntitle: Play Pokémon's Safari Zone in R\ndate: '2021-01-04'\nslug: safar6\ncategories:\n  - oop\n  - r\n  - r6\n  - safar6\n  - videogames\n---\n\n::: {.cell}\n\n:::\n\n\n![An original Nintendo Game Boy playing _Pokémon_... if you squint.](resources/safar6-gamelad.png){fig-alt=\"Screenshot of Rstudio showing only the console pane with green text and background, showing text that describes an encounter with a Pokemon.\" width=\"75%\" fig-align=\"left\"}\n\n## tl;dr\n\nI created [the R package {safar6}](https://github.com/matt-dray/safar6), which contains an R6-class object to simulate a simplified, text-based version of [the Safari Zone](https://bulbapedia.bulbagarden.net/wiki/Kanto_Safari_Zone) sub-area from [_Pokémon Blue_](https://en.wikipedia.org/wiki/Pok%C3%A9mon_Red_and_Blue).\n\nI also made [the 'gamelad' RStudio theme](https://github.com/matt-dray/gamelad) to mimic the screen of a pukey-green original Game Boy. Pair with a blocky monospace font like [VT323](https://fonts.google.com/specimen/VT323) for that 8-bit experience.[^font-2p]\n\n## _Kangaskhan_ you believe it?\n\nDid you know you can [play games in R](https://lucidmanager.org/data-science/games-in-r/)? \n\nI particularly like the text adventures [The Secret of Landusia](https://lucidmanager.org/data-science/text-adventure/) by [Peter Prevos](https://twitter.com/lucidmanager) and [Castle of R](http://giorasimchoni.com/2017/09/10/2017-09-10-you-re-in-a-room-the-castleofr-package/) by [Giora Simchoni](https://twitter.com/GioraSimchoni)\n\nThe latter uses [object-oriented programming](https://www.freecodecamp.org/news/object-oriented-programming-concepts-21bb035f7260/) (OOP) for handling game elements, thanks to the [{R6}](https://r6.r-lib.org/) package. So, a room in the castle is an R6-class object with specific fields (variables), like whether the door is `open`, and methods (functions) like `openDoor()` that can change the door state.\n\nThis is interesting because R is better known for being a function- rather than an object-oriented language. You can learn more about OOP in R from [Hadley Wickham's Advanced R book](https://adv-r.hadley.nz/oo.html) and more about the R6-class from [the {R6} website](https://r6.r-lib.org/index.html).\n\n## A _Chansey_ to learn\n\n[I wrote a post about using {R6} to simulate an Automatic Bell Dispenser](https://www.rostrum.blog/2020/04/04/repaying-tom-nook-with-r6/) (an ATM, basically) from Nintendo's [_Animal Crossing: New Horizons_](https://en.wikipedia.org/wiki/Animal_Crossing:_New_Horizons) (2020) game. Fields include `savings` and methods include `withdraw()`, for example.\n\nObviously my next step was to use {R6} for a game, but I wanted to start small. The original _Pokémon_[^ref] games were effectively text adventures with some random-number generation and simple calculations going on in the background. Would it be possible to simulate some aspects of it?\n\n![Would you like to join the hunt?' Via bulbapedia.bulbagarden.net.](resources/sz-screenshot.png){fig-alt=\"A composite screenshot of the Safari Zone from the original Pokemon game.\" width=\"50%\" fig-align=\"left\"}\n\nLuckily, there's an in-game sub-area that's self-contained and much simpler than the mechanics in the rest of the world. In the [The Safari Zone](https://bulbapedia.bulbagarden.net/wiki/Kanto_Safari_Zone) you're only allowed to take 500 steps, you can only use a special type of ball to capture wild Pokémon (of which you only have 30) and you can't reduce a wild Pokémon's health (hit points, HP).\n\nSo I went ahead and wrote an R6-class object to  mimic the Safari Zone and bundled it in [the {safar6} R package](https://www.github.com/matt-dray/safar6/).[^safar6] \n\n## A quick _Tauros_ of the game\n\nYou can install the package [from GitHub](https://www.github.com/matt-dray/safar6/). Loading the package provides a reminder of how to play.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install first the the {remotes} package\nremotes::install_github(\"matt-dray/safar6\")\n\nlibrary(safar6)\n```\n:::\n\n```\n# {safar6}\n# Start game: x <- safari_zone$new()\n# Take a step: x$step()\n```\n\nBasically, the package contains an R6-class object `SafariZone`, which you initialise like `safari_zone$new()`. Make sure to assign a name to it (`x` in these examples). This starts a routine with some text from the game and some interactive elements. Sometimes you'll be prompted for a response; type a value and hit enter to make a choice.\n\nHere's the opening sequence, which asks for your name and invites you to play:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- safari_zone$new()\n```\n:::\n\n```\nFirst, what is your name?\n------------------------\nNEW NAME (1)\nBLUE (2)\nGARY (3)\nJOHN (4)\n------------------------\nSelect 1, 2, 3 or 4:\n> 1\nYour name: \n> THEW\nWelcome to the SAFARI ZONE!\nFor just P500, you can catch all the\nPokemon you want in the park!\nWould you like to join the hunt?\n------------------------\nMONEY: P500\nYES (1) or NO (2)\n------------------------\nSelect 1 or 2: \n> 1\nThat'll be P500 please!\n------------------------\nMONEY: P0\n------------------------\nWe only use a special POKe BALL here.\nTHEW received 30 SAFARI BALLs!\nWe'll call you on the PA when you run out of time or SAFARI BALLs!\n```\n\nYou can then 'move around' by using the `step()` method on your `SafariZone` object. This method does most of the hard work in {safar6}, since it contains all the logic required for a wild Pokémon encounter. \n\nThe underlying values and calculations in `step()` are all true to the original game. That includes the encounter rate, which is less than 1, so you'll likely have to `step()` a number of times before you find a Pokémon.\n\nFor convenience, the step method prints the number of steps remaining:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx$step()\n```\n:::\n\n```\n499/500\n```\n\nEach step is treated as though you're walking through the tall grass, which is where you find wild Pokémon. There's a weighted chance of encountering certain Pokémon at certain levels, but each wild Pokémon also has (hidden) randomised individual variation in its stats (HP, speed, etc) that impact your ability to catch it.\n\nHere's an encounter:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx$step()\n```\n:::\n\n```\n497/500\nWild VENONAT L22 appeared!\n------------------------\nBALLx30 (1)     BAIT (2)\nTHROW ROCK (3)  RUN (4)\n------------------------\nSelect 1, 2, 3 or 4: \n```\n\nAt the prompt, you can throw a Safari ball straight away to attempt a catch, or you can run away from the encounter. You can also influence the Pokémon's state: throw a rock to raise the catch chance (but you'll also increase the flee chance) or throw bait to reduce the chance of fleeing (but that'll also decrease the catch chance).\n\n```\nWild VENONAT L22 appeared!\n------------------------\nBALLx30 (1)     BAIT (2)\nTHROW ROCK (3)  RUN (4)\n------------------------\nSelect 1, 2, 3 or 4: \n> 3\nTHEW threw a ROCK.\nWild VENONAT is angry!\n```\n\nThe Pokémon will be angry or eating for one to five turns.\n\nWhen you throw a ball, the success of a capture attempt is determined by several factors, like the Pokémon's HP, its level and its catch rate (possibly modified by rocks and bait). It may also run away given factors like its speed.\n\n```\nTHEW threw a ROCK.\nWild VENONAT is angry!\n------------------------\nBALLx30 (1)     BAIT (2)\nTHROW ROCK (3)  RUN (4)\n------------------------\nSelect 1, 2, 3 or 4: \n> 1\nTHEW used SAFARI BALL!\nWobble...\nDarn! The POKeMON broke free!\n```\n\nYou may want to change your strategy. More rocks, or some bait? While it's still angry, you could take advantage of its heightened catch rate by throwing another ball.\n\n```\nWild VENONAT is angry!\n------------------------\nBALLx29 (1)     BAIT (2)\nTHROW ROCK (3)  RUN (4)\n------------------------\nSelect 1, 2, 3 or 4: \n> 1\nTHEW used SAFARI BALL!\nWobble... Wobble... Wobble...\nAll right!\nVENONAT was caught!\n```\n\nSuccess! You can choose to give your 'captured friend' a nickname.\n\n```\n------------------------\nDo you want to give a nickname to VENONAT?\nYES (1) or NO (2)\n------------------------\nSelect 1 or 2:\n> 1\nNickname: \n> Tajiri\nTajiri was transferred to BILL's PC!\n```\n\nTry to catch as many as you can before you run out of steps or balls. You can `x$pause()` the game at any point to see your remaining stats and you can check out `x$bills_pc` to see what you've captured[^bill].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx$pause()\n```\n:::\n\n```\n497/500\nBALLx28\nBILL's PC: 1\n```\n\n::: {.cell}\n\n```{.r .cell-code}\nx$bills_pc\n```\n:::\n\n```\n  nickname species level\n1   Tajiri VENONAT    22\n```\n\nWhen the game is over, you'll see an endscreen with your results. \n\n```\n------------------------\nPA: Ding-dong!\nTime's up!\nPA: Your SAFARI GAME is over!\nDid you get a good haul?\nCome again!\n------------------------\nResult: 1 transferred to BILL's PC\n  nickname species level\n1   Tajiri VENONAT    22\n```\n\nThe Safari Zone in the original game was pretty tricky. The Pokémon were flighty and it was especially hard to trap rare encounters like Chansey, Pinsir and Scyther. \n\nThe most captures I've made on a playthrough of {safar6} is three (!), so use that as a yardstick.\n\n## _Exeggcute_-ing the class\n\nI tried to keep things simple, so there's a number of omissions compared to the original game. For example, there's no visuals or sounds; I've simulated only the 'Center' hub area of the Safari Zone; you walk around as though you're always in tall grass; you can't fish or use different rod types; you're restricted to the catch rates and Pokémon identities of the _Blue_ game (not _Red_ or _Yellow_, which are different).\n\nOn the flipside, I tried to maintain some subtle true-to-the-original elements. For example, you'll be prompted to enter your name; you can nickname your Pokémon; there's 'wobble logic' for deciding how many times the ball should shake before a capture; and the majority of the text is as it appears in the game. I've also made it so the text is progressively revealed, character by character.\n\n![Progressive text reveal. Takes longer to print but is more authentic.](resources/safar6-progressive-text.gif){fig-alt=\"Demonstaration of progressive text reveal in the R console, showing individual characters being printed with a slight delay between them.\" width=\"75%\" fig-align=\"left\"}\n\nIn particular, I've tried to keep the various hidden and non-hidden Pokémon stats and calculations true to _Pokémon Blue_. For example, I built in:\n\n* original encounter rates, both for the Safari Zone and the wild Pokémon in it\n* wild Pokémon base statistics and calculation of randomised individual values\n* catch rates based on factors like ball type and HP, and any modifications during the encounter\n* tracking of 'eating' and 'anger' statuses and the effects on catch rates\n* the calculation for whether a wild Pokémon will flee\n\nThere's no guarantee I've got these things completely right, but the gameplay appears similar to the original, so I think it's close enough.\n\n## Disen-_Tangela_-ing game mechanics\n\nInformation about game mechanics and values were relatively tricky to come by. The following resources were really important:\n\n* [Bulbapedia](https://bulbapedia.bulbagarden.net/) is the Bible of Pokémon and hosts various stats and formulae\n* [The Cave of Dragonflies](https://www.dragonflycave.com/) has some excellent breakdowns of game mechanics, particularly in capture and Safari Zone logic \n* the [Pokémon Slots](https://sites.google.com/site/pokemonslots) website is a convenient lookup for base encounter rates for wild Pokémon by area\n* the [pret/pokered GitHub repo](https://github.com/pret/pokered) contains a disassembly of the games, where you can see the raw game mechanics and stats[^pret]\n\nI later saw on YouTube some interesting attempts at building small text-based Pokémon games like {safar6}. For example, [one in Python by Rylan Fowers](https://www.youtube.com/watch?v=Pbs6jQZrZA4)[^prog-text] and one for the [TI-84 calculator (of course) by Aeri](https://www.youtube.com/watch?v=TBMS8lsgzrU).\n\n## Don't _Marowak_ living creatures\n\nObviously this is for fun and learning. Play at your own risk. Feel free to report any bugs (as in code problems, not bug-type Pokémon) as [GitHub issues](https://github.com/matt-dray/safar6/issues). \n\nAnd do not, I repeat, _do not_ throw rocks at animals IRL.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-17 22:01:38 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] safar6_0.1.1\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details><p>\n\n</details>\n[^font-2p]: RStudio only accepts monospace fonts, so the [Press Start 2P](https://fonts.google.com/specimen/Press+Start+2P?query=2p&preview.text_type=custom) font---which mimics Namco's fonts of the 80s---sadly misses out because it's a 'display' font.\n[^ref]: The first generation of *Pokémon* games were developed for [the Nintendo Game Boy](https://en.wikipedia.org/wiki/Game_Boy) by [Game Freak](https://www.gamefreak.co.jp/) and published by [Nintendo](https://www.nintendo.com). Pokémon as a property is owned by [The Pokémon Company](https://www.pokemon.co.jp/). \n[^safar6]: You know, like 'safari' and 'R6' mashed together?\n[^bill]: 'Bill's PC' is the original game's in-game Pokémon-storage system. Yes, they're stored on a computer. In particular, _Bill's_ computer. Don't think about it too hard.\n[^prog-text]: This is what prompted me to include `safar6:::cat_tw()`, a function for progressive text reveal, in {safar6}.\n[^pret]: It's interesting to see how the game actually worked. There's a few investigations of this on YouTube: [Shane Lee](https://www.youtube.com/watch?v=f5R8mcmlbFQ) demonstrates how it works by editing the code (like making Mew a starter Pokémon) and booting it and [TheHappieCat](https://www.youtube.com/watch?v=XGFBtVbBgnM) explains how Red and Blue were written in Assembly and maximised memory to an extreme degree.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}