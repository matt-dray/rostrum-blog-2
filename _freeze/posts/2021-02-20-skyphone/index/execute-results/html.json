{
  "hash": "9aef1b178ab3390f6225668ce12f3256",
  "result": {
    "markdown": "---\ntitle: '#GithubSkyline but hear me out'\ndate: 2021-02-21\nslug: skyphone\ncategories:\n  - dataviz\n  - github\n  - r\n  - skyline\n  - skyphone\n  - sonify\n---\n\n\n\n\n<div class=\"figure\">\n<img src=\"resources/matt-dray_skyline.png\" alt=\"A screenshot of the GitHub Skyline website showing a blocky 3D rendering of a user's contribution count over time.\" width=\"100%\"/>\n<p class=\"caption\">[My skyline](https://skyline.github.com/matt-dray/2020) clearly has a Central Business District with development in the suburbs.</p>\n</div>\n\n## tl;dr\n\nI made [the R package {skyphone}](https://github.com/matt-dray/skyphone) to get GitHub contributions data from [GitHub Skyline](https://skyline.github.com/) and sonify it.\n\n<div class=\"tip\"> `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nThe [GitHub Skyline](https://skyline.github.com/) API--on which [the {skyphone} package](https://github.com/matt-dray/skyphone) depends--stopped responding (i.e. it 404s) soon after this post was published. I may fix {skyphone} in future [to work via {gh} instead](https://gh.r-lib.org/); feel free to contribute.\n</div>\n\n## Reach for the skyline\n\n[Skyline](https://skyline.github.com/) is an online curio from GitHub that lets you input a user's name and get a 3D rendering of that user's contributions to the platform. You can even download the object to 3D print it, I guess?\n\nIt's basically the contributions heatmap from your profile, but with a bonus third dimension. And it's on a plinth! That spins! And it's happening inside Tron!\n\n![Contributions in only two dimensions? Sad!](resources/contributions.png){fig-alt=\"A heatmap of contributions to GitHub from a user's profile, where brighter colours indicate more contributions.\" width=\"100%\"}\n\nWhy does it exist? Think Spotify Wrapped---a summary of users' listening habits at the end of each year[^bot]---which results in lots of social-media shares and free marketing.[^irony] \n\n## Sounds of the city\n\n[I wrote recently](https://www.rostrum.blog/2021/02/02/sonify-covid/) about expressing a year's worth of COVID-19 data in audio form. This process, called sonification, is made simple in R thanks to [the {sonify} package](https://cran.r-project.org/web/packages/sonify/index.html).\n\nObviously it's far lower stakes, but there's no reason we can't take a user's GitHub contributions data and sonify that too.[^why] Is that useful? Maybe. Is it it much effort? Not really. \n\nIt [turns out](https://den.dev/blog/get-github-contributions-api/) that Skyline has a simple API. Provide a URL in this form to get a JSON back:\n\n```\nhttps://skyline.github.com/api/contributions?username=username&year=2020\n```\n\nThis lends itself nicely to a simple R function that grabs the data for a given user in a given year. The counts over time can then be passed to sonification and plotting functions.\n\nSo... [{skyphone}](https://github.com/matt-dray/skyphone).\n\n## Pick up the {skyphone}\n\nYou can install the package from GitHub. It's never going on CRAN.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"remotes\")\nremotes::install_github(\"matt-dray/skyphone\")\n```\n:::\n\n\nThere's three functions: one to get the data, one to sonify it, and one to plot it. All functions are prefaced by `sky_` for easy tab completion.\n\n### Get a dial tone\n\nThe `sky_get()` function takes a username and a year, which are used to generate an API string. The function fetches and tidies the resulting JSON from the call, generating a tidy tibble with a row of contributions per day.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skyphone)\nmd <- sky_get(user = \"matt-dray\", year = 2020)\nmd\n```\n:::\n\n```\n## # A tibble: 366 x 6\n##    user       year  week   day date       count\n##    <chr>     <int> <int> <int> <date>     <int>\n##  1 matt-dray  2020     1     1 2020-01-01     5\n##  2 matt-dray  2020     1     2 2020-01-02     5\n##  3 matt-dray  2020     1     3 2020-01-03     8\n##  4 matt-dray  2020     1     4 2020-01-04     3\n##  5 matt-dray  2020     2     5 2020-01-05     0\n##  6 matt-dray  2020     2     6 2020-01-06     7\n##  7 matt-dray  2020     2     7 2020-01-07    10\n##  8 matt-dray  2020     2     8 2020-01-08     2\n##  9 matt-dray  2020     2     9 2020-01-09     6\n## 10 matt-dray  2020     2    10 2020-01-10     0\n## # â€¦ with 356 more rows\n```\n\nBy itself, this is a useful little function for the casual R user who doesn't want to handle the JSON.\n\n### Hello?\n\nThe output from `sky_get()` can be passed to `sky_sonify()`, which converts the count of contributions over time to audio form: a WaveMC object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsky_sonify(md, play = FALSE)\n```\n:::\n\n```\n## \n## WaveMC Object\n##  Number of Samples:      220500\n##  Duration (seconds):     5\n##  Samplingrate (Hertz):   44100\n##  Number of channels:     2\n##  PCM (integer format):   TRUE\n##  Bit (8/16/24/32/64):    16\n```\n\nIf you set the `play` argument to `TRUE` then you will hear the sonified result over your speakers. You can also provide a directory path to the `out_dir` argument to save the audio file as a .wav to a specified location.\n\nThe data I collected sound like this:\n\n<html><audio controls><source src=\"resources/skyphone_matt-dray_2020.wav\" type=\"audio/wav\"></audio></html>\n\nFor amusement's sake, 2016 is the year I joined GitHub and, well, that's all that happened. We can fetch that year with `sky_get()` and then pipe that into `sky_sonify()`. I've saved the output file to my dekstop in this example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magrittr)  # to demo pipes in {skyphone}\n\nsky_get(\"matt-dray\", 2016) %>% \n  sky_sonify(play = FALSE, out_dir = \"~/Desktop\")\n```\n:::\n\n\n<html><audio controls><source src=\"resources/skyphone_matt-dray_2016.wav\" type=\"audio/wav\"></audio></html>\n\nDid you hear the momentous day on April 2?\n\n### Videophone\n\nWe've seen what a 3D skyline plot looks like; what about a good old fashioned 2D chart?\n\nThere's a simple, opinionated plotting function in the package that you are welcome to use, called `sky_plot()`. Again, you can pass the earlier object from `sky_get()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- sky_plot(md)\np\n```\n:::\n\n\n![](resources/plot-1.png){fig-alt=\"A bar chart of contributions to GitHub in 2020 by user matt-dray, which peaks in the summer months.\" width=\"100%\"}\n\nSee how this looks like a skyline, but in 2D this time? Admittedly the 'buildings' are a little weird. [Radio towers](https://en.wikipedia.org/wiki/List_of_tallest_structures)? Use your imagination, buddy.\n\nFor a final flourish, we can apply a ridiculous [vaporwave](https://en.wikipedia.org/wiki/Vaporwave)-inspired theme to the plot. This retro aesthetic has been rinsed to death of late, so naturally it was used in the Skyline interface.[^fellow]\n\n[The {vapoRwave} package](https://github.com/moldach/vapoRwave) has a number of themes we can choose. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remotes::install_github(\"moldach/vapoRwave\")\nlibrary(vapoRwave)\np + new_retro()\n```\n:::\n\n\n![](resources/plot-vaporwave-1.png){fig-alt=\"A bar chart of contributions to GitHub in 2020 by user matt-dray, using a 'vaporwave' aesthetic for its colours and fonts.\" width=\"100%\"}\n\nSo... that's it. But do join me in waiting for the first hospital admission of someone who trod on their 3D-printed skyline. It's the risk you take.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-17 21:28:15 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       fontawesome_0.5.1 evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^bot]: I prefer [The Pudding](https://pudding.cool/2020/12/judge-my-spotify/)'s highly judgmental bot.\n[^irony]: And here I am, blogging about it.\n[^why]: I promise I have other ideas.\n[^fellow]: How do you do, fellow kids?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}