{
  "hash": "e15286e8993f0b64d623065a0b604dcd",
  "result": {
    "markdown": "---\ntitle: Click links to execute code in the R console!\ndate: 2023-09-17\nslug: choosethis\ncategories:\n  - choosethis\n  - cli\n  - r\n---\n\n\n![](resources/virus.png){fig-alt=\"Text saying 'definitely not a virus' with a clickable link underneath that says 'not a virus'. The mouse hovers and has a popup saying 'virus!'\"}\n\n## tl;dr\n\n[The {cli} R package](https://cli.r-lib.org/index.html) can help build clickable hyperlinks in the R console, which you can use to execute functions. Of course, I used this for japes.\n\n## Error!\n\nHave you noticed that tidyverse error messages are both helpful and pretty? This is in part due to [Gabor's {cli} package](https://cli.r-lib.org/index.html), which helps to style command-line output. Sometimes I make errors on purpose just to see these messages (that's how I explain my mistakes to colleagues, anyway). \n\nHave you noticed that sometimes the error message will include a link that, when clicked, will execute some code to help explore the bug? When you hover over the link, you get a popup in RStudio showing you a green 'play' arrow, the name and description of the function and the phrase 'click to run'.\n\nFor example, if we ask {dplyr}'s `select()` to retain a column that doesn't exist and then hover over the link in the error message:\n\n![](resources/cli.png){fig.alt=\"The function 'select' from the 'dplyr' package has been run in the RStudio console with the 'mtcars' dataset and passing the column name 'x'. This column doesn't exist in the dataset, so there's a warning: 'can't subset columns that don't exist'. Beneath that is a clickable link to run the function 'rlang::last_trace', which on hover shows a popup that describes the function and says 'click to run'.\"}\n\nThat's curious isn't it?\n\n## How?\n\n{cli} functions like `cli_text()` accept {glue} strings that begin with a `.run` keyword and contain a Markdown hyperlink. Something like this: `\"{.run [function](package::function())}\"`. The outcome is a link in the console with the text 'function' that will execute `package::function()` when clicked. \n\nYou can read more about hyperlinks [in the {cli} docs](https://cli.r-lib.org/reference/links.html). There's some limitations, including that your terminal must be capable of supporting this type of hyperlink (RStudio is capable). Note also that links are 'experimental' in {cli}.\n\nYou might be wondering if a bad actor could exploit this to execute arbitrary code. As per [the {cli} docs](https://cli.r-lib.org/reference/links.html?q=run#security-considerations), there are several restrictions in place:\n\n>To make `.run` hyperlinks more secure, RStudio [will] not run code\n>\n>* that is not in the `pkg::fun(args)` form,\n>* if args contains `(`, `)` or `;`,\n>* if it calls a core package (base, stats, etc.),\n>* if it calls a package that is not loaded, and it is not one of testthat, devtools, usethis, or rlang, which are explicitly allowed.\n\nNote that this doesn't stop nerd hobbyists like me from going off-piste.\n\n## Demos\n\nI've made two quick sketches that use {cli}'s `.run`-enabled links. I've put these in [the {choosethis} package](https://github.com/matt-dray/choosethis)[^usethis], which is on GitHub.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/choosethis\")\n```\n:::\n\n\nThese nonserious demos are pretty minimal and only exist to prove the point. Maybe you can take these ideas and run with them?\n\n### 1. A clickable text adventure\n\nYou can set up a narrative in the console that prompts the user for an action to advance the story. Clicking a link takes you down a story branch and prompts you with a new set of options.\n\n![](resources/adventure.gif){fig-alt=\"A gif of the R console. The function 'begin' is run from the 'choosethis' package, which prints the message 'you reach a fork in the road'. Two clickable options are presented: go left or go right. The user clicks 'go right' and this automatically runs the 'right' function and outputs the text 'you died'.\" width=\"75%\" fig-align=\"left\"}\n\nIn other words, a classic text adventure in with the flavour of a '[Choose Your Own Adventure](https://en.wikipedia.org/wiki/Choose_Your_Own_Adventure)' book.\n\nThis works by setting up a function for each option. Click a link and it will run that function, which itself will present more clickable options with their own underlying functions. And so on. In this demo, the chain starts when the user runs `choosethis::begin()`.\n\nOf course, the more complicated the story, the more functions there are to create and maintain.\n\n### 2. An R GUI\n\n[Adriana](https://www.rostrum.blog/about#adriana-de-palma) suggested that `.run` could be used to create a sort-of 'clickable R interface' to do away with all that pesky typing and emulate superior statistical packages like SPSS, lol. She was definitely joking[^lawyers], but like, you _could_ do something like that, right?[^should]\n\nBut this is... tricky. First there's the limitations of `.run` itself, but the user prompts could also become overwhelming. For example, if you want to summarise a data.frame. Which columns should be summarised? Do you want the sum or mean or something else? Should NAs be ignored? And so on.\n\nI made a tiny demo of this anyway. The user runs `choosethis::ask_col_means()` with a data.frame and they're presented the names of any numeric columns as clickable links. The dataframe and selected column name are passed to `choosethis::get_mean()`, a bespoke function for calculating the summary.\n\n![](resources/mean.gif){fig-alt=\"Gif of the R console. The 'ask_col_mean' function is run from the 'choosethis' package. The Palmer penguins dataset is passed as the only argument. The user is then prompted with the message 'what column would you like the mean of' and it presents a number of clickable column names. 'bill_depth_mm' is clicked and the console outputs the answer. This is repeated for the column 'body_mass_g'.\" width=\"100%\" fig-align=\"left\"}\n\nYes, due (I think) to the limitations of `.run`, we need a separate function in the package to calculate the mean for us (at least I think that's the case). You can see how tedious it would be to wrap loads of potential summary functions using this approach.\n\n### 3. Bonus: de-linkification\n\nIt feels a bit mean to write an exciting text adventure that people can't play if their terminal doesn't support hyperlinks. So you can check the user's console and either provide them an executable link, or otherwise print the underlying expression to copy-paste.\n\nTo perform this check, you can use `cli::ansi_has_hyperlink_support()`[^tim]. I added the argument `show_links` to the `choosethis::begin()` function that defaults to this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetOption(\"choosethis.show_links\", cli::ansi_has_hyperlink_support())\n```\n:::\n\n\nBy making this an option, the user can set `options(choosethis.show_links = FALSE)` to avoid seeing links even if their terminal supports them.\n\n## Hype man\n\nSo yeah, hyperlinks are 'experimental' in {cli} and—quite rightly—they're limited to prevent nefarious activity. Everything I've created here might stop working tomorrow. And of course, the intent for links is to help people with errors, not mess around. But it is fun isn't it?\n\nI'd be interested to know if anyone is already using {cli}-enacted links in their packages, or if the ideas in {choosethis} spark some inspiration.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-09-17 19:21:07 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^tim]: Thanks to [Tim](https://fosstodon.org/@_TimTaylor) for suggesting a method for using options in this function.\n[^should]: Doesn't mean you should, amirite.\n[^lawyers]: My lawyers have insisted I must clarify that, unequivocally, she definitely does not want R to be corrupted into an SPSS-like thing.\n[^usethis]: Yes, a very clever pun on {usethis}, but infinitely less useful than that package.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}