{
  "hash": "462a2ab5e7cdbeb696b72e0186065409",
  "result": {
    "markdown": "---\ntitle: Handle London travel data with {oystr}\ndate: 2019-12-23\nslug: oystr\ncategories:\n  - dataviz\n  - oyster\n  - r\n  - transport\n---\n\n::: {.cell}\n\n:::\n\n\n![](resources/oystr_hex.png){fig-alt=\"A hexagon-shaped sticker for the oystr package, featuring an oystercatcher bird and a link to matt-dray.github.io/oystr.\" width=\"30%\"}\n\n## tl;dr\n\n* Problem: I wanted to analyse my Transport for London (TfL) travel data\n* Solution: I came up with the R package name {oystr} and a hex sticker design\n* Practical solution: [I actually wrote the package](https://matt-dray.github.io/oystr/)\n* Self-flagellation: it has zero dependencies \n* Further problem: TfL won't give me information I need to complete it properly\n* Result: blog it and move on\n* Revelation: I've spent more than 53 days on TfL trains since Autumn 2014\n\n## Clam-ouring for a package\n\n[Transport for London](https://tfl.gov.uk/) (TfL) operates the travel system in London. To use their services you ‘[tap in](https://tfl.gov.uk/fares/how-to-pay-and-where-to-buy-tickets-and-oyster/pay-as-you-go/touching-in-and-out)’ with [an Oyster card](https://oyster.tfl.gov.uk/oyster/entry.do).\n\nYou can sign up for monthly CSV files of your Oyster journey data, or [you can sign in and download it from their website](https://oyster.tfl.gov.uk/oyster/entry.do), but they're not in a fully machine-readable state. Hence the {oystr} package.\n\nInstall and load with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"oystr\")\nlibrary(oystr)\n```\n:::\n\n\n{oystr} has two main functions:\n\n* `oy_read()` to read in CSV files from a folder and stitch them together\n* `oy_clean()` to wrangle the data into shape and engineer new columns\n\nThere's two functions that deal with summarising the data, but are very much under development at time of writing:\n\n* `oy_summary()` to create a list of basic data summaries, like most visited stations\n* `oy_lineplot()` to create a simple plots of data over time\n\nThere's also two example data sets:\n\n* `journeys_read` is what a journey-history data set looks like when read in by `oy_read()`\n* `journeys_clean` is what that read-in data set looks like when cleaned by `oy_clean()`\n\nThere's also Oyster-related colours in `oy_col()`.\n\nYou can read more on [the {oystr} website](https://matt-dray.github.io/oystr/), including [a vignette](https://matt-dray.github.io/oystr/articles/oystr-intro.html), and [find the source on GitHub](https://github.com/matt-dray/oystr).\n\n### Winkle out the data\n\nThe `oy_read()` function is straightforward: basically, you supply a folder path and it finds the Oyster journey CSV files with the expected column names, reads them and binds them all together. That ends up looking like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(journeys_read)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t102 obs. of  8 variables:\n $ Date          : chr  \"31-Aug-2018\" \"31-Aug-2018\" \"28-Aug-2018\" \"28-Aug-2018\" ...\n $ Start.Time    : chr  \"16:11\" \"06:47\" \"18:57\" \"13:49\" ...\n $ End.Time      : chr  \"16:50\" \"07:34\" \"19:44\" \"14:43\" ...\n $ Journey.Action: chr  \"Station A to Station B\" \"Station B to Station A\" \"Station C to Station R\" \"Station R to Station L\" ...\n $ Charge        : chr  \"0\" \"0\" \"0\" \"0\" ...\n $ Credit        : chr  \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ Balance       : num  8 8 8 8 8 8 8 8 8 8 ...\n $ Note          : chr  \"NA\" \"NA\" \"NA\" \"NA\" ...\n```\n:::\n:::\n\n\nBut this isn't enough. The data files have several columns, like `Date`, `Start time` and `Balance` ([see an anonymised example](https://github.com/matt-dray/oystr/blob/master/inst/extdata/july.csv)) that need sorting.\n\nThe `oy_clean()` function is the real MVP[^mvp]. It does things like:\n\n* enforce the datetime class where needed\n* engineer an end date (some journeys ended a different day to when they started)\n* calculate journey duration\n* extract mode of transport, start and end stations, bus routes, etc\n\nThat ends up looking like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(journeys_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t102 obs. of  13 variables:\n $ datetime_start  : POSIXct, format: \"2018-08-31 16:11:00\" \"2018-08-31 06:47:00\" ...\n $ datetime_end    : POSIXct, format: \"2018-08-31 16:50:00\" \"2018-08-31 07:34:00\" ...\n $ weekday_start   : Ord.factor w/ 7 levels \"Monday\"<\"Tuesday\"<..: 5 5 2 2 7 7 7 7 6 6 ...\n $ journey_duration: 'difftime' num  39 47 47 54 ...\n  ..- attr(*, \"units\")= chr \"mins\"\n $ mode            : chr  \"Train\" \"Train\" \"Train\" \"Train\" ...\n $ station_start   : chr  \"Station A\" \"Station B\" \"Station C\" \"Station R\" ...\n $ station_end     : chr  \"Station A\" \"Station B\" \"Station C\" \"Station R\" ...\n $ bus_route       : chr  NA NA NA NA ...\n $ payment         : chr  NA NA NA NA ...\n $ charge          : chr  \"0\" \"0\" \"0\" \"0\" ...\n $ credit          : chr  \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ balance         : num  8 8 8 8 8 8 8 8 8 8 ...\n $ note            : chr  \"NA\" \"NA\" \"NA\" \"NA\" ...\n```\n:::\n:::\n\n\n### Like it or limpet\n\nIt was tricky to deal with the `Journey/Action` column. It's a bin for all sorts of things like:\n\n* `Bus journey, route 87`\n* `St James's Park to Kings Cross [London Underground / National Rail]\"`\n* `Entered and exited Pimlico`\n* `[No touch-in] to Waterloo (platforms 1-11) [National Rail]\"`\n* `Season ticket added on touch in, Liverpool Street [National Rail]`\n* `Automated Refund, Southbury`\n* `Topped up,  `\n\nIn fact, I don’t know all the possibilities for this column and TfL won’t tell me: I sent a help request and was told that this information isn’t available. I could do a [Freedom of Information](https://www.gov.uk/make-a-freedom-of-information-request) (FOI) request, but I can only get my own Oyster history. Which I already have.\n\nThis limits how useful this package can be for other people; I can’t handle formats for the `Journey/Action` column that I haven't seen before. So I might as well write about where I've got to with {oystr} and [encourage you to add to this list of possible formats I've started](https://github.com/matt-dray/oystr/issues/14).\n\n### Being un-shellfish with dependencies\n\nAs an aside, I set myself a small challenge for {oystr}: to use only base R functions and avoid dependencies. These are packages that would have to be installed to make {oystr} work.\n\nWhy do this? In part because:\n\n* I admire the philosophy of the [tinyverse](http://www.tinyverse.org/) (‘lightweight is the right weight')\n* [my last package, {altcheckr}, was stuffed with dependencies](https://www.rostrum.blog/2019/12/08/altcheckr/)\n* I’ve been writing too much [tidyverse code](https://www.tidyverse.org/) and want the sweet nostalgia hit of some classic base R code\n* I’m a hero and I care about my users (me); you're (I'm) welcome \n\nTo be more specific, I wanted to avoid required packages in [the ‘Imports’ and ‘Remotes’ fields of the the DESCRIPTION file](http://r-pkgs.had.co.nz/description.html#dependencies). Packages in the ‘Suggests’ field are fine; for example, {testthat} and {knitr} are required for development, but not by the user.\n\n## Flexing the package's mussels\n\nOkey dokey, so for about five years I've been collecting my Oyster data as monthly CSVs emailed to me by TfL, though some months are missing. I won't be sharing these data, but here's some quick examples of applying {oystr} to it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read all the CSV files from a folder path\ndata_read <- oy_read(\"~/Desktop/oyster\")\n```\n:::\n\n\nNext is `oy_clean()` to wrangle the data into shape.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pass the data frame output from oy_read()\ndata_clean <- oy_clean(data_read)\n```\n:::\n\n\nAs a quick overview, there’s 1794 rows of data in the output, of which 97 per cent is train journeys. The earliest recorded journey start is 2014-09-01 07:32:00.\n\nWe can take this cleaned data and summarise it in various ways. For example, the `oy_summary()` function provides a list where each element is a basic summary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_summ <- oy_summary(data_clean, mode = \"Train\")\nnames(train_summ)  # list element names\n```\n:::\n\n```\n[1] \"count_journeys\"   \"stations_popular\" \"stations_matrix\"  \"duration_total\"  \n[5] \"day_popular\"\n```\n\nSo for example, I can use train_summ$duration_total to find out that I’ve spent 76321 mins on TfL’s trains.\n\nThat's 53 days.\n\nYou could also plot the data. Here's a histogram coloured with Oyster-related colours from `oy_cols()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(4.5, 4.5, 5, 0))\n\nhist(\n  as.numeric(data_clean$journey_duration),\n  main = NULL, xlab = \"Journey duration (mins)\", \n  col = oy_cols(\"oyster_cyan\"), border = oy_cols(\"oyster_blue\"),\n  breaks = seq(0, 120, 5), las = 1\n)\n\ntitle <- \"Matt Dray's journeys are 40 to 45 mins long, mostly\"\nsub <- paste(\"Travelling sweatily via TfL trains since Autumn 2014\")\nmtext(side = 3, line = c(3, 2), adj = 0, cex = c(1.2, 1), c(title, sub))\n```\n:::\n\n![](resources/plot-1.png){fig-alt=\"Histogram showing that my journey times are mostly 40 to 45 mins. The subtitle is 'traveling sweatily by via TfL trains since autium 2014.\" width=\"100%\"}\n\nSo that's my commute dominating the peak of that histogram. The two-hour journey went right across the network from Southbury in London's north-west to Hounslow in the south-west. I assume the three-minute journey from South Kensington to Gloucester Road to avoid zombie-dinosaur attacks outside the [Natural History Museum.](https://www.nhm.ac.uk/visit/galleries-and-museum-map/dinosaurs.html)\n\nObviously you could take the cleaned data and do some other neat stuff. Maybe I'll do another post about this in future.\n\n## Shuck it up\n\nThere's plenty to do. The main task is to handle all formats of the `Journey/Action` column and then use this to inform how the summary and plot functions should be improved. Ultimately, `oy_read()` and `oy_clean()` work for me right now, but you may run into trouble if you actually try to use the package.\n\nEventually I'd like the package to be at least as good as the sticker.\n\n[Feel free to suggest or make improvements](https://github.com/matt-dray/oystr) and don't forget to [add to my log of `Journey/Action` formats](https://github.com/matt-dray/oystr/issues/14) if you've seen some different things.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-23 11:17:18 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] oystr_0.0.0.9000\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^mvp]: MVP means '[Most Valuable Primate](https://www.imdb.com/title/tt0196106/)', but also [Minimum Viable Product](https://en.wikipedia.org/wiki/Minimum_viable_product).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}