{
  "hash": "b027e2a8b3c6114cbcbe5ed29f09aebd",
  "result": {
    "markdown": "---\ntitle: \"={ o x o}=\"\ndate: 2025-10-30\nslug: \"pet\"\nimage: resources/pet-see.png\ncategories:\n  - cli\n  - pet\n  - python\n  - uv\n---\n\n\n![Yes, my true calling is ASCII art.](resources/pet-see.png){fig-alt=\"Screenshot of a terminal window. There is text with the question 'what would you like to do' and the user has selected the option 'see'. An ASCII-art cat saying 'meow' is printed underneath. Then the same question is asked, with options for 'stats', 'see', 'feed', 'quit' and 'release'. Emoji are sprinkled throughout, like a sushi for the 'see' option.\" width='100%'}\n\n## tl;dr\n\nI've made [pet](https://github.com/matt-dray/pet): a (very simple) Python tool to look after a persistent cyberpet on your command line. \n\n## Adopt\n\nI made this for learning purposes, but if you did want to try it:\n\n0. Install [uv](https://docs.astral.sh/uv/) if you somehow haven't already.\n1. From your terminal run `uv tool install git+https://github.com/matt-dray/pet.git`.\n2. Run `pet`.\n3. Take responsibility.\n\n## Front-end\n\nRunning `pet` takes control of the terminal and asks you to select an option with <kbd>‚Üì</kbd>, <kbd>‚Üë</kbd> and <kbd>Enter</kbd>:\n\n* üìä **Stats** to show your pet's name (supplied by the user when they first run pet), birth (creation datetime), age (days since birth) and health (out of 10)\n* üëÄ **See** to print a little picture of your pet (always the same handsome cat)\n* üç£ **Feed** to simulate your pet eating and gaining one unit of health\n* ‚ùå **Quit** to exit the program back to the terminal\n* üëã **Release** to discard your pet (cry) and delete its data\n\nHere's what a playthrough looks like:\n\n![Obligatory _Monty Python_ reference.](resources/pet-play.png){fig-alt=\"Screenshot of a terminal window. The command 'pet' has been run. The user is asked 'what would you like to do' and they respond 'stats', which returns the pet name, bith date, age in days and health status. The user chooses eom other options with different effects. Emoji are sprinkled throughout, like a battery for the 'health' status.\" width='100%'}\n\nLines starting with a question mark require input from the user. Once selected, the options disappear and the chosen one is displayed in blue. When the user can choose from several options, a blue chevron is moved between the options. \n\nCrucially, if you quit and come back later, your pet will be recalled and its stats will have changed given the amount of time that's passed. Pay attention because your pet's health will diminish over time[^unalive].\n\nThat's it.\n\n## Back-end\n\nYou can see the 'game loop' in [the `cli.py` module](https://github.com/matt-dray/pet/blob/main/src/pet/cli.py). Basically:\n\n1. If it doesn't exist, create a json file of pet stats on the user's computer, having prompted for the pet's name.\n2. Update the stats given the time elapsed since birth and since your last interaction.\n3. Deplete the pet's health as a function of elapsed time (1 health unit lost per hour).\n4. Ask the user to select an action from the menu and act accordingly, ad infinitum.\n5. Break the loop on exit, and delete the stats json file if the pet was released. \n\nNot too complicated. Behind this, the Python functions in [utils.py](https://github.com/matt-dray/pet/blob/main/src/pet/utils.py) are for wrangling and overwriting the stats file, calculating time and health loss, and for initiating the graphics engine (i.e. `print()`, lol).\n\n## Gaining XP\n\nAs well as getting more general experience in Python packaging, I learnt more about:\n\n* [InquirerPy](https://inquirerpy.readthedocs.io/en/latest/), which does the heavy lifting on user interaction, like `inquirer.select()` for presenting keyboard-navigable options[^r]\n* [`user_data_dir()` from platformdirs](https://platformdirs.readthedocs.io/en/latest/), which can create a platform-independent path to a location on the user's machine where game data can be stored\n\nAs in [several recent posts](https://www.rostrum.blog/index.html#category=uv), uv has also been great here for the development loop, as well as shortcutting use of ruff and ty for code quality, like `uvx ruff format`.\n\n## A good egg\n\nThis pet tool has been designed for my own learning. There's loads of missing features, but my goals have been met.\n\nFor more of a triple-A[^a] virtual pet experience, you can [read earlier blogs](https://www.rostrum.blog/posts/2022-11-13-tamrgo/) about [my {tamRgo} package](https://github.com/matt-dray/tamRgo), which does a much better job of this in the R console. It has lots more features, like 'happy', 'hungry' and 'dirty' meters; different pet species; experience points and levelling up; and 'graphics' dependent on the pet's species and level. Ah, and the concept of death.\n\n### Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[project]\nname = \"2025-10-30-pet\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\ndependencies = []\n```\n:::\n:::\n\n</details>\n\n[^unalive]: Do not panic: your pet will not run away or die. I was too lazy to program that.\n[^r]: See [Textual](https://textual.textualize.io/) as a more advanced tool for building your own complicated terminal user interfaces.\n[^a]: Amateur, Adequate, Awkward?",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}