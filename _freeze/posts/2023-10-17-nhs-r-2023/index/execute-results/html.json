{
  "hash": "a2f6e6f42af6375b4dc8544b962f26f9",
  "result": {
    "markdown": "---\ntitle: Base slaps!\ndate: 2023-10-17\nslug: nhs-r-2023\ncategories:\n  - base\n  - public-sector\n  - r\n  - talk\n---\n\n\n## tl;dr\n\nI'm giving [a lightning talk](https://matt-dray.github.io/nhs-r-2023/) at the [NHS-R](https://nhsrcommunity.com/) Conference 2023 about base R.\n\n## Slides\n\nThe slides are embedded below[^talk] or they can be [opened in a dedicated tab](https://matt-dray.github.io/nhs-r-2023/). Click on them and press <kbd>→</kbd> to advance, <kbd>F</kbd> to go fullscreen, and <kbd>S</kbd> to pop-out the speaker notes.\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"shareagain\" style=\"min-width:300px;margin:1em auto;\" data-exeternal=\"1\">\n<iframe src=\"https://matt-dray.github.io/nhs-r-2023/\" width=\"1600\" height=\"900\" style=\"border:2px solid currentColor;\" loading=\"lazy\" allowfullscreen></iframe>\n<script>fitvids('.shareagain', {players: 'iframe'});</script>\n</div>\n```\n:::\n:::\n\n\nThe source is [on GitHub](https://github.com/matt-dray/nhs-r-2023). The slides are [written with Quarto](https://quarto.org/docs/presentations/), of course.\n\n## Premise\n\nThe abstract for the talk:\n\n> Did you hear? Base R is dead! Or is it? I’ve spent most of my time in the public sector using the tidyverse, but I started learning R before the tidyverse existed (to be polite, you could call me ‘seasoned’). Recently I’ve started to write more base R code again. Why? I'll talk about how base R can do loads of neat stuff out of the box without you needing to install and update any packages (dependencies aren’t bad things per se, but can cause trouble if not managed appropriately). I'll also tell you about some recent additions, like the base pipe and lambda function notation, which demonstrate how base R is responding to the needs of the modern coder. Oh, and you can also do wacky stuff like make an interactive pixel-art creator, a persistent Tamagotchi pet, or a procedural dungeon-crawler. Note that this talk does not constitute a ‘base versus tidyverse' flamewar. It’s purely to appreciate the elegance of good ol’ base R and to highlight some things it can do that you might not have realised (or like me, you forgot a long time ago).\n\nIn other words, the content of the talk is neither new nor earth-shattering. The basic premise is 'base R is pretty neat, eh?' I hope R users of all skill levels will learn something, no matter how small.\n\nI have a narrow window of experience. I work in the public sector, mostly with people who publish statistical reports. The default for this purpose is often the tidyverse. That's fine, for many reasons, but it may be overkill for small projects. At worst, reproducibility may be jeopardised.\n\nThe bottom line: use your tool of choice, but consider if base R can do it alone[^clear].\n\n## Content\n\nThe talk mentions three beneficial things related to base R:\n\n1. Stability.\n2. Dependency.\n3. Modernity.\n\nRe stability, vanilla R has changed little over time and will (likely) be executable for a long time into the future[^julia]. I contend that R is a horseshoe crab (unchanged for aeons, cryptically beautiful). And that R users are Milhouse in this relevant gif (look deep inside yourself, you know R users are Milhouse).\n\n![](resources/nice-doggie.gif){fig-alt=\"Milhouse from the Simpsons pats a happy horseshoe crab on the head. Milhouse is not wearig his glasses. He thinks the crab is a dog.\" width=\"50%\"}\n\nRe dependency, R's extensibility is one of its greatest strengths, but reducing the dependency count could help improve reproducibility and reduce headaches[^depend]. I use an obligatory (adapted) [xkcd comic](https://xkcd.com/2347/), where base R is the literal, unyielding base of the teetering tower of packages used by your project.\n\n![](resources/xkcd.png){fig-alt=\"Comic from xkcd. Lots of blocks are stacked on top of each other. One small block near the bottom is indicated. The implication is that removing the one small block will bring the whole thing down. The stack is labelled 'your project', the small block is labelled 'some dependency' and the big stable blocks underneath it at the bottom are labelled 'base'.\" width=\"50%\"}\n\nRe modernity, high stability hasn't stopped base R from adapting to the expectation of a modern R coder. I morph the janky old R logo to the (perhaps already-outdated, lol) contemporary 'flat' design of the new logo[^jeroen] and explain the 'modern base aesthetic' of pipes, lambdas and string literals.\n\n![](resources/logo.gif){fig-alt=\"The old R logo morphs into the new R logo. The old has bevels, highlights and shadows. The new one is simpler with peak 'flat' design.\" width=\"50%\"}\n\nAnd, as a bonus fourth point raised in the talk:\n\n4. 'Oddity'.\n\nRe oddity, base R has some hidden-gem functions like:\n\n* `locator()` to click a plot and have coordinates returned (e.g. [my experimental {pixeltrix} package](https://github.com/matt-dray/pixeltrix) for interactive pixel art)\n* `readline()` to accept user input interactively (e.g. [my experimental {r.oguelike} package](https://github.com/matt-dray/r.oguelike) for a 'procedural dungeon-crawler' in the R console)\n* `R_user_dir()` as a location for storing user data (e.g. [my experimental {tamRgo} package](https://github.com/matt-dray/tamRgo) for a persistent cyber pet in the R console)\n\nOf course, base R isn't perfect for every situation[^wishlist]. Base _flaps_ sometimes. You can argue it's more terse and less readable than the verb-driven tidyverse, for example. But we have a duty in the public sector to think about long-term code survival. And high employee turnover rates mean we should perhaps default to the most vanilla tool.\n\nBut ultimately, I just wanted to do this terrible 'base slaps'/'slap bass' pun because like. But also, like, zoomers say 'slaps' to mean 'cool'. I think. Oh dear, this was a flimsy premise for a talk. Cringe-driven development?\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-10-17 21:34:50 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2   compiler_4.3.1      fastmap_1.1.1      \n [4] cli_3.6.1           tools_4.3.1         htmltools_0.5.6.1  \n [7] xaringanExtra_0.7.0 rstudioapi_0.15.0   yaml_2.3.7         \n[10] rmarkdown_2.25      knitr_1.44          jsonlite_1.8.7     \n[13] xfun_0.40           digest_0.6.33       rlang_1.1.1        \n[16] evaluate_0.22      \n```\n:::\n:::\n\n</details>\n\n[^julia]: Until we all switch to the Julia and/or Rust languages, amirite.\n[^depend]: Bearing in mind that tools like {renv}, Docker and Nix can help coordinate dependencies. But that's yet another tool to manage.\n[^clear]: But to be clear: I don't think you should 'just replace all your code with base R code'. There's very few examples of where that would make sense. But is it worth importing all of {dplyr} if you just want to `select()`, `filter()` and `mutate()` a data.frame? Maybe, maybe not.\n[^talk]: I think there'll be a video; I'll link to it here when it's released.\n[^wishlist]: See [the wishlist](https://github.com/HenrikBengtsson/Wishlist-for-R/issues) that Henrick Bengtsson has been hosting.\n[^jeroen]: I think this was incepted into my brain by Jeroen in [the {magick} docs](https://docs.ropensci.org/magick/articles/intro.html).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/fitvids-2.1.1/fitvids.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}