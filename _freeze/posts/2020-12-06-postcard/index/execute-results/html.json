{
  "hash": "c8dbb1f42efecba1a64151da32b50e4b",
  "result": {
    "markdown": "---\ntitle: Sending {postcards} with Netlify and Namecheap\ndate: 2020-12-08\nslug: postcard\ncategories:\n  - github\n  - namecheap\n  - netlify\n  - postcards\n  - r\n  - website\n---\n\n\n![Sleek. Minimal. Bearded.](resources/postcard.png){fig-alt=\"Screenshot of my personal webpage made with the postcards package by Sean Kross, showing a photo, name, short personal bio and buttons to my blog, Twitter and GitHub.\" width=\"100%\"}\n\n## tl;dr\n\n>Dearest ma and pa,\n>\n>The food here is okay. Mostly I've been setting up [a single-page personal site](https://www.matt-dray.com/) with the [{postcards}](https://github.com/seankross/postcards) package for R, deploying it with [Netlify](https://www.netlify.com/) and setting up a custom domain with [Namecheap](https://www.namecheap.com/). More rain is forecast for tomorrow.\n>\n>Wish you were here,\n>\n>Matthew\n\n## Domain-driven development\n\nA hobby of mine is to look for funny domain names and to not buy them.\n\nEventually I realised that [`matt-dray.com`](https://www.matt-dray.com) wasn't taken, so I figured I might as well squat it and do something pseudo-useful with it.[^mattdray]\n\nYes, I could write some HTML[^marquee] and CSS to make a complicated shrine to self-absorption, but why bother trying to center divs when [Sean Kross](https://twitter.com/seankross) has just announced [the {postcards} R package](https://github.com/seankross/postcards) to create nice, minimal landing pages?\n\nThis post is a short self-reminder of how to:\n\n1. Generate a webpage with {postcards}\n1. Deploy it with [Netlify](https://www.netlify.com/)\n1. Point to it with a custom domain from [Namecheap](https://www.namecheap.com/)\n\nThis post isn't about the tubes and wires of the internet. It's more the how than the why. \n\n## Write a postcard\n\n{postcards} provides some R Markdown templates that contain space for a photo, a mini-bio and some buttons to link out to your profiles elsewhere. See [the package's readme](https://github.com/seankross/postcards/blob/main/README.md) for examples.\n\nYou can install the development version from GitHub:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"seankross/postcards\")\n```\n:::\n\n\nI generated an R Markdown file with [the 'Jolla' template](https://seankross.com/postcards-templates/jolla/) using the following line:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::draft(\"index.Rmd\", \"Jolla\", package = \"postcards\")\n```\n:::\n\n\nNote that the file is called `index.Rmd` and will thus render to `index.html`. This is the default file that gets read when a site is visited.\n\nIn the YAML header of the template you can specify a `title`, which is likely to be your name; the `output` format, which is the name for our chosen {postcards} template; `links`, where you specify the wording and underlying links for the page's buttons; `image` for your bokeh-rich professional headshot and `favicon` for the little image that will appear alongside your page title in a browser tab. <img src=\"resources/favicon.gif\" alt=\"A 16-by-16 pixel favicon gif of the author, whose eyebrows are bobbing up and down.\"/>\n```\n---\ntitle: \"Matt Dray\"\nimage: \"matt.jpg\"\nlinks:\n  - Blog: \"https://www.rostrum.blog/\"\n  - Twitter: \"https://twitter.com/mattdray/\"\n  - GitHub: \"https://github.com/matt-dray/\"\noutput:\n  postcards::jolla\nfavicon: favicon.gif\n---\n```\n\nYou can then write your mini bio in the body text of the document. I garnished mine with emoji via [Hadley Wickham's {emo} package](https://github.com/hadley/emo).\n\nThe {postcards} templates are ready to go out of the box but you can still tinker with the style. I decided to pull in a font, [Fantasque Sans Mono by Jany Belluz](https://github.com/belluzj/fantasque-sans)[^font], and put a CSS chunk in the R Markdown to specify it.\n\n![A preview of the 'Jolla' template. Tobi seems nice.](resources/jolla.png){fig-alt=\"Screenshot showing the 'Jolla' template filled with dummy information: a photo, a mini bio and some buttons that link to social media.\" width=\"100%\"}\n\nThe content and design of my page may change at any time, but I purposefully want it to be minimal and have a clean and simple appearance. The {postcards} package is also in development, so I look forward to testing out any new features that appear in future.\n\n## Pop it in the post\n\nYou could put your site's files in a GitHub repo and [serve it with GitHub Pages](https://docs.github.com/en/enterprise-server@2.22/github/working-with-github-pages/getting-started-with-github-pages). Upside: it's free. Downside: your URL will be in the form `username.github.io/your-postcard-repo`, which isn't particularly sleek.\n\nInstead you could use a free service like [Netlify](https://www.netlify.com/) to deploy a site from a GitHub/GitLab/BitBucket repository and set up a custom domain to point at it. I've had prior success with Netlify for this blog, so that's why I'm using it here.\n\nA bonus of this approach is [continuous deployment](https://www.netlify.com/blog/2015/09/17/continuous-deployment/): pushing changes to your repo causes Netlify to rebuild and deploy your site automatically, so you don't need to worry about it.\n\nTo set up my page, I signed into Netlify and I:\n\n* clicked the 'New site from Git' button\n* clicked 'GitHub' in section '1. Connect to Git provider', because that's where [my {postcards} repo](https://github.com/matt-dray/postcard) is stored\n* selected my `github.com/matt-dray/postcard/` repo in section '2. Pick a repository' after authorising Netlify to connect to to it\n* left the 'build command' empty in section '3. Build options and deploy!' and set the 'publish directory' to '/' (because I want to serve `index.html` from the root of the repo)\n* clicked 'deploy site'\n\nNetlify takes a moment to build and serve the site after you click 'deploy site'. It's served automatically from a URL in the form `random-name.netlify.app`[^random-name] but, as mentioned, you can configure a privately-owned domain name instead.\n\nFor more on these steps, including screenshots, see [Netlify's step-by-step guidance on deploying static and single-page sites](https://www.netlify.com/blog/2016/10/27/a-step-by-step-guide-deploying-a-static-site-or-single-page-app/).\n\nIt's also worth mentioning [Netlify Drop](https://app.netlify.com/drop): a service that lets you simply drag and drop your site's files to deploy them, rather than needing to authorise Netlify to connect to your Git-based repo. This is quick and technically easier, but you'll have to drag and drop each time you want to update the site.\n\n## Address it properly\n\nThere's a whole bunch of domain-name providers. I'm focusing here on [Namecheap](https://www.namecheap.com/), which is what I used to for this blog. After buying a domain, there's a little bit of back-and-forth required between Netlify and Namecheap.\n\nIn brief:\n\n1. In your Namecheap account, click the 'Manage' button for your domain and set the dropdown in the 'Nameservers' section to 'Custom DNS'\n1. In your Namecheap account, click 'Set up a custom domain', type it in and confirm\n1. Click 'Set up Netlify DNS' alongside the domain and click through until you're provided a handful of nameserver strings\n1. Back on Namecheap, copy-paste each of these into the 'Nameservers' section from step 1 and click the check mark to confirm\n1. Wait.\n\nIt'll take a short while, but there'll be a sort of high-five between your domain and your site and then it'll be ready for viewing.\n\nSee [Ezekiel Ekunola's excellent blog post for a more thorough guide, which includes screenshots](https://www.blog.ezekielekunola.com/setting-up-domain-with-namecheap-and-netlify).\n\nNote also that Netlify provides HTTPS for free too, which is [good for a number of reasons](https://docs.netlify.com/domains-https/https-ssl/#certificate-service-types), though the certificate can take a few hours to generate.\n\nYou can check your domain settings in Netlify at any time by clicking the site name in your account and then clicking the 'Domain settings' button.\n\n![Netlify's domain settings after successful set-up.](resources/domain-settings.png){fig-alt=\"Screenshot of Netlify domain settings for a web page.\" width=\"100%\"}\n\n## Post-postcard postscript\n\nSo this is a relatively quick way of generating up a single-page site with {postcards}; hosting the source on GitHub; deploying it with Netlify; and serving it via a custom domain bought from from Namecheap. \n\nThis seems to work fine for me for now. Let me know if you have a better approach to generating and deploying simple single-page sites.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-18 18:57:26 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details><p>\n\n[^mattdray]: Dear other-Matt-Drays: you should know that we're in direct competition and I have to do what it takes to maximise my SEO and become the top Matt Dray globally.\n[^marquee]: Free advice for your personal site: a liberal sprinkling of the `<marquee>` tag should definitely grab people's attention.\n[^font]: I learnt about this via a GitHub star by [Alison Presmanes Hill](https://twitter.com/apreshill).\n[^random-name]: You can change the random element to be more meaningful. For example, I changed it to [`matt-dray.netlify.app`](https://www.matt-dray.netlify.app/). You could stop there, but the whole point of using Netlify in this example is to set up a custom domain instead.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}