{
  "hash": "1d63c4484d4e848abce9480c7d58473d",
  "result": {
    "markdown": "---\ntitle: Iterate parameterised {xaringan} reports\ndate: 2020-03-12\nslug: knit-with-params\ncategories:\n  - knitr\n  - pagedown\n  - r\n  - reproducibility\n  - rmarkdown\n  - xaringan\n---\n\n\n\n![Driving a Wedge (via Giphy).](https://media.giphy.com/media/3ohuPxvsfZAK2sdPDG/giphy.gif){fig-alt=\"The pilot Wedge Antilles from Star Wars saying 'Ha, that got him!'\" width=\"100%\"}\n\n## tl;dr\n\nYou want to use R to generate multiple reports from a single template, each containing different data.\n\nHow? Create a parameterised [R Markdown](https://rmarkdown.rstudio.com/) template with [a `params` YAML argument](https://rmarkdown.rstudio.com/developer_parameterized_reports.html%23parameter_types%2F). Iterate over param values with `rmarkdown::render()` inside `purrr::map()`.\n\n[I made a demo of this approach](https://www.github.com/matt-dray/ninja-knitting) that focuses on parameterised [{xaringan}](https://slides.yihui.org/xaringan/#1) slides. It includes a further {purrr} step with `pagedown::chrome_print()` to render the HTML outputs to PDF.\n\n## Parambulate\n\n[R Markdown](https://rmarkdown.rstudio.com/) lets you integrate code into a document, which is great for automating the production of reproducible reports. \n\n[Parameterised R Markdown reports](https://rmarkdown.rstudio.com/developer_parameterized_reports.html%23parameter_types%2F) let you control the content of your output by providing a variable to the document at rendering time. You can create multiple reports with different data, but the same template.\n\nHow does this work? You provide a special `params` argument to the YAML header of your R Markdown document. Let's say we have a template that renders a report about Star Wars characters[^space-ninja]: `starwars-template.Rmd`. We might use a `name` param to declare a character name:\n\n```\n---\ntitle: Star Wars\nauthor: Matt Dray\ndate: 2020-03-12\nparams:\n  name: \"Obi-Wan Kenobi\"\n---\n```\n\nNow `\"Obi-Wan Kenobi\"` will be supplied wherever you reference `params$name` in the code of your document.\n\nMaybe you're filtering [the `dplyr::starwars` data set](https://dplyr.tidyverse.org/reference/starwars.html) to get eye color, so `filter(starwars, name == params$name) %>% pull(eye_color)` will return `blue-gray` when rendered.\n\nChange the param to `name: Chewbacca` and every instance of `params$name` will take the new value on render. Our call to get eye color will now return `blue`.\n\n## Automate\n\nHow can you automate the process of opening the document and changing the parameter value by hand?\n\nYou can supply a different value via the `params` argument of `render()` from the {rmarkdown} package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::render(\n  input = \"starwars-template.Rmd\", # the template\n  params = list(names = \"Wedge Antilles\")  # different param\n)\n```\n:::\n\n\nAnd if you have multiple values to supply? You can iterate with the `map()` function from {purrr} to supply several parameter values in turn, resulting in a separate output for each one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector of the elements to iterate over\ncharacters <- c(\"Chewbacca\", \"Obi-Wan Kenobi\", \"Wedge Antilles\")\n\n# Render to HTML the template for each param\npurrr::map(\n  .x = characters,  # vector of param values\n  .f = ~render(\n    input = \"starwars-template.Rmd\",  # R Markdown filepath\n    params = list(name = .x),  # iterated parameter value\n    output_file = paste0(.x, \".html\")  # iterated output path\n    )\n  )\n)\n```\n:::\n\n\nNote that you can have parameterised reports with more than one param and can provide various combinations to `render()`. Use `map2()` or `pmap()` from {purrr} to iterate with multiple params.\n\nDon't forget you can also use [the {furrr} package](https://github.com/DavisVaughan/furrr)'s `future_map()` to speed up the process, since it takes advantage of parallel processing.\n\n## Demo: Ninja Knitting\n\n[I've created a demo on GitHub](https://www.github.com/matt-dray/ninja-knitting) that extends the ideas above to a [{xaringan}](https://slides.yihui.org/xaringan/#1) slide template to produce 'micro-dossiers' on some Star Wars characters. It uses iterative rendering, but also has another iterative step to convert the HTML outputs to PDF format.\n\nThere are two main files in the demo:\n\n1. [An R Markdown template](https://github.com/matt-dray/ninja-knitting/blob/master/docs/ninja-knitting-template.Rmd) (with [CSS files](https://github.com/matt-dray/ninja-knitting/tree/master/docs/styles)[^css] to tweak the default style)\n2. [An R script](https://github.com/matt-dray/ninja-knitting/blob/master/src/00_run.R) to generate HTML and PDF outputs\n\nThe [R script](https://github.com/matt-dray/ninja-knitting/blob/master/src/00_run.R) basically does three things:\n\n1. Prepares the `dplyr::starwars` data set\n2. Uses `purrr::map()` with the `params` argument to render a HTML report per character\n3. Uses `pagedown::chrome_print()` to render each HTML document to PDF\n\n`chrome_print()` is a handy function that uses the Chrome browser's ability to print from HTML to PDF, but without actually opening Chrome[^chrome].\n\nYou can find all the HTML files and PDF files [from the GitHub repo](https://github.com/matt-dray/ninja-knitting/tree/master/docs).[^html-online] Here's an example that uses the param `name: \"Obi-Wan Kenobi\"`: \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"shareagain\" style=\"min-width:300px;margin:1em auto;\" data-exeternal=\"1\">\n<iframe src=\"https://matt-dray.github.io/ninja-knitting/obiwankenobi.html\" width=\"400\" height=\"300\" style=\"border:none;\" loading=\"lazy\" allowfullscreen></iframe>\n<script>fitvids('.shareagain', {players: 'iframe'});</script>\n</div>\n```\n:::\n:::\n\n\nAnd here's another, this time with the param set to `name: \"Wedge Antilles\"`:\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"shareagain\" style=\"min-width:300px;margin:1em auto;\" data-exeternal=\"1\">\n<iframe src=\"https://matt-dray.github.io/ninja-knitting/wedgeantilles.html\" width=\"400\" height=\"300\" style=\"border:none;\" loading=\"lazy\" allowfullscreen></iframe>\n<script>fitvids('.shareagain', {players: 'iframe'});</script>\n</div>\n```\n:::\n:::\n\n\nI think it was Yoda who said something like:\n\n> R Markdown is the path to automated {xaringan} PDF production. R Markdown leads to parameterised reports. Parameterised reports lead to multiple HTMLs. Multiple HTMLs leads to multiple PDFs.\n\nSo wise.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-22 16:06:08 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2   compiler_4.3.1      fastmap_1.1.1      \n [4] cli_3.6.1           tools_4.3.1         htmltools_0.5.5    \n [7] xaringanExtra_0.7.0 rstudioapi_0.15.0   yaml_2.3.7         \n[10] rmarkdown_2.23      knitr_1.43.1        jsonlite_1.8.7     \n[13] xfun_0.39           digest_0.6.33       rlang_1.1.1        \n[16] evaluate_0.21      \n```\n:::\n:::\n\n</details>\n\n[^space-ninja]: Because Jedi and Sith are basically space ~~samurai~~ ninjas, no? \n[^css]: I've tried to use [Libre Gothic](https://fonts.google.com/specimen/Libre+Franklin) to approximate the [Star Wars title crawl font](https://starwars.fandom.com/wiki/Opening_crawl); hopefully this renders correctly for you.\n[^chrome]: You'll need Chrome or Chromium installed to use this function.\n[^html-online]: You can also view each of the HTML files online in the form https://matt-dray.github.io/ninja-knitting/obiwankenobi.html (change 'obiwankenobi.html' to 'chewbacca.html' for example).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/fitvids-2.1.1/fitvids.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}