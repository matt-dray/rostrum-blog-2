{
  "hash": "f85697b161d85259687f58396c68bf5c",
  "result": {
    "markdown": "---\ntitle: Waggle dance with {ggbeeswarm} and {emoGG}\ndate: 2018-11-21\nslug: waggle-dance\ncategories:\n  - dataviz\n  - emoGG\n  - emoji\n  - ggbeeswarm\n  - magick\n  - r\n---\n\n::: {.cell}\n\n:::\n\n\n## tl;dr\n\nBeeswarm plots are a thing. Duncan made a beswarm plot that looks like a beeswarm and I animated it.\n\n## How to plot grouped continuous data?\n\nA [boxplot](https://en.wikipedia.org/wiki/Box_plot) lets you show continuous data split by categories, but it hides the data points and doesn't tell you much about distribution. A [violin chart](https://en.wikipedia.org/wiki/Violin_plot) will show the distribution but you still don't know about the density of data.\n\n[Stripcharts](https://www.datamentor.io/r-programming/strip-chart/) show the data for each category as individual points. The points can be layered on top of each other where they take the same Y value and can be stretched arbitrarily along the X axis.\n\nIf you don't have too much data, or if you sample it, you can stop the data points in a stripchart from overlapping and instead line them up side by side where they take the same Y value. This is called a ['beeswarm'](http://www.cbs.dtu.dk/~eklund/beeswarm/). Why? Probably because the cloud of data you're plotting looks a bit like a swarm of bees.\n\nBelow is how the plots look side by side.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)     # for plotting\nlibrary(ggbeeswarm)  # more on this later\nlibrary(cowplot)     # arrange plots\n\n# Create data set\ndata <- data.frame(\n  \"variable\" = rep(c(\"runif\", \"rnorm\"), each = 100),\n  \"value\" = c(runif(100, min = -3, max = 3), rnorm(100))\n)\n\n# Generate different plot types\ncanvas <- ggplot(data, aes(variable, value)) \nbox <- canvas + geom_boxplot() + ggtitle(\"Boxplot\")\nviolin <- canvas + geom_violin() + ggtitle(\"Violin\")\nstrip <- canvas + geom_jitter(width = 0.2)  + ggtitle(\"Stripchart\")\nbee <- canvas + geom_quasirandom()  + ggtitle(\"Beeswarm\")\n\n# Arrange plots\ngrid <- plot_grid(box, violin, strip, bee)\n\nprint(grid)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/chart-types-1.png){width=672}\n:::\n:::\n\n\n## Obvious next step\n\nWe can test this theory by plotting the points as *actual bees*, *lol*. Well, *emoji* bees. Duncan (of [{tidyxl}](https://nacnudus.github.io/tidyxl/) and [{unpivotr}](https://nacnudus.github.io/unpivotr/) fame) did exactly this and [tweeted the plot and code](https://twitter.com/nacnudus/status/1063147043861000193).\n\n![Duncan's original plot.](resources/duncan.jpg){fig-alt=\"Duncan's original plot, showing emoji bees used as points so that the whole cloud of points looks like a beeswarm.\" width=\"75%\" fig-align=\"left\"}\n\nTo summarise, Duncan did this by hacking [emojis via {emoGG}](https://github.com/dill/emoGG) into [{ggbeeswarm}'s `geom_beeswarm()` function](https://github.com/eclarke/ggbeeswarm) to create `gg_beeswarm_emoji()`. Patent pending, presumably.\n\n## Obvious next next step\n\nWouldn't it be great if the little emoji bees moved around a little bit? Almost like a [waggle dance](https://en.wikipedia.org/wiki/Waggle_dance)?\n\nI cheated a little bit and recoded the `geom_quasirandom()` function from {ggbeeswarm} instead of `geom_beeswarm()`. Why? Beeswarm plots have an inherent 'neatness' to them. That is not becoming of a beeswarm. Instead, `geom_quasirandom()` gives you some 'random' jitter each time you plot the data. \n\nSo we can plot the same data several times and stack the images into a gif. One easy way to do this is via [the {magick} package](https://cran.r-project.org/web/packages/magick/vignettes/intro.html), a re-engineering of [the open-source ImageMagick sute of tools](https://www.imagemagick.org/script/index.php) from [Jeroen Ooms](https://twitter.com/opencpu) at [rOpenSci](https://ropensci.org/).\n\n## Code\n\nAttach the packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggbeeswarm)\nlibrary(emoGG)  # remotes::install_github(\"dill/emoGG\")\nlibrary(magick)\n```\n:::\n\n\nRecode the `geom_quasirandom()` to display emoji, as per [Duncan's tweet](https://twitter.com/nacnudus/status/1063147214124580866).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeom_quasi_emoji <- function (\n  mapping = NULL, data = NULL, width = NULL, varwidth = FALSE, \n  bandwidth = 0.5, nbins = NULL, method = \"quasirandom\", groupOnX = NULL, \n  dodge.width = 0, stat = \"identity\", position = \"quasirandom\", \n  na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, emoji = \"1f4l1d\", ...\n) {\n  \n  img <- emoji_get(emoji)[[1]]\n  \n  position <- position_quasirandom(\n    width = width, varwidth = varwidth, \n    bandwidth = bandwidth, nbins = nbins, method = method, \n    groupOnX = groupOnX, dodge.width = dodge.width\n  )\n  \n  ggplot2::layer(\n    data = data, mapping = mapping, stat = stat, \n    geom = emoGG:::GeomEmoji, position = position, show.legend = show.legend, \n    inherit.aes = inherit.aes, params = list(na.rm = na.rm, img = img, ...)\n  )\n}\n```\n:::\n\n\nIt makes sense to use the data that Duncan generated so we can compare the static plot to the animated one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nswarm <- data.frame(\n  \"variable\" = rep(c(\"runif\", \"rnorm\"), each = 100),\n  \"value\" = c(runif(100, min = -3, max = 3), rnorm(100))\n)\n```\n:::\n\n\nLet's define what our plot should look like. `method = \"pseudorandom\"` is the bit that gives us the jittering.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot <- ggplot(swarm, aes(variable, value)) +\n  geom_quasi_emoji(emoji = \"1f41d\", method = \"pseudorandom\") +\n  theme(panel.background = element_rect(fill = \"skyblue\")) +\n  ggtitle(\"WAGGLE DANCE\")\n```\n:::\n\n\nNow we can create a few versions of this plot with different jittering. The plots are magick-class objects made with `image_graph()` from the {magick} package.\n\n\n::: {.cell}\n\n:::\n\n\nWe can loop through a few plots, each representing a frame in the final gif. \n\n\n::: {.cell}\n\n:::\n\n\nAnd now `image_animate()` can be used to combine those magick objects into a gif.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwaggle_dance <- image_animate(c(t1, t2, t3, t4))\nwaggle_dance\n```\n:::\n\n\n![](resources/animate-1.gif){fig-alt=\"An update to Duncan's original plot, showing emoji bees used as points so that the whole cloud of points looks like a beeswarm. The points are jittered between animation frames.\" width=\"75%\" fig-align=\"left\"}\n\nAnd we can save this with `image_write()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_write(waggle_dance, \"waggle_dance.gif\")\n```\n:::\n\n\nWell done, we got through this without any bee puns.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-08-05 17:48:04 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] cowplot_1.1.1    ggbeeswarm_0.7.2 ggplot2_3.4.2   \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.3       cli_3.6.1         knitr_1.43.1      rlang_1.1.1      \n [5] xfun_0.39         generics_0.1.3    jsonlite_1.8.7    labeling_0.4.2   \n [9] glue_1.6.2        colorspace_2.1-0  htmltools_0.5.5   scales_1.2.1     \n[13] fansi_1.0.4       rmarkdown_2.23    grid_4.3.1        evaluate_0.21    \n[17] munsell_0.5.0     tibble_3.2.1      fastmap_1.1.1     yaml_2.3.7       \n[21] lifecycle_1.0.3   vipor_0.4.5       compiler_4.3.1    dplyr_1.1.2      \n[25] htmlwidgets_1.6.2 pkgconfig_2.0.3   rstudioapi_0.15.0 beeswarm_0.4.0   \n[29] farver_2.1.1      digest_0.6.33     R6_2.5.1          tidyselect_1.2.0 \n[33] utf8_1.2.3        pillar_1.9.0      magrittr_2.0.3    withr_2.5.0      \n[37] tools_4.3.1       gtable_0.3.3     \n```\n:::\n:::\n\n</details>",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}