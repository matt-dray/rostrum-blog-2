{
  "hash": "9167e6d9f81f849a000b485e1b9547c8",
  "result": {
    "markdown": "---\ntitle: How do you pronounce {dplyr}?\ndate: 2019-09-20\nslug: say-package\ncategories:\n  - accessibility\n  - audio\n  - bash\n  - r\nresources:\n  - resources/say_cran_random.wav\n  - resources/say_cran.wav\n  - resources/say_tidy.wav\n---\n\n\n![Public Domain via wpclipart.com.](resources/pharynx.png){fig-alt=\"A line-drawing of a human larynx cross-section labelled with 'dee', 'ply', 'arr' and a question mark.\" width=\"40%\" fig-align=\"left\"}\n\n## tl;dr\n\nIt's 'd-ply-r' [according to Hadley himself](https://twitter.com/hadleywickham/status/925313165554012160?s=20)... [maybe](https://github.com/tidyverse/dplyr/issues/1857#issuecomment-221873452).\n\nWhat does it sound like when your computer tries to pronounce R package names? Is this an accessibility issue?\n\n## Deep liar\n\nSometimes I hear a word being spoken and think 'oh wait, is that how it's actually pronounced?'\n\nI know [people struggle with pronouncing R package names](https://community.rstudio.com/t/pronunciations-of-common-r-terms/1810). They're often hard to parse.\n\nIs {dplyr} 'dee-ply-arr' or 'd'plier'? Is {data.table} 'data table' or 'data-dot-table'?\n\n## Speak the truth\n\nHow does this affect users of [assitive technology](https://en.wikipedia.org/wiki/Assistive_technology)? [VoiceOver](https://en.wikipedia.org/wiki/VoiceOver) is a macOS [accessibility](https://en.wikipedia.org/wiki/Accessibility) tool that helps people navigate their computers via audio. It reads text on a page. What happens when VoiceOver reads R package names?\n\nI used [the `say` command](https://ss64.com/osx/say.html) at the command line to test this out. For example, you can type `say dplyr` to get your machine to interpret and vocalise 'dplyr'.\n\nYou can add flags to the command to read text from an input file (`-f`) and then store the audio output (`-o`):\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsay -f input.txt -o output.wav\n```\n:::\n\n\nI generated some audio of package names being read via `say` and embedded them in the sections below. These were:\n\n* the tidyverse\n* the top 20 downloads from CRAN\n* 20 random CRAN packages\n\nYou can [download all the text and audio files as a zip file](https://rostrum.blog/datasets/say.zip) (note that the audio is in .wav format).\n\n### Tidyverse\n\nYou can get the tidyverse packages with the `tidyverse_packages()` function from the {tidyverse} package.\n\n<details><summary>Click for code</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fetch the packages of the tidyverse\ntidy_pkgs <- tidyverse::tidyverse_packages()\ntidy_pkgs <- gsub(\"\\n\\\\(>=\", \"\", tidy_pkgs)  # replace rogue characters\n\n# Add terminal periods so that 'say' pauses between package names\ntidy_pkgs <- paste0(tidy_pkgs, \".\")\n\n# Write the list to a text file\nwrite.table(\n  tidy_pkgs,\n  file = \"say_tidy.txt\",\n  row.names = FALSE,\n  col.names = FALSE\n)\n\n# Get say command to read from text file and output an audio file\nsystem(\"say -f say_tidy.txt -o say_tidy.wav\")\n```\n:::\n\n\n</details>\n```\n\"broom\" \"cli\" \"crayon\" \"dplyr\" \"dbplyr\" \"forcats\" \"ggplot2\" \"haven\"\n\"hms\" \"httr\" \"jsonlite\" \"lubridate\" \"magrittr\" \"modelr\" \"purrr\" \"readr\"\n\"readxl\" \"reprex\" \"rlang\" \"rstudioapi\" \"rvest\" \"stringr\" \"tibble\"\n\"tidyr\" \"xml2\" \"tidyverse\"\n```\n\n<html><audio controls><source src=\"resources/say_tidy.wav\" type=\"audio/wav\"></audio></html>\n\n### CRAN top 20\n\nYou can get the top 20 downloads from CRAN in the last month with the `cran_top_downloads()` function from the {cranlogs} package.\n\n<details><summary>Click for code</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fetch the top 20 downloaded packages from CRAN in past month\ncran_top_pkgs <- cranlogs::cran_top_downloads(when = \"last-month\", count = 20)\n\n# Add terminal periods so that 'say' pauses between package names\ncran_top_pkgs$package <- paste0(cran_top_pkgs$package, \".\")\n\n# Write the list to a text file\nwrite.table(\n  cran_top_pkgs$package,\n  file = \"say_cran_top.txt\",\n  row.names = FALSE,\n  col.names = FALSE\n)\n\n# Get say command to read from text file and output an audio file\nsystem(\"say -f say_cran_top.txt -o say_cran_top.wav\")\n```\n:::\n\n</details>\n```\n\"magrittr\" \"aws.s3\" \"aws.ec2metadata\" \"rsconnect\" \"rlang\" \"Rcpp\" \"dplyr\"\n\"ggplot2\" \"ellipsis\" \"vctrs\" \"tibble\" \"digest\" \"glue\" \"pillar\" \"zeallot\"\n\"backports\" \"stringr\" \"markdown\" \"fansi\" \"stringi\"\n```\n\n<html><audio controls><source src=\"resources/say_cran.wav\" type=\"audio/wav\"></audio></html>\n\n### Random CRAN packages\n\nYou can get the full list of packages currently on CRAN with the `CRAN_package_db()` function in the {tools} package (part of base R).\n\n<details><summary>Click for code</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fetch and clean CRAN packages\ncran <- tools::CRAN_package_db()\n\n# Select random packages\nset.seed(1337)\ncrandom_pkgs <- sample(cran$Package, size = 20)\n\n# Add terminal periods so that 'say' pauses between package names\ncrandom_pkgs <- paste0(cran_rand_pkgs, \".\")\n\n# Write the list to a text file\nwrite.table(\n  crandom_pkgs,\n  file = \"~/Desktop/say_cran_random.txt\",\n  row.names = FALSE,\n  col.names = FALSE\n)\n\n# Get say command to read from text file and output an audio file\nsystem(\"say -f ~/Desktop/say_cran_random.txt -o ~/Desktop/say_cran_random.wav\")\n```\n:::\n\n</details>\n```\n\"NScluster\" \"nlnet\" \"Bivariate.Pareto\" \"lisa\" \"homtest\" \"glarma\" \"ttdo\"\n\"flock\" \"equSA\" \"coreCT\" \"WEE\" \"xtable\" \"shinyKGode\" \"DiffNet\" \"WGCNA\"\n\"aqfig\" \"Voss\" \"tidymv\" \"gogarch\" \"erp.easy\"\n```\n\n<html><audio controls><source src=\"resources/say_cran_random.wav\" type=\"audio/wav\"></audio></html>\n\n## Results\n\nObviously there's a lot of subjectivity, but what was strange to your ears? To my southern English ears, it seems like there were a few patterns:\n\n* English word pronounced as expected: {haven}, {broom} and {glue}\n* American English: {crayon} ('crain')\n* unexpected English parsing: {lubridate} ('loobridot')\n* the trouble with 'tidy': {tidyr} ('tid-ear' instead of 'tidy-arr') and {tidyverse} ('tid-a-verse' instead of 'tidy-verse')\n* the trouble wirh 'r': {rvest}, {rlang} and {rstudioapi} ('r' not pronounced as 'arr' in any of these)\n* the trouble with 'read': {readr} and {readxl} ('reed' becomes 'ree-add' because the whole thing is being read as one word)\n* spelled out: {vctrs} (rather than 'vectors' in a New Zealand accent)\n* what the actual heck: {ttdo} (I think it tries to pronounce the whole thing)\n\nAnd what about {dplyr}? Well, it was something like 'd'pleur'. I'm pretty sure that's not quite right.\n\nOf course, there are other text-to-speech engines, which may interpret and synthesise words differently. For example, [`espeak`](https://en.wikipedia.org/wiki/ESpeak) vocalises {dplyr} as 'deepler' which [is definitely not right](https://twitter.com/hadleywickham/status/925313165554012160?s=20).\n\nIf you're a user of assistive technology, does the way the machine reads the package names impact your pronunciation of the package name? \n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-08-11 23:35:18 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}