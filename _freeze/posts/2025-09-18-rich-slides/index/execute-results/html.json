{
  "hash": "d3adf2a6ea4f681d2fecf143a1f3ebfb",
  "result": {
    "markdown": "---\ntitle: \"Abandon P*werpoint for the command line\"\ndate: 2025-09-18\nslug: \"rich-slides\"\nimage: resources/slide-1.svg\ncategories:\n  - cli\n  - python\n  - rich\n  - uv\n---\n\n\n![](resources/slide-1.svg){fig-alt=\"A dark terminal window with ASCII art of the word 'synergy' and some text under it saying 'promote it'. There's a border line around the edge. These elements are green.\" width='100%'}\n\n## tl;dr\n\nYou can use Python's [rich](https://rich.readthedocs.io/en/stable/) library to make super minimal presentations at the command line.\n\n## Sliding scale\n\nRecently, conference organisers forced a colleague to convert their Quarto presentation to P*werPoint. Unconscionable.\n\nProprietary software shouldn't get in the way of good ideas, maaan.\n\nActually, if your message is good enough[^gds] then why waste time _rendering_ anything? Why not just print directly to the terminal, lol?\n\n## That's rich \n\nThe [rich](https://rich.readthedocs.io/en/stable/) library is for prettifying output and making user interfaces[^jot].\n\nThere's nothing to stop you using rich to show faux 'slides' at the command line. So, as a thought experiment, I've given this a go.\n\nBasic approach:\n\n1. Clear the screen.\n2. Accept keyboard input.\n3. Draw the next slide.\n\nI've prepared a single Python demo script to do exactly this. Dependencies are declared at the top, so you can run it with [uv](https://docs.astral.sh/uv/) like `uv run slides.py`[^uv].\n\nCrucially, you'll have to zoom in to you terminal so the words end up nice and big. I don't know a simple way to do this automatically (or if it's even possible).\n\nThen you can use arrow keys to move through the slides and press <kbd>Q</kbd> to quit.\n\n<details><summary>Click to see the full demo script</summary>\n\n\n::: {.cell filename='slides.py'}\n\n```{.python .cell-code}\n# /// script\n# requires-python = \">=3.12\"\n# dependencies = [\n#     \"pynput\",\n#     \"rich\",\n# ]\n# ///\n\nfrom pynput import keyboard\nfrom rich.align import Align\nfrom rich.console import Console\nfrom rich.panel import Panel\nimport os\n\nconsole = Console()\n\ndef panelise(\n    *args,\n    sep=\"\\n\",\n    panel_title,\n    panel_subtitle=\"#ShareholderValue\",\n    panel_width=console.size.width,\n    panel_height=console.size.height - 2,\n):\n    panel_text = sep.join(args)\n    panel_body = Align.center(panel_text, vertical=\"middle\")\n    panel = Panel(\n        panel_body,\n        title=panel_title,\n        subtitle=panel_subtitle,\n        width=panel_width,\n        height=panel_height,\n    )\n    return panel\n\nslides = [\n    panelise(\n        \" ___ _   _ _ __   ___ _ __ __ _ _   _ \",\n        \"/ __| | | | '_ \\ / _ \\ '__/ _` | | | |\",\n        \"\\__ \\ |_| | | | |  __/ | | (_| | |_| |\",\n        \"|___/\\__, |_| |_|\\___|_|  \\__, |\\__, |\",\n        \"      __/ |                __/ | __/ |\",\n        \"     |___/                |___/ |___/ \",\n        \"                            promote it\",\n        panel_title=\"\",\n        panel_subtitle=\"\",\n    ),\n    panelise(\n        \"• Push the envelope\",\n        \"• Double down\",\n        \"• Think outside the box\",\n        panel_title=\"Paradigm shift\",\n    ),\n    panelise(\n        \"• Move the needle\",\n        \"• Circle back\",\n        \"• Take this offline\",\n        panel_title=\"Key deliverables\",\n    ),\n    panelise(\n        \"You must clap\",\n        panel_title=\"You're welcome\",\n    ),\n]\n\nindex = 0\nrunning = True\n\ndef render_slide():\n    os.system(\"clear\")\n\n    width = console.size.width\n    filled = int((index) / (len(slides) - 1) * width)\n    bar = \"▬\" * filled + \" \" * (width - filled)\n    console.print(bar, style=\"green\")\n\n    console.print(slides[index], style=\"green\")\n\ndef on_press(key):\n    global index, running\n\n    if hasattr(key, \"char\") and key.char == \"q\":\n        running = False\n        listener.stop()\n        return\n\n    if key == keyboard.Key.right:\n        index = (index + 1) % len(slides)\n\n    elif key == keyboard.Key.left:\n        index = (index - 1) % len(slides)\n\n    render_slide()\n\nlistener = keyboard.Listener(on_press=on_press)\n\nrender_slide()\nlistener.start()\nlistener.join() \n```\n:::\n\n\n</details>\n\nThe slides in the demo are spat out like this[^record]:\n\n![](resources/slide-1.svg){fig-alt=\"Title slide: green ASCII art of the word 'synergy' with a green border in a dark terminal window.\" width=\"49%\"}\n![](resources/slide-2.svg){fig-alt=\"Slide 2, titled 'paradigm shift', with a progress bar one-third full, three bullet points including 'push the envelope' and a footer saying '#ShareholderValue'. The elements are all green.\" width=\"49%\"}\n![](resources/slide-3.svg){fig-alt=\"Slide 3, titled 'key deliverables', with a progress bar two-thirds full, three bullet points including 'take this offline' and a footer saying '#ShareholderValue'. The elements are all green.\" width=\"49%\"}\n![](resources/slide-4.svg){fig-alt=\"Slide 4, titled 'you're welcome', with a full progress bar, a line saying 'you must clap' and a footer saying '#ShareholderValue'. The elements are all green.\" width=\"49%\"}\n\nSome may call this content 'jargon rich' but they are losers who have simply never grinded as hard as me, bro.\n\n## Slidecraft\n\nI'll step through the code.\n\nFirst, we initiate a console object: `console = Console()`. The `print()` method against this lets us `style` the output.\n\nNext, I made a `panelise()` function, which wraps rich's `Panel()`. This simplifies 'slide' setup with some defaults. \n\nIncidentally, a '[panel](https://rich.readthedocs.io/en/stable/panel.html)' is just an area surrounded by a border, which I've 'hacked' to use as a bordered slide.\n\nThen we create a dict of slides, passing lines of text and the slide title. In my example I created a title slide with [some cool ASCII art](https://patorjk.com/software/taag/) and then a few slides with simple bullets.\n\nNext are two important functions:\n\n* `render_slide()`, which clears the console, adds a progress bar at the top (oh yeah, did I mention there's a progress bar?[^bar]) and then prints the slide content\n* `on_press()`, which uses the [pynput](https://pynput.readthedocs.io/en/latest/index.html) library to accept keypresses (left- and right-arrows to move slides and <kbd>Q</kbd> to quit)\n\nThen there are steps to run the presentation itself:\n\n1. Start 'listening' to keyboard presses with `keyboard.Listener()`.\n2. Render the first slide (`index = 0`) with `render_slide()`.\n3. Move to the next slide with an arrow press (wrapping back to the start).\n4. Exit the slides when a <kbd>q</kbd> happens (set `running = FALSE` and stop listening for keypresses).\n\n## The slideshow's over\n\nSo, this thing I threw together does what I wanted it to do. Improvements are absolutely possible.\n\nOf course, I haven't made full use of rich's rich colour and style control. rich also has a module that [interprets Markdown input](https://rich.readthedocs.io/en/stable/markdown.html), which may be preferable to `Panel()` in some cases.\n\nI know the script works on macOS but I haven't tested it anywhere else. I suspect there may be better, platform independent approaches.\n\nIt's also true that pressing the arrow keys will advance slides... even if the focus is away from the terminal. Ah well!\n\nAnyway, if you want an actual fully-featured terminal-based tool, you could try something like [Maas Lalani's slides](https://maaslalani.com/slides/).\n\nNext slide please!\n\n### Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[project]\nname = \"2025-08-30-jot-options\"\nversion = \"0.1.0\"\nrequires-python = \">=3.12\"\ndependencies = []\n```\n:::\n:::\n\n</details>\n\n[^gds]: I worked at the [Government Digital Service](https://www.gov.uk/government/organisations/government-digital-service) (GDS) where there was [a culture of good, simple slides](https://gds.blog.gov.uk/2016/04/07/giving-clear-presentations/).\n[^record]: Add `record=TRUE` to the `Console()` call and `console.save_svg(\"slides.svg\")` at the end to get an image of your slides as you progress through them.\n[^bar]: Yes, the bar starts on the second slide, after the title slide. This is for aesthetic reasons mostly.\n[^uv]: An approach I wrote about in [a recent post](https://www.rostrum.blog/posts/2025-08-11-uv-standalone/).\n[^jot]: I used its basic features recently to add colour to [my minimal note-taking tool, jot](https://github.com/matt-dray/jot).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}