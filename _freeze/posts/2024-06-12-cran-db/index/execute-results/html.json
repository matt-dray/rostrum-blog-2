{
  "hash": "aa8146e506eb88f2b4868c41ab09d567",
  "result": {
    "markdown": "---\ntitle: \"Expose CRAN deadlines and DOIs\"\ndate: 2024-06-12\nslug: \"cran-db\"\nimage: resources/app.png\ncategories:\n  - badgr\n  - bslib\n  - cran\n  - r\n  - shiny\n  - shinylive\n---\n\n\n![Red alert!](resources/app.png){fig.alt=\"Screenshot of webpage called 'CRAN Deadlines'. There are individual cards with the names of R packages in them. The header of each card says how many days remain for fixes to be made and is coloured according to the amount of time left (e.g. red for 0 days). The footer says e.g. 'issues need fixing before 2024-06-12' with a link to the CRAN page detailing the errors.\" width='100%'}\n\n## tl;dr\n\nYou can now programmatically access deadlines and DOIs for CRAN packages. I larked about with them to make [a Shiny app](https://matt-dray.github.io/cran-deadlines/) and [a README-badge-making function](https://github.com/matt-dray/badgr).\n\n## Scan CRAN\n\nIf you didn't know, base R has functions that return information about packages on CRAN[^cran]. The main one is probably `CRAN_package_db()`. Here's a few columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndb <- tools::CRAN_package_db()\ndb[1:5, c(\"Package\", \"Version\", \"Maintainer\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Package Version                                Maintainer\n1            A3   1.0.0 Scott Fortmann-Roe <scottfr@berkeley.edu>\n2 AalenJohansen     1.0     Martin Bladt <martinbladt@math.ku.dk>\n3      AATtools   0.0.2 Sercan Kahveci <sercan.kahveci@sbg.ac.at>\n4        ABACUS   1.0.0          Mintu Nath <dr.m.nath@gmail.com>\n5   abasequence   0.1.0         Andrew Pilny <andy.pilny@uky.edu>\n```\n:::\n:::\n\n\nThis post is about two new columns that have appeared recently in that dataframe—`Deadline` and `DOI`—and a couple of little tools I've built around them.\n\n### Meet the deadline\n\nIf your package-builds fail on CRAN then you need to fix them. The CRAN database now contains the date by which fixes need to be made[^henrik]. The simple way to access this information is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndb_dead <- db[!is.na(db$Deadline), c(\"Package\", \"Deadline\")]\ndb_dead |> sort_by(~Deadline) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Package   Deadline\n11555       MuMIn 2024-06-14\n16242       rsolr 2024-06-14\n16964      semEff 2024-06-14\n6901  gghighlight 2024-06-17\n9671         lme4 2024-06-17\n11800 nestedLogit 2024-06-17\n```\n:::\n:::\n\n\nYou can get this information in an R terminal, sure, but it's ripe for displaying in a web app that shows the latest data.\n\nThis seemed a good excuse for me to learn a couple of (newish-to-me) Shiny things: (a) [{bslib}](https://rstudio.github.io/bslib/) as a Shiny framework and (b) a way to create an arbitrary number of UI elements, since the number of packages with deadlines will vary from day to day.\n\nIn short, I made a Shiny(live) app, which is embedded below (may take a moment to fully load).\n\n<iframe width='400' height='500' src='https://matt-dray.github.io/cran-deadlines/' title='CRAN deadlines'></iframe>\n\n[You can also visit directly on GitHub Pages](https://matt-dray.github.io/cran-deadlines/) or [find the source on GitHub](https://github.com/matt-dray/cran-deadlines). The data refreshes with each visit so it stays up to date.\n\nIt's pretty simple: there's a card per deadlined package with a link to its CRAN-listing page and check details. For added spice, I calculated days remaining and coloured the card headers by threat level.\n\nIf you see a negative number of days remaining, it's not because the data haven't updated correctly. A package can have a deadline listed that has already passed, which will manifest as a negative value in the number of days remaining[^neg]. It also seems that packages can have a deadline listed in `CRAN_package_db()` even if they've been archived or reprieved, so they'll continue to appear in the app regardless.\n\nRe handling an arbitrary number of UI elements on the fly, I looped over the deadlined packages to build a `tagList` of `bslib::card()` elements. This object was then interpreted by `renderUI()` and the cards were spat out. \n\nSome other new-to-me bits-and-bobs I used were [an emoji as a favicon](https://twitter.com/LeaVerou/status/1241619866475474946)[^favicon], {bslib}'s very simple [dark-mode toggle](https://rstudio.github.io/bslib/reference/input_dark_mode.html), and [`htmltools::tagAppendChild()`](https://rstudio.github.io/htmltools/reference/tagAppendChild.html) to splice breaks between cards in the `tagList`[^splice].\n\nIn the end, this was a good excuse to polish some of my Shiny knowledge, but there are simpler approaches to displaying this information. For example, I started with just a basic {reactable}. I see [Hadley has now done something similar to that](https://hadley.github.io/cran-deadlines/)[^hadley], in a table that allows you to click rows to expand a package's check results as well. It's a better tool and I recommend you bookmark that instead of this Shiny app[^shame].\n\nAh well. By now you've come to expect overengineering from this blog, I suspect. At least I had fun.\n\n<div class=\"tip\"> \n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nThe app was available on the web via shinyapps.io when I first published this blog. I actually wanted it to be [a Shinylive app](https://posit-dev.github.io/r-shinylive/), but [hit a snag](https://github.com/matt-dray/cran-deadlines/issues/1). Fortunately, the ever-helpful [Eric Nantz](https://github.com/rpodcast) made [a pull request](https://github.com/matt-dray/cran-deadlines/pull/3) that solved my problem. I think Shinylive is a good option for this app: it's small, there's little user interaction and it's not worth a precious slot in my free shinyapps.io account. Thanks Eric.\n\n</div>\n</br>\n<div class=\"tip\"> \n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nI noticed that Dirk also calculated the number of potential 'orphans' that archival would cause. This is useful information to gauge relative 'danger' for a given package to fall off CRAN. Hadley has since added this feature to his table and I [might implement it too](https://github.com/matt-dray/cran-deadlines/issues/2).\n\n</div>\n\n### Oi! DOI!\n\nA [DOI](https://www.doi.org/) is a 'digital object identifier'. These are used extensively in publishing and can be useful for citation, tracking and gathering usage statistics. CRAN has been adding these to packages recently and the string has been added to the `CRAN_package_db()` dataframe in the `DOI` column[^achim].\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndb[!is.na(db$DOI), c(\"Package\", \"DOI\")][1:5, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Package                                 DOI\n1            A3            10.32614/CRAN.package.A3\n2 AalenJohansen 10.32614/CRAN.package.AalenJohansen\n3      AATtools      10.32614/CRAN.package.AATtools\n4        ABACUS        10.32614/CRAN.package.ABACUS\n5   abasequence   10.32614/CRAN.package.abasequence\n```\n:::\n:::\n\n\n[Dirk wondered aloud on Mastodon](https://fosstodon.org/@eddelbuettel@mastodon.social/112597923361268334) about making a badge service for DOIs. I don't know about a 'service' but I once wrote a package called [{badgr}](https://github.com/matt-dray/badgr) to build customised [shields.io](https://shields.io/) metadata badges within R. It's a small leap to make a {badgr} function that builds CRAN DOI badges.\n\nSo, as of of {badgr} v0.2.0, you can use `get_cran_doi_badge()`. You can download the package from my R-universe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"badgr\", repos = \"https://matt-dray.r-universe.dev\")\n```\n:::\n\n\nYou pass it a CRAN package name. If you want, you can pass other arguments to `get_badge()` to change its colour, etc (but the default colour is the tasteful blue of the R logo, so you probably want to keep that). For purposes of this blog post, I've turned off the arguments that open a browser preview of the badge and copy it to your clipboard.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbadgr::get_cran_doi_badge(\n  package_name = \"datapasta\",\n  browser_preview = FALSE,\n  to_clipboard = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"[![](https://img.shields.io/badge/DOI-10.32614/CRAN.package.datapasta-1f57b6?style=flat&link=https://doi.org/10.32614/CRAN.package.datapasta)](https://doi.org/10.32614/CRAN.package.datapasta)\"\n```\n:::\n:::\n\n\nThe code outputs a Markdown string that you can paste into your repository's README, for example. It looks like this when rendered:\n\n[![](https://img.shields.io/badge/DOI-10.32614/CRAN.package.datapasta-1f57b6?style=flat&link=https://doi.org/10.32614/CRAN.package.datapasta)](https://doi.org/10.32614/CRAN.package.datapasta)\n\nYou can click it to be taken to the resource, which is the CRAN listing for the package. The whole process looks like this:\n\n![[{datapasta}](https://milesmcbain.github.io/datapasta/) is great, even if you don't pronounce it 'dah-tah pars-tah'.](resources/doi-badge.gif){fig.alt=\"A gif of the function get_cran_doi_badge running in RStudio with the package name 'datapasta' passed as the only argument. The console prints 'opening browser to display badge preview' and 'badge markdown added to clipboard' The markdown has also printed in the console. The badge opens in a browser window. It says 'DOI' on the left side and the DOIc ode on the right. Clicking it takes you to the CRAN page for hte package.\" width='100%'}\n\nIn retrospect, this function probably doesn't need to use `CRAN_package_db()` because the DOIs look fairly standardised in structure (e.g. `10.32614/CRAN.package.<package-name>`). But at time of writing, not every package has a DOI yet; checking the database means an error can be raised if the DOI isn't yet active.\n\nAh well. By now you've come to expect overengineering from this blog, I suspect. At least I had fun.\n\n<div class=\"tip\"> \n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nDirk mentioned in [another Mastodon post](https://mastodon.social/@eddelbuettel/112609970727005448) that he's added a simple deadline fetcher to {littler} and also pointed out the simple form noted above for a Markdown badge.\n\n</div>\n</br>\n<div class=\"tip\"> \n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nMike [started a list](https://fosstodon.org/@coolbutuseless/112611459027946296) of CRAN-related dashboards/search tools and has asked for any that have been missed. Which implies we need a tool to search for such tools, lol?\n\n</div>\n\n### Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2024-06-17 14:50:18 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.4.0 (2024-04-24)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] digest_0.6.35     base64enc_0.1-3   fastmap_1.2.0     xfun_0.43        \n [5] fontawesome_0.5.2 knitr_1.46        badgr_0.2         htmltools_0.5.8.1\n [9] rmarkdown_2.26    cli_3.6.2         compiler_4.4.0    rstudioapi_0.16.0\n[13] tools_4.4.0       clipr_0.8.0       evaluate_0.23     yaml_2.3.8       \n[17] rlang_1.1.4       jsonlite_1.8.8    htmlwidgets_1.6.4\n```\n:::\n:::\n\n</details>\n\n[^cran]: The Comprehensive R Archive Network, not [the unit of uncleaned herring](https://www.rostrum.blog/posts/2020-09-12-herring-units/).\n[^hadley]: The absolute cheek of using the same (completely obvious and utterly non-plagiarised) repository name, can you believe it.\n[^shame]: Though I chose not to shame the package owners by putting their names in my app, lol.\n[^favicon]: This appears when the Shiny app is opened locally in a browser, but does not carry through to the Shinylive version.\n[^achim]: I first noticed this thanks to [Achim's post on Mastodon](https://fosstodon.org/@zeileis/112597049943483012).\n[^henrik]: I think it was [Henrik's Mastodon post](https://mastodon.social/@henrikbengtsson/112591630316235677) that first tipped me off to this, thank you. \n[^splice]: I'm not convinced my approach is the best one, but it works for now. Please leave an issue in the repo if you have a better idea.\n[^neg]: Lluis was kind enough to [suggest why this might be](https://fosstodon.org/@Lluis_Revilla/112620123453580083).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}