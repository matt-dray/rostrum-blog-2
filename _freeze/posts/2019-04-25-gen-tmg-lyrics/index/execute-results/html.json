{
  "hash": "d8241aea401cb6bf1c1573e2d7520088",
  "result": {
    "markdown": "---\ntitle: Generate The Mountain Goats lyrics\nauthor: Matt Dray\ndate: 2019-04-25\nslug: gen-tmg-lyrics\ncategories:\n  - furrr\n  - genius\n  - markovifyR\n  - music\n  - r\n  - spotifyr\n  - text\n---\n\n\n![John Darnielle with the green-scaled slipcase for In League with Dragons (via [Merge Records](https://www.youtube.com/watch?v=8V1uLxUBYR8))](resources/unbox.png){fig-alt=\"John Darnielle of the Mountain Goats holding up a limited edition LP of In League with Dragons with a shiny green slipcase that mimics dragon scales.\" width=\"100%\"}\n\n## tl;dr\n\nYou can generate text using [the {markovifyR} package](https://github.com/abresler/markovifyR). Why not do it for lyrics collected with [The {spotifyr} package](https://www.rcharlie.com/spotifyr/)? And why not do it for a band with a huge back catalogue like [The Mountain Goats](https://en.wikipedia.org/wiki/The_Mountain_Goats)?\n\n## In League with Dragons\n\n[The Mountain Goats](https://en.wikipedia.org/wiki/The_Mountain_Goats) released [_In League with Dragons_](https://www.metacritic.com/music/in-league-with-dragons/the-mountain-goats) today, their [seventeenth studio album](http://www.mountain-goats.com/discography/).\n\n[John Darnielle](https://en.wikipedia.org/wiki/John_Darnielle) has written a lot of words across the Mountain Goat's [back catalogue](https://en.wikipedia.org/wiki/The_Mountain_Goats_discography). His lyrics are poetic and descriptive, covering fictional and autobiographical themes that include substance abuse, professional wrestling and cadaver-sniffing dogs.\n\nCan we generate new Mountain Goats lyrics given this rich text data set? This is a short post to do exactly that using the {spotifyr}, {genius} and {markovifyR} packages for R.\n\nHit play below while reading to generate the right mood.\n\n<iframe src=\"https://open.spotify.com/embed/track/0R9CW6XBPlNLEoz8E4IIi6\" width=\"300\" height=\"380\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n\n## Get lyrics\n\n[The {spotifyr} package](https://www.rcharlie.com/spotifyr/) pulls artist and album information from the music streaming service [Spotify](https://www.spotify.com), along with some interesting audio features like 'danceability' and 'acousticness'. It also fetches lyrics from [Genius](https://genius.com/) via [the {genius} package](https://github.com/josiahparry/genius)\n.\n\nFirst get a developer account for the [Spotify API](https://developer.spotify.com/documentation/web-api/). Run `usethis::edit_r_environ()` and add your client ID and secret in the form `SPOTIFY_CLIENT_ID=X` and `SPOTIFY_CLIENT_SECRET=Y`. The `get_spotify_access_token()` function will add an access token to your environment, which will authenticate each API request.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(spotifyr)  # install.packages(\"spotifyr\")\naccess_token <- get_spotify_access_token()\n```\n:::\n\n\nThe `get_discography()` function fetches a named artist's back-catalogue, including the lyrics. Beware: this may include some duplicates from different regions or because of reissues or deluxe versions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngoat_discography <- spotifyr::get_discography(\"the mountain goats\")\n```\n:::\n\n\nYou can run the line above, or you can just use `download.file()` to get an RDS version stored on rostrum.blog (note that this file will become out of date as the Mountain Goats release more material, which they frequently do!).\n\nI've done this already and saved the file for future use. I'll read that in now:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 399  41\n```\n:::\n:::\n\n\nThis is a relatively wide data frame with 41 columns of data for nearly 400 songs. Let's simplify the columns and for fun we can look at five random sings and their 'energy'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)  # for data manipulation and %>%\n\ngoat_disco <- goat_discography %>% \n  ungroup() %>% \n  select(\n    album_name, album_release_year,  # album\n    track_name, track_number, duration_ms,  # track info\n    key_name, mode_name, key_mode, tempo, time_signature,  # music info\n    danceability, energy, loudness, mode, speechiness,  # audio features\n    acousticness, instrumentalness, liveness, valence,  # audio features\n    lyrics\n  )\n\nsample_n(goat_disco, 5) %>%\n  select(album_name, track_name, energy)  # a sample\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 Ã— 3\n  album_name        track_name                energy\n  <chr>             <chr>                      <dbl>\n1 Heretic Pride     Michael Myers Resplendent  0.269\n2 Bitter Melon Farm The Bad Doctor             0.459\n3 Heretic Pride     Autoclave                  0.781\n4 Zopilote Machine  Alpha Incipiens            0.713\n5 Sweden            Tollund Man                0.513\n```\n:::\n:::\n\n\nI'll be saving this data frame for some other analysis, but for now we'll need only the lyrics. The lyrics are stored in a list-column as a separate tibble (data frame) per song.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)  # for unnest()\n\ngoat_lyrics <- goat_disco %>%\n  filter(lyrics != \"NULL\") %>%  # remove rows where lyrics weren't collected\n  unnest(lyrics) %>%  # unpack the lyrics list-column\n  filter(!is.na(lyric)) %>%  # remove empty lyrics\n  select(-line) %>%  # unneeded column\n  group_by(lyric) %>% slice(1) %>%  ungroup() %>% # remove duplicate lyrics\n  pull(lyric)  # convert column to character vector\n\nsample(goat_lyrics, 10)  # a sample\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Say that the time is near\"                                 \n [2] \"And watch for the cars\"                                    \n [3] \"Never forget what it felt like to live in rooms like these\"\n [4] \"Grow fat and grow old and go blind and be content\"         \n [5] \"He made a banquet for the stray dogs of the air\"           \n [6] \"Sky grey and misty\"                                        \n [7] \"Swing low sweet chariot\"                                   \n [8] \"From the fragile outline of your hips\"                     \n [9] \"But as the sun becomes a blazing orange ball of fire\"      \n[10] \"I hear your voice getting stronger and louder\"             \n```\n:::\n:::\n\n\n## Generate lyrics\n\nWe can use a Markov chain to generate new lyrics based on our data set. Basically, it will predict the next word from the current one based on the likelihood from our input data set. You can [read more about this principle elsewhere](https://hackernoon.com/from-what-is-a-markov-model-to-here-is-how-markov-models-work-1ac5f4629b71).\n\n[The {markovifyR} package](https://github.com/abresler/markovifyR) is a wrapper for [the Python package `markovify`](https://github.com/jsvine/markovify), which 'is a simple, extensible Markov chain generator'. You can install `markovify` at the command line via R's `system()` function, then install {markovifyR} from GitHub and {furrr} from CRAN.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# system(\"pip3 install markovify\")\nlibrary(markovifyR)  # remotes::install_github(\"abresler/markovifyR\")\nlibrary(furrr)  # install.packages(\"furrr\")\n```\n:::\n\n\nNow we can generate the model given all the lyrics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarkov_model <- generate_markovify_model(\n    input_text = goat_lyrics,\n    markov_state_size = 2L,\n    max_overlap_total = 25,\n    max_overlap_ratio = 0.7\n  )\n```\n:::\n\n\nYou can meddle with these controls, but I've kept to the suggested defaults for now. Note that 'overlap' relates to the likelihood of generating whole sentences that already exist. See [`markovify`](https://github.com/jsvine/markovify) for more detail.\n\n### Generate lines\n\nUse the `markovify_text()` function with our `markov_model` object to generate single lines.\n\nFans of the Mountain Goats will no doubt recognise some of the phrases from existing songs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngoat_speak <- markovify_text(\n  markov_model = markov_model,\n  maximum_sentence_length = NULL,\n  output_column_name = 'goat_speak',\n  count = 5,\n  tries = 100,\n  only_distinct = TRUE,\n  return_message = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngoat_speak: Like a trashcan fire in a folding chair\ngoat_speak: Darkness climbing up the variables\ngoat_speak: And when the rain on our tongues\ngoat_speak: Wear black back to where I go, do what you said that you make\ngoat_speak: I know you're leaving too\n```\n:::\n:::\n\n\nI ran this function a few times and here a few outputs that made me laugh (or think):\n\n* But I felt all the Portuguese water dogs?\n* I write reminders on my kimono that I could not remember\n* Leann Rimes on the ocean\n* Sunset spilling through your megaphone\n* It's the most gorgeous cow I'd ever wanted\n* I hope I never liked Morrissey\n* Went and got the case of vodka from a disco in old east Berlin\n* Fresh coffee at sunrise, warm my lips like a dying man\n* But my love is like a tattoo into my ear\n* And you brought me a bowl of cooked wild grasses\n* We had hot caramel sticking to her skin\n* And then the special chicken\n* And a bird we would have liked brought the Norman invasion\n* How come there's peacocks in the face of the rainbow\n\n### Generate a verse \n\nYou can also choose to seed the first word in the sentence. You can do this in such a way that you can create a sort-of possible-sounding stanza.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngoat_speak <- markovify_text(\n  markov_model = markov_model,\n  maximum_sentence_length = NULL,\n  output_column_name = 'goat_lyric',\n  start_words = c(\"I\", \"And\", \"But\", \"So\"),\n  count = 1,\n  tries = 100,\n  only_distinct = TRUE,\n  return_message = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngoat_lyric: I was sure my heart and I should have said something evil and then orange then opting for secession\ngoat_lyric: And I will walk down to the main square\ngoat_lyric: But I knew you were knocking\ngoat_lyric: So you can breathe now\n```\n:::\n:::\n\n\n...or not.\n\nI think John Darnielle probably remains the best generator of Mountain Goats lyrics for now.\n\n## Further reading\n\nTo learn more about the band:\n\n* [I only listen to the Mountain Goats podcast](http://www.nightvalepresents.com/ionlylistentothemountaingoats)\n* [The Mountain Goats official website](http://www.mountain-goats.com/)\n* [The Mountain Goats wiki](https://themountaingoats.fandom.com/wiki/The_Mountain_Goats_Wiki)\n* [The annotated Mountain Goats](https://kylebarbour.org/tmg/)\n* [themountaingoats.net fan site](http://www.themountaingoats.net/)\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-08-02 16:31:10 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] purrr_1.0.1      furrr_0.3.1      future_1.33.0    markovifyR_0.102\n[5] tidyr_1.3.0      dplyr_1.1.2      readr_2.1.4      spotifyr_2.2.4  \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.3        generics_0.1.3    xml2_1.3.5        lattice_0.21-8   \n [5] stringi_1.7.12    listenv_0.9.0     hms_1.1.3         digest_0.6.33    \n [9] magrittr_2.0.3    grid_4.3.1        evaluate_0.21     timechange_0.2.0 \n[13] fastmap_1.1.1     rprojroot_2.0.3   Matrix_1.5-4.1    jsonlite_1.8.7   \n[17] httr_1.4.6        rvest_1.0.3       fansi_1.0.4       codetools_0.2-19 \n[21] cli_3.6.1         crayon_1.5.2      rlang_1.1.1       parallelly_1.36.0\n[25] withr_2.5.0       yaml_2.3.7        tools_4.3.1       parallel_4.3.1   \n[29] tzdb_0.4.0        here_1.0.1        globals_0.16.2    reticulate_1.30  \n[33] curl_5.0.1        assertthat_0.2.1  png_0.1-8         vctrs_0.6.3      \n[37] R6_2.5.1          lifecycle_1.0.3   lubridate_1.9.2   snakecase_0.11.0 \n[41] stringr_1.5.0     htmlwidgets_1.6.2 janitor_2.2.0     pkgconfig_2.0.3  \n[45] pillar_1.9.0      Rcpp_1.0.11       glue_1.6.2        xfun_0.39        \n[49] tibble_3.2.1      tidyselect_1.2.0  rstudioapi_0.15.0 knitr_1.43.1     \n[53] htmltools_0.5.5   rmarkdown_2.23    compiler_4.3.1   \n```\n:::\n:::\n\n</details>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}