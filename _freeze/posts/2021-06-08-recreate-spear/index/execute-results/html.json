{
  "hash": "4967c12cdf853f7eee63c334d4f0950c",
  "result": {
    "markdown": "---\ntitle: \"Recreating Spear's #CottonViz in base R\"\ndate: 2021-06-08\nslug: recreate-spear\ncategories:\n  - dataviz\n  - r\n---\n\n\n\n\n![](resources/cottonviz.gif){fig-alt=\"Gif where each frame shows the progression of recreating an original plot about cotton supplies in 1940s USA. Axes and lines are added to a plot on the left, then crosshatching, bars and axes are added to a plot on the right, and finally some titles and captions are added. The original plot is shown in the final frame to compare it to the recreation.\" width=\"100%\"}\n\n## tl;dr\n\nFor a competition I recreated a data visulisation using base R.\n\n<div class=\"tip\"> `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\n[I won the 'most accurate' prize](https://www.rostrum.blog/2023/05/10/spear-ggplot2/), lol.\n\n</div>\n\n## \\#CottonViz \n\nThe [Young Statistician's](https://rss.org.uk/membership/rss-groups-and-committees/sections/young-statisticians/) and [History of Stats](https://rss.org.uk/membership/rss-groups-and-committees/sections/history-of-statistics/) sections of the [Royal Statistical Society](https://rss.org.uk/) (RSS) have [challenged people](https://rss.org.uk/news-publication/news-publications/2021/section-group-reports/mary-eleanor-spear-dataviz-competition-for-childre/) to recreate[^recreate] or remix [Mary Eleanor Spear's](https://en.wikipedia.org/wiki/Mary_Eleanor_Spear) visualisation of cotton supplies in the United States in the 1940s:[^spear] \n\n![](resources/4_original.jpg){fig-alt=\"Mary Eleanor Spear's original plot of cotton supplies in 1940s USA. On the left is a line plot showing that carry-over stocks fell from 1942 to 1948, while consumption dropped slightly and exports rose slightly. A bar plot to the right shows the same data as a stacked bar chart. There are titles and captions around the plots.\" width=\"100%\"}\n\nI thought it would be interesting to recreate it using only R's built-in base graphics. This might be a nice demo of zero-dependency plotting for R users who are more familiar with {ggplot2}.[^base]\n\nLong-story short, here's what popped out at the end of my scripting:\n\n![](resources/3_final.png){fig-alt=\"A recreation of Spear's original plot, with line plot, bar plot, labels and titles. It's not an identical match. The title font is not the same, for example.\" width=\"100%\"}\n\nIt's certainly not an identical match to the original, but it gets most of the way there.[^mismatch]\n\nYou can find the scripts for both the recreation and gif in [my matt-dray/viz-recreation GitHub repo](https://github.com/matt-dray/viz-recreation).\n\nThe rest of this post is a walkthrough of the code used to create the final output. It's in five sections: (1) set-up, (2) line plot, (3) bar plot, (4) margin labels and (5) saving, with a closing section reflecting on tricky parts and potential improvements.\n\n## 1. Set-up\n\n### Data\n\nThe dataset is [available to download](https://rss.org.uk/news-publication/news-publications/2021/section-group-reports/mary-eleanor-spear-dataviz-competition-for-childre/) from the RSS website, but it's small enough that I can just recreate it here exactly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncotton <- data.frame(\n  Year = 1942:1948,\n  `US consumption` = c(11160, 9993,  9693,  9423,  10072, 9374,  7833),\n  Exports          = c(1480,  1139,  2007,  3613,  3545,  1968,  4785),\n  Stocks           = c(10657, 10744, 11164, 7326,  2530,  3080,  5283),\n  `Total supply`   = c(23297, 21876, 22864, 20362, 16147, 14422, 17901),\n  check.names = FALSE  # allows for spaces in variable names\n)\n```\n:::\n\n\n### Fonts\n\nI've used two font families that weren't pre-installed on my system:\n\n* [Routed Gothic](https://webonastick.com/fonts/routed-gothic/), a very close match for the general text of the plot\n* [Hussar Bold Condensed](https://www.ffonts.net/Hussar-Bold-Condensed.font), a not-that-great match for the main title, but it'll do\n\nIt was sufficient for me to install these fonts on my system (macOS Big Sur running R v4.0.5) and invoke them by name, as you'll see through the rest of this walkthrough. Your mileage may vary.\n\n### Constants\n\nI've set a few values as objects so they can be reused and changed more easily without having to copy-paste in the body of the script. Note that I've used the convention here that constants are `ALL_CAPS`, so they're easier to spot in the plotting code.\n\n<details><summary>Click for constants (I hid this because it's dull)</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\n# Constants: general\nCEX       <- 0.8      # font size\nYDIV      <- 1000     # division for y-axis\nBLACK     <- \"black\"  # easy to supply off-black instead\nWHITE     <- \"white\"\nXTICK_LEN <- 0.02     # x axis tick length\nYTICK_LEN <- 0.03\n\n# Constants: lineplot (LP)\nLP_YLIM      <- c(0, 12)  # y-axis limite\nLP_WIDTH     <- 3         # width of lines\nLP_YTICK_SEQ <- seq(2, 10, 2)  # y tick locations \nLP_YLAB_SEQ  <- seq(0, 12, 2)  # y label locations\n\n# Constants: barplot (BP)\nBP_YLIM        <- c(0, 25)\nBP_YTICK_SEQ   <- seq(5, 20, 5)\nBP_YLAB_SEQ    <- seq(0, 25, 5)\nBP_SPACE       <- 0.5  # space between bars\nBP_HATCH_ANGLE <- 45   # hatchmark angle\nBP_HATCH_HI    <- 25   # hatchmark density\nBP_HATCH_MID   <- 22\nBP_HATCH_LO    <- 12\n```\n:::\n\n</details>\n\n### Start a graphics device\n\nWith base plotting you first open a new 'device' so that your plotting calls can be captured. You specify things here like the write path and dimensions. When you've finished your plotting code, you run `dev.off()` to close the device and save the output.\n\nHere I'm using `png()` so the output is a PNG file. This function is part of the suite of in-built graphics devices from the {grDevices} package, which also includes things like the lossless `tiff()` format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npng(\n  \"~/Desktop/cottonviz.png\",  # set to a path of your choice\n  width  = 20,\n  height = 12.2,\n  units  = \"cm\",\n  res    = 1200\n)\n```\n:::\n\n\nYou can think of this as setting up a canvas and then you're going to layer plot objects over the top of it (perhaps not too dissimilar to {ggplot2}). Beware: things like units and placement of elements will be related to the `height` and `width` that you've declared here.\n\nThat means you shouldn't necessarily rely on the graphics windows opened by R or RStudio when previewing the final output; you should rely only on a saved output.\n\n### Plotting parameters\n\nWith base R you can set various `par()`ameters that apply to your plot as a whole. The chart we're recreating is one row of two plots, so we can use `mfrow = c(1, 2)`, for example. We can also set some global things like the font family.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set plotting parameters\npar(\n  mgp = c(0, 0.2, 0),   # gap to tick labels\n  mar = c(3, 2, 4, 1),  # margins\n  mfrow = c(1, 2),      # plot layout\n  ann = FALSE,          # annotation\n  cex.axis = CEX,       # axis font size\n  family = \"Routed Gothic\"  # font family\n)\n```\n:::\n\n\nI've selected '[Routed Gothic](https://webonastick.com/fonts/routed-gothic/)' as the font family and I think it's a great match. It's based on the Leroy lettering set that was often used for hand-labelling technical drawings.\n\n## 2. Line plot\n\nSo, here's the first 'hack'. I'm going to set up a 'fake' scatter plot with no content and then we're going to add our desired content to it sequentially. This provides the correct plot dimensions to which we can add bespoke details.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dummy x-y scatter plot\nplot(\n  x = cotton$Year,\n  y = cotton$`US consumption` / YDIV,\n  axes = FALSE,    # no axes\n  pch = \"\",        # expunge axes/points\n  ylim = LP_YLIM,  # y-axis min/max limits\n  xaxs = \"i\",      # set 'absolute origin'\n  yaxs = \"i\"\n)\n```\n:::\n\n\nNote the use of `yaxs` and `xaxs = \"i\"` which ensures that the axis limits are exactly at the minimum and maximum values for the axis (e.g. it forces [0,0] to be in the extreme lower-left.)\n\nNow we can build up the plot axes with manual calls to `axis()`. \n\nIn short, we supply to `axis()` the `side` (`1` is the x-axis) and the locations for things like `labels` and `tck` (ticks). I've used separate calls for ticks and labels on the primary y-axis (`side = 2`) because the min and max values (0 and 12) are actually set just above and below the ticks. I've copied the primary y-axis call for a secondary y-axis (`side = 4`) too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Manual x-axis\naxis(\n  side = 1,\n  at = 1942:1948,\n  labels = c(1942, paste0(\"'\", 43:48)),  # i.e. 1942, '43, '44, etc\n  tck = XTICK_LEN,   # tick length\n  col = WHITE,       # i.e. axis isn't visible\n  col.ticks = BLACK  # i.e. axis ticks are visible\n)\n\n# Manual y-axis (just ticks)\naxis(\n  side = 2,\n  at = LP_YTICK_SEQ,  # no ticks needed for origin/max\n  labels = FALSE, \n  tck = YTICK_LEN, \n  col = WHITE,\n  col.ticks = BLACK\n)\n\n# Manual y-axis (just labels)\naxis(\n  side = 2,\n  at = c(0.2, LP_YTICK_SEQ, 11.8),  # min/max labels above/below tick\n  labels = LP_YLAB_SEQ, \n  las = 1,\n  tck = 0,\n  col = WHITE, \n  col.ticks = BLACK\n)\n\n# Manual secondary y-axis (just ticks)\naxis(\n  side = 4,\n  at = LP_YTICK_SEQ,\n  labels = FALSE,\n  tck = YTICK_LEN,\n  col = WHITE,\n  col.ticks = BLACK\n)\n```\n:::\n\n\nI don't know of a way to make the y-axis label appear horizontally at the top of the axis, so I've used `mtext()` to place a label in the margin (hence the 'm' in `mtext`) space above the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Y-axis label: horizontal at top of axis\nmtext(\"Millions of Boles\", side = 3, cex = CEX - 0.1, adj = -0.07)\n```\n:::\n\n\nThis gives us all the ticks and labels, but we're missing the axes themselves. Spear used a box around the whole plot; you can do this in R with a call to `box()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bounding box around plot boundary\nbox()\n```\n:::\n\n\nHere's what the plot looks like at this point:\n\n![](resources/1_lp_1.png){fig-alt=\"The recreated plot in progress: the axes and labels of the lineplot are the only thing added to the plotting area.\" width=\"100%\"}\n\nNext we need to actually plot some data! We can use `mapply()` to pass the parameters to a custom function that contains calls to `lines()` and `text()`, which lay down the trace and label for each group iteratively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate lines and labels for each group iteratively\nmapply(\n  function(type, lty, x, y, label) { \n    lines(cotton$Year, cotton[[type]] / YDIV, lty = lty, lwd = LP_WIDTH)\n    text(x, y, label, cex = CEX)\n  },\n  type = c(\"US consumption\", \"Exports\", \"Stocks\"),\n  lty = c(\"solid\", \"longdash\", \"dashed\"),\n  x = c(1946.5, 1943.7, 1946.2), \n  y = c(11, 3.2, 6.8),\n  label = c(\"U. S. Consumption\", \"Exports\", \"Carry – over\\nstocks\")\n)\n```\n:::\n\n\nI would normally do iterative things with the `map()` family of functions from [the {purrr} package](https://purrr.tidyverse.org/) by Lionel Henry and Hadley Wickham, so I welcome suggestions on appropriate use of the various base `*apply()` functions in this scenario.\n\nFinally we can add the arrows that point to the lines from the labels. Base R has a handy `arrows()` function to which you supply start and end coordinates and parameters for the arrowhead. I used an advanced-coder technique called 'trial-and-error' for this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add arrows from labels to lines\narrows(\n  x0 = c(1945.4, 1944.2, 1945.5),  # arrow origin\n  y0 = c(10.8, 3.2, 7.1),\n  x1 = c(1945, 1944.4, 1945.2),    # arrowhead\n  y1 = c(9.6, 3, 6.8),\n  angle = 12,    # 'pointy-ness'\n  length = 0.07  # arrowhead length\n)\n```\n:::\n\n\nExcellent, that's the line plot completed. The plot now looks like this:\n\n![](resources/1_lp_2.png){fig-alt=\"The recreated plot in progress: the line plot has axes, labels, data and arrows.\" width=\"100%\"}\n\n## 3. Bar plot\n\nThe `barplot()` function is a little different to the `plot()` function.\n\nIt doesn't take the data as `x` and `y` arguments; we can instead pass it a single object that contains our data with each column corresponding to columns in the plot. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert dataframe structure for passing to barplot()\ncotton_transpose <- t(cotton)[2:4,] / YDIV\ncolnames(cotton_transpose) <- c(\"\", paste0(\"'\", 43:48))\ncotton_transpose\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         '43    '44   '45    '46   '47   '48\nUS consumption 11.160  9.993  9.693 9.423 10.072 9.374 7.833\nExports         1.480  1.139  2.007 3.613  3.545 1.968 4.785\nStocks         10.657 10.744 11.164 7.326  2.530 3.080 5.283\n```\n:::\n:::\n\n\nNote that I've supplied column names here in the form they'll appear on the plot (e.g. `'43`), except for the first column, which I've left blank because the axis label needs to be applied separately for that one case (`1942`).\n\nSpear's cotton barplot uses hatching (i.e. parallel lines in one direction) and crosshatching (i.e. perpendicular lines laid over each other) to 'shade' the bars. This approach was used a lot in manual charting because colour wasn't necessarily available, and it was easy enough to achieve with a set square and rule.\n\nR lets you control the `density` and `angle` of shading in a `barplot()`, but the angle can only take one value. To create a crosshatch, you need to lay down a separate `barplot()` layer that is composed only of hatching in one direction. You can then supply a second `barplot()` call with the hatching in the other direction.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Barplot layer with hatching only (allows for crosshatching)\nbarplot(\n  cotton_transpose, \n  axes = FALSE,      # suppress axes\n  xaxt = \"n\",        # suppress x-axis bar labels\n  ylim = BP_YLIM,\n  space = BP_SPACE,  # space between bars\n  border = WHITE,    # border around bars\n  col = BLACK,\n  density = rep(c(BP_HATCH_HI, 0, BP_HATCH_LO), 7),  # line 'closeness'\n  angle = 360 - BP_HATCH_ANGLE  # top-left to bottom-right\n)\n```\n:::\n\n\nThis is the bar plot with only the first layer of hatching:\n\n![](resources/2_bp_1.png){fig-alt=\"The recreated plot in progress: the line plot is completed; the first layer of bar plot hatching has been added.\" width=\"100%\"}\n\nNote that this layer of hatching is only required in the bottom and top bars of the stack because they will end up being crosshatched, specifically. The middle bar will only be hatched, not crosshatched, so it's blank in this first layer.\n\nNow we can apply the rest of the bar plot. Since we want to add this `barplot()` call on top of the previous one, we need to use the argument `add = TRUE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Barplot layer with features\nbarplot(\n  cotton_transpose, \n  axes = FALSE,\n  ylim = BP_YLIM,\n  space = BP_SPACE,\n  col = BLACK,\n  density = rep(c(BP_HATCH_HI, BP_HATCH_MID, BP_HATCH_LO), 7),\n  angle = BP_HATCH_ANGLE, # bottom-left to upper-right\n  add = TRUE              # add as layer on top of existing plot\n)\n```\n:::\n\n\nAnd now we have both layers of hatching, the bar boundaries and the x-axis bar labels:\n\n![](resources/2_bp_2.png){fig-alt=\"The recreated plot in progress: the line plot is completed; the bar plot has bars with hatching and outlines, and axis labels.\" width=\"100%\"}\n\nYou'll notice I suppressed the axes again. The approach to building the bespoke bar plot axes is very similar to that of the line plot, using `axis()`, `box()` and `mtext()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Manual y-axis (just ticks)\naxis(\n  side = 2,\n  at = BP_YTICK_SEQ,\n  tck = YTICK_LEN,\n  labels = FALSE,\n  col = WHITE,\n  col.ticks = BLACK\n)\n\n# Manual y-axis (just labels)\naxis(\n  side = 2,\n  at = c(0.4, BP_YTICK_SEQ, 24.6), \n  tck = 0, \n  labels = BP_YLAB_SEQ, \n  las = 1, \n  col = WHITE\n)\n\n# Manual secondary y-axis (just ticks)\naxis(\n  side = 4,\n  at = BP_YTICK_SEQ,\n  labels = FALSE,\n  tck = YTICK_LEN,\n  col = WHITE,\n  col.ticks = BLACK\n)\n\n# X-axis label: horizontal at top of axis\nmtext(\"Millions of Boles\", side = 3, adj = -0.09, cex = CEX - 0.1)\n\n# The first label is at the origin\nmtext(\"1942\", side = 1, line = 0.2, adj = -0.06, cex = CEX)\n\n# Bounding box around plot boundary\nbox()\n```\n:::\n\n\nAwkwardly, the first x-axis label in the bar plot (`1942`) has to be created manually because it's placed under the origin point in the original chart, rather than under the bar itself, which is the default.\n\nFinally we can add the labels over the top of the bars. I've done this in a similar iterative manner as the line plot, where there's a call to create a white box with `rect()`, over which a `text()` label can be applied.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply labels iteratively\nmapply(\n  function(x, y, xleft, ybottom, xright, ytop, label) { \n    rect(xleft, ybottom, xright, ytop, col = WHITE, border = NA)\n    text(x, y, label, cex = CEX)\n  },\n  xleft   = c(4.4,  4.3,  3.2),\n  ybottom = c(14.4, 10.4, 6.4),\n  xright  = c(6.6,  6.7,  7.8),\n  ytop    = c(15.6, 11.6, 7.6),\n  x = 5.5,\n  y = c(15, 11, 7),\n  label = c(\"STOCKS*\", \"EXPORTS\", \"U. S. CONSUMPTION\")\n)\n```\n:::\n\n\nAnd here's our visualisation with both plots completed:\n\n![](resources/2_bp_3.png){fig-alt=\"The recreated plot in progress: both the line plot on the left and the bar plot on the right are completed with axes, data, labels and arrows.\" width=\"100%\"}\n\n## 4. Margin labels\n\nWith both charts completed, we can add with `mtext()` the titles and captions that exist for the plot as a whole.\n\nThe main title uses a different font family than was specified in `par()`, so we override it with the `family` argument. \n\nI couldn't find a good (free) approximation of the font family that Spear used, so I've used one that has a similar 'feel', even if many of the typographical features are wrong (e.g. single-storey 'a'). Here I've settled with '[Hussar Bold Condensed](https://www.ffonts.net/Hussar-Bold-Condensed.font)'. Let me know if you recognise Spear's actual font.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Main title\nmtext(\n  text = \"Distribution   of   United   States   Cotton\",\n  outer = TRUE,  # outer plot margin\n  side = 3,      # i.e. the top\n  line = -3,     # relative to outside to plot limit\n  cex = CEX + 0.5,\n  family = \"Hussar Bold Condensed\",\n  font = 2       # bold type\n)\n```\n:::\n\n\nI left extra spaces between the words in the title text to approximate their placement in Spear's image.\n\nThe remaining labels were just a case of fiddling with the `line` and `at` arguments to get them in the right place.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 'Subtitle' for line plot\nmtext(\n  text = \"MULTIPLE CURVE\",\n  outer = TRUE,\n  side = 3,\n  line = -1,\n  adj = 0.06,  # nudge\n  cex = CEX,\n  font = 3  # italic\n)\n\n# 'Subtitle' for bar plot\nmtext(\n  text = \"COMPONENT COLUMN\",\n  outer = TRUE,\n  side = 3,\n  line = -1,\n  adj = 0.68,\n  cex = CEX,\n  font = 3\n)\n\n# Caption: source\nmtext(\n  text = \"Source: U. S. Department of Agriculture\",\n  outer = TRUE,\n  side = 1,  # bottom\n  line = -1,\n  adj = 0.02,\n  cex = CEX\n)\n\n# Caption: stocks asterisk\nmtext(\n  text = \"*END OF SEASON, JULY 31\",\n  outer = TRUE,\n  side = 1,\n  line = -2,\n  adj = 0.94,\n  cex = CEX - 0.2,\n)\n\n# Caption: US cotton\nmtext(\n  text = \"U. S. Supply of U. S. Cotton\",\n  outer = TRUE,\n  side = 1,\n  line = -1,\n  adj = 0.97,\n  cex = CEX\n)\n```\n:::\n\n\nAnd so the final output looks like this:\n\n![](resources/3_final.png){fig-alt=\"The recreated plot in progress: the recreation is complete, with both the line adn bar plots completed and the titles and captions added.\" width=\"100%\"}\n\nAnd a gif of the steps of the chart's creation, ending with the original image:\n\n![](resources/cottonviz.gif){fig-alt=\"Gif where each frame shows the progression of recreating an original plot about cotton supplies in 1940s USA. Axes and lines are added to a plot on the left, then crosshatching, bars and axes are added to a plot on the right, and finally some titles and captions are added. The original plot is shown in the final frame to compare it to the recreation.\" width=\"100%\"}\n\n## 5. Saving {#saving}\n\nHaving opened a graphics device earlier with `png()` and then added out plotting elements, we can now close the graphics device and save the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndev.off()\n```\n:::\n\n\nYou'll want to run all the code from start to finish to encompass the `png()` call at the start and the `dev.off()` call at the end. I've [put all the code in a GitHub repo](https://github.com/matt-dray/viz-recreation) should you want to use it.\n\n## Reflections\n\nThe final output certainly isn't a perfect match for the original, but I think it gets 90% of the way there without the need for endless tweaking. There were some particularly tricky things I was able to deal with, but also some things that I need to improve to make the recreation identical to the original.\n\n### Tricky parts\n\nThere were a few non-standard plot elements that needed to be dealt with, but are relatively trivial with base R functions. To review:\n\n* the minimum and maximum labels on the y axis are not on the ticks, they're slightly above and below them, respectively\n* hatching can only be done in one direction, so it requires an 'under-layer' of hatching in the opposite direction to that of the main plot itself\n* there's no function in base to apply a text label with a filled box under it; you need to use `text()` and `rect()` together\n* the x-axis labels aren't all the same: the first is `1942` and the rest are in the form `'43`\n* the first x-axis label on the bar chart, `1942` is not actually under the bar, but under the origin\n\n### Improvements\n\nThere's a lot of things I could do, but there would be a few things to prioritise:\n\n* I've used a lot of manual adjustments to get the chart elements in roughly the right place; that's fine for a one-off chart like this, but isn't that useful for making this code more generic\n* I didn't get the ruler out and measure everything, so there are slight differences when the original and recreation are overlaid\n* I haven't really optimised the code or tried to tidy it up; there may be some unnecessary lines that were part of development that don't need to be in the final script\n* I've tried to match the font families as best I can, but the font used in the main title is particularly difficult to find a (free) match for\n* R's built-in line dashes aren't quite the same as Spear's, but I think they're close enough\n\nAnd finally a bonus improvement, though it requires you to download a package. We can save our plot with maximum resolution, etc, but for fun we can invoke some of the artefacts that are present in Spear's plot with some help from [the {magick} image-processing package](https://docs.ropensci.org/magick/index.html) via Jeroen Ooms and rOpenSci (e.g. see below for how to add blur).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magick)  # install from CRAN\n\n# Read the plot PNG\ncottonviz <- image_read(\"~/Desktop/cottonviz.png\")  # set to your path\n\n# Apply blurring parameters\ncottonviz_blur <- image_blur(\n  cottonviz,\n  radius = 14, sigma = 7  # blur parameters\n)\n\n# Save the image\nimage_write(\n  cottonviz_blur,\n  \"~/Desktop/cottonviz_blur.png\"  # set to your path\n)\n```\n:::\n\n\nThat would end up looking like this:\n\n![](resources/5_blur.png){fig-alt=\"The final recreation plot with blur applied to mimic the artefacts involved in the hand-drawing and photocopying of the original.\" width=\"100%\"}\n\nWith a bit more tweaking and addition of some noise, you could probably do a good job of mimicking the 'aged' look of the original.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-17 18:36:08 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] magick_2.7.4\n\nloaded via a namespace (and not attached):\n [1] digest_0.6.31     fastmap_1.1.1     xfun_0.39         fontawesome_0.5.1\n [5] magrittr_2.0.3    knitr_1.43.1      htmltools_0.5.5   rmarkdown_2.23   \n [9] cli_3.6.1         compiler_4.3.1    rstudioapi_0.15.0 tools_4.3.1      \n[13] evaluate_0.21     Rcpp_1.0.11       yaml_2.3.7        rlang_1.1.1      \n[17] jsonlite_1.8.7    htmlwidgets_1.6.2\n```\n:::\n:::\n\n</details>\n\n[^recreate]: As an aside, check out [#RecreationThursday on Twitter](#recreationthursday). It's a community challenge to [recreate an art piece](https://twitter.com/_natalie_oshea/status/1400526683170541570?s=20) selected each fortnight by a rotating curator (i.e. the curator changes, not that they're physically spinning).\n[^spear]: I admit to not knowing much about Spear, so I'm glad that she was selected as the subject of the challenge. One thing I learnt is that Spear might be best known for the box plot, which she originated as the 'range plot' in her book [Charting Statistics](https://archive.org/details/ChartingStatistics_201801).\n[^mismatch]: You may have noticed that the 'US consumption' line appears a little different to that in Spear's original, where the line is flatter. I don't yet know if this is an issue with the supplied data.\n[^base]: I haven't spent much time with base plotting in the last five years (!) and I'm getting increasingly agitated by mounting dependencies in my projects. Locals have been confused recently by a strange fellow walking the streets, repeating [the tinyverse](http://www.tinyverse.org/) mantra of 'lightweight is the right weight'.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}