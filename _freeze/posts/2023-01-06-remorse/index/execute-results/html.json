{
  "hash": "af5571a34e19f05cdfb963d515b28995",
  "result": {
    "markdown": "---\ntitle: '.-././--/---/.-./.../.'\nauthor: Matt Dray\ndate: '2023-01-06'\nslug: remorse\ncategories:\n  - code\n  - package\ntags:\n  - morse\n  - r\n  - remorse\n  - sonify\n---\n\n\n<div class=\"figure\">\n<img src=\"resources/morse.png\" alt=\"Crudely drawn lineart of a Morse Code tapping machine with text saying 'dit' and 'dah' above it.\" width=\"100%\"/>\n<p class=\"caption\">You may not believe it, but I am releasing this art under CC0.</p>\n\n# tl;dr\n\n[{remorse}](https://github.com/matt-dray/remorse) is a tiny R package that converts text to [Morse Code](https://en.wikipedia.org/wiki/Morse_code) to audio.\n\n# Beat a dead morse\n\nIn [the last post](https://www.rostrum.blog/2023/01/04/rogue-sfx/) I mentioned [{sonify}](https://cran.r-project.org/package=sonify) for making R do little audible beeps and boops.\n\nIt reminded me of one (of many) unwritten micro-projects I've got kicking around in my brain: obviously you could use {sonify} to communicate Morse Code. And why not translate from text to Morse (and back) while you're at it?[^translate]\n\nTo be honest this was a classic case of name-driven development (NDD): I thought {remorse} was a funny name for a package and worked backwards from there. \n\nObviously it says 'Morse' in the name, but also 'remorse' is usually what I feel after putting together a small pointless package; pointless-package existentialism (PPE) is something I have [a track history](https://matt-dray.github.io/projects/) with.\n\nBut of course, the true remorse is that I didn't find the better package-name pun: {morseinspector}. But maybe that's too long of a name and maybe non-Brits wouldn't understand [the reference](https://en.wikipedia.org/wiki/Inspector_Morse_(TV_series)). Maybe I'm thinking too hard.[^inspector]\n\n# Oh dit-dit-dahling\n\nConsider this highly plausible scenario: it's 20XX, the apocalypse has come, and the remaining humans on planet Earth communicate by Morse Code. For some reason.[^telegraph]\n\nWow, wouldn't it be handy to have a text-to-Morse translator? \n\nWell friend, if you've managed to find an electronic thinking box in the apocalyptic barren  wastelands (assuming electricity is still available (and the machine has R installed (and the {remorse} package was downloaded before the world's internet cut out (and you know how to use R (and you don't own a simpler, more portable Morse Code translation pamphlet))))), then you will have this incredible power at your fingertips.\n\nOr maybe you'd rather risk it? Pfft.\n\n# Use the Morse...\n\nThat's an awful lot of build-up for a very simple package. Let's take a look at what little it does.\n\nAs usual, {remorse} lives on GitHub[^edgy], so it can be downloaded with a little help from the typographically-adjacent {remotes} package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.github(\"remotes\")\nremotes::install_github(\"matt-dray/remorse\")  # v0.1.1 here\n```\n:::\n\n\nThat'll install {sonify} as well, which is needed for the audio.\n\nRight so: text to Morse Code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_in <- \"Ahoy pal!\"\nmorse <- remorse::txt2morse(text_in)\nmorse\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \".-/..../---/-.-- .--./.-/.-../-.-.--\"\n```\n:::\n:::\n\n\nSo each letter has been translated to the relevant string of 'dits and dahs' ('dots' and 'dashes') that make up Morse Code. I've used a period (`.`) and hyphen (`-`) to represent these in {remorse}, with forward slashes (`/`) between Morse groups that represent individual characters, and a space for the spaces between words.\n\nNote that not all characters can be converted to Morse Code. I did some research (Wikipedia) to discover the mappings from letters, numbers and punctuation to Morse Code. This information is used internally as a lookup, but is also exported in `morse_lookup`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremorse::morse_lookup\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       A        B        C        D        E        F        G        H \n    \".-\"   \"-...\"   \"-.-.\"    \"-..\"      \".\"   \"..-.\"    \"--.\"   \"....\" \n       I        J        K        L        M        N        O        P \n    \"..\"   \".---\"    \"-.-\"   \".-..\"     \"--\"     \"-.\"    \"---\"   \".--.\" \n       Q        R        S        T        U        V        W        X \n  \"--.-\"    \".-.\"    \"...\"      \"-\"    \"..-\"   \"...-\"    \".--\"   \"-..-\" \n       Y        Z        0        1        2        3        4        5 \n  \"-.--\"   \"--..\"  \"-----\"  \".----\"  \"..---\"  \"...--\"  \"....-\"  \".....\" \n       6        7        8        9        &        '        @        ) \n \"-....\"  \"--...\"  \"---..\"  \"----.\"  \".-...\" \".----.\" \".--.-.\" \"-.--.-\" \n       (        :        ,        =        !        .        -        * \n \"-.--.\" \"---...\" \"--..--\"  \"-...-\" \"-.-.--\" \".-.-.-\" \"-....-\"   \"-..-\" \n       +        \"        ?        /          \n \".-.-.\" \".-..-.\" \"..--..\"  \"-..-.\"      \" \" \n```\n:::\n:::\n\n\nOf course, this means we can map backwards from Morse Code to letters, numbers and punctuation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext_out <- remorse::morse2txt(morse)\ntext_out\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"AHOY PAL!\"\n```\n:::\n:::\n\n\nMorse Code has no sense of case, so it just converts it all to uppercase. Like you're shouting; the most clear form of communication.\n\nSo, you can argue justifiably that `txt2morse(\"yo\") |> morse2txt()` is just a worse version of `toupper()` that strips out certain unmappable characters.\n\nBut of course it does so much more. Well, one thing more. Let's go from Morse to audio.\n\nFirst a reminder of the code from earlier:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmorse\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \".-/..../---/-.-- .--./.-/.-../-.-.--\"\n```\n:::\n:::\n\n\nAnd to generate audio you just:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremorse::morse2sfx(morse)\n```\n:::\n\n\nThe output sounds like this:\n\n<html><audio controls><source src=\"/output/remorse/remorse.wav\" type=\"audio/wav\"></audio></html>\n\nWow. It plays audible dits (one 'time unit', default is `dit_length = 0.05` in seconds), dahs (three), spaces between dits and dahs (one), spaces between Morse character groupings (three) and spaces between words (seven). Tell all your friends.\n\nSo, do I still feel remorse for writing {remorse}, even after demonstrating its incredible power? Yes. All I ask is that you think of me in those apocalyptic wastelands.\n\n<div class=\"tip\"> `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/></svg>`{=html} <b>Update</b>\n\nI just realised you can turn Morse Code into... Morse Code. Mind blown.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremorse::txt2morse(\"hi\") |>\n  remorse::txt2morse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \".-.-.-/.-.-.-/.-.-.-/.-.-.-/-..-./.-.-.-/.-.-.-\"\n```\n:::\n:::\n\n\n'Morsest Code'. Why? Absolutely.\n\nMaybe I've been watching [too much Tom7](https://www.youtube.com/watch?v=HLRdruqQfRk) recently.\n\n</div>\n\n\n---\n<details><summary>Session info</summary>\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Big Sur/Monterey 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-04-10\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.0   2023-01-09 [1] CRAN (R 4.2.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.2.0)\n evaluate      0.20    2023-01-17 [1] CRAN (R 4.2.0)\n fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.0)\n fontawesome   0.2.2   2021-07-02 [1] CRAN (R 4.2.0)\n htmltools     0.5.2   2021-08-25 [1] CRAN (R 4.2.0)\n htmlwidgets   1.5.4   2021-09-08 [1] CRAN (R 4.2.0)\n jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.2.0)\n knitr         1.42    2023-01-25 [1] CRAN (R 4.2.0)\n remorse       0.1.1   2023-01-06 [1] Github (matt-dray/remorse@4540098)\n rlang         1.0.6   2022-09-24 [1] CRAN (R 4.2.0)\n rmarkdown     2.14    2022-04-25 [1] CRAN (R 4.2.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n xfun          0.37    2023-01-31 [1] CRAN (R 4.2.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n</details>\n\n[^inspector]: Not to mention that it's a bad pun: the package doesn't 'inspect' Morse; it translates it. Yep, definitely I'm thinking too hard about this.\n[^telegraph]: Personally I'd rather see [telegraphy](https://en.wikipedia.org/wiki/Telegraphy) make a comeback.\n[^edgy]: Wow, how edgy, maybe he's had a bad run in with the CRAN maintainers, or perhaps he's read the bit of [the CRAN repository policy](https://cran.r-project.org/web/packages/policies.html) that says 'a package’s contribution has to be non-trivial' ([whatever that means](https://fosstodon.org/@mattdray/109644645694966586)). Or he's just lazy.\n[^translate]: Which completes my hattrick of 'R translation' packages, I suppose. [The {r2eng} package](https://www.rostrum.blog/2020/11/14/hello-r2eng/) attempts to [translate R code to spoken English and have your computer speak it out loud](https://www.rostrum.blog/2020/11/14/hello-r2eng/). [The {dialga} package](https://www.github.com/matt-dray/dialga/) takes R code and [translates it to cron strings and those cron strings to English](https://www.rostrum.blog/2021/04/10/dialga/).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}