{
  "hash": "21d2b8618068c1e58c98fa2a3124192c",
  "result": {
    "markdown": "---\ntitle: Plotception with {ggpattern}\nauthor: Matt Dray\ndate: '2020-04-05'\nslug: yo-dawg\ncategories:\n  - dataviz\n  - ggpattern\n  - ggplot2\n  - r\n---\n\n\n## tl;dr\n\n[The {ggpattern} package](https://coolbutuseless.github.io/package/ggpattern/) lets you add pattern fills to your {ggplot2} plot... so I did the inevitable.\n\n## Yo dawg\n\nFollowers of this blog might remember [the unveiling of `cloud_pie()`](https://www.rostrum.blog/2018/05/25/cloud-pie/), the greatest new visualisation technique of the 21st Century.\n\nLuckily, R-package machine [mikefc](https://coolbutuseless.github.io/) of [\\@coolbutuseless](https://twitter.com/coolbutuseless) has released [{ggpattern}](https://coolbutuseless.github.io/package/ggpattern/), which lets you image- or pattern-fill the bars of your {ggplot2} plot. Most usefully [with pictures of kittens or Bill Murray](https://twitter.com/coolbutuseless/status/1245099072756895746?s=20).\n\nThis has opened the door to yet another ground-breaking viz. The secret yet obvious real purpose of {ggpattern} is to put plots inside your plots.[^chartjunk]\n\nVoil√†.\n\n![Shield the eyes of any younglings.](resources/ggpattern_plot.png){fig-alt=\"A bar lot where each bar is also a plot.\" width=\"100%\"}\n\nIt may be too much to take in; let me explain. The main plot is of car weight by the number of cylinders from the mtcars dataset.\n\nBut lo, _each bar is itself a plot_ of weight by gears for the number of cylinders on the x-axis of the main plot. The most efficient plot of all time?\n\nPlease clean your blown mind from the ceilling before you leave, thank you.\n\n## The secret\n\n<details><summary>Expand for the full, hacky, non-reproducible code used to create this masterpiece.</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot weight by cylinders, with weight by gear inside\n# Using {ggpattern} by @coolbutuseless\n# https://coolbutuseless.github.io/package/ggpattern/\n\n# Load packages\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggpattern)\n\n# Prepare mean wt per cyl with filenames for gear-wt plots\ncyl_weights <- mtcars %>% group_by(cyl) %>% summarise(mean_wt = mean(wt))\n\n# See the pixel dimensions of the bars\n# This will depend on the size of your plot; I just used the default 7 x 7\ndummy_plot <- ggplot(cyl_weights, aes(as.character(cyl), mean_wt)) +\n  geom_col_pattern(pattern = \"placeholder\", pattern_type = \"dummy\") +\n  labs(\n    title = \"Weight by gears by weight by cylinders\",\n    caption = \"Thanks to {ggpattern} by @coolbutuseless\",\n    x = \"Cylinders\", y = \"Weight\"\n  ) +\n  theme_grey(base_size = 15)\n\n# Save the dummy plot\nggsave(\"~/Desktop/dummy_plot.png\", dummy_plot)  # defaults to 7 x 7 output\n```\n:::\n\n\n![](resources/dummy_plot.png]{fig-alt=\"Subplot of weight by gears for 4 cylinders.\" width=\"100%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot of mean weight by gear for each cyl\nsub_plots <- mtcars %>% \n  group_by(cyl) %>% nest() %>% ungroup() %>%  # listcol by cyl\n  mutate(\n    data_mean = map(data, ~group_by(., gear) %>% summarise(mean_wt = mean(wt))),\n    plot = map(  # listcol of plots for each cyl\n      data_mean,\n      ~ggplot(., aes(as.character(gear), mean_wt)) +\n        labs(title = \"Weight by gears\", x = \"Gears\", y = \"Weight\") +\n        geom_col() +\n        theme_grey(base_size = 60)  # trial and error until it looked okay\n    ),\n    filename = paste0(cyl, \"_cyl.png\")  # unique filename based on cyl value\n  ) %>% \n  arrange(cyl) %>%   # in order of cy number\n  mutate(  # pixel values manually added from looking at the dummy plot output!\n    width = 141 * 0.084666667,  # conversion from pixels to mm given 300 dpi\n    height = c(261, 357, 458) * 0.084666667\n  ) %>% \n  select(filename, plot, height, width)\n\n# Save the sub-plots as separate files wth provided dimensions\n# These will be read into the main plot\npwalk(sub_plots, ggsave, path = \"~/Desktop/\")\n```\n:::\n\n\n![](resources/8_cyl.png){fig-alt=\"Subplot of weight by gears for 8 cylinders.\" width=\"33%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot weight by cylinders, with weight by gear inside\nmain_plot <- cyl_weights %>% \n  mutate(  # add filepaths for where to find the saved subplots\n    filename = case_when(\n      cyl == 4 ~ \"~/Desktop/4_cyl.png\",\n      cyl == 6 ~ \"~/Desktop/6_cyl.png\",\n      cyl == 8 ~ \"~/Desktop/8_cyl.png\",\n    )\n  ) %>% \n  ggplot(aes(as.character(cyl), mean_wt)) +\n  geom_col_pattern(\n    aes(pattern_filename = I(filename)),\n    pattern = \"image\",\n    pattern_type = \"squish\"\n  ) +\n  labs(\n    title = \"Weight by gears by weight by cylinders\",\n    caption = \"Thanks to {ggpattern} by @coolbutuseless\",\n    x = \"Cylinders\", y = \"Weight\"\n  ) +\n  theme_grey(base_size = 15)\n\n# Save plot\nggsave(\"~/Desktop/ggpattern_plot.png\", main_plot)  # default 7 x 7 output\n```\n:::\n\n</details>\n\nIn short, you can use arguments `pattern = \"placeholder\"` and `pattern_type = \"dummy\"` to `geom_col_pattern()` to produce a plot containing pixel dimensions for each bar.\n\nFrom there, you can create plots that match those dimensions. Then you can recreate your plot but this time use  argument `pattern = \"image\"` and provide the filepaths as an `aes()`thetic. \n\nBless you, [\\@coolbutuseless](https://twitter.com/coolbutuseless).\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2024-07-14 20:13:50 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.4.0 (2024-04-24)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.3.9000   \n [5] tools_4.4.0       htmltools_0.5.8.1 rstudioapi_0.16.0 yaml_2.3.8       \n [9] rmarkdown_2.26    knitr_1.46        jsonlite_1.8.8    xfun_0.43        \n[13] digest_0.6.35     rlang_1.1.4.9000  evaluate_0.23    \n```\n:::\n:::\n\n</details>\n\n[^chartjunk]: It can't be chartjunk if it's simply more charts, he said, after posting a tweet about it on April 1st.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}