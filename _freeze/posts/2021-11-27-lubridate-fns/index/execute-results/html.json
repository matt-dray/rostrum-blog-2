{
  "hash": "d580ff080d85e38f5c08317c0de0c409",
  "result": {
    "markdown": "---\ntitle: \"{itdepends} on {lubridate}\"\ndate: 2021-11-27\nslug: lubridate-fns\ncategories:\n  - itdepends\n  - lubridate\n  - r\n---\n\n::: {.cell}\n\n:::\n\n\n![](resources/calndar.png){fig-alt=\"A crudely-drawn calendar that says '1 dependency' in the style of a date\" width=\"50%\"}\n\n## tl;dr\n\nI used [{itdepends}](https://github.com/r-lib/itdepends) to see how CRAN packages depend on [{lubridate}](https://lubridate.tidyverse.org/), which [was _not_ removed from CRAN](What if [the {lubridate} package was removed from CRAN](https://github.com/tidyverse/lubridate/issues/998)?) recently.\n\n## Lubrigate\n\nA test failure in [{lubridate}](https://lubridate.tidyverse.org/) led to hundreds of R developers being emailed about [its potential expulsion from CRAN](https://github.com/tidyverse/lubridate/issues/998), which also threatened the hundreds of packages that depend on it. \n\nI see the benefit of minimising dependencies. I also understand the drawbacks of reinventing the wheel. Maybe {lubridate} is a good dependency: a simple API, part of the popular {tidyverse}, and it handles stuff you can't be bothered with (like what's 29 February plus one year?).\n\n[Jim Hester spoke at rstudio::conf(2019) about dependencies](https://www.tidyverse.org/blog/2019/05/itdepends/). His [{itdepends}](https://github.com/r-lib/itdepends) package helps you understand their scale and impact on your package.[^tim]\n\nSo, for fun, I'm looking at how {lubridate} is used by packages that import it.\n\n## CRANk it up\n\n`CRAN_package_db()` is a convenient function that returns information about packages available on CRAN. We can filter it for the packages that import {lubridate}, i.e. they have {lubridate} in the `Imports` section of their DESCRIPTION file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(tidyr)\nlibrary(stringr)\n\ncran <- tools::CRAN_package_db()\n\nimports_lubridate <- cran |> \n  filter(str_detect(Imports, \"lubridate\")) |> \n  pull(Package)\n\nsample(imports_lubridate, 5)  # random sample\n```\n:::\n\n```\n[1] \"quantdates\"  \"GetDFPData2\" \"esmprep\"     \"strand\"      \"votesmart\"\n```\n\nRight, so that's 494 packages out of 18,515 (3%). Is that a lot? Well, the tidyverse package {dplyr}—the Swiss Army knife of data wrangling—is listed in the `Imports` of 2353 by comparison.\n\n## InstALL\n\nSo, perhaps this is a little nuts, but we're going to install _all_ the {lubridate}-dependent packages because {itdepends} works with locally-installed packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp <- tempdir()  # temporary folder\n\npurrr::walk(\n  imports_lubridate,\n  ~install.packages(\n    .x, \n    destdir = tmp, \n    dependencies = FALSE,  # skip installing dependencies\n    repos = \"https://cran.ma.imperial.ac.uk/\"  # mirror\n  )\n)\n```\n:::\n\n\nThis takes a little while. There's probably faster methods, like maybe [the {pak} package](https://pak.r-lib.org/), but for now I just used what worked. I've also hidden the output, obviously. It's also possible that some packages will error out and won't install. Oh no! Ah well.\n\n## It depends on {itdepends}\n\n{itdepends} is not available from CRAN, but you can install from GitHub.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"jimhester/itdepends\")\n```\n:::\n\n\nNow we can pass each of package name to the `dep_usage_package()` function of {itdepends} in a loop. We get back a dataframe for each package, listing each function call it makes and the package that the function comes from.\n\nI've added a mildly unorthodox use of `next`, [borrowed from StackOverflow](https://stackoverflow.com/a/55937737), because I was having trouble with the loop after a failure.\n\n\n::: {.cell hash='index_cache/html/itdepends-loop_0bafedc3cdc8616e1772f9aa234ab376'}\n\n```{.r .cell-code}\ndep_list <- vector(\"list\", length(imports_lubridate)) |> \n  setNames(imports_lubridate)\n\nfor (i in imports_lubridate) {\n  \n  skip <- FALSE\n  \n  tryCatch({ \n    dep_list[[i]] <- itdepends::dep_usage_pkg(i)\n    dep_list[[i]]$focus <- i\n  },\n  error = function(e) { \n    dep_list[[i]] <- data.frame(\n      pkg   = NA_character_,\n      fun   = NA_character_,\n      focus = NA_character_\n    )\n    skip <<- TRUE \n  })\n  \n  if (skip) next\n  \n}\n```\n:::\n\n\nI absolutely do not claim this to be the best, most optimised approach. But it works for me.\n\n## Dependensheeesh\n\nNow that {itdepends} has extracted all the function calls from each of the packages, we can take a look at their frequencies.\n\n### Example\n\nHere's the top 10 most-used functions from the first package alphabetically: [{academictwitteR}](https://github.com/cjbarrie/academictwitteR).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex_pkg <- \"academictwitteR\"\n\ndep_list[[ex_pkg]] |> \n  count(pkg, fun, sort = TRUE) |>\n  slice(1:5)\n```\n:::\n\n```\n# A tibble: 5 × 3\n  pkg   fun       n\n  <chr> <chr> <int>\n1 base  <-      228\n2 base  {       197\n3 base  if      109\n4 base  $        90\n5 base  !        42\n```\n\nIt's not particularly exciting to know that the top 5 are made up of base R functions like the assignment arrow (`<-`), the dollar-sign (`$`) data accessor[^nzd] and the square bracket (`[`). We also don't really care about the package's internal functions. Let's filter out these packages and re-count\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_pkgs <- sessionInfo()$basePkgs\n\ndep_list[[ex_pkg]] |>\n  filter(!pkg %in% c(base_pkgs, ex_pkg)) |> \n  count(pkg, fun, sort = TRUE) |> \n  slice(1:10)\n```\n:::\n\n```\n# A tibble: 10 × 3\n   pkg       fun                n\n   <chr>     <chr>          <int>\n 1 lifecycle deprecate_soft    16\n 2 magrittr  %>%               14\n 3 dplyr     bind_rows          8\n 4 dplyr     left_join          5\n 5 dplyr     select_if          5\n 6 httr      status_code        4\n 7 jsonlite  read_json          4\n 8 purrr     map_dfr            4\n 9 tibble    tibble             4\n10 dplyr     distinct           3\n```\n\nAha. We can see immediately that the authors have made use of tidyverse to write their package, since you can see {dplyr}, {tibble}, etc, in there. This makes the use of {lubridate} relatively unsurprising. \n\nHere's the {lubridate} functions used by this package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndep_list[[ex_pkg]] |>\n  filter(pkg == \"lubridate\") |> \n  count(pkg, fun, sort = TRUE)\n```\n:::\n\n```\n# A tibble: 4 × 3\n  pkg       fun             n\n  <chr>     <chr>       <int>\n1 lubridate as_datetime     1\n2 lubridate seconds         1\n3 lubridate with_tz         1\n4 lubridate ymd_hms         1\n```\n\nSo this package uses four {lubridate} functions for conversion and formatting of datetimes.\n\n### All packages\n\nNow let's take a look at the function calls across all the packages that import {lubridate}. I'm first going to convert the list of results to a dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndep_df <- do.call(rbind, dep_list)\n```\n:::\n\n\n#### Function use by package\n\nThis is a count of the number of uses of each {lubridate} function by each of the the `focus` packages (i.e. the packages we installed).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npkg_fn_count <- dep_df |>\n  filter(pkg == \"lubridate\") |>\n  count(focus, fun, sort = TRUE)\n\npkg_fn_count |> slice(1:5)\n```\n:::\n\n```\n# A tibble: 5 × 3\n  focus        fun         n\n  <chr>        <chr>   <int>\n1 PriceIndices month    1096\n2 PriceIndices year      678\n3 tidyndr      as_date    53\n4 RClimacell   with_tz    52\n5 RobinHood    ymd_hms    52\n```\n\nHoly moley, the {PriceIndices} package calls `month()` and `year()`, used to extract elements of a date, over 1400 times combined.\n\n#### Unique function use by package\n\nWe can also look at things like the packages that make calls to the greatest number of unique {lubridate} functions. Here's the top 5.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfn_distinct_count <- dep_df |>\n  filter(pkg == \"lubridate\") |>\n  distinct(focus, fun) |>\n  count(focus, sort = TRUE) \n\nfn_distinct_count |> slice(1:5)\n```\n:::\n\n```\n# A tibble: 5 × 2\n  focus              n\n  <chr>          <int>\n1 photobiology      26\n2 mctq              25\n3 fmdates           21\n4 finbif            15\n5 xml2relational    15\n```\n\nSo these packages are using more than 10 unique functions from {lubridate}, which is pretty extensive usage. It may be tricky to do away with the convenience of the dependnecy in these cases, especially.\n\nConversely, a quick histogram reveals that a large number of packages are actually using just a single {lubridate} function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(\n  fn_distinct_count$n,\n  breaks = 30,\n  main = \"Unique {lubridate} functions used by\\npackages importing {lubridate}\",\n  xlab = \"Function count\"\n)\n```\n:::\n\n![](resources/hist-unique-lubridate-fns-1.png){fig-alt=\"Histrogram of unique lubridate functions used by the packages that import lubridate. The vast majority are using 1 or 2, with a long tail out to about 25.\" width=\"100%\"}\n\nMaybe the dependency could be dropped in these cases?\n\nOut of interest, which {lubridate} function is the most frequent in packages that use just one?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfocus_one_fn <- fn_distinct_count |>\n  filter(n == 1) |>\n  pull(focus)\n\npkg_fn_count |> \n  filter(focus %in% focus_one_fn) |> \n  count(fun, sort = TRUE) |> \n  slice(1:5)\n```\n:::\n\n```\n# A tibble: 5 × 2\n  fun             n\n  <chr>       <int>\n1 as_datetime     7\n2 as_date         6\n3 ymd             6\n4 ymd_hms         6\n5 is.Date         4\n```\n\nLooks like some pretty standard functions, like converting to a date (`as_date()`, `as_datetime()`) or to parse dates with a particular time component (`ymd_hms` for year, month, date, hour, minute, seconds, and `ymd()`).\n\nI think this is interesting: some packages are importing {lubridate} in its entirety to use a single function. And these functions have base R equivalents with no package-dependency cost. Without diving too deep, this implies that people are using {lubridate} because of syntax familiarity or perhaps because they're already loading other tidyverse packages anyway. \n\n#### Non-unique function use by package\n\nWhat about total calls to {lubridate} functions by each of the dependent package? This is on-unique, so could include one function being called multiple times by a given package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfn_nondistinct_count <- dep_df |>\n  filter(pkg == \"lubridate\") |>\n  count(focus, sort = TRUE)\n\ndep_df |> \n  count(focus) |> \n  left_join(\n    fn_nondistinct_count,\n    by = \"focus\",\n    suffix = c(\"_total\", \"_lub\")\n  ) |> \n  mutate(percent_lub = round(100 * n_lub / n_total, 1)) |> \n  arrange(desc(percent_lub)) |>\n  slice(1:5)\n```\n:::\n\n```\n# A tibble: 5 × 4\n  focus        n_total n_lub percent_lub\n  <chr>          <int> <int>       <dbl>\n1 RClimacell      2241   225        10  \n2 riem             113     9         8  \n3 quantdates       534    42         7.9\n4 rtrends          101     8         7.9\n5 PriceIndices   23235  1805         7.8\n```\n\nWow, 10% of calls by [the {RClimacell} package](https://nikdata.github.io/RClimacell/) involve {lubridate} functions. Make sense: this package relates to weather readings at certain time intervals.\n\nAnd another quick histogram of what the distribution looks like.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(\n  fn_nondistinct_count$n,\n  breaks = 30,\n  main = \"Non-unique {lubridate} functions used by\\npackages importing {lubridate}\",\n  xlab = \"Function count\"\n)\n```\n:::\n\n![](resources/nonunique-lubridate-count-1.png){fig-alt=\"Histrogram of unique lubridate functions used by the packages that import lubridate. The vast majority are using 1 or 2, with a long tail out to about 25.\" width=\"100%\"}\n\nHuh, so the number of non-unique {lubridate} calls is almost always less than 50 per package. Seems in general that a small number of {lubridate} functions are called per dependent package, but they might be called a lot.\n\n## You do you\n\nDoes the information here imply that many developers could consider removing their small number of {lubridate} calls in favour of date-related base functions? Maybe. That's up to the developers.\n\nUltimately, {itdepends} might be a useful tool for you to work out if you need all the dependencies you have. Other tools are out there; [I read recently](https://ashbaldry.github.io/2021-11-25-depcheck-r-dependency-checker/) about [Ashley Baldry's {depcheck} package](https://github.com/ashbaldry/depcheck), for example\n\nIt might be interesting to redo this investigation for all CRAN packages and their dependencies, but I don't have a personal CRAN mirror and I don't write particularly performant code.\n\nAnyway, don't listen to me: I write joke packages that I don't put on CRAN, lol.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-06 20:42:28 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^tim]: [Tim](https://twitter.com/_TimTaylor_) reminded me of this package/nerdsniped me.\n[^nzd]: You should [be aware of the international conspiracy](https://www.rostrum.blog/2021/07/15/dollar-dollar/) behind the use of this symbol in R.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}