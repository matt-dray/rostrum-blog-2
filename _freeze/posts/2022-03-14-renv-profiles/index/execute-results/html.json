{
  "hash": "2e02c54586a36af01e0738fc94cac519",
  "result": {
    "markdown": "---\ntitle: 'Reproducible {distill} posts with {renv} profiles'\ndate: 2022-03-15\nslug: renv-profiles\ntags:\n  - blog-meta\n  - distill\n  - r\n  - renv\n  - reproducibility\n---\n\n\n![](resources/profiles.png){fig-alt=\"Diagram showing two squares representing blog posts, each inside separate squares representing {renv} profiles, both inside a larger rectangle representing the blog profile.\" width=\"100%\"}\n\n## tl;dr\n\nI think you can use [the {renv} package](https://rstudio.github.io/renv/index.html) to create separate [reproducible environment profiles](https://rstudio.github.io/renv/articles/profiles.html) for each of your [{distill} blog posts](https://rstudio.github.io/distill/).\n\n## Profiled\n\nFunctionality comes and goes in R packages. How do you deal with that in the context of a blog built with R? What if you need to go back and change something in a post from four years ago?[^four]\n\nI built [a demo {distill} blog](https://renv-profiles-test.netlify.app/) to test whether [the {renv} package](https://rstudio.github.io/renv/index.html) might be a viable solution for reproducibility on a post-by-post basis.\n\n{renv} is a package by Kevin Ushey that records your dependencies in a text 'lockfile'. It typically works on the scale of a whole project, but [since version 0.13.0](https://rstudio.github.io/renv/articles/profiles.html) you can have multiple profiles _within_ a given project.\n\nI think this means that each post can have its own profile with its own distinct set of packages and package versions.\n\nThat means you can easily recreate a specific environment for a given post at a given time if you need to alter and re-render it in future.\n\n## Example\n\nI'm presenting this here as a theory, really, but I've also [made a demo blog](https://renv-profiles-test.netlify.app/) to try it out. It seems to work.\n\nThere are two posts on the demo blog. They both use the {dplyr} package, but [one depends on an old version](https://renv-profiles-test.netlify.app/posts/2022-03-14-dplyr-085/) (0.8.5) and [one depends on the current version](https://renv-profiles-test.netlify.app/posts/2022-03-14-dplyr-108/) (1.0.8).\n\nUsing {renv} profiles means that these package versions don’t interfere with each other.\n\nThe [post depending on the older {dplyr} version](https://renv-profiles-test.netlify.app/posts/2022-03-14-dplyr-085/) _can’t_ access the `across()` function, but [the post depending on the newer {dplyr} version](https://renv-profiles-test.netlify.app/posts/2022-03-14-dplyr-108/) _can_ use `across()`. \n\nIn other words, the environments associated with the profiles for each post are totally isolated from each other.\n\n## How to\n\nOf course, you first need a blog. I used {distill}[^blogdown] for the demo, a package by JJ Allaire, Rich Iannone, Alison Presmanes Hill and Yihui Xie. You can [follow the guidance from RStudio](https://rstudio.github.io/distill/), but basically:\n\n1. Create your blog with `distill::create_blog()`\n1. Build it with `rmarkdown::render_site()` (or 'Build Website' from the Build pane of RStudio)\n1. Initiate a reproducible environment for the blog as a whole with `renv::init()`\n\nAnd then a new-post workflow could look like this:\n\n1. Create a new post with `distill_create_post()`\n1. Activate a profile for the new post with `renv::activate()`, providing a unique name to the profile argument (I suggest the post’s folder name as seen in [the blog’s _posts/ folder](https://github.com/matt-dray/renv-profiles-test/tree/main/_posts))\n1. Install the packages you need for the post with `renv::install()`\n1. Capture the dependencies in the profile’s lockfile with `renv::snapshot()`\n\nIn code, that might look a bit like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistill::create_post(\"new-post\")\n\nrenv::activate(profile = \"YYYY-MM-DD-new-post\")\n\nrenv::install(\n  \"distill\",\n  \"rmarkdown\",\n  \"palmerpenguins\",\n  \"dplyr\"\n)\n\nrenv::snapshot()\n```\n:::\n\n\nFor [the demo blog](https://renv-profiles-test.netlify.app/), I called the two profiles '2022-03-14-dplyr-085' and '2022-03-14-dplyr-108', which [you can see in the renv/profiles/ folder](https://github.com/matt-dray/renv-profiles-test/tree/main/renv/profiles) of the project repo.\n\nThese are [named uniquely for the two separate folders in the _posts/ directory](https://github.com/matt-dray/renv-profiles-test/tree/main/_posts) that contain each post's files. This naming structure should make it easy to remember the profile associated with each post.\n\nAs I worked on the posts, I switched between the two profiles with `renv::activate()`, passing the relevant profile name to the `profile` argument.\n\nNote that passing `NULL` as the `profile` argument means you switch to the default profile associated with the project as a whole, i.e. when you ran `renv::init()`.\n\n## Yeah, but?\n\nThere are obvious pros and cons to this approach.\n\nFor example, maybe it's a bit too dependent on the user: they have to remember to switch between the profiles, etc. \n\nAnd I don't think you can properly rebuild the site again with `rmarkdown::render_site()`, because this function will run based only the currently active {renv} profile, rather than rendering each post in the context of its own specific profile.\n\nBut ultimately isn't it worthwhile to be able to rebuild a post in future if you need to change or update something? Maybe.\n\nI'd be interested to hear other criticisms, especially before I try and use this approach for real.\n\nMeanwhile, I know that [Danielle Navarro has approached this](https://blog.djnavarro.net/posts/2021-09-30_on-blogging-reproducibly/) with a more thought-out and sophisticated approach and has created [a work-in-progress package called {refinery}](https://github.com/djnavarro/refinery) to help build a separate environment for each post in [a {distill} blog](https://rstudio.github.io/distill/blog.html).\n\nIn general, Danielle's blog does a brilliant job of explaining the problem of blog reproducibility and the technicals behind it. I suggest you [read that post](https://blog.djnavarro.net/posts/2021-09-30_on-blogging-reproducibly/) if you want to know more.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-02 16:16:15 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^four]: Yes, I'm thinking about this because this blog is nearly four years old and I've had some headaches trying to rebuild posts from that long ago.\n[^blogdown]: This site is built with {blogdown} rather than {distill}, so I'm using this post as a chance to learn a bit more about it. {distill} has also become quite popular in the R community, so it may be helpful for a wider readership if I use it in this demo.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}