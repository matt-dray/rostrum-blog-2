{
  "hash": "cbeda8afeb08a31a8d19abaf7912ac79",
  "result": {
    "markdown": "---\ntitle: Mission Across the Isle of Wight\ndate: 2021-05-22\nslug: mission-across-iow\ncategories:\n  - geospatial\n  - leaflet\n  - osmextract\n  - r\n  - sf\n---\n\n\n![Isle of Wight, coloured off-white.](resources/maw.png){fig-alt=\"A preview of an interactive map showing the Isle of Wight, UK, with a straight line across it. The start and endpoints are marked and there are coloured lines crossing the straight line. There are panels with options to turn on and off map layers and zoom in. Two large emoji boots are shown above the line.\" width=\"100%\"}\n\n## tl;dr\n\nI used R to identify and map hazards on a potential straight-line walking route across the Isle of Wight, mimicking [Tom 'GeoWizard' Davies's 'Mission Across' series of YouTube videos](https://www.youtube.com/watch?v=M7w986ni7_g&list=PL_japiE6QKWphPxjqn0KJjfoRnuVSELaI). You can [jump straight to the interactive map](#map).\n\n## GeoWizard\n\nTom 'GeoWizard' Davies is perhaps best known for [his YouTube channel](https://www.youtube.com/c/GeoWizard), where he posts [Twitch stream](https://www.twitch.tv/geowizardstreams) highlights of [Geoguessr](https://www.geoguessr.com/), a game where you pinpoint a randomised location based only [Google StreetView](https://www.google.com/streetview/). \n\nHe also chronicles real-life trekking adventures, usually with a twist. Particularly captivating are the 'Mission Across' videos, where Tom attempts to cross a country in a straight line on foot. That includes having to clamber over hedges, swim across ponds, get stuck in bogs and risk the wrath of local farmers and landowners. So far this has covered [Wales](https://www.youtube.com/watch?v=M7w986ni7_g&list=PL_japiE6QKWphPxjqn0KJjfoRnuVSELaI), [Wales again](https://www.youtube.com/watch?v=Jk84QaNEOFw&list=PL_japiE6QKWo358zmUkEydTjyLzd1yBh5) and [Norway](https://www.youtube.com/watch?v=CDPhdkdR9qI&list=PL_japiE6QKWoP-qPQ3wXuOtLkZeYumJRH), with a Scotland series due this month.\n\nOf course, this requires a lot of planning to decide what the best route is and to make sure you don't traipse directly through someone's living room in your muddy boots. Typically this might involve lots of time in GIS software and various online mapping services.\n\nI learnt recently of [the {osmextract} package](https://docs.ropensci.org/osmextract/) for [the R language](https://www.r-project.org/), which fetches geographic features from [OpenStreetMap](https://www.openstreetmap.org/), and wondered how easy it would be to use R to do a light-touch assessment of straight line routes in a 'Mission Across' style. Basically, can we work out the number and type of obstructions we'd face on a given route?\n\nYou can [jump straight to an interactive map](#map) with my example for the Isle of Wight, or keep reading for the code and an explanation.\n\nAs an aside, Tom has also made the album '16 Bit Adventure' under the moniker 'Amynedd'; music which accompanies the 'Mission Across' videos. Press play here for inspiration as you read on.\n\n<iframe src=\"https://open.spotify.com/embed/track/0F5DtplpuR54PvREsb8sKP\" width=\"300\" height=\"380\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n\n## Code walkthrough\n\n### Packages\n\nR is very capable as a code-led tool for geospatial manipulation and mapping. Along with {tidyverse} for data wrangling, there's a few geospatial packages we need: [{geojsonio}](https://docs.ropensci.org/geojsonio/) lets us read GeoJSON files, [{sf}](https://r-spatial.github.io/sf/) is for handling 'special features' geometry in a 'tidy' way, and [{leaflet}](https://rstudio.github.io/leaflet/) lets us create interactive maps. [{osmextract}](https://docs.ropensci.org/osmextract/) was the main motivation for this post; it fetches OpenStreetMap features pretty painlessly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\n  library(geojsonio)\n  library(leaflet)\n  library(leaflet.extras)\n  library(osmextract)\n  library(sf)\n  library(tidyverse)\n})\n```\n:::\n\n\nAll these packages can all be downloaded from CRAN with `install.packages()`.\n\nWhile we're here, I'm going to turn off 'spherical geometry'. This is a fancy way of saying that we're going to pretend the Earth is flat (!) to avoid some awkward geospatial maths. I don't think that's going to be a big deal for the scale of this demo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsf_use_s2(FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSpherical geometry (s2) switched off\n```\n:::\n:::\n\n\n### The boundary\n\nFor purposes of this post, I wanted to look at a small, contained, 'regularly-shaped' geographic area to keep things simple. It didn't have to be a country.\n\nI settled on [the Isle of Wight](https://en.wikipedia.org/wiki/Isle_of_Wight) (IOW)[^wight], a small island off the south-coast of England. It's mostly rural, with farms, hedges and waterways to cross, but there are certainly more built-up areas. It also helps that the IOW is featured in [the {osmextract} documentation](https://docs.ropensci.org/osmextract/index.html)!\n\n![The Isle of Wight: a vexillologist's delight.](resources/flag.png){fig-alt=\"The flag of the Isle of White. The lower half is dark blue and white alternating wavy lines to indicate the sea The upper half is light blue with a white geometric shape to represent the island, which is a diamond with a triangular portion cut from the uppermost corner.\" width=\"50%\" fig-align=\"left\"}\n\nFirst thing is to fetch a polygon that represents the extent of the island. Fortunately, Local Authority District (LAD) boundaries for the UK are available to download from the Official for National Statistics (ONS) in GeoJSON form[^geojson]. We can download the file and filter for the IOW, specifically.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download geojson\ngeojson_url <- \"https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/LAD_DEC_2020_UK_BGC/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson\"\ntmp <- tempdir()\ngeojson_path <- file.path(tmp, \"lads.geojson\")\ndownload.file(geojson_url, geojson_path)\n\n# Read LAD boundaries, filter to IOW\niow_extent <- geojson_read(geojson_path, what = \"sp\") %>% \n  st_as_sf(crs = 4326) %>%\n  filter(LAD20NM == \"Isle of Wight\")\n\nunlink(tmp)\n```\n:::\n\n\nI've used boundaries that are 'clipped to the coastline' because I don't think you should have to swim out to the low-water mark to complete such a challenge.\n\n### OpenStreetMap features\n\nWe want to identify features like hedgerows, buildings and waterways that will become obstructions for our imaginary walk across the island. The `oe_get()` function from {osmextra} is an easy way to pull features from OpenStreetMap en masse. You can supply a location and receive features within that area.\n\nFirst, the polygonal features, which you can get with argument `layer = \"multipolygons\"`. You can see that a geometry column is returned, which contains the coordinates for the polygons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fetch polygonal features for IoW\nosm_polys <- oe_get(\n  \"Isle of Wight\", # geographic area of interest\n  layer = \"multipolygons\",  # fetch polygons\n  stringsAsFactors = FALSE,  # return character-class\n  quiet = TRUE  # don't print info\n) %>%\n  st_transform(crs = 4326)  # latlong coord reference system\n\n# Limited preview\nglimpse(select(osm_polys, osm_id, name, type, geometry))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 84,599\nColumns: 4\n$ osm_id   <chr> \"4763\", \"5922\", \"6022\", \"7141\", \"7316\", \"29744\", \"70978\", \"71…\n$ name     <chr> NA, NA, NA, NA, NA, \"Ryde Canoe Lake\", \"Quarr Abbey\", NA, \"Be…\n$ type     <chr> \"multipolygon\", \"multipolygon\", \"multipolygon\", \"multipolygon…\n$ geometry <MULTIPOLYGON [°]> MULTIPOLYGON (((-1.251425 5..., MULTIPOLYGON (((…\n```\n:::\n:::\n\n\nOf course, we can grab line features too. The default for `layer` is lines, so we don't need to supply this argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fetch line features for IoW\nosm_lines <-  oe_get(\n  \"Isle of Wight\", \n  stringsAsFactors = FALSE,\n  quiet = TRUE\n) %>%\n  st_transform(crs = 4326)\n```\n:::\n\n\nFor convenience, I'm simplifying the features down to the ones we care about. For Tom, hedgerows were a constant nuisance, waterways were cold and perilous, and buildings could contain angry landowners. We want to avoid them all, ideally.\n\nWe can create a function to extract named features (we want rows containing 'barriers', 'buildings', 'natural' and 'waterway' features), and then iterate over our lines and polygons to isolate them. I've put them into a single object so it's easier to reference them later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for a single feature type from oe_get() output\n# 'sf_in' is output from oe_get(); 'feature' is the feature we want\nisolate_feature <- function(sf_in, feature) {\n  sf_in %>% \n    filter(!is.na(sf_in[[feature]])) %>%  # filter for feature\n    select(osm_id, type = all_of(feature), geometry)  # simplify object\n}\n\n# Get all the features as a list object with one element per feature\nfeatures <- map2(\n  list(osm_lines, osm_polys, osm_polys, osm_lines),\n  list(\"barrier\", \"building\", \"natural\", \"waterway\"),\n  isolate_feature\n) %>% \n  set_names(\"barrs\", \"bldgs\", \"natur\", \"wways\")\n\n# Limited preview of the waterways data\nglimpse(features$wways)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2,714\nColumns: 3\n$ osm_id   <chr> \"3027797\", \"3127808\", \"4680059\", \"5171926\", \"5171930\", \"51722…\n$ type     <chr> \"river\", \"river\", \"river\", \"stream\", \"ditch\", \"river\", \"strea…\n$ geometry <LINESTRING [°]> LINESTRING (-1.272943 50.62..., LINESTRING (-1.290…\n```\n:::\n:::\n\n\n### The line\n\nWe need to specify a straight-line route.[^def] For this demonstration, and in interests fo speed, I've just chosen one that looks alright by eye in terms of obstructions. Kinda.\n\nOf course, you can use the approach outlined in this post to try other lines and discover quantitatively which ones have the fewest obstructions. That's the subject of [an upcoming Shiny app](https://github.com/matt-dray/mission-across-iow), which will allow the user to provide a line and get feedback on the number and count of hazards.\n\nCrucially, the line is clipped to the boundary of the island, so it goes from coast to coast.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a straight line\n# 'x1', etc, are start/end latlongs; 'boundary_poly' is the GeoJSON\nmake_line <- function(x1, y1, x2, y2, boundary_poly) {\n  x <- st_linestring(matrix(c(y1, y2, x1, x2), ncol = 2))  # to matrix\n  y <- st_sfc(x, crs = 4326)  # set coord reference system\n  st_intersection(y, boundary_poly)  # clip line to island boundary\n}\n\n# Hard-coded start/end latlongs\nstart_x <- 50.658; start_y <- -1.472\nend_x <- 50.707; end_y <- -1.101\n\n# Build line between the points, clip to IOW boundary\nline <- make_line(start_x, start_y, end_x, end_y, iow_extent)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nalthough coordinates are longitude/latitude, st_intersection assumes that they\nare planar\n```\n:::\n\n```{.r .cell-code}\n# Preview\nglimpse(line)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsfc_LINESTRING of length 1; first list element:  'XY' num [1:2, 1:2] -1.47 -1.1 50.66 50.71\n```\n:::\n:::\n\n\nHere's a quick preview of where our line is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = iow_extent) +\n  geom_sf(data = line) +\n  ggthemes::theme_map()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/line-map-1.png){fig-alt='A simple map of the Isle of Wight, UK, with a line drawn from the east to west coasts, passing roughly throught the middle.' width=672}\n:::\n:::\n\n\n### The platinum zone\n\nIn practice it's very difficult to keep exactly to the line and some deviation may be required at a landowner's request, for example. What's an acceptable amount of wiggle room?\n\nTom spoke in one of his videos about assigning scores to a mission based on minimal deviation from the line. For example, staying within 25 m of the line either side would be a 'platinum' standard.\n\nWe can build a buffer around our line to create a platinum zone, which will be a useful visual aid in the final map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a buffer around the straight line\n# 'line' as created with make_line(); 25m is 'platinum' standard\nmake_buffer <- function(straight_line, buffer_size = 25) { \n  x <- st_transform(straight_line, crs = 27700)  # line to draw buffer around\n  y <- st_buffer(x, dist = buffer_size)\n  st_transform(y, crs = 4326)  # reset coord reference system\n}\n\n# Generate a 25m buffer ('platinum standard') around the line\nbuffer <- make_buffer(line)\n\n# Preview\nglimpse(buffer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsfc_POLYGON of length 1; first list element: List of 1\n $ : num [1:123, 1:2] -1.1 -1.1 -1.1 -1.1 -1.1 ...\n - attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\"\n```\n:::\n:::\n\n\n### Obstructions\n\nOur `features` object currently has all the lines and polygons within the IOW boundary, but we only want the ones that come in contact with (i.e. intersect) with our proposed route. The `st_intersects()` function from {sf} does exactly that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract features that intersect with the line or buffer geometry\n# 'features_sf' contains the features; 'path_sf' for what to intersect\nfind_obs <- function(features_sf, path_sf) { \n  row_nums <- st_intersects(path_sf, features_sf)[[1]]  # rows with obstruction\n  slice(features_sf, row_nums)  # extract matching rows\n}\n\n# Find intersection between features and line\nobstructions <- map(features, ~find_obs(.x, line)) %>% \n  set_names(\"barrs\", \"bldgs\", \"natur\", \"wways\")\n\n# Limited preview\nglimpse(obstructions$wways)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 11\nColumns: 3\n$ osm_id   <chr> \"471224569\", \"552565448\", \"552565555\", \"552565565\", \"55650679…\n$ type     <chr> \"stream\", \"stream\", \"stream\", \"stream\", \"ditch\", \"ditch\", \"di…\n$ geometry <LINESTRING [°]> LINESTRING (-1.285131 50.67..., LINESTRING (-1.216…\n```\n:::\n:::\n\n\nWe can create a quick table to see what the obstructions are for this route.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntribble(\n  ~Type, ~Count,\n  \"Barriers\", nrow(obstructions$barrs),\n  \"Buildings\", nrow(obstructions$bldgs),\n  \"Waterways\", nrow(obstructions$wways),\n  \"Water bodies\", nrow(filter(obstructions$natur, type == \"water\")\n  )\n) %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n|Type         | Count|\n|:------------|-----:|\n|Barriers     |    92|\n|Buildings    |     7|\n|Waterways    |    11|\n|Water bodies |     4|\n:::\n:::\n\n\nYou can see how this information is useful if you wanted to try other straight-line paths and see how they stack up against each other. Maybe you want to reduce the number of barriers (typically hedgerows); maybe you don't mind swimming across a large water body.\n\n### Map {#map}\n\nSo we have the objects we need: our straight-line route, the platinum-zone buffer and all the features that cross our path. Now to map it. We can use the {leaflet} package to layer these up on an interactive map, allowing the user to inspect the route and the hazards along the way. \n\n<details><summary>Click to expand the full mapping code</summary>\n\nThe basic approach here is to `addproviderTiles()` for underlying maps (I've chosen these to help add extra context to the route); use `addPolygons` and `addPolylines()` to supply the line, buffer and the features as separate 'layers' that can be turned on or off; use `addAwesomeMarkers()` for clickable pop-up feature labels; and supply additional mapping conveniences with `addMeasure()` and, from {leaflet.extras}, `addFullscreenControl()` (both functions do what their names suggest).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set multi-use variables\nmarker_fill <- \"darkblue\"\nicon_fill <- \"white\"\ncol_line <- \"#000\"\ncol_artifical <- \"#F00\"\ncol_water <- \"#00F\"\nweight_line <- 1\nweight_obstruction <- 2\nalpha_all <- 0.5\n\n# Interactive map\nleaflet() %>% \n  # Base groups: map tiles\n  addProviderTiles(\"CartoDB.PositronNoLabels\", group = \"Simple\") %>%\n  addProviderTiles(\"Esri.WorldTopoMap\", group = \"Terrain\") %>%\n  addProviderTiles(\"Esri.WorldImagery\", group = \"Satellite\") %>%\n  # Overlay groups: line and buffer\n  addPolygons(\n    data = buffer, group = \"Line/buffer\", \n    color = col_line, weight = weight_line, dashArray = 4, \n    fill = TRUE, opacity = alpha_all\n  ) %>% \n  addPolylines(\n    data = line, group = \"Line/buffer\",\n    color = col_line, weight = weight_line, \n    fill = FALSE\n  ) %>%\n  # Overlay groups: start and end points\n  addAwesomeMarkers(\n    lng = start_y, lat = start_x, group = \"Start/end\",\n    icon = awesomeIcons(\n      markerColor = \"blue\",\n      icon = \"play\", library = \"fa\", iconColor = \"#FFF\"\n    ),\n    popup = paste0(\"<center>Start<br>\", start_x, \", \", start_y, \"<center>\")\n  ) %>% \n  addAwesomeMarkers(\n    lng = end_y, lat = end_x, group = \"Start/end\",\n    icon = awesomeIcons(\n      markerColor = \"blue\",\n      icon = \"stop\", library = \"fa\", iconColor = \"#FFF\"\n    ),\n    popup = paste0(\"<center>End<br>\", end_x, \", \", end_y, \"<center>\")\n  ) %>% \n  # Overlay groups: features in buffer\n  addPolylines(\n    data = obstructions$barrs, group = \"Barriers\",\n    color = col_artifical, weight = weight_obstruction,\n    label = paste(\"Barrier:\", obstructions$barrs$type)\n  ) %>% \n  addPolygons(\n    data = obstructions$bldgs, group = \"Buildings\",\n    color = col_artifical, weight = weight_obstruction, \n    fillColor = col_artifical, fillOpacity = alpha_all,\n    label = paste(\"Building:\", obstructions$bldgs$type)\n  ) %>%\n  addPolygons(\n    data = filter(obstructions$natur, type == \"water\"), group = \"Water\",\n    color = col_water, weight = weight_obstruction, \n    fillColor = col_water, fillOpacity = alpha_all,\n    label = \"Water body\"\n  ) %>% \n  addPolylines(\n    data = obstructions$wways, group = \"Water\",\n    color = col_water, weight = weight_obstruction,\n    label = paste(\"Waterway:\", obstructions$wways$type)\n  ) %>% \n  # Control which layers are shown\n  addLayersControl(\n    baseGroups = c(\"Simple\", \"Terrain\", \"Satellite\"),  # radio button\n    overlayGroups = c(  # checkboxes\n      \"Line/buffer\", \"Start/end\",  # line-related\n      \"Water\", \"Barriers\", \"Buildings\"  # obstructions\n    ),\n    position = \"topright\",\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>% \n  # Other map features\n  addMeasure(  # tool for users to measure distances\n    position = \"topleft\",\n    primaryLengthUnit = \"meters\",\n    primaryAreaUnit = \"sqmeters\"\n  ) %>% \n  addFullscreenControl()  # clickable full-screen button\n```\n:::\n\n</details>\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-e0337cebe99ec8e22120\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-e0337cebe99ec8e22120\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}},\"fullscreenControl\":{\"position\":\"topleft\",\"pseudoFullscreen\":false}},\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.PositronNoLabels\",null,\"Simple\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addProviderTiles\",\"args\":[\"Esri.WorldTopoMap\",null,\"Terrain\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addProviderTiles\",\"args\":[\"Esri.WorldImagery\",null,\"Satellite\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-1.101241149637017,-1.101222902139153,-1.101204509529757,-1.101186022222403,-1.101167490890235,-1.101148966327074,-1.101130499308187,-1.101112140451104,-1.101093940076877,-1.101075948072139,-1.101058213752365,-1.101040785726696,-1.101023711764693,-1.101007038665404,-1.100990812129079,-1.10097507663191,-1.100959875304117,-1.100945249811728,-1.100931240242374,-1.10091788499541,-1.10090522067666,-1.100893281998089,-1.100882101682654,-1.100871710374619,-1.10086213655556,-1.100853406466307,-1.100845544035016,-1.100838570811596,-1.100832505908641,-1.100827365949051,-1.100823165020481,-1.100819914636727,-1.10081762370618,-1.100816298507415,-1.100815942671989,-1.100816557174491,-1.100818140329891,-1.100820687798149,-1.100824192596137,-1.100828645116771,-1.100834033155361,-1.100840341943068,-1.100847554187385,-1.100855650119549,-1.100864607548729,-1.10087440192285,-1.100885006395896,-1.100896391901501,-1.10090852723261,-1.100921379127026,-1.100934912358579,-1.100949089833676,-1.100963872692973,-1.100979220417883,-1.100995090941637,-1.101011440764574,-1.101028225073378,-1.101045397863895,-1.101062912067226,-1.101080719678734,-1.10109877188961,-1.470925189351068,-1.470943401872723,-1.47096176414583,-1.470980225841375,-1.470998736357851,-1.471017244959946,-1.471035700917593,-1.47105405364501,-1.471072252839346,-1.471090248618549,-1.471107991658086,-1.471125433326121,-1.471142525816817,-1.471159222281352,-1.471175476956331,-1.471191245289208,-1.471206484060402,-1.471221151501757,-1.471235207411017,-1.471248613262018,-1.471261332310285,-1.471273329693748,-1.471284572528293,-1.471295029997897,-1.471304673439098,-1.471313476419558,-1.47132141481052,-1.471328466852942,-1.471334613217149,-1.471339837055817,-1.471344124050154,-1.471347462449157,-1.471349843101826,-1.471351259482255,-1.471351707707526,-1.47135118654836,-1.471349697432492,-1.47134724444077,-1.471343834295974,-1.471339476344398,-1.471334182530242,-1.471327967362875,-1.471320847877081,-1.471312843586366,-1.471303976429481,-1.471294270710298,-1.471283753031195,-1.471272452220145,-1.471260399251703,-1.471247627162112,-1.471234170958748,-1.471220067524175,-1.471205355515046,-1.47119007525615,-1.471174268629879,-1.471157978961435,-1.471141250900066,-1.471124130296687,-1.471106664078199,-1.471088900118863,-1.471070887109067,-1.101241149637017],\"lat\":[50.70719775992459,50.707199823975,50.70720127877311,50.70720212033139,50.70720234634314,50.7072019561889,50.70720095093805,50.70719933334597,50.70719710784641,50.70719428053945,50.70719085917458,50.70718685312972,50.70718227338527,50.70717713249418,50.70717144454743,50.70716522513553,50.70715849130561,50.70715126151487,50.70714355557991,50.70713539462236,50.70712680101106,50.70711779830074,50.70710841116745,50.70709866534086,50.70708858753383,50.70707820536911,50.70706754730373,50.70705664255083,50.70704552099973,50.70703421313402,50.70702274994785,50.70701116286114,50.70699948363334,50.70698774427647,50.70697597696732,50.70696421395927,50.70695248749387,50.70694082971254,50.70692927256836,50.70691784773854,50.70690658653772,50.70689551983185,50.7068846779539,50.70687409062054,50.70686378685068,50.7068537948861,50.70684414211385,50.70683485499129,50.70682595897356,50.70681747844377,50.70680943664629,50.70680185562284,50.70679475615232,50.70678815769357,50.7067820783324,50.70677653473164,50.70677154208575,50.70676711407908,50.70676326284829,50.7067599989492,50.70675733132786,50.65791233337498,50.65791021133977,50.65790869810766,50.65790779782625,50.65790751296314,50.65790784429907,50.65790879092592,50.65791035024908,50.6579125179946,50.65791528822095,50.65791865333522,50.657922604114,50.65792712972863,50.65793221777487,50.65793785430694,50.65794402387566,50.65795070957089,50.65795789306783,50.65796555467721,50.65797367339936,50.65798222698162,50.65799119197946,50.65800054382066,50.65801025687269,50.65802030451297,50.65803065920182,50.65804129255795,50.65805217543624,50.65806327800762,50.6580745698409,50.65808601998605,50.65809759705908,50.65810926932818,50.6581210048005,50.65813277130994,50.65814453660536,50.65815626843886,50.65816793465427,50.65817950327525,50.65819094259292,50.65820222125281,50.65821330834074,50.65822417346765,50.65823478685284,50.65824511940554,50.65825514280477,50.65826482957687,50.65827415317086,50.6582830880312,50.65829160966783,50.65829969472333,50.65830732103684,50.658314467705,50.65832111513903,50.65832724511857,50.65833284084159,50.65833788697038,50.65834236967371,50.65834627666461,50.65834959723419,50.65835232228083,50.70719775992459]}]]],null,\"Line/buffer\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#000\",\"weight\":1,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#000\",\"fillOpacity\":0.2,\"dashArray\":4,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolylines\",\"args\":[[[[{\"lng\":[-1.470998049282997,-1.101169972033683],\"lat\":[50.65813233311357,50.70697755086348]}]]],null,\"Line/buffer\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#000\",\"weight\":1,\"opacity\":0.5,\"fill\":false,\"fillColor\":\"#000\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addAwesomeMarkers\",\"args\":[50.658,-1.472,{\"icon\":\"play\",\"markerColor\":\"blue\",\"iconColor\":\"#FFF\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"fa\"},null,\"Start/end\",{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"<center>Start<br>50.658, -1.472<center>\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addAwesomeMarkers\",\"args\":[50.707,-1.101,{\"icon\":\"stop\",\"markerColor\":\"blue\",\"iconColor\":\"#FFF\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"fa\"},null,\"Start/end\",{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"<center>End<br>50.707, -1.101<center>\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolylines\",\"args\":[[[[{\"lng\":[-1.1983929,-1.1982882,-1.1981052,-1.198025,-1.1987285,-1.1990455],\"lat\":[50.6937574,50.6940003,50.6948198,50.6952671,50.6952457,50.69523]}]],[[{\"lng\":[-1.1957503,-1.1945218,-1.193642,-1.1928267],\"lat\":[50.6941775,50.6960515,50.6973988,50.6986509]}]],[[{\"lng\":[-1.1987799,-1.1986765,-1.1985907,-1.1985894,-1.1986282,-1.1985049,-1.1984083,-1.1983386,-1.1980838,-1.1978813,-1.1977365,-1.1974133,-1.1970726,-1.1968514,-1.196681,-1.1964906,-1.1962934,-1.1962036,-1.196154,-1.1961392,-1.1964074,-1.1967427,-1.1971399,-1.1976332,-1.1976801,-1.1975205,-1.1974129,-1.197287],\"lat\":[50.6916476,50.6917809,50.6920239,50.6921811,50.6923085,50.6925685,50.6926679,50.6927112,50.6926789,50.692639,50.6925974,50.6925523,50.6925591,50.692972,50.6931589,50.693328,50.6934622,50.6935404,50.6936245,50.6936916,50.6937179,50.6937936,50.6938616,50.6939065,50.6939337,50.694203,50.6947262,50.6951492]}]],[[{\"lng\":[-1.1248594,-1.1250016,-1.1253208,-1.1256587,-1.1264151,-1.1272386,-1.1275887,-1.1279158,-1.1280969,-1.1280593,-1.1276945,-1.1274987,-1.1269274,-1.1264017,-1.1263132,-1.1260718,-1.1254495,-1.1247066,-1.1235265,-1.1239449,-1.1241487,-1.1245483,-1.1246797,-1.1247535],\"lat\":[50.7043708,50.7042944,50.7041925,50.7041364,50.7040345,50.7040141,50.7040323,50.704032,50.7039869,50.703795,50.7032412,50.7032123,50.7033244,50.7034875,50.7033941,50.7027825,50.7028063,50.7027706,50.7039665,50.7042078,50.7042944,50.7043929,50.7044014,50.704398]}]],[[{\"lng\":[-1.1313048,-1.1312753,-1.1313048,-1.1312592,-1.1311734,-1.1311519,-1.131168,-1.1316025,-1.1319432,-1.1299127,-1.1299204,-1.1298787,-1.1297785,-1.1280593],\"lat\":[50.6999693,50.7001154,50.700586,50.7008952,50.7012383,50.7013776,50.7014116,50.7018686,50.7022933,50.7028692,50.7030136,50.7032427,50.7033359,50.703795]}]],[[{\"lng\":[-1.1364732,-1.135835,-1.1358216,-1.1358404,-1.1358645,-1.1359987,-1.1361167],\"lat\":[50.7029114,50.702966,50.7025787,50.7022457,50.7018754,50.7014235,50.7010175]}]],[[{\"lng\":[-1.1922516,-1.1898666,-1.1871744],\"lat\":[50.6951937,50.6950926,50.6949972]}]],[[{\"lng\":[-1.1840813,-1.1842131],\"lat\":[50.6931413,50.6961488]}]],[[{\"lng\":[-1.1586102,-1.1583273,-1.1582768,-1.1582583,-1.158092,-1.1584032,-1.1585695,-1.1587304,-1.1588645,-1.158902,-1.1587733],\"lat\":[50.6981941,50.6999174,50.700307,50.70045,50.7013844,50.7014149,50.7014489,50.7015203,50.7016154,50.7018396,50.7021998]}]],[[{\"lng\":[-1.1100645,-1.1081226,-1.1063006],\"lat\":[50.706457,50.7060119,50.7057595]}]],[[{\"lng\":[-1.1203022,-1.1202459,-1.1199938,-1.1198857,-1.1198436,-1.1198919,-1.1201494,-1.1202888,-1.1204275,-1.1206582,-1.1208061],\"lat\":[50.7067618,50.7063449,50.7060187,50.7056669,50.7053019,50.7051048,50.7047651,50.7045239,50.7042604,50.7041381,50.7040365]}]],[[{\"lng\":[-1.1613506,-1.1615627,-1.1616522],\"lat\":[50.698605,50.6999065,50.700189]}]],[[{\"lng\":[-1.1772188,-1.1769291],\"lat\":[50.6966323,50.6972303]}]],[[{\"lng\":[-1.1735148,-1.1738474,-1.1740747,-1.1745709,-1.1747659,-1.17511,-1.1751427],\"lat\":[50.6981294,50.6980411,50.6976712,50.6973579,50.697013,50.6964439,50.6961912]}]],[[{\"lng\":[-1.3122117,-1.3130502,-1.3140893,-1.3145587,-1.3157807,-1.3160462,-1.3164083,-1.3164818,-1.3166481,-1.3166443,-1.3172838,-1.3170612,-1.3170199,-1.3171524,-1.3176713],\"lat\":[50.6786218,50.6781729,50.6774728,50.6772723,50.6780913,50.6782902,50.6781083,50.6781068,50.6782564,50.6783055,50.6791062,50.6795226,50.6799116,50.6800886,50.6804534]}]],[[{\"lng\":[-1.3221708,-1.3253411,-1.3249591,-1.3246491,-1.3241797,-1.3236959,-1.3232101,-1.321613,-1.3208057,-1.3199515],\"lat\":[50.6746071,50.6774949,50.6781267,50.6782896,50.6786771,50.6791519,50.6795337,50.6804948,50.6809162,50.6810011]}]],[[{\"lng\":[-1.3188315,-1.3173429,-1.3186974,-1.320752,-1.321475],\"lat\":[50.6802269,50.6791402,50.6783363,50.6770343,50.6764137]}]],[[{\"lng\":[-1.3241797,-1.3232141,-1.3233161,-1.3232839,-1.3230495,-1.3222378,-1.321475,-1.3209238,-1.3203606],\"lat\":[50.6786771,50.6778911,50.6777823,50.6776838,50.6774183,50.6768373,50.6764137,50.6761336,50.6756509]}]],[[{\"lng\":[-1.3166443,-1.3158139,-1.315594,-1.3147786,-1.3146177,-1.3145131,-1.3142261,-1.3133517],\"lat\":[50.6783055,50.6786847,50.6786677,50.678994,50.6789396,50.6789362,50.6790484,50.6796365]}]],[[{\"lng\":[-1.3462262,-1.3451975,-1.3448052,-1.3444471],\"lat\":[50.6740346,50.6754927,50.6759814,50.6761025]}]],[[{\"lng\":[-1.3517179,-1.3477883,-1.3455107],\"lat\":[50.6751771,50.6742442,50.6763977]}]],[[{\"lng\":[-1.3566291,-1.3540595,-1.3535553,-1.3527318,-1.3519835,-1.3517179,-1.3507604,-1.3500641],\"lat\":[50.6717344,50.6733085,50.6735839,50.6742517,50.6749471,50.6751771,50.675984,50.6766991]}]],[[{\"lng\":[-1.2875845,-1.2861566,-1.2854846,-1.2844079,-1.2825318],\"lat\":[50.6821921,50.6825598,50.6826813,50.6828267,50.6831299]}]],[[{\"lng\":[-1.220108,-1.2201661,-1.220214,-1.2202733],\"lat\":[50.6921097,50.6914119,50.6908588,50.6906121]}]],[[{\"lng\":[-1.2270888,-1.2283347,-1.2285564,-1.2286975,-1.2288425,-1.2290627,-1.2291392,-1.2292895,-1.229398,-1.2296089,-1.2305774,-1.2313353],\"lat\":[50.6878998,50.6877573,50.6885028,50.6888987,50.6891919,50.6901842,50.6903204,50.6903755,50.6903649,50.6903009,50.6897384,50.6892659]}]],[[{\"lng\":[-1.226993,-1.2255896,-1.2252524,-1.2251981,-1.225171,-1.2251542,-1.225281,-1.2251404,-1.2251553],\"lat\":[50.6879112,50.6880593,50.6881458,50.6888791,50.6891485,50.6894586,50.6903457,50.691444,50.6916213]}]],[[{\"lng\":[-1.1870916,-1.1869808,-1.1869386,-1.1867567,-1.1863716,-1.1858416,-1.1855199,-1.1852977,-1.1850736,-1.1847908,-1.1845864],\"lat\":[50.6935982,50.6950214,50.6952436,50.6954791,50.6958065,50.6960754,50.6961874,50.6962441,50.6962738,50.696298,50.696308]}]],[[{\"lng\":[-1.2178248,-1.2178139,-1.214177],\"lat\":[50.6918599,50.6919271,50.6917145]}]],[[{\"lng\":[-1.2062444,-1.2061511,-1.2059124,-1.2059833],\"lat\":[50.6916766,50.6918987,50.6928555,50.693439]}]],[[{\"lng\":[-1.2508153,-1.2506922,-1.2505152,-1.2500186,-1.2499114,-1.2498502,-1.2497932],\"lat\":[50.6867701,50.6871394,50.6878097,50.68941,50.6896409,50.6897725,50.6901184]}]],[[{\"lng\":[-1.2521603,-1.2524682,-1.2526868,-1.2527619,-1.2528786,-1.2530074,-1.2530965,-1.253124,-1.2506922],\"lat\":[50.6890407,50.6889322,50.6888056,50.6887292,50.6882967,50.6877877,50.6873042,50.6871552,50.6871394]}]],[[{\"lng\":[-1.1739828,-1.1737716,-1.1731681,-1.1728435,-1.172755,-1.1722481,-1.1724124,-1.1725711],\"lat\":[50.6963607,50.6962638,50.6966919,50.6970402,50.6970045,50.6973919,50.6974774,50.6975599]}]],[[{\"lng\":[-1.203309,-1.2033025,-1.2025656,-1.2024652],\"lat\":[50.6935867,50.6928296,50.6928413,50.6928429]}]],[[{\"lng\":[-1.2945827,-1.2938572,-1.2934728,-1.2927346,-1.2924877],\"lat\":[50.6814401,50.6812387,50.6814096,50.6815758,50.6811597]}]],[[{\"lng\":[-1.170005,-1.1694739,-1.1692807],\"lat\":[50.6977844,50.6980426,50.6981874]}]],[[{\"lng\":[-1.2756363,-1.2747411],\"lat\":[50.6840765,50.6837668]}]],[[{\"lng\":[-1.2759889,-1.2766434,-1.2773365,-1.277052,-1.2764838,-1.2762842,-1.2760845,-1.2760663],\"lat\":[50.6855932,50.684407,50.6832048,50.6831314,50.6829917,50.6829827,50.6831582,50.6831742]}]],[[{\"lng\":[-1.2629722,-1.2632862,-1.2642865,-1.265477,-1.2664502],\"lat\":[50.6874876,50.6865046,50.6837204,50.6837475,50.6837022]}]],[[{\"lng\":[-1.2954531,-1.2950696,-1.2948623,-1.2947014,-1.2946395,-1.294438,-1.2940222],\"lat\":[50.6821819,50.6819763,50.6817072,50.681487,50.6814142,50.6811807,50.6805352]}]],[[{\"lng\":[-1.4579262,-1.4579468,-1.457953,-1.4581534,-1.4581649,-1.4580609,-1.4577685,-1.4575459,-1.4572763,-1.4568727,-1.4563376,-1.4562652,-1.4563094,-1.4563523,-1.4564046,-1.4564247,-1.4564019],\"lat\":[50.6625015,50.6622151,50.6620033,50.6605835,50.660502,50.6604865,50.6604346,50.6603836,50.6603283,50.6602586,50.6602178,50.6602161,50.6599951,50.6598735,50.6598165,50.6597664,50.6597205]}]],[[{\"lng\":[-1.2790177,-1.2790067,-1.2790033,-1.2790455,-1.2791226,-1.2794284],\"lat\":[50.6821071,50.6823382,50.6825863,50.6827991,50.6830082,50.6834555]}]],[[{\"lng\":[-1.1502181,-1.1516909,-1.1525725,-1.153227,-1.1534201,-1.1535595,-1.1537124,-1.1538211,-1.1539901,-1.1542053,-1.1543602,-1.1544734,-1.1546325,-1.1549275,-1.1551179,-1.1554559,-1.1557255,-1.1561144],\"lat\":[50.6982409,50.7012844,50.7030679,50.7044846,50.7050761,50.7057072,50.7066678,50.7073251,50.7082636,50.7094636,50.7100456,50.7103928,50.7108512,50.7114415,50.7117574,50.7122109,50.7125752,50.7129361]}]],[[{\"lng\":[-1.1550979,-1.1551034,-1.1550675,-1.1550809,-1.1551194,-1.1550459,-1.1549006,-1.1548785,-1.1548224,-1.1547163,-1.1545621,-1.1544528,-1.1543232,-1.1542629,-1.1539794,-1.1538497,-1.1537214,-1.1535837,-1.1533691,-1.1527079,-1.1523746,-1.1518572,-1.1506824,-1.1505141],\"lat\":[50.7112089,50.7112222,50.7112298,50.7112662,50.7113709,50.711386,50.7111342,50.7110992,50.7109963,50.7108016,50.7103879,50.7100394,50.7094731,50.7091465,50.7073598,50.7065106,50.7057219,50.7051293,50.7044719,50.7030466,50.7023496,50.7012564,50.6987395,50.6981859]}]],[[{\"lng\":[-1.2345235,-1.2346531,-1.2350528,-1.234751,-1.2341583,-1.2336955],\"lat\":[50.6884338,50.6884981,50.6894158,50.6895465,50.6897402,50.6897903]}]],[[{\"lng\":[-1.2323585,-1.2327367,-1.2329901,-1.2331766,-1.2332664,-1.2333396,-1.2333746],\"lat\":[50.6893494,50.6895261,50.6896162,50.6897232,50.6897912,50.6898445,50.6898633]}]],[[{\"lng\":[-1.2318664,-1.2311073,-1.230969,-1.2307625,-1.2303212,-1.229856],\"lat\":[50.6896493,50.6901965,50.6902755,50.6904403,50.6907784,50.6910826]}]],[[{\"lng\":[-1.1836564,-1.1833084,-1.1826807,-1.1817849,-1.1806208,-1.1798215,-1.1793709,-1.1789203,-1.1785099,-1.1783195,-1.1780942,-1.1779225,-1.1782358,-1.1787991,-1.179302,-1.1796597,-1.1803977,-1.1810871,-1.1814259,-1.1816999,-1.1819574,-1.1822011,-1.1824576],\"lat\":[50.6962543,50.6961373,50.6958332,50.6953626,50.6947034,50.6942412,50.6939456,50.6935956,50.6932286,50.6929193,50.6924724,50.6922091,50.6919673,50.6916598,50.691484,50.6914513,50.6913896,50.6913046,50.6912211,50.6911271,50.6910396,50.6909271,50.690755]}]],[[{\"lng\":[-1.1824654,-1.1817305,-1.181009,-1.179515,-1.1789866,-1.1782617,-1.1769291,-1.1763636,-1.1757785,-1.1746435,-1.1741057,-1.1730261,-1.1725502],\"lat\":[50.696267,50.6963197,50.6964165,50.6966714,50.6967631,50.6968961,50.6972303,50.6973934,50.6975994,50.6980622,50.6982976,50.6988161,50.699045]}]],[[{\"lng\":[-1.2625912,-1.2622935,-1.2622342,-1.2623763,-1.2624625,-1.2612045,-1.2608532,-1.2608154,-1.2607751,-1.2607056,-1.2604841,-1.2602414,-1.2596458,-1.2584472,-1.2546851,-1.2546918,-1.2547085,-1.2547133,-1.254726,-1.2547502],\"lat\":[50.688363,50.6878464,50.6877427,50.6876221,50.6873876,50.6864631,50.6860009,50.6857525,50.6856185,50.6855302,50.6854273,50.6853583,50.6851988,50.6850255,50.6849112,50.6851572,50.6854477,50.6856737,50.6858004,50.685952]}]],[[{\"lng\":[-1.1673054,-1.1679307,-1.1684714,-1.1688318,-1.1692398,-1.1693304,-1.1695415,-1.1698951,-1.1705708,-1.1711017],\"lat\":[50.6952719,50.695803,50.6962727,50.696629,50.6970759,50.6971491,50.6972633,50.6974094,50.6976314,50.6977885]}]],[[{\"lng\":[-1.2880765,-1.2878414,-1.2876448,-1.2873811,-1.2873344,-1.2870863,-1.286652,-1.2860216,-1.2858046,-1.2876136,-1.2877915,-1.2882917,-1.2887384,-1.2887577,-1.2887748],\"lat\":[50.6825544,50.6823148,50.6821307,50.6818817,50.6818353,50.6815883,50.6811327,50.6806526,50.6804575,50.6800762,50.679976,50.6798327,50.6797305,50.6797634,50.6797992]}]],[[{\"lng\":[-1.4506556,-1.4506739,-1.4506887,-1.4507288,-1.451436],\"lat\":[50.6592744,50.6596327,50.6598177,50.6599292,50.6607469]}]],[[{\"lng\":[-1.3323404,-1.3340579,-1.3346755,-1.3342755,-1.3331599,-1.3316855,-1.3305572,-1.3296973,-1.3296406],\"lat\":[50.6758707,50.6768423,50.677233,50.6775592,50.6783506,50.6791551,50.6797005,50.6802166,50.6801725]}]],[[{\"lng\":[-1.3343084,-1.3372636],\"lat\":[50.6768317,50.6750656]}]],[[{\"lng\":[-1.3324223,-1.3342113],\"lat\":[50.6758415,50.6768529]}]],[[{\"lng\":[-1.2329526,-1.2322323,-1.2321357,-1.2319145,-1.2311688,-1.2311542],\"lat\":[50.6896544,50.6894686,50.6895399,50.6896773,50.6902146,50.6902466]}]],[[{\"lng\":[-1.3415236,-1.3415046,-1.3416384,-1.341767,-1.3419056,-1.341993,-1.3420493],\"lat\":[50.6759576,50.6758871,50.6757026,50.6754635,50.6751333,50.6748586,50.6745199]}]],[[{\"lng\":[-1.4034444,-1.4023317,-1.4020658],\"lat\":[50.6675917,50.6672883,50.6672157]}]],[[{\"lng\":[-1.4032244,-1.4034444,-1.4040419,-1.4044555,-1.4050698,-1.4061609,-1.4065503],\"lat\":[50.66793,50.6675917,50.6677471,50.6673639,50.6668995,50.665945,50.6653425]}]],[[{\"lng\":[-1.3070666,-1.3067859,-1.3064745,-1.3059917,-1.3056752,-1.3056591,-1.3057557,-1.3057262,-1.3056511,-1.305238],\"lat\":[50.6782562,50.6782812,50.6783089,50.6783021,50.6783378,50.6784704,50.679327,50.6794681,50.6796006,50.6800459]}]],[[{\"lng\":[-1.303916,-1.305238,-1.3055384,-1.3058442,-1.3060212,-1.3066757,-1.3074884],\"lat\":[50.6797784,50.6800459,50.6800697,50.6800731,50.6799576,50.679587,50.6802377]}]],[[{\"lng\":[-1.2489709,-1.2487376,-1.2485528,-1.2484117,-1.2482951,-1.2481606,-1.2480539,-1.247928,-1.2477159,-1.2473205,-1.2472022,-1.247137],\"lat\":[50.6897298,50.6895787,50.6894449,50.6893138,50.689115,50.6887722,50.6886159,50.6884562,50.6882477,50.6878939,50.6877651,50.6876701]}]],[[{\"lng\":[-1.1152264,-1.1150879,-1.1151066,-1.1150513,-1.115022,-1.1149514,-1.1148981,-1.1157018,-1.115933,-1.1163367,-1.1168906,-1.1169589],\"lat\":[50.7035361,50.7035757,50.7037098,50.7041341,50.7043342,50.704828,50.7052064,50.7053499,50.7045606,50.7046097,50.7046825,50.7046932]}]],[[{\"lng\":[-1.1164377,-1.1164905,-1.1169589],\"lat\":[50.706555,50.7060187,50.7046932]}]],[[{\"lng\":[-1.4534368,-1.4533858,-1.4531511,-1.4529969,-1.4529084,-1.4528561,-1.4528371],\"lat\":[50.6614939,50.6614284,50.6610612,50.6606021,50.6601855,50.6598489,50.6595903]}]],[[{\"lng\":[-1.4536366,-1.453652,-1.4537103,-1.4537452,-1.4534555,-1.4532262,-1.4530693,-1.4530125,-1.45297,-1.4529657,-1.4529312,-1.4529137],\"lat\":[50.6621502,50.6621106,50.6619495,50.6617481,50.6614165,50.6610578,50.6605944,50.6603482,50.6601643,50.6601296,50.6598514,50.6595972]}]],[[{\"lng\":[-1.2016398,-1.2016789,-1.2017143,-1.2022951,-1.2023071,-1.202351,-1.202392,-1.2024047],\"lat\":[50.6963822,50.6955558,50.6954253,50.693914,50.6938817,50.6937635,50.6936074,50.6934466]}]],[[{\"lng\":[-1.2108783,-1.2107165,-1.2105229,-1.2104626,-1.2107244],\"lat\":[50.693126,50.6926777,50.6921611,50.691942,50.6914477]}]],[[{\"lng\":[-1.2179607,-1.2178329],\"lat\":[50.6904351,50.6917767]}]],[[{\"lng\":[-1.293707,-1.2942019,-1.2945827],\"lat\":[50.6811248,50.6810076,50.6814401]}]],[[{\"lng\":[-1.2953621,-1.2956564,-1.2959751,-1.2963317],\"lat\":[50.6805269,50.6809634,50.681436,50.6819649]}]],[[{\"lng\":[-1.2954535,-1.2957499,-1.2960586,-1.2964082],\"lat\":[50.6805067,50.6809535,50.681419,50.681946]}]],[[{\"lng\":[-1.1935351,-1.1922516,-1.191043],\"lat\":[50.692142,50.6951937,50.6979206]}]],[[{\"lng\":[-1.2397411,-1.2394515],\"lat\":[50.6885533,50.688917]}]],[[{\"lng\":[-1.3751806,-1.3750473,-1.3750129,-1.3749465,-1.3730617,-1.372717],\"lat\":[50.6720232,50.6720813,50.6720979,50.6720651,50.6708709,50.6706531]}]],[[{\"lng\":[-1.3724024,-1.3714599,-1.3708644,-1.367434,-1.3666936,-1.3665986,-1.3664937,-1.3644179,-1.3612519],\"lat\":[50.67046,50.6719912,50.671818,50.6708897,50.6706796,50.6706796,50.6706853,50.6711286,50.6717936]}]],[[{\"lng\":[-1.360427,-1.3605397,-1.360725,-1.3612519,-1.3613655,-1.3617118,-1.3619889,-1.362166,-1.3624068,-1.3631245,-1.3633196,-1.363483,-1.3637796,-1.3640925,-1.3644567,-1.3650101,-1.3655332,-1.3660072],\"lat\":[50.6698077,50.6699667,50.6706306,50.6717936,50.6720297,50.6726122,50.6730382,50.6732311,50.6733664,50.6737003,50.6737377,50.6737406,50.6736651,50.6735542,50.6734728,50.6733529,50.6730599,50.6726678]}]],[[{\"lng\":[-1.3661496,-1.3661473,-1.3660165,-1.3661099],\"lat\":[50.6728572,50.672576,50.6720684,50.6717088]}]],[[{\"lng\":[-1.3644179,-1.3649449,-1.3640773,-1.3644567],\"lat\":[50.6711286,50.6723321,50.6724991,50.6734728]}]],[[{\"lng\":[-1.3421871,-1.3420542,-1.3419367,-1.3418557,-1.3417171,-1.341587,-1.3414516,-1.3414114],\"lat\":[50.6733963,50.6742059,50.6748533,50.6751323,50.675452,50.675685,50.6758668,50.6759089]}]],[[{\"lng\":[-1.4440235,-1.447843,-1.4477934],\"lat\":[50.6613332,50.6612193,50.6616256]}]],[[{\"lng\":[-1.4419554,-1.4405568],\"lat\":[50.6620786,50.6620516]}]],[[{\"lng\":[-1.4581534,-1.4578718,-1.4578583,-1.4575473,-1.4572039,-1.4569491,-1.4566809,-1.4562073,-1.4561579,-1.4561324,-1.4561431,-1.45606,-1.455887,-1.45394,-1.45297],\"lat\":[50.6605835,50.6605749,50.6605726,50.6605205,50.6604899,50.6605052,50.6605392,50.6605115,50.6605086,50.6605103,50.6604125,50.6604057,50.6603343,50.6602208,50.6601643]}]],[[{\"lng\":[-1.2420988,-1.2421337,-1.2421247,-1.2420291,-1.2417474],\"lat\":[50.6881811,50.6883494,50.6884142,50.6887725,50.6889696]}]],[[{\"lng\":[-1.2721225,-1.2718204,-1.2716196,-1.271861,-1.2724242,-1.2733372,-1.2738937],\"lat\":[50.6835968,50.6838104,50.6841874,50.6846786,50.684891,50.6849409,50.684966]}]],[[{\"lng\":[-1.2751074,-1.2750417,-1.2747359,-1.2759791,-1.2760164,-1.2760663,-1.2765478,-1.2756363,-1.2743309,-1.2739406,-1.2738937],\"lat\":[50.683394,50.6833821,50.6837075,50.6831544,50.6831614,50.6831742,50.6833413,50.6840765,50.6849864,50.6849682,50.684966]}]],[[{\"lng\":[-1.2560067,-1.2559095,-1.2553764,-1.255384,-1.2554736,-1.2560067],\"lat\":[50.6865573,50.6863455,50.6864437,50.6864602,50.6866555,50.6865573]}]],[[{\"lng\":[-1.2834608,-1.2842322,-1.2842322,-1.2844079,-1.2846836],\"lat\":[50.6821698,50.682411,50.6824121,50.6828267,50.6839536]}]],[[{\"lng\":[-1.2815223,-1.2825318],\"lat\":[50.6818183,50.6831299]}]],[[{\"lng\":[-1.1212385,-1.1217776,-1.1225474,-1.1238188,-1.123859,-1.1241835,-1.1261576,-1.1289471,-1.129733,-1.1306101,-1.1306959,-1.1309977,-1.1310983,-1.1310767,-1.1310044,-1.1315221,-1.1298081,-1.1296526,-1.1288559,-1.1280245,-1.127767,-1.1274907,-1.1268872,-1.1264876,-1.1263374,-1.1263159,-1.1246395,-1.1235157,-1.1227244,-1.1235344,-1.1237088,-1.1237651,-1.1234003,-1.1233896,-1.1224213,-1.121614,-1.1212385,-1.1212009,-1.1210135],\"lat\":[50.6999031,50.6998793,50.699621,50.6996652,50.7002292,50.700355,50.7008391,50.7001069,50.6998045,50.6998215,50.7000594,50.7001332,50.7001647,50.7008614,50.7014133,50.7023188,50.7028199,50.7032514,50.7034705,50.7034569,50.7031325,50.7031155,50.7032497,50.703355,50.7029847,50.7026925,50.7026772,50.7037236,50.7032973,50.702752,50.7025005,50.7017667,50.7017548,50.7024734,50.7031902,50.7031699,50.6999031,50.699864,50.699714]}]],[[{\"lng\":[-1.171841,-1.1724124],\"lat\":[50.6978916,50.6974774]}]],[[{\"lng\":[-1.2880765,-1.2881386,-1.2886208,-1.2888011,-1.2889872,-1.2890186,-1.2891925,-1.2892352,-1.2892238,-1.2891611,-1.2888019,-1.2887135,-1.2886663,-1.2886482,-1.2886221],\"lat\":[50.6825544,50.6825242,50.6823471,50.6822811,50.6822203,50.6817849,50.6812737,50.6810895,50.6809576,50.6807824,50.6801826,50.6799225,50.6798301,50.6797981,50.6797571]}]]],null,\"Barriers\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#F00\",\"weight\":2,\"opacity\":0.5,\"fill\":false,\"fillColor\":\"#F00\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,[\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: fence\",\"Barrier: hedge\",\"Barrier: fence\",\"Barrier: fence\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: fence\",\"Barrier: hedge\",\"Barrier: fence\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: fence\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: fence\",\"Barrier: fence\",\"Barrier: hedge\",\"Barrier: hedge\",\"Barrier: fence\",\"Barrier: fence\",\"Barrier: fence\",\"Barrier: fence\",\"Barrier: fence\",\"Barrier: hedge\",\"Barrier: fence\",\"Barrier: fence\",\"Barrier: fence\",\"Barrier: hedge\",\"Barrier: fence\",\"Barrier: fence\",\"Barrier: fence\",\"Barrier: fence\",\"Barrier: fence\",\"Barrier: fence\",\"Barrier: hedge\",\"Barrier: fence\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-1.2541315,-1.2539671,-1.2539606,-1.2537867,-1.2537648,-1.2541031,-1.2541315],\"lat\":[50.6867878,50.6868028,50.686774,50.6867898,50.6866931,50.6866624,50.6867878]}]],[[{\"lng\":[-1.2442778,-1.2442412,-1.2443145,-1.244351,-1.2442778],\"lat\":[50.6881082,50.6880323,50.6880182,50.688094,50.6881082]}]],[[{\"lng\":[-1.2444597,-1.2443774,-1.2443487,-1.2444022,-1.2444844,-1.2445132,-1.2444597],\"lat\":[50.688098,50.6880889,50.6880393,50.6879987,50.6880077,50.6880574,50.688098]}]],[[{\"lng\":[-1.2308761,-1.2311411,-1.2308998,-1.2306348,-1.2308761],\"lat\":[50.6899039,50.689744,50.6895835,50.6897434,50.6899039]}]],[[{\"lng\":[-1.244243,-1.2442125,-1.2441537,-1.2441842,-1.244243],\"lat\":[50.6880909,50.6880621,50.6880871,50.6881159,50.6880909]}]],[[{\"lng\":[-1.2549837,-1.2549627,-1.2548443,-1.2548397,-1.2548984,-1.254887,-1.2548087,-1.2548012,-1.2546963,-1.2547027,-1.254372,-1.2544,-1.2546236,-1.2546156,-1.2547228,-1.2547326,-1.2548449,-1.254853,-1.2549837],\"lat\":[50.6867494,50.6866279,50.6866362,50.6866099,50.6866058,50.6865401,50.6865456,50.6865023,50.6865096,50.6865469,50.6865699,50.6867319,50.6867163,50.6866702,50.6866627,50.6867193,50.6867114,50.6867584,50.6867494]}]],[[{\"lng\":[-1.2451041,-1.2452839,-1.2453331,-1.2451533,-1.2451041],\"lat\":[50.6879892,50.6878901,50.6879259,50.688025,50.6879892]}]]],null,\"Buildings\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#F00\",\"weight\":2,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#F00\",\"fillOpacity\":0.5,\"smoothFactor\":1,\"noClip\":false},null,null,[\"Building: yes\",\"Building: yes\",\"Building: yes\",\"Building: yes\",\"Building: yes\",\"Building: yes\",\"Building: yes\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-1.2914113,-1.2913657,-1.2910761,-1.2908883,-1.2907623,-1.290655,-1.2905933,-1.2905799,-1.2906094,-1.2906281,-1.2905691,-1.2904699,-1.2903814,-1.2902312,-1.2901695,-1.2901105,-1.2901266,-1.2901641,-1.2902446,-1.2903867,-1.2904887,-1.2910032,-1.2910702,-1.2910037,-1.2909929,-1.2909554,-1.2909688,-1.29106,-1.2908933,-1.290899,-1.2910948,-1.291186,-1.2912531,-1.2913443,-1.2913926,-1.2914113],\"lat\":[50.6830303,50.6830728,50.6831306,50.6831476,50.6831323,50.6829334,50.6828009,50.6826343,50.6825188,50.6823998,50.6823029,50.6822332,50.6820616,50.6816316,50.6811863,50.6809144,50.6807988,50.6807665,50.6807699,50.6808532,50.680877,50.6808688,50.6810966,50.6812135,50.681341,50.6814498,50.6817081,50.6820225,50.6820668,50.6821721,50.6822162,50.6822553,50.6824083,50.682755,50.6829096,50.6830303]},{\"lng\":[-1.290754,-1.2908237,-1.2908237,-1.2907969,-1.2908049,-1.2907647,-1.2907674,-1.2907432,-1.2907057,-1.290593,-1.2904482,-1.2904294,-1.2904831,-1.2904911,-1.2904643,-1.2905153,-1.2905796,-1.2905743,-1.290644,-1.2906333,-1.2905582,-1.2905743,-1.2906681,-1.290754],\"lat\":[50.6819892,50.6819297,50.6818532,50.6817886,50.6817325,50.6816527,50.6815813,50.681515,50.6814419,50.6813926,50.6814164,50.6814725,50.6814912,50.6815422,50.6816017,50.6816493,50.6816714,50.6817444,50.6818124,50.681843,50.681877,50.6819518,50.6819994,50.6819892]}]],[[{\"lng\":[-1.1618485,-1.1619772,-1.1621757,-1.1622186,-1.1620899,-1.1619665,-1.1618431,-1.1617251,-1.1617466,-1.1618485],\"lat\":[50.6993507,50.6993575,50.699259,50.6990449,50.6988988,50.6988275,50.6988784,50.6990993,50.699276,50.6993507]},{\"lng\":[-1.162004,-1.1619128,-1.1618753,-1.1618753,-1.1619128,-1.1620148,-1.1620631,-1.162047,-1.162004],\"lat\":[50.699259,50.6992454,50.6991774,50.6991265,50.6990993,50.6990823,50.6991231,50.6992148,50.699259]}]],[[{\"lng\":[-1.3023755,-1.3025498,-1.3026437,-1.302641,-1.302582,-1.3025069,-1.3024371,-1.302362,-1.3022038,-1.3021287,-1.3020724,-1.3021046,-1.3021662,-1.3022413,-1.3023755],\"lat\":[50.6803171,50.6803273,50.6803596,50.6804106,50.6805279,50.6805806,50.6806316,50.6806622,50.6806486,50.6806248,50.6805721,50.6805228,50.6804565,50.6803987,50.6803171]}]],[[{\"lng\":[-1.2249859,-1.224825,-1.2243315,-1.2243422,-1.2243898,-1.2242524,-1.2242348,-1.2243476,-1.2243095,-1.2243395,-1.2244497,-1.2246748,-1.2249215,-1.2250829,-1.2250775,-1.2249913,-1.2249859],\"lat\":[50.6912463,50.6913211,50.6912871,50.6909336,50.6904387,50.6903434,50.6902334,50.6901608,50.6899955,50.6898561,50.6897903,50.6897306,50.6897442,50.6901268,50.6904055,50.6906584,50.6912463]}]]],null,\"Water\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#00F\",\"weight\":2,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#00F\",\"fillOpacity\":0.5,\"smoothFactor\":1,\"noClip\":false},null,null,\"Water body\",{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolylines\",\"args\":[[[[{\"lng\":[-1.2851308,-1.2852187,-1.2852682,-1.28563,-1.2861181,-1.2866412,-1.2872849,-1.2880037,-1.2886421,-1.2888567,-1.2892241,-1.2894172,-1.2894483,-1.2896855,-1.2898196,-1.2899108,-1.2900234,-1.2901227,-1.2902192,-1.2900717],\"lat\":[50.6751804,50.6752385,50.6752728,50.6755894,50.676016,50.6764885,50.6770613,50.6777854,50.6783939,50.6786471,50.6792403,50.6795836,50.6796341,50.6801598,50.6806339,50.6810622,50.681567,50.682048,50.682517,50.68263]}]],[[{\"lng\":[-1.2165258,-1.2160575,-1.2155362,-1.2147939,-1.2139545,-1.2138926,-1.2134243,-1.2130267,-1.212903,-1.2127351,-1.2125584,-1.2120724,-1.2119398,-1.2116394,-1.2112064,-1.2112064,-1.2110297,-1.2109944,-1.2109325,-1.2108265,-1.210853,-1.2107735,-1.210853,-1.2108,-1.2109502,-1.2108972,-1.2110209,-1.2113036,-1.2113478,-1.2115687,-1.2116129],\"lat\":[50.6893028,50.6900698,50.6903049,50.6905792,50.6912173,50.6914916,50.6917771,50.6922249,50.6929358,50.6938761,50.6942064,50.6947045,50.6948501,50.6950572,50.6956729,50.6957904,50.6958184,50.6960647,50.6963949,50.69663,50.6967475,50.6969434,50.6970721,50.6971841,50.6973632,50.6975143,50.6977102,50.6978837,50.6979621,50.6980348,50.6984994]}]],[[{\"lng\":[-1.2851308,-1.2850633,-1.2851874,-1.2853617,-1.286381,-1.2869791,-1.2874646,-1.288162,-1.2886823,-1.2892349,-1.2894763,-1.2895943,-1.2898249,-1.2900717],\"lat\":[50.6751804,50.6752664,50.6753812,50.6755341,50.6764231,50.6769857,50.677465,50.6781483,50.6787125,50.6796201,50.6801351,50.6805277,50.6815984,50.68263]}]],[[{\"lng\":[-1.1625418,-1.1625418,-1.162515,-1.1624158,-1.1622441,-1.1619437,-1.1618927,-1.1622146,-1.162464,-1.162507,-1.1624319,-1.1624426,-1.1624828,-1.1627349,-1.1630032,-1.1631319,-1.1632188,-1.1632526,-1.1632177,-1.1630085,-1.1629012,-1.1627564,-1.1626438,-1.1624587,-1.1625338,-1.1623192,-1.1623541,-1.1623568,-1.162456,-1.1625499,-1.1626652,-1.1627752,-1.1627752,-1.1628825,-1.1629254,-1.1628744,-1.1629495,-1.1630702,-1.1631158,-1.1632043,-1.1633894,-1.163612,-1.163722,-1.1638212,-1.1638393],\"lat\":[50.6981445,50.698204,50.6982617,50.6983212,50.6984384,50.6985658,50.6986287,50.698836,50.6990161,50.6992964,50.6994985,50.6996735,50.6998128,50.7002002,50.7006266,50.700844,50.7011401,50.7013231,50.7014454,50.701493,50.7015524,50.7015779,50.7015643,50.7018905,50.7020077,50.7020859,50.7021521,50.7022642,50.7022948,50.7024341,50.7024936,50.7025564,50.7026702,50.7027399,50.7027841,50.7028928,50.7029675,50.702959,50.7028911,50.7028418,50.7027722,50.7027603,50.7028078,50.7030185,50.7030573]}]],[[{\"lng\":[-1.2098104,-1.2099069,-1.2098801,-1.2098855,-1.2097997,-1.2098131,-1.2098412,-1.2098613,-1.2098332,-1.2097219,-1.2096065,-1.2095676,-1.2095167,-1.2094711,-1.2093785,-1.2091036,-1.2089762,-1.208763,-1.2086771,-1.2086691,-1.2086852,-1.2086798,-1.2086624,-1.2087107,-1.2087134,-1.2088984,-1.2088877,-1.208822,-1.2088649,-1.2088595,-1.2089963,-1.2090902,-1.2091801,-1.2091988],\"lat\":[50.68786,50.6880265,50.688193,50.6884411,50.6886484,50.6889186,50.6890469,50.6891523,50.689193,50.6892882,50.6894318,50.6895915,50.6897317,50.6897733,50.6898031,50.6900902,50.6902831,50.6905524,50.6907461,50.6908872,50.6911174,50.6913935,50.6916705,50.6918005,50.6919177,50.6923068,50.6923782,50.6924929,50.6926628,50.6928658,50.693204,50.6934359,50.6934673,50.6936168]}]],[[{\"lng\":[-1.4615196,-1.4617127,-1.4619327,-1.4619353,-1.4620507,-1.4621687,-1.4625818,-1.4637324,-1.463775,-1.4637968],\"lat\":[50.6598931,50.6597876,50.6592316,50.6589902,50.6584486,50.6583645,50.6581349,50.6562228,50.6561675,50.6561382]}]],[[{\"lng\":[-1.1465156,-1.148765],\"lat\":[50.7008714,50.7008152]}]],[[{\"lng\":[-1.1463118,-1.1463552,-1.1465156,-1.1465639,-1.1473846,-1.1480284,-1.1485809,-1.1488974,-1.1490154],\"lat\":[50.700338,50.7004516,50.7008714,50.7012723,50.7012519,50.7012655,50.7012417,50.7013335,50.7013607]}]],[[{\"lng\":[-1.1469233,-1.1462045,-1.1461294,-1.1461508,-1.1460757,-1.1459523],\"lat\":[50.7036336,50.7019145,50.7013369,50.7010515,50.7007627,50.7005112]}]],[[{\"lng\":[-1.149627,-1.1493578,-1.1493427,-1.1490154,-1.148765,-1.1486821,-1.1485755,-1.1485124,-1.1482644],\"lat\":[50.703406,50.7025053,50.7024547,50.7013607,50.7008152,50.7006347,50.7004025,50.7002833,50.6998147]}]],[[{\"lng\":[-1.1747365,-1.174719,-1.1745366,-1.1740485,-1.1739492,-1.1736918,-1.1735067,-1.1730909,-1.1723721],\"lat\":[50.6969894,50.6970285,50.6973343,50.6976503,50.6977998,50.6980479,50.6980852,50.6983639,50.6988871]}]]],null,\"Water\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#00F\",\"weight\":2,\"opacity\":0.5,\"fill\":false,\"fillColor\":\"#00F\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,[\"Waterway: stream\",\"Waterway: stream\",\"Waterway: stream\",\"Waterway: stream\",\"Waterway: ditch\",\"Waterway: ditch\",\"Waterway: ditch\",\"Waterway: ditch\",\"Waterway: ditch\",\"Waterway: ditch\",\"Waterway: ditch\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addLayersControl\",\"args\":[[\"Simple\",\"Terrain\",\"Satellite\"],[\"Line/buffer\",\"Start/end\",\"Water\",\"Barriers\",\"Buildings\"],{\"collapsed\":false,\"autoZIndex\":true,\"position\":\"topright\"}]},{\"method\":\"addMeasure\",\"args\":[{\"position\":\"topleft\",\"primaryLengthUnit\":\"meters\",\"primaryAreaUnit\":\"sqmeters\",\"activeColor\":\"#ABE67E\",\"completedColor\":\"#C8F2BE\",\"popupOptions\":{\"className\":\"leaflet-measure-resultpopup\",\"autoPanPadding\":[10,10]},\"captureZIndex\":10000,\"localization\":\"en\",\"decPoint\":\".\",\"thousandsSep\":\",\"}]}],\"limits\":{\"lat\":[50.6561382,50.7129361],\"lng\":[-1.472,-1.100815942671989]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nSo, you can inspect the route interactively by zoom and dragging, by hovering over highlighted features to see what they are, and by turning on and off the different map and feature layers for more or less context.\n\n## Next\n\nThere's a lot of stuff missing from this approach to make it useful for actually planning a straight-line route. For example, I haven't included elevation or land-use type (you don't want to spend a few kilometres in a marsh). You're also restricted to a two-dimensional overhead view.\n\nOf course, I also hard-coded the start and end points for this demo. The real power of this approach would be to let the user choose where they want to start and end and feed back on the identity and number of obstructions for each line suggested. To this end, I've started developing [a simple Shiny app](https://github.com/matt-dray/mission-across-iow).\n\n## Disclaimer\n\nAm I encouraging you to trespass? No. Am I encouraging you to take advantage of {osmextra}, {sf} and {leaflet} for mapping in R? Yes.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-16 13:42:29 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.2      forcats_1.0.0        stringr_1.5.0       \n [4] dplyr_1.1.2          purrr_1.0.1          readr_2.1.4         \n [7] tidyr_1.3.0          tibble_3.2.1         ggplot2_3.4.2       \n[10] tidyverse_2.0.0      sf_1.0-14            osmextract_0.4.1    \n[13] leaflet.extras_1.0.0 leaflet_2.1.2        geojsonio_0.11.1    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.3            xfun_0.39               htmlwidgets_1.6.2      \n [4] lattice_0.21-8          tzdb_0.4.0              leaflet.providers_1.9.0\n [7] vctrs_0.6.3             tools_4.3.1             crosstalk_1.2.0        \n[10] generics_0.1.3          curl_5.0.1              proxy_0.4-27           \n[13] fansi_1.0.4             pkgconfig_2.0.3         KernSmooth_2.23-21     \n[16] lifecycle_1.0.3         farver_2.1.1            compiler_4.3.1         \n[19] munsell_0.5.0           jqr_1.2.3               htmltools_0.5.5        \n[22] class_7.3-22            yaml_2.3.7              lazyeval_0.2.2         \n[25] pillar_1.9.0            ellipsis_0.3.2          classInt_0.4-9         \n[28] tidyselect_1.2.0        digest_0.6.31           stringi_1.7.12         \n[31] ggthemes_4.2.4          fastmap_1.1.1           grid_4.3.1             \n[34] colorspace_2.1-0        cli_3.6.1               magrittr_2.0.3         \n[37] crul_1.4.0              utf8_1.2.3              e1071_1.7-13           \n[40] withr_2.5.0             scales_1.2.1            sp_2.0-0               \n[43] timechange_0.2.0        httr_1.4.6              rmarkdown_2.23         \n[46] hms_1.1.3               evaluate_0.21           knitr_1.43.1           \n[49] V8_4.3.2                geojson_0.3.4           rlang_1.1.1            \n[52] Rcpp_1.0.11             glue_1.6.2              DBI_1.1.3              \n[55] httpcode_0.3.0          geojsonsf_2.0.3         rstudioapi_0.15.0      \n[58] jsonlite_1.8.7          R6_2.5.1                units_0.8-2            \n```\n:::\n:::\n\n</details>\n\n[^wight]: As far as I know this does not relate to the island hosting any wights in the Game of Thrones sense. Might want to factor that into your planning if you do decide to cross the island. Maybe do it in summer.\n[^def]: I'm not sure that Tom has ever defined what it means to 'cross a country', exactly. Clearly doing it at a narrow point makes sense. But couldn't you just find a kink in the border and cross it? Your straight line could be 1 m long!\n[^geojson]: I'm using here the 'LAD boundaries (December 2020) UK BGC from the ONS Open Geography Portal Generalised (20m) - clipped to the coastline (Mean High Water mark)'.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<link href=\"../../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-binding-2.1.2/leaflet.js\"></script>\n<script src=\"../../site_libs/leaflet-providers-1.9.0/leaflet-providers_1.9.0.js\"></script>\n<script src=\"../../site_libs/leaflet-providers-plugin-2.1.2/leaflet-providers-plugin.js\"></script>\n<link href=\"../../site_libs/leaflet-awesomemarkers-2.0.3/leaflet.awesome-markers.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-awesomemarkers-2.0.3/leaflet.awesome-markers.min.js\"></script>\n<link href=\"../../site_libs/fontawesome-4.7.0/font-awesome.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/leaflet-measure-2.1.7/leaflet-measure.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-measure-2.1.7/leaflet-measure.min.js\"></script>\n<link href=\"../../site_libs/lfx-fullscreen-1.0.2/lfx-fullscreen-prod.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/lfx-fullscreen-1.0.2/lfx-fullscreen-prod.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}