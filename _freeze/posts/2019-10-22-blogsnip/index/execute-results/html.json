{
  "hash": "2247e4015df28afc8167c2d6f5b7eba8",
  "result": {
    "markdown": "---\ntitle: '{blogsnip}: an RStudio addin package'\ndate: 2019-10-22\nslug: blogsnip\ncategories:\n  - blogdown\n  - blogsnip\n  - pkgdown\n  - r\n  - rstudio\n---\n\n\n![Inserting a details block with the {blogsnip} addin.](resources/blogsnip.gif){fig-alt=\"The blogsnip addin is demonstrated by selecting 'insert details block' from the addins menu, which creates an expandable details section when rendered from R Markdown to HTML.\" width=\"100%\"}\n\n## tl;dr\n\nOn my commute home I made [{blogsnip}](https://matt-dray.github.io/blogsnip/): a tiny package of [RStudio addins](https://rstudio.github.io/rstudioaddins/) that add snippets of R code to help me write blog posts.\n\n## The problem\n\nI'm lazy.\n\nThere's some bits of code I often want to put in my blog posts (written in [R Markdown](https://rmarkdown.rstudio.com/)) but I can't remember them.\n\nIn particular:\n\n* an expandable 'details' section[^dg], which sometimes contains [R session information](https://www.rostrum.blog/2018/10/13/sessioninfo/) and the date of the post's last update (see [examples throughout this previous post](https://www.rostrum.blog/2019/05/31/brickr-soccer/))\n* a way to add an image with a caption and alt text that differ (like the gif at the top of this post), something that makes the images [more accessible](https://www.gov.uk/guidance/content-design/image-copyright-standards-for-gov-uk) for users of screen readers, for example\n* a link that opens in a new tab, rather than in the tab where you're reading a post ([as per this tweet](https://twitter.com/rudeboybert/status/1042418261596545027?s=20) by [Albert Y Kim](https://twitter.com/rudeboybert/))\n\nOriginally I [stored them in a GitHub Gist](https://gist.github.com/matt-dray/00aa8038b836168bd6689feedb60b5dd), but this is sub-optimal: the internet connection on my commute can be patchy. I needed an offline solution.\n\n## The answer\n\nI use [RStudio](https://rstudio.com/) and [{blogdown}](https://bookdown.org/yihui/blogdown/) to write my blog posts. RStudio has a feature that lets you execute functions from [an 'addins' menu](https://rstudio.github.io/rstudioaddins/).\n\n[Lots of of addins](https://github.com/daattali/addinslist) are available (see this RStudio Community thread). Some simple ones are [{datapasta}](https://github.com/MilesMcBain/datapasta) for copy-pasting stuff into R, [{reprex}](https://github.com/tidyverse/reprex) for generating reproducible examples and even {blogdown} itself, which [has addins for creating new posts and inserting images](https://bookdown.org/yihui/blogdown/rstudio-ide.html), for example.\n\nSo I wrote my snippets into a package that, when installed, adds some functions to RStudio's addins menu.\n\nThe package is called {blogsnip}. Visit the [site](https://matt-dray.github.io/blogsnip/) or [source](https://github.com/matt-dray/blogsnip/). Install with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/blogsnip\")\n```\n:::\n\n\nOnce installed, the functions are available under 'BLOGSNIP' in RStudio's 'addins' dropdown (see the gif at the top of this post). You could also use them like regular functions by calling `blogsnip::addin_details()`, for example.\n\n## How to\n\nYou can follow [RStudio's guidance on creating addins](https://rstudio.github.io/rstudioaddins/#developing-addins), which even incldues some fancy stuff like [invoking Shiny-powered interfaces](https://rstudio.github.io/rstudioaddins/#shiny-gadgets) for addins.\n\nBut perhaps, like me, you just want to create some simple shareable addins that insert some snippets of text. In which case, the (simplified) steps are:\n\n1. Create an R package structure with `usethis::create_package()`\n1. Add an R script to house your functions with `usethis::use_r()`\n1. Edit the script so you have functions in the form `fun_name <- function() {rstudioapi::insertText(\"Text\")}`, where the `insertText()` function does exactly that ([see example](https://github.com/matt-dray/blogsnip/blob/master/R/insert_blogdown_helpers.R))\n1. Add a special file at `inst/rstudio/addins.dcf` that declares your functions as addins ([see example](https://github.com/matt-dray/blogsnip/blob/master/inst/rstudio/addins.dcf))\n1. Document and build your package and host it for others to use\n\nSo you're writing an R package as usual[^pkg], making use of {rstudioapi} functions and adding that special .dcf file.\n\nSee what this looks like in [the full source code for {blogsnip}](https://github.com/matt-dray/blogsnip) (note that I've added some other stuff there, like a license, readme and files to generate [a {pkgdown} site](https://pkgdown.r-lib.org/index.html)).\n\n## Next\n\nAdd more useful snippets to {blogsnip} for writing posts with {blogdown}. Maybe this can include 'find-and-replace' rather than 'insert' versions of current functions. Maybe [you can help](https://github.com/matt-dray/blogsnip/blob/master/CODE_OF_CONDUCT.md)?\n\nOh, and [a sticker](https://github.com/matt-dray/stickers), probably.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-24 20:10:04 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^dg]: I think I stole this originally from [Duncan Garmonsway](https://twitter.com/nacnudus).\n[^pkg]: I recommend [Tomas Westlake's guide for writing an R package from scratch](https://r-mageddon.netlify.com/post/writing-an-r-package-from-scratch/), [Emil Hvitfeldt's {usethis} workflow for package development](https://www.hvitfeldt.me/blog/usethis-workflow-for-package-development/), [Karl Broman's R Packages Primer](https://kbroman.org/pkg_primer/) and [Hadley Wickham's R Packages book](http://r-pkgs.had.co.nz/).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}