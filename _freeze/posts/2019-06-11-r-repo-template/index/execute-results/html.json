{
  "hash": "f12a4727892da901ff85c2143978620c",
  "result": {
    "markdown": "---\ntitle: A GitHub repo template for R analysis\ndate: 2019-06-11\nslug: r-repo-template\ncategories:\n  - github\n  - r\n  - template\n---\n\n\n<img src=\"\" >\n\n![](resources/use-this.png){fig-alt=\"The green button on GitHub that's used to copy a repository template. It says 'use this template' on it.\" width=\"100%\"}\n\n## tl;dr\n\nI made a simple [GitHub repo template](https://github.com/matt-dray/r-analysis-template/) for analysis projects. You can go to the repo and hit the 'use this template' to try it out.\n\n## Sharing is caring\n\nGitHub has introduced [repository templates](https://github.blog/2019-06-06-generate-new-repositories-with-repository-templates/) to make it easier to share frequently-used repo structures and boilerplate code. You can copy a whole repo as many times as you like, unlike forks.\n\nFollowing a template can help keep your work organised and encourage consistency within and between projects. I can see this being useful for [sharing optimal workflows across boundaries like government departments](https://ukgovdatascience.github.io/rap-website/).\n\n## Tada\n\n[I've made a lightweight repo template](https://github.com/matt-dray/r-analysis-template/) to make it easier for me to start very simple analysis projects with R.\n\nIt's [opinionated](https://stackoverflow.com/questions/802050/what-is-opinionated-software), but others may find it useful.\n\n![](resources/repo.png){fig-alt=\"Screenshot of GitHub showing the contents of the repository template, including folders for data and outputs.\" width=100%}\n\nTo use it, either:\n\n1. [Go to the repo](https://github.com/matt-dray/r-analysis-template/) and click the green 'use this template button'\n1. [Append the repo URL with '/generate'](https://github.com/matt-dray/r-analysis-template/generate/) to go straight to the repo copying page\n\nThe screen looks like when you create a new repo from scratch, but it mentions that 'the new repository will start with the same files and folders' as the template repo. Add a name and description for the repo copy and hit the 'create repository from template' button.\n\n![](resources/copy-repo.png\"){fig-alt=\"Screenshot of the GitHub page for creating a repository from the template\" width=100%}\n\nThat's it.\n\n## Basic template structure\n\nMuch of the sentiment for creating this sort of folder structure has been described in detail elsewhere, including by [Richard Fitzjohn](https://nicercode.github.io/blog/2013-04-05-projects/) and [Joris Muller](http://blog.jom.link/implementation_basic_reproductible_workflow.html).\n\nIn short, the root has:\n\n* executable R files, separated into 'sensible' units of analysis ('read', 'tidy', etc)\n* an R Project file (`.Rproj`)\n* a .gitignore for R, with `.DS_Store` added\n* a `README.md` to summarise the project as a whole\n\nThere are folders for:\n\n* R functions (`R/`)\n* raw, untouched, read-only data sets (`data/`)\n* report source and output files (`doc/`)\n* external files (`ext/`), such as pre-trained models\n\nOf course, these can be added to, removed or renamed as required.\n\n## Bulk it up\n\nIt's not enough to have structure alone. There are plenty of guides for code and file creation. For example:\n\n* files should be named appropriately ([advice from Jenny Bryan](https://speakerdeck.com/jennybc/how-to-name-files))\n* code should be consistent and follow a style guide (e.g. [the tidyverse style guide](https://style.tidyverse.org/)), which is made easier with a linter, like [{lintr}](https://github.com/jimhester/lintr)\n* READMEs are provided throughout, but documentation should continue in the analysis files themselves, with sensible comments throughout\n\nThe repo template focuses primarily on folder structure. It misses out some additional tools, including some that need a bit of further setup. You should think about including them anyway. For example:\n\n* some form of dependency management, like [{renv}](https://github.com/rstudio/renv)\n* continuous integration, like [Travis CI](https://travis-ci.org/)\n* a [makefile](https://en.wikipedia.org/wiki/Makefile), integration with [{drake}](https://ropensci.github.io/drake/), or similar\n* [Docker](https://www.docker.com/)\n* much much more\n\nThere's a certain amount of personal preference in the tools and techniques for these things and it's probably best left to the user.\n\nLet me know what you think is missing or what you would add.\n\n## Alternatives\n\nCopying a repo template might not be optimal for you, but you can generate the structure for an analytical project in other ways.\n\nOne example is the [{starters}](https://github.com/lockedata/starters) package from [Locke Data](https://itsalocke.com/), which can be installed with `remotes::install_github(\"lockedata/starters\")`. The `create_analysis_project()` function sets up a project folder for you with various arguments to add certain folders and setup things like dependency management, git and continuous integration.\n\nAnother option is to set up your analysis as a package, as [outlined by Thomas J Leeper](https://thomasleeper.com/2016/11/analysis-as-package/), for example. Jenny Bryan and Hadley Wickham's [{usethis}](https://usethis.r-lib.org/) package provides lots of functions to help you create a package and add things to it, like `create_project()` and `use_git()`.\n\nI like these two options more than the template, to be honest. The template is really for quick, simple analysis; mostly for my own purposes.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-25 21:44:48 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}