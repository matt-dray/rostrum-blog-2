{
  "hash": "7024124b75bf559522337b12bb04ae6b",
  "result": {
    "markdown": "---\ntitle: \"Playgrounds with WebR and Quarto\"\nauthor: Matt Dray\ndate: '2023-03-16'\nslug: webr-quarto\ncategories:\n  - code\ntags:\n  - quarto\n  - r\n  - webr\n---\n\n\n<div class=\"figure\">\n<img src=\"/post/2023-03-16-webr-test_files/webr-quarto-test.png\" alt=\"A screenshot of a webpage that has an embedded R code block. Some text asks the user to adjust the code and then click a button that says 'run code'. A shocked Pikachu appears in the corner.\" width=\"100%\"/>\n</div>\n\n# tl;dr\n\n[WebR](https://docs.r-wasm.org/webr/latest/) lets you run R in the browser(!). Now you can [make WebR chunks in Quarto](https://github.com/coatless/quarto-webr) that render to editable, executable blocks(!).\n\n# Sliding into tedium\n\nI wrote recently [a simple introduction to how R parses code](https://www.rostrum.blog/2023/03/03/getparsedata/). I provided a function that I said the reader could go away and run themselves. \n\nAs in... copy-paste it into an instance of R running on their machine. Gross.\n\nWouldn't it be better if people could just tinker with the code right there in the post? This kind of 'playground' could be great for explaining concepts and teaching.[^w3]\n\n# I seesaw a solution\n\nWebR lets you run R in the browser. Read that again! This is a landmark piece of work from George Stagg and Lionel Henry.\n\nI won't go into technicals and limitations here. For more information, see:\n\n* [the docs](https://docs.r-wasm.org/webr/latest/)\n* [the v0.1 launch post](https://www.tidyverse.org/blog/2023/03/webr-0-1-0/)\n* [an 'awesome' list of resources](https://github.com/nanxstats/awesome-webr)\n\nCrucially for my needs, you can now [run WebR chunks in a Quarto document](https://github.com/coatless/quarto-webr), thanks to James J Balamuta. This renders interactive blocks of R code that the reader can adjust and execute with button-click:\n\n<div class=\"figure\">\n<img src=\"/post/2023-03-16-webr-test_files/webr-demo.gif\" alt=\"Animated gif showing a code block with R code inside that sets the value of 'x' to 'world' then pastes it together with the string 'hello'. A 'run code' button is clicked and the string 'hello world' is printed. The word 'hello' is then changed to 'ahoy' and the code is re-run and the printout changes to 'ahoy world'.\" width=\"40%\"/>\n<p class=\"caption\">Beware: this is a gif, not an embedded demo!</p>\n</div>\n\nCheck out James's [coatless/quarto-webr](https://github.com/coatless/quarto-webr) GitHub repo for the source. There's also [a live demo](https://rd.thecoatlessprofessor.com/webR-quarto-demos/webr-quarto-html-demo.html) and [its source](https://github.com/coatless-r-n-d/webR-quarto-demos/blob/main/webr-quarto-html-demo.qmd).\n\n# Swinging into action\n\nTo have a go yourself, do follow [the setup steps](https://github.com/coatless/quarto-webr) in James's quarto-webr README and look at [the source of his demo](https://github.com/coatless-r-n-d/webR-quarto-demos/blob/main/webr-quarto-html-demo.qmd). \n\nUltimately you can:\n\n1. Install the extension to your project folder by running `quarto add coatless/quarto-webr` in the terminal\n2. Set `filter: webr` in the YAML of your qmd file[^knitr]\n3. Write code chunks in the qmd using the `{webr}` engine\n\nThis made it straightforward to prepare a little Quarto doc with chunks powered by the 'webr' engine, which I deployed to the web via [Netlify](https://www.netlify.com/).[^netlify] \n\nYou can [visit that live page](https://webr-parse-test.netlify.app/) or see the underlying [source on GitHub](https://github.com/matt-dray/webr-parse-test).[^iframe]\n\nSo now you _can_ tinker with the example I gave in the original blogpost about parsing R code. Unfortunately I can't add this directly to the post, since this blog is not made with Quarto.\n\n# A blog-platform merry-go-round\n\nI've written this quick demo and post because I was excited about what George & Lionel and James have put together. There's so many system-independent applications of this approach that could help with teaching and learning, or explaining simple ideas in a blog post.\n\nIn fact, this blog may eventually switch from {blogdown} to Quarto to take advantage of WebR. It'll be a pain to convert old posts, but luckily I already missed the earlier {blogdown}-to-{distill} bandwagon, lol.[^distill]\n\n\n---\n<details><summary>Session info</summary>\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Big Sur/Monterey 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-04-10\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.0   2023-01-09 [1] CRAN (R 4.2.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.2.0)\n evaluate      0.20    2023-01-17 [1] CRAN (R 4.2.0)\n fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.2.0)\n htmltools     0.5.2   2021-08-25 [1] CRAN (R 4.2.0)\n htmlwidgets   1.5.4   2021-09-08 [1] CRAN (R 4.2.0)\n jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.2.0)\n knitr         1.42    2023-01-25 [1] CRAN (R 4.2.0)\n rlang         1.0.6   2022-09-24 [1] CRAN (R 4.2.0)\n rmarkdown     2.14    2022-04-25 [1] CRAN (R 4.2.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n xfun          0.37    2023-01-31 [1] CRAN (R 4.2.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n</details>\n\n[^w3]: A nice example of this in a teaching context is W3 Schools, who have a ['Try It Yourself'](https://www.w3schools.com/html/tryit.asp?filename=tryhtml_intro) space that lets you take code from the lessons and tinker with it yourself in the browser.\n[^netlify]: Self-deployment and Netlify are viable for now, GitHub Pages is coming later. Netlify is how this blog is deployed.\n[^iframe]: Originally I tried to embed the Quarto demo in an iframe, but WebR failed to load inside it when the blog was rendered. That's interesting.\n[^distill]: But came close when I thought I'd found [a system for making individual posts reproducible](https://www.rostrum.blog/2022/03/15/renv-profiles/).\n[^knitr]: Set also `engine: knitr` in the YAML to use {knitr} instead of Jupyter to handle the conversion. You can add `format: html` to ensure that the output is rendered to HTML.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}