{
  "hash": "07f8f108e11a6ba2d81f0250c5e2faee",
  "result": {
    "markdown": "---\ntitle: Up-to-date blog stats in your README\ndate: 2021-04-14\nslug: gha-readme\ncategories:\n  - github-actions\n  - r\n  - rmarkdown  \n---\n\n\n![Yesterday's render of the GitHub [README for this blog](https://github.com/matt-dray/rostrum-blog/blob/master/README.md).](resources/readme.png){fig-alt=\"The README file for this blog on GitHub showing up-to-date stats on things like the number of posts, posting rates and a chart showing posts over time.\" width=\"100%\"}\n\n## tl;dr\n\nYou can use a scheduled [GitHub Action](https://github.com/features/actions) to render up-to-date stats about your blog into its README.\n\n## Happy blogday\n\nThis blog has been knocking around for three years now. I wrote [a post on its first birthday](https://www.rostrum.blog/2019/04/14/one-year/) with a simple, interactive 2D plot of the posts to date.\n\nOnly now, two years later, have I thought to put this info into the blog's README on GitHub---along with some other little stats, like total number of posts---and have it update automatically on a schedule using [a GitHub Action](https://github.com/features/actions).[^gha]\n\nThis is useful for me so I can keep track of things without counting on my fingers, but it also signals activity on the blog to any curious visitors. I may change its content at some point, but it does what I want it to do for now.\n\n## Unwrap your GitHub Action\n\nI've scheduled a GitHub Action for the early hours of each day. [The YAML file](https://github.com/matt-dray/rostrum-blog/blob/master/.github/workflows/render-rmarkdown.yaml) for it reads like 'at the specified time[^cron], set up a remote environment with R and some dependencies, then render the R Markdown file and push the changes to GitHub.' \n\nI've modified [r-lib's pre-written YAML for this](https://github.com/r-lib/actions/blob/master/examples/render-rmarkdown.yaml), which can be generated in the correct location in your project with `usethis::use_github_action(\"render-rmarkdown.yaml\")`.\n\n<details><summary>Click for the GitHub Action YAML</summary>\n```\nname: Render README\n\non:\n  schedule:\n    - cron: '09 05 * * *'\n\njobs:\n  render:\n    name: Render README\n    runs-on: macOS-latest\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - uses: actions/checkout@v2\n      - uses: r-lib/actions/setup-r@v1\n      - uses: r-lib/actions/setup-pandoc@v1\n      - name: Install CRAN packages\n        run: Rscript -e 'install.packages(c(\"remotes\", \"rmarkdown\", \"knitr\", \"tidyverse\"))'\n      - name: Install GitHub packages\n        run: Rscript -e 'remotes::install_github(\"hadley/emo\")'\n      - name: Render README\n        run: Rscript -e 'rmarkdown::render(\"README.Rmd\")'\n      - name: Commit results\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n          git commit README.md README_files/ -m 'Re-build README.Rmd' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\"\n```\n</details>\n\nBasically, the action knits the repo's [README.Rmd](https://github.com/matt-dray/rostrum-blog/blob/master/README.Rmd) (R Markdown format containing R code) to a counterpart [README.md](https://github.com/matt-dray/rostrum-blog/blob/master/README.md) (GitHub-flavoured markdown), which is displayed when you [visit the repo](https://github.com/matt-dray/rostrum-blog).\n\n## PaRty time\n\nThe real magic is in some R code chunks at the top of [the README.Rmd file](https://github.com/matt-dray/rostrum-blog/blob/master/README.md) itself. There's some R code there that uses {rvest} to scrape the archive page of the blog and create a dataframe of the titles, links and publish dates of each post.\n\n<details><summary>Click for the scraping code</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\n# Attach packages\nlibrary(tidyverse) # CRAN v1.3.0\nlibrary(rvest)     # CRAN v1.0.0\n\n# Scrape the rostrum.blog home page\nhtml <- read_html(\"https://rostrum.blog/\")\n\n# Extract the post titles\ntitle <- html %>%\n  html_nodes(\".archive-item-link\") %>%  # extract title node\n  html_text()                           # extract text\n\n# Extract the post URLs\nlink <- html %>% \n  html_nodes(\".archive-item-link\") %>%  # extract title node\n  html_attr(\"href\")                     # extract href attribute\n\n# Extract the post dates\ndate <- html %>%\n  html_nodes(\".archive-item-date\") %>%  # extract date nodes only\n  html_text() %>%                       # extract text\n  str_replace_all(\"[:space:]\", \"\")      # remove newline/space\n\n# Dataframe of titles and dates\nposts <- tibble(date, title link), %>% \n  transmute(\n    n = nrow(.):1,             # number starting from first post\n    publish_date = ymd(date),  # convert to date class\n    title,                     # title text\n    link = paste0(\"https://www.rostrum.blog\", link)  # create full URL\n  )\n```\n:::\n\n</details>\n\nThat information can be cajoled to show some basic stats. The README includes inline R code that renders to show:\n\n* the total number of posts\n* posting rates (posts per month and days per post)\n* the number of days since since the last post and a link to it\n* a clickable details block containing a table of all the posts to date\n* a simple 2D plot showing the distribution of posts over time[^chart] (preview below)\n\n<details><summary>Click for plot code</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create plot object\np <- posts %>%\n  ggplot(aes(x = publish_date, y = 1)) +\n  geom_point(shape = \"|\", size = 10, stroke = 1, color = \"#1D8016\") + \n  theme_void()\n```\n:::\n\n</details>\n\n![](resources/posts.png){fig-alt=\"A 2D chart where each point represents a post on an axis of time spanning from 2018 to the present. There are some gaps, but posts have been relatively consistent over time.\" width=\"100%\"}\n\nI also added a call to `lubridate::today()` at the bottom of the README.Rmd so it's obvious when the stats were last updated.\n\n## Until next year\n\nFinally, and most importantly, I included a tiny Easter egg: an emoji balloon ðŸŽˆ will appear on the page when the README is rendered on the anniversary of the blog's inception.[^balloon]\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-17 17:51:05 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^gha]: I've written before about GitHub Actions to create [a Twitter bot](https://www.rostrum.blog/2020/09/21/londonmapbot/) and for [continuous integration of R packages](https://www.rostrum.blog/2020/08/09/ghactions-pkgs/).\n[^cron]: I wrote about scheduling with cron strings in [an earlier post](https://www.rostrum.blog/2021/04/10/dialga/), which details [the {dialga} package](https://github.com/matt-dray/dialga) for translating from R to cron to English.\n[^chart]: The original chart was made with {plotly}, so you could hover over the points to see the post titles and publishing dates. Plotly isn't supported in GitHub Markdown, so I included a static chart instead. I used a similar 'barcode' format in [a recent post about health data](https://www.rostrum.blog/2021/03/23/xml-health/).\n[^balloon]: That's today if you're reading this on the day it was published.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}