{
  "hash": "8e095efbd0e97d1621b679ba1ee6b751",
  "result": {
    "markdown": "---\ntitle: A tiny {shiny} flag challenge\ndate: 2021-03-02\nslug: randoflag\ncategories:\n  - bslib\n  - emoji\n  - r\n  - shiny\n  - shinyjs\n---\n\n\n![The gif loops; I promise there's more flags than this.](resources/randoflag-300x450.gif){fig-alt=\"An animation showing a flag whose nation is revealed by clicking a 'reveal' button and a new flag is presented by pressing a 'refresh' button.\" width=\"30%\" fig-align=\"left\"}\n\n## tl;dr\n \nI wrote [a teeny-weeny R Shiny app](https://github.com/matt-dray/randoflag) to serve me a flag challenge whenever I open a new browser tab.\n\n## A vexatious request\n\nI thought it would be fun to set my browser tabs to open with [thiscatdoesnotexist.com](https://www.thiscatdoesnotexist.com/), which serves a random ersatz 'cat' as hallucinated by [StyleGAN](https://arxiv.org/abs/1912.04958).[^humon] It's kind of terrifying and time for a change.\n\nWe probably accumulate hours of time looking at fresh browser tabs, so why not exploit that for fun and learning? I wanted something visual, quick and low stakes, so... world flags?\n\nMy needs were simple: show a mystery flag; reveal who it belongs to; refresh.[^spork] So I built a little [{shiny}](https://shiny.rstudio.com/) app, put it in [a GitHub repo](https://github.com/matt-dray/randoflag) and [served it](https://mattdray.shinyapps.io/randoflag/).\n\nOn the front-end you're presented one of [over 250 (!) emoji flags](https://emojiflags.com/)[^emoji] at random. There's a button to reveal the country it represents and another button to refresh the page via [{shinyjs}](https://deanattali.com/shinyjs/). The back-end just samples a flag from the [{emo}](https://github.com/hadley/emo) package and waits for you to hit refresh. The [{bslib}](https://rstudio.github.io/bslib/) package made it easy to generate a theme that keeps focus on the flag.\n\nSo now I've set my new tabs to open at [https://mattdray.shinyapps.io/randoflag/](https://mattdray.shinyapps.io/randoflag/) (tested on Firefox, Chrome and Safari on iOS 14) and I know what the Guadeloupe flag looks like now.\n\n## Hoisting the app\n\nThe app is currently [hosted online via shinyapps.io](https://mattdray.shinyapps.io/randoflag/) and I've embedded it below. It's highly likely I'll take it down at some point. \n\n<iframe src=\"https://mattdray.shinyapps.io/randoflag/\" width=\"364\" height=\"538\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n\nIf it does get yoinked from the internet, you can install and run the app from your R session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshiny::runGitHub(\"randoflag\", \"matt-dray\", \"main\")\n```\n:::\n\n\nYou'll need {shiny}, {bslib} and {shinyjs} installed from CRAN and you can get {emo} using `remotes::install_github(\"hadley/emo\")`.\n\n## Half-mastery\n\nBeware: some emoji flags are shared by more than one geographic entity...\n\n![Bof!](resources/randoflag-france-300x450.gif){fig-alt=\"An animation where the French tricolore flag is revealed to be labelled as 'St Martin'.\" width=\"30%\" fig-align=\"left\"}\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-17 21:10:01 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^humon]: Yeah, but [thispersondoesnotexist.com](https://www.thispersondoesnotexist.com) is even creepier.\n[^spork]: See [Sporcle](https://www.sporcle.com/games/g/worldflags?sc=flags) if you want an actual quiz.\n[^emoji]: Why _emoji_ flags? I don't have to store hundreds of flags as images in the app's files and {emo} exists to make things very easy. Also I want to practice for when [Emojli](https://emoj.li/) inevitably returns.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}