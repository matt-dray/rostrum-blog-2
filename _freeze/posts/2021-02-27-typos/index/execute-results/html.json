{
  "hash": "9c003d220b54342d7494392615aab4c3",
  "result": {
    "markdown": "---\ntitle: Typo-shaming my Git commits\ndate: 2021-02-27\nslug: typos\ncategories:\n  - gh\n  - git\n  - github\n  - r\n---\n\n\n![The author at work (CC BY-SA 3.0 by KaterBegemot)](resources/monke.png){fig-alt=\"A line-drawn monkey poking a typewriter.\" width=\"50%\" fig-align=\"left\"}\n\n## tl;dr\n\nNearly 10 per cent of the commits to [this blog's source](https://github.com/matt-dray/rostrum-blog) involve typo fixes, according to a function I wrote to search commit messages via [the {gh} package](https://github.com/r-lib/gh). \n\n<div class=\"tip\"> `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nGreat news everyone, I improved. I re-rendered this post in July 2023 and the percentage had basically halved to 5%.\n</div>\n\n## Not my typo\n\nI'm sure you've seen consecutive Git commits from jaded developers like 'fix problem', 'actually fix problem?', 'the fix broke something else', 'burn it all down'. Sometimes a few swear words will be thrown in for good measure (look no further than ['Developers Swearing'](https://twitter.com/gitlost?lang=en) on Twitter).\n\nThe more obvious problem from reading the commits for this blog is my incessant keyboard mashing; I think a lot of my commits are there to fix typos.[^check]\n\nSo I've prepared a little R function to grab the commit messages for a specified repo and find the ones that contain a given search term, like 'typo'.[^typi]\n\n## Search commits\n\n[{gh}](https://github.com/r-lib/gh) is a handy R package from Gábor Csárdi, Jenny Bryan and Hadley Wickham that we can use to interact with [GitHub's REST API](https://docs.github.com/en/rest).[^dump]  We can also use [{purrr}](https://purrr.tidyverse.org/) for iterating over the returned API object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gh)    # CRAN v1.2.0\nlibrary(purrr) # CRAN v0.3.4\n```\n:::\n\n\nSo, here's one way of forming a function to search commit messages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_commits <- function(owner, repo, string = \"typo\") {\n  \n  commits <- gh::gh(\n    \"GET /repos/{owner}/{repo}/commits\",\n    owner = owner, repo = repo,\n    .limit = Inf\n  )\n\n  messages <- purrr::map_chr(\n    commits, ~purrr::pluck(.x, \"commit\", \"message\")\n  )\n  \n  matches <- messages[grepl(string, messages, ignore.case = TRUE)]\n  \n  out <- list(\n    meta = list(owner, repo),\n    counts = list(\n      match_count = length(matches),\n      commit_count = length(messages),\n      match_ratio = length(matches) / length(messages)\n    ),\n    matches = matches,\n    messages = messages\n  )\n  \n  return(out)\n  \n}\n```\n:::\n\n\nFirst we pass a `GET` request to the GitHub API via `gh::gh()`. The [API documentation](https://docs.github.com/en/rest) tells us the form needed to [get commits for a given `owner`'s `repo`](https://docs.github.com/en/rest/reference/repos#list-commits).\n\nBeware: the API returns results in batches of some maximum size, but the `.limit = Inf` argument automatically creates additional requests until everything is returned. That might mean a lot of API calls.\n\nNext we can use {purrr} to iteratively `pluck()` out the commit messages from the list returned by `gh::gh()`. It's then a case of finding which ones contain a search string of interest (defaulting to the word 'typo').\n\nThe object returned by `search_commits()` is a list with four elements: `meta` repeats the user and repo names; `counts` is a list with the commit count, the count of messages containing the search term, and their ratio; and the `messages` and `matches` elements contain all messages and the ones containing the search term, respectively.\n\n## Fniding my typoes\n\nHere's an example where I look for commit messages to this blog that contain the word 'typo'. Since the function contains the `.limit = Inf` argument in `gh::gh()`, we'll get an output message for each separate request that's been made to the API.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblog_typos <- search_commits(\"matt-dray\", \"rostrum-blog\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 100 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 200 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 300 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 400 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 500 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 600 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 700 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 800 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 900 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 1000 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 1100 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 1200 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 1300 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 1400 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 1500 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 1600 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 1700 records of about 1900\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 1800 records of about 1900\n```\n:::\n:::\n\n\nHere's a preview of the structure of the returned object. You can see how it's a list that contains the values and other list elements that we expected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(blog_typos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 4\n $ meta    :List of 2\n  ..$ : chr \"matt-dray\"\n  ..$ : chr \"rostrum-blog\"\n $ counts  :List of 3\n  ..$ match_count : int 95\n  ..$ commit_count: int 1870\n  ..$ match_ratio : num 0.0508\n $ matches : chr [1:95] \"Improve text, correct typos, add cheatcode to hiscore post\" \"Fix typo that also made it into a Mastodon post, lol\" \"Correct typo in games post\" \"Improve readability of parse post, add renkun post, fix typos\" ...\n $ messages: chr [1:1870] \"Re-build README.Rmd\" \"Remove non-existent anchor from hiscore post\" \"Improve text, correct typos, add cheatcode to hiscore post\" \"Re-build README.Rmd\" ...\n```\n:::\n:::\n\n\nYou can see there were 1870 commit messages returned, of which 95 contained the string 'typo'. That's 5 per cent.\n\nHere's a sample[^potatypos] of those commit messages that contained the word 'typo': \n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1337)\nsample(blog_typos$matches, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Fix potatypos\"                                         \n[2] \"Merge pull request #72 from maelle/patch-1\\n\\ntypo fix\"\n[3] \"Correct typos\"                                         \n[4] \"Correct typo\"                                          \n[5] \"add gapminder example, fix typo\"                       \n```\n:::\n:::\n\n\nIt seems the typos are often corrected with general improvements to a post's copy. This usually happens when I read the post the next day with fresh eyes and groan at my ineptitude.[^inept]\n\n## Exposing others\n\nI think typos are probably most often referenced in repos that involve a lot of documentation, or a book or something. \n\nTo make myself feel better, I had a quick look at the repo for the {bookdown} project [_R for Data Science_](http://r4ds.had.co.nz/) by Hadley Wickham and Garrett Grolemund.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypos_r4ds <- search_commits(\"hadley\", \"r4ds\")\n```\n:::\n\n\nThe result:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(typos_r4ds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 4\n $ meta    :List of 2\n  ..$ : chr \"hadley\"\n  ..$ : chr \"r4ds\"\n $ counts  :List of 3\n  ..$ match_count : int 450\n  ..$ commit_count: int 2137\n  ..$ match_ratio : num 0.211\n $ matches : chr [1:450] \"fix: typo (add missing `to`) (#1529)\" \"Fix typos in subsection \\\"6.3.2 How does pivoting work?\\\" (#1534)\\n\\n* Add missing word\\r\\n\\r\\n* Fix typo\" \"typo fix in communication.qmd (#1523)\" \"Typo: \\\"a new\\\" instead of \\\"an new\\\" (#1515)\" ...\n $ messages: chr [1:2137] \"Small format for column (#1522)\\n\\nspecies column name is missing back ticks in this reference\" \"fix: typo (add missing `to`) (#1529)\" \"Use dplyr 1.1 'default' parameter in 'case_when()' (#1525)\\n\\n* Use dplyr 1.1 'default' parameter in 'case_when\"| __truncated__ \"Update arrow chapter code to avoid errors (#1517)\\n\\n* Add in `col_types` to specify schema\\r\\n\\r\\n* Just use open_dataset()\" ...\n```\n:::\n:::\n\n\nSurprise: typos happen to all of us. I'm guessing the percentage is quite high because the book has a lot of readers scouring it, finding small issues and providing quick fixes.\n\n## In other words\n\nOf course, you can change the `string` argument of `search_commits()` to find terms other than the default 'typo'. Use your imagination. \n\nHere's a meta example: messages containing emoji in the commits to [the {emo} package](https://github.com/hadley/emo) by Hadley Wickham, Romain François and Lucy D'Agostino McGowan. \n\nEmoji are expressed in commit messages like `:dog:`, so we can capture them with a relatively simple regular expression like `\":.*:\"` (match wherever there are two colons with anything in between).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemo_emoji <- search_commits(\"hadley\", \"emo\", \":.*:\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Running gh query, got 100 records of about 200\n```\n:::\n\n```{.r .cell-code}\nstr(emo_emoji)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 4\n $ meta    :List of 2\n  ..$ : chr \"hadley\"\n  ..$ : chr \"emo\"\n $ counts  :List of 3\n  ..$ match_count : int 21\n  ..$ commit_count: int 112\n  ..$ match_ratio : num 0.188\n $ matches : chr [1:21] \"need emo:: prefix in that case, bc ji_glue might be called without emo being attached. ping @batpigandme\" \"rm emoji keyboard (saved in separate branch) but eventually might just go in a separate :package:\" \"emo::ji_rx a meta regex to catch all emojis. closes #14\" \"bring in some extra modules (for emo::ji_rx)\" ...\n $ messages: chr [1:112] \"Imports CRAN glue (#54)\" \"no longer importing dplyr. #24\" \"less dependency on dplyr\" \"clock no longer depends on dplyr\" ...\n```\n:::\n:::\n\n\nOnly 19 per cent? Son, I am disappoint.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-17 22:22:24 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] purrr_1.0.1 gh_1.4.0   \n\nloaded via a namespace (and not attached):\n [1] digest_0.6.31     R6_2.5.1          fastmap_1.1.1     xfun_0.39        \n [5] fontawesome_0.5.1 magrittr_2.0.3    rappdirs_0.3.3    glue_1.6.2       \n [9] knitr_1.43.1      gitcreds_0.1.2    htmltools_0.5.5   rmarkdown_2.23   \n[13] lifecycle_1.0.3   cli_3.6.1         vctrs_0.6.3       compiler_4.3.1   \n[17] rstudioapi_0.15.0 tools_4.3.1       curl_5.0.1        evaluate_0.21    \n[21] httr2_0.2.3       yaml_2.3.7        rlang_1.1.1       jsonlite_1.8.7   \n[25] htmlwidgets_1.6.2\n```\n:::\n:::\n\n</details>\n\n[^dump]: I used it most recently in [my little {ghdump} package](https://www.rostrum.blog/2020/06/14/ghdump/) for downloading or cloning a user's repos en masse.\n[^check]: Yes, I'm aware of Git hooks and various GitHub Actions that could prevent this.\n[^typi]: Though obviously you'll miss messages containing the word 'typo' if you have a typo in the word 'typo' in one of your commits...\n[^inept]: I wonder how many typos I'll need to correct in _this_ post after publishing. (Edit: turns out I accidentally missed a couple of words, lol.)\n[^potatypos]: Very rarely do I make myself laugh, but I had forgotten that I used the commit message 'Fix potatypos' when correcting typos in the post about [the {potato} package](https://www.rostrum.blog/2022/09/13/potato/), lol. Also thank you to [Maëlle](https://masalmon.eu/), who fixed a typo on my behalf!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}