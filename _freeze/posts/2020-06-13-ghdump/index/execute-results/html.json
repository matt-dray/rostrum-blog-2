{
  "hash": "99b8aa1871b1cd7c6c9ef072e6080163",
  "result": {
    "markdown": "---\ntitle: Take a {ghdump} to download GitHub repos\ndate: 2020-06-14\nslug: ghdump\ncategories:\n  - gh\n  - ghdump\n  - github\n  - r\n---\n\n::: {.cell}\n\n:::\n\n\n![My garbage GitHub repos being dumped onto my local machine.](resources/ghdump_hex.png){fig-alt=\"A silhouette of a dump truck dumping trash bags.\" width=\"30%\" fig-align=\"left\"}\n\n## tl;dr\n\nRun `ghd_copy()` from [the {ghdump} package](https://github.com/matt-dray/ghdump) to either clone or download all the GitHub repositories for a given user. Intended for archival purposes or setting up a new computer.\n\nThe package comes with no guarantees and will likely be in a perpetual work-in-progress state. Please [submit issues](https://github.com/matt-dray/ghdump/issues) or pull requests.\n\n## Clone army\n\nSituation: \n\n* Sometimes I get a new computer and want to clone all my repos to it\n* Sometimes I want to be able to archive my repos so I'm not dependent on GitHub nor any given computer\n* it would be tedious to download or clone the repos one-by-one from the GitHub interface\n\nWants:\n\n* To clone (with HTTPS or SSH) or download all of my repos with one command\n* Be able to unzip downloaded repos en masse if I want to\n* Do all this from within R, mostly for the learning experience, but also to allow for user interactivity\n\nObservations:\n\n* I don't know of a specific R function that automates mass-downloading or mass-cloning of GitHub repos\n* [the {gh} package](https://github.com/r-lib/gh) provides a lightweight [GitHub API](https://developer.github.com/v3/) wrapper for R that's likely to be helpful\n* R has many file-handling functions that will be helpful\n\n## {ghdump}\n\nThe result is that I wrote a function, `ghd_copy()`, that copies (clones or downloads) all the repos for a given user to a specified location. You can get it in [the tiny {ghdump} package](https://github.com/matt-dray/ghdump).\n\nThe function interacts with the GitHub API thanks to [the {gh} package](https://github.com/r-lib/gh) by Gábor Csárdi, Jenny Bryan and Hadley Wickham, while iterating over repos comes thanks to [the {purrr} package](https://purrr.tidyverse.org/) by Lionel Henry and Hadley Wickham.\n\n<div class=\"tip\"> \n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Update</b>\n\nAs of May 2022 there's also [a handy rOpenSci package called {gitcellar}](https://docs.ropensci.org/gitcellar/), by Maëlle Salmon and Jeroen Ooms, which is for downloading an organisation's repos for archival purposes.\n</div>\n\n### Get and use\n\nInstall with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"matt-dray/ghdump\")\nlibrary(ghdump)\n```\n:::\n\n\nTo use the package, you'll need a GitHub account and [a GitHub Personal Access Token (PAT) stored in your .Renviron file](https://happygitwithr.com/github-pat.html). You can do this with the following steps:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::browse_github_pat()  # opens browser to generate token\nusethis::edit_r_environ()     # add your token to the .Renviron\n# then restart R\n```\n:::\n\n\nYou can use {ghdump} to download the repos for a specified user:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nghd_copy(\n  gh_user = \"matt-dray\",           # download repos for this user\n  dest_dir = \"~/Documents/repos\",  # full local file path to copy to\n  copy_type = \"download\"           # \"download\" or \"clone\" the repos\n)\n```\n:::\n\n\nOr clone them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nghd_copy(\n  gh_user = \"matt-dray\",\n  dest_dir = \"~/Documents/repos\",\n  copy_type = \"clone\",\n  protocol = \"https\" # specify \"https\" or \"ssh\"\n)\n```\n:::\n\n\nIf you want to use the SSH protocol when cloning, you need to make sure that you've [set up your keys](https://happygitwithr.com/ssh-keys.html).\n\n### Interactivity\n\nMy expectation is to use `ghd_copy()` infrequently and in a non-programmatic way, so I've made it quite interactive. This means user input is required; you'll get some yes/no questions in the console that will affect how the function runs.\n\nHere's an imaginary demo of the output from `ghd_copy()` when `copy_type = \"download\"`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nghd_copy(\"made-up-user\", \"~/Desktop/test-download\", \"download\")\n```\n:::\n\n```\nFetching GitHub repos for user made-up-user... 3 repos found\nCreate new directory at path ~/Desktop/test-download? y/n: y\nDefinitely download all 3 repos? y/n: y\nDownloading zipped repositories to ~/Desktop/test-download\n\ntrying URL 'https://github.com/made-up-user/fake-repo-1/archive/master.zip'\nContent type 'application/zip' length 100 bytes\n==================================================\ndownloaded 100 bytes\n\ntrying URL 'https://github.com/made-up-user/fake-repo-2/archive/master.zip'\nContent type 'application/zip' length 100 bytes\n==================================================\ndownloaded 100 bytes\n\ntrying URL 'https://github.com/made-up-user/fake-repo-3/archive/master.zip'\nContent type 'application/zip' length 100 bytes\n==================================================\ndownloaded 100 bytes\n\nUnzip all folders? y/n: y\nUnzipping repositories\nRetain the zip files? y/n: y\nKeeping zipped folders.\nRemove '-master' suffix from unzipped directory names? y/n: y\nRenaming files to remove '-master' suffix\nFinished downloading\n```\n\nAnd now imaginary demo of the output from `ghd_copy()` when `copy_type = \"clone\"`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nghd_copy(\"made-up-user\", \"~/Desktop/test-clone\", \"clone\", \"ssh\")\n```\n:::\n\n```\nFetching GitHub repos for user made-up-user... 3 repos found\nCreate new directory at path ~/Desktop/test-clone? y/n: y\nDefinitely clone all 3 repos? y/n: y\nCloning repositories to ~/Desktop/test-clone \nCloning into 'fake-repo-1'...\nCloning into 'fake-repo-2'...\nCloning into 'fake-repo-3'...\nFinished cloning\n```\n\nNote that cloning has only been tested on my own Mac OS machine at this point (June 2020) and is not guaranteed to work elsewhere yet. Please [submit issues](https://github.com/matt-dray/ghdump/issues) or pull requests to help improve this.\n\n### Under the hood\n\nWhat are the steps to downloading repos with `ghdump::ghd_copy()`? Each of the functions in this section are not exported from the package, but you can access them by prefacing with `ghdump:::` (the rare triple-colon operator) if you want to see their code.\n\nFirst, to get repo info:\n\n1. `ghd_get_repos()` passes a GitHub username to `gh::gh()`, which contacts the GitHub API to return a gh_response object that contains info about each of that user's repos\n1. `ghd_extract_names()` takes the gh_response object from `ghd_get_repos()` and extracts the names into a character vector\n\nThen to download (if `copy_type = \"download\"`):\n\n1. `ghd_enframe_urls()` turns the character vector of repo names into a data.frame, with a corresponding column that contains the URL to a zip file for that repo\n1. `ghd_copy_zips()` takes each zip file URL from that data frame and downloads them to the file path provided by the user\n1. `ghd_unzip()` unzips the zipped repos\n\nYou can, of course, use these intermediate functions if you have slightly different needs. Maybe you want to limit the repos that are downloaded; do this by filtering the vector output from `ghd_extract_names()` for example.\n\nOr to clone (if `copy_type = \"clone\"`):\n\n1. `ghd_clone_multi()` that iterates cloning over the repos, itself calling `ghd_clone_one()`\n\n## Why bother?\n\nWhat did I learn from doing this? As if I have to explain myuself to you, lol.\n\n### 1. Iteration\n\nAside from {gh}, the package also depends on {purrr} for iterative programming. \n\nFor example, the gh_response object output from `ghdump:::ghd_get_repos()` is passed to `map()` with the `pluck()` function to extract the repo names. \n\nAnother example is the use of `walk()`, which is like `map()`, except we use it when the output is some 'side effect'. By 'side effect', we mean that it doesn't return an R object. For example, we can `walk()` the `unzip()` function over the path to each zip file. This doesn't return anything in R; it results in some local files being manipulated.\n\n### 2. File manipulation\n\nR can be used to interact with files on your computer. There's a number of these base R functions in the package:\n\n* `dir.create()` to create a new folder\n* `file.remove()` to remove a file or folder\n* `list.files()` and `list.dirs()` to return a character vector files and folders at some path\n* `file.rename` to change the name of a file or folder\n* `unzip()` to unpack a zipped folder\n\n### 3. User input\n\nHow do you ask questions of your user and get answers? This interactivity is made possible by `readline()`. You pass it a string to prompt the user, whose return value can be stored. \n\nFor example, this is how it looks in the console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanswer <- readline(\"Do you like pizza? \") \n```\n:::\n\n```\nDo you like pizza? yes\n```\n\n::: {.cell}\n\n```{.r .cell-code}\nanswer\n```\n:::\n\n```\n[1] \"yes\"\n```\n\nWhere a user has written `yes` after the prompt on the second line.\n\n### 4. Stickers\n\nI've designed a few hex stickers with the {hexSticker} package; you can see them in [my 'stickers' GitHub repo](https://github.com/matt-dray/stickers). This time I made the sticker for {ghdump} using Dmytro Perepolkin's [{bunny}](https://github.com/dmi3kno/bunny) package, which is a helper for the [{magick} package](https://cran.r-project.org/web/packages/magick/vignettes/intro.html) from Jeroen Ooms. It's [a very smooth process](https://www.ddrive.no/post/making-hex-and-twittercard-with-bunny-and-magick/) with much flexibility.\n\n## This belongs in a dump\n\nYeah, maybe. It's not sophisticated, but I've found it useful for my own specific purposes.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-19 21:36:03 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.33     rlang_1.1.1       fontawesome_0.5.1 evaluate_0.21    \n```\n:::\n:::\n\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}