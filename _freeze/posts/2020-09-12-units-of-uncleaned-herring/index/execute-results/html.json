{
  "hash": "49df7bee3cc80dc11f173414c98885fb",
  "result": {
    "markdown": "---\ntitle: '{units} of uncleaned herring'\ndate: 2020-09-12\nslug: herring-units\ncategories:\n  - cran\n  - r\n  - units\n---\n\n::: {.cell}\n\n:::\n\n\n![The hex sticker is better than the package.](resources/cran_hex.png){fig-alt=\"Hex sticker design with a picture of a herring and the word 'cran'.\" width=\"30%\" fig-align=\"left\"}\n\n## tl;dr\n\nI made [the tiny R package {cran}](https://github.com/matt-dray/cran) to convert volumes to an antiquated [measurement of fish](https://en.wikipedia.org/wiki/Cran_(unit)). Why? To test out [the {units} package](https://r-quantities.github.io/units/) and to resolve a joke about [the Comprehensive R Archive Network (CRAN)](https://cran.r-project.org/).\n\n## {units}\n\nThe {units} package by Edzer Pebesma, Thomas Mailund and James Hiebert ([site](https://r-quantities.github.io/units/),\n[source](https://github.com/r-quantities/units/), [R\nJournal](https://journal.r-project.org/archive/2016/RJ-2016-061/index.html)) helps you set and create units, convert between them and raise an error where that isn't possible.\n\nI've used the package to solve a trivial unit conversion question and to create my own units. This post shows how.\n\n### A _12_ gallon hat?\n\nHere's a really simple example of the {units} package in action.\n\nA colleague bought a 1 gallon water bottle, only to realise later that it was US gallons rather than UK gallons (_viva litres!_). What's the relationship between the two gallon units?\n\nFirst install and attach the {units} package, which is available on CRAN. It will print the location where the units dataset is stored. These units are derived from the comprehensive [UNIDATA udunits database](https://www.unidata.ucar.edu/software/udunits/), which has all the relevant [SI units](https://en.wikipedia.org/wiki/International_System_of_Units) and some that are a little more... nonstandard.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"units\")  # install if you haven't already\nlibrary(units)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nudunits database from /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/units/share/udunits/udunits2.xml\n```\n:::\n:::\n\n\nI'll also load a few other packages for the purposes of this post.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\n  library(dplyr)\n  library(stringr)\n  library(purrr)\n})\n```\n:::\n\n\nYou can inspect the `valid_units()` dataframe to find out what units you can work with. Here's five random units from the dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalid_udunits() %>% \n  filter(symbol != \"\" & name_singular != \"\") %>% \n  sample_n(5) %>% \n  select(symbol, name_singular, definition)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  symbol name_singular            definition                                    \n  <chr>  <chr>                    <chr>                                         \n1 sr     steradian                standard unit of solid angle measure, it is t…\n2 bbl    barrel                   unit of volume used by US and Canadian petrol…\n3 u      unified_atomic_mass_unit standard unit for indicating mass on an atomi…\n4 Hz     hertz                    unit of frequency meaning one cycle per second\n5 cd     candela                  The candela is the luminous intensity, in a g…\n```\n:::\n:::\n\n\nWe can filter the `name_singular` column to find the available gallon units.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::filter(\n  valid_udunits(),\n  str_detect(name_singular, \"gallon\")\n) %>% \n  select(name_singular)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 1\n  name_singular         \n  <chr>                 \n1 Canadian_liquid_gallon\n2 US_dry_gallon         \n3 US_liquid_gallon      \n4 UK_liquid_gallon      \n```\n:::\n:::\n\n\nWe're interested in `UK_liquid_gallon` and `US_liquid_gallon`, but wow, there's two more, including a 'dry' one. \n\nWe can supply a unit to a value with `as_units()`, so we can create 1 UK gallon with the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuk_gal <- as_units(1, \"UK_liquid_gallon\")\n```\n:::\n\n\nThat gives us an object with class `units` and the print method adds the unit in square brackets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(uk_gal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"units\"\n```\n:::\n\n```{.r .cell-code}\nuk_gal\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 [UK_liquid_gallon]\n```\n:::\n:::\n\n\nWe can also do maths with these objects:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuk_gal + uk_gal\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2 [UK_liquid_gallon]\n```\n:::\n:::\n\n\nAnd to convert it, we can take set the units of our `unit`-class object and specify a different unit. The units need to be compatible though, so you can't convert a gallon to a parsec, for example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using purrr::safely() to capture the error\nsafe_set_units <- safely(set_units)\nsafe_set_units(uk_gal, \"parsec\")$error\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<simpleError: cannot convert UK_liquid_gallon into parsec>\n```\n:::\n:::\n\n\nThis prevents you from combining non-compatible units, which is a real danger if your data is stored as bare numeric values with no unit information.\n\nAnd now we'll set the new units for the gallon-to-gallon conversion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_gal <- set_units(uk_gal, \"US_liquid_gallon\")\nus_gal\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.20095 [US_liquid_gallon]\n```\n:::\n:::\n\n\nSo a UK liquid gallon is about 20% larger than a US one. But I thought everything was meant to be larger in the US!\n\n## Herring aid\n\nWho doesn't like getting lost in the Wikipedia rabbithole? I came upon [the page for 'cran'](https://en.wikipedia.org/wiki/Cran_(unit)) and found it amusing that [the Comprehensive R Archive Network](https://cran.r-project.org/) (CRAN) package database had a rival. \n\nWhat's a cran, then? Well, an antiquated legal unit for measuring the volume of landed, uncleaned herring in the North Sea fishing industry. Also used as the name for [a basket that could carry that volume](http://wovencommunities.org/collection/the-quarter-cran-a-little-bit-of-history/).[^basket]\n\nIt sounds like [the initial 18th-century measurement was volumetric and inexact](https://www.sizes.com/units/cran.htm), equalling something like 1200 fish. Later this was made official in terms of 'wine gallons', with Wikipedia pegging it to 170.5 litres in more modern units. For confirmation, simply read the [Second Report of the Commissioners Appointed by His Majesty to Consider the Subject of Weights and Measures, 1820](https://www.sizes.com/library/British_law/Second_Report_1820.pdf):\n\n![](resources/cran.png){fig-alt=\"Clipping from an 1820 report that says a cran unit is equal to 34 wine gallons.\" width=\"100%\"}\n\nNaturally, I checked `valid_udunits()`... and cran isn't in there. So obviously I needed to make it.\n\nYou can basically do this in three steps with {units}: define a new unit based on known units; create a unit object; convert it to the newly-defined unit.\n\nSo, you can 'install' a new unit with reference to another unit by multiplying or offsetting by some constant. In our case, our new unit is equal to 170.5 litres.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall_unit(\"cran\", \"170.5 L\")\n```\n:::\n\n\nNow we can work with the cran unit. Let's first create a `unit`-class object to convert. For example, we can confirm that 170.5 litres is equal to one cran.\n\n\n::: {.cell}\n\n```{.r .cell-code}\none_litre <- as_units(170.5, \"L\")\none_litre\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n170.5 [L]\n```\n:::\n:::\n\n\nWe can supply this to the `set_units()` function and specify we want it converted to cran.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_units(one_litre, \"cran\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 [cran]\n```\n:::\n:::\n\n\n### CRAN... no, {cran}\n\nSo I created a package called {cran} that contains this conversion. You can install it from GitHub using the {remotes} package. Except, you know, _don't_, because you have no need for it unless you're an 18th century fisherman.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"matt-dray/cran\")\n```\n:::\n\n\nAnd then when you load the package it asks if you want to create the cran unit. Answering 'yes' results in the cran unit being available in your session.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cran)\n```\n:::\n\n```\nCreate the 'cran' unit of measurement for this session? yes/no: yes\nYou're ready to measure uncleaned herring.\n```\n\nNow you can use cran for setting and converting units. So we can revisit our check that 170.5 litres equals 1 cran:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncran::cran_convert(170.5, \"L\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 [cran]\n```\n:::\n:::\n\n\n...And that's it, basically. You can remove and reinstall the unit at any point with `cran_remove()` and `cran_install()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncran::cran_remove()\n```\n:::\n\n```\nRemove the 'cran' unit of measurement for this session? yes/no: yes\nYou're done measuring uncleaned herring.\n```\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-19 08:43:07 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] purrr_1.0.1   stringr_1.5.0 dplyr_1.1.2   units_0.8-2  \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.3       cli_3.6.1         knitr_1.43.1      rlang_1.1.1      \n [5] xfun_0.39         stringi_1.7.12    generics_0.1.3    jsonlite_1.8.7   \n [9] glue_1.6.2        htmltools_0.5.5   fansi_1.0.4       rmarkdown_2.23   \n[13] evaluate_0.21     tibble_3.2.1      fastmap_1.1.1     yaml_2.3.7       \n[17] lifecycle_1.0.3   compiler_4.3.1    htmlwidgets_1.6.2 Rcpp_1.0.11      \n[21] pkgconfig_2.0.3   cran_0.0.0.9001   rstudioapi_0.15.0 digest_0.6.33    \n[25] R6_2.5.1          tidyselect_1.2.0  utf8_1.2.3        pillar_1.9.0     \n[29] magrittr_2.0.3    withr_2.5.0       tools_4.3.1       xml2_1.3.5       \n```\n:::\n:::\n\n</details>\n\n[^basket]: You can still [buy one](https://www.johncowanbaskets.co.uk/products/quarter-cran-herring-basket) today.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}