{
  "hash": "535c471526ffd7876d2f7878148a712a",
  "result": {
    "markdown": "---\ntitle: What does a year of COVID-19 sound like?\ndate: 2021-02-02\nslug: sonify-covid\ncategories:\n  - health\n  - r\n  - sonify\n  - tuneR\nresources: \n  - resources/newAdmissions.wav\n  - resources/newCasesBySpecimenDate.wav\n  - resources/newDeaths28DaysByDeathDate.wav\n  - resources/newVirusTests.wav\n---\n\n::: {.cell}\n\n:::\n\n\n![Landing page of coronavirus.data.gov.uk dashboard.](resources/dash.png){fig-alt=\"Landing page of coronavirus.data.gov.uk showing a dashboard of data elements, including plots for number of tests and deaths.\" width=\"100%\"}\n\n## tl;dr\n\nI used [the {sonify} package](https://CRAN.R-project.org/package=sonify) in R to represent a year of [the UK's COVID-19 data](https://coronavirus.data.gov.uk/) in audio format. You can [jump straight to the audio](#sonified).\n\n## Listen to your data\n\nI watched an excellent talk at the [rstudio::global(2021)](https://resources.rstudio.com/resources/rstudioglobal-2021/) conference by [JooYoung Seo](https://twitter.com/seo_jooyoung) titled 'Accessible Data Science Beyond Visual Models: Non-Visual Interactions with R and RStudio Packages'. You can access [the video](https://resources.rstudio.com/resources/rstudioglobal-2021/accessible-data-science-beyond-visual-models-non-visual-interactions-with-r-and-rstudio-packages/) or [his blog](https://jooyoungseo.com/post/ds4blind/) on the subject.\n\nIn the talk he mentioned [the {sonify} package](https://CRAN.R-project.org/package=sonify) for R, which lets you represent data with sound rather than with visuals. For example, values of x and y that increase linearly can be represented by a sound that rises in pitch.\n\nI wondered: what would COVID-19 data sound like, given it's been a year since the UK's first cases? \n\n## COVID-19 data\n\nGOV.UK, the UK government's website, has [a 'daily dashboard' of COVID-19 statistics](https://coronavirus.data.gov.uk/). There are four prominent statistics:\n\n1. [Cases](https://coronavirus.data.gov.uk/details/cases) (people tested positive)\n1. [Deaths](https://coronavirus.data.gov.uk/details/deaths) (deaths within 28 days of a positive test)\n1. [Healthcare](https://coronavirus.data.gov.uk/details/healthcare) (patients admitted to hospital)\n1. [Testing](https://coronavirus.data.gov.uk/details/testing) (virus tests conducted)\n\nThe [downloads page](https://coronavirus.data.gov.uk/details/download) contains these data and more, both UK-wide and at local levels. This post isn't an analysis, but I implore you to take a look a the data yourself and [read the details](https://coronavirus.data.gov.uk/details/about-data) about how the data were collected.\n\nHelpfully, you can generate a permanent API link from which to fetch data[^fair]. Here I'm grabbing the UK-wide stats mentioned above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(\n  paste0(\n    \"https://api.coronavirus.data.gov.uk/v2/data\",\n    \"?areaType=overview\", # UK wide\n    \"&metric=newCasesBySpecimenDate\",  # cases\n    \"&metric=newDeaths28DaysByDeathDate\",  # deaths\n    \"&metric=newAdmissions\",  # healthcare\n    \"&metric=newVirusTests\",  # testing\n    \"&format=csv\"  # CSV output\n  ),\n  stringsAsFactors = FALSE\n)\n```\n:::\n\n\nI'll apply some minor cleaning to order by date and isolate the first 365 days, which takes us to 28 January 2021.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data[order(data$date), ]  # order by date\ndata <- data[1:365, ]  # first year\nrange(data$date)\n```\n:::\n\n```\n[1] \"2020-01-30\" \"2021-01-28\"\n```\n\nI read this into R as a `data.frame` object with one row per day.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(data[, c(1, 5:8)])\n```\n:::\n\n```\n         date newCasesBySpecimenDate newDeaths28DaysByDeathDate\n18 2021-01-23                  21851                       1151\n17 2021-01-24                  17191                       1134\n16 2021-01-25                  29976                       1152\n15 2021-01-26                  27036                       1044\n14 2021-01-27                  25720                       1093\n13 2021-01-28                  24092                       1083\n    newAdmissions newVirusTests\n18           3100        484485\n17           3109        412204\n16           2925        542893\n15           3136        596845\n14           3050        771710\n13           3039        753031\n```\n\nHow quickly a year goes.\n\n## AV functions\n\nYou can [skip to the next section](#sonified) if you aren't interested in the code that will be producing the audio and plots.\n\n### Audio\n\nI've written a small function using `sonify::sonify()` to generate audio clips that represent each COVID-19 variable over time.\n\nYou pass `sonify()` your x and y points as you would the `plot()` function. It has a number of audio-related arguments that let you modify things like the waveform and interpolation, but I'm sticking to the defaults here. This produces a five-second clip in stereo, so you'll hear the sound move from left to right as you listen.\n\nThe {tuneR} package has the function `tuneR::writeWav()` to write out the audio to a local .wav file (my desktop in this case).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsonify_covid <- function(y, out_dir = \"~/Desktop\") {\n\n    tuneR::writeWave(\n      sonify::sonify(\n        x = as.Date(data$date), y = data[[y]],\n        play = FALSE  # suppress audio from playing\n      ),\n      file.path(out_dir, paste0(y, \".wav\"))\n    )\n  \n}\n\n# Apply the function each variable\npurrr::walk(names(data[5:8]), sonify_covid)\n```\n:::\n\n\nThese clips are embedded above the plots in the section below. A download link is included on the player. If you have trouble playing or downloading any of the clips, you can also access them in [a playlist on SoundCloud](https://soundcloud.com/user-860586053/sets/a-year-of-covid-19-data-sonified).\n\n### Visual\n\nI'm including plots so you can follow how the visuals map to the sound. The plots are going to be intentionally sparse because the focus of the post is the _sound_ the data make. The function takes a COVID-19 variable from our dataset and plots it over time with {ggplot2}.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)  # attach plotting package\n\nplot_covid <- function(y) {\n\n  ggplot() +\n    geom_point(\n      aes(as.Date(data$date), data[[y]] / 1000),\n      shape = 21  # empty-circle character\n    ) +\n    labs(\n      caption = \"Data: https://coronavirus.data.gov.uk/\",\n      x = \"Date\", y = \"Count (thousands)\"\n    ) +\n    theme_minimal()\n  \n}\n```\n:::\n\n\nYou can then pass in the variable like `plot_covid(newAdmissions)`, although I've hidden this code in the next section.\n\n## COVID-19 sonified {#sonified}\n\nIn each clip, a higher pitch indicates a higher value; a more continuous tone indicates that the points are tightly distributed; and the sound moving from the left to right audio channel indicates change over time.\n\nAll of these datasets start on the same date, 30 January 2020, which is when the first cases were recorded according to the `newCasesBySpecimenDate` variable. They all end 365 days later on 28 January 2021.\n\nThese data are quite well suited to sonification, given the peaks and troughs. In particular, the death and healthcare variables spike quickly, fall back down, rise again, drop slightly and then peak once more. You won't notice that initial spike for the cases variable, given the relatively lower testing rate at the time.\n\n### Cases\n\nThis audio and plot show the number of [people who have tested positive](https://coronavirus.data.gov.uk/details/cases) over time.\n\n<html><audio controls><source src=\"resources/newCasesBySpecimenDate.wav\" type=\"audio/wav\"></audio></html>\n\n\n::: {.cell}\n\n:::\n\n\n![](resources/cases.png){fig.alt=\"Scatter chart of COVID-19 cases over time. There's a small bump to about 5000 cases per day in early April 2020 and then a peak around 30,000 cases in November, before a large spike to around 80,000 cases at the start of 2021.\"}\n\n### Death\n\nThis audio and plot show the number of recorded [deaths within 28 days of a positive test](https://coronavirus.data.gov.uk/details/deaths) over time.\n\n<html><audio controls><source src=\"resources/newDeaths28DaysByDeathDate.wav\" type=\"audio/wav\"></audio></html>\n\n\n::: {.cell}\n\n:::\n\n\n![](resources/death.png){fig.alt=\"Scatter chart of COVID-19 deaths over time. There's a spike at 1000 cases at the start of April 2020, before it comes back down to almost zero by September, before rising to 500 before December, then spiking at 1500 at the start of 2021.\"}\n\n### Healthcare\n\nThis audio and plot show the number of [patients admitted to hospital](https://coronavirus.data.gov.uk/details/healthcare) over time.\n\n<html><audio controls><source src=\"resources/newAdmissions.wav\" type=\"audio/wav\"></audio></html>\n\n\n::: {.cell}\n\n:::\n\n\n![](resources/healthcare.png){fig.alt=\"Scatter chart of COVID-19 hospital admissions over time. There's a spike at 3500 cases at the start of April 2020, before it comes back down to almost zero by September, before rising to 2000 before December, then spiking at 4500 at the start of 2021.\"}\n\n### Testing\n\nThis audio and plot show the number of [virus tests conducted](https://coronavirus.data.gov.uk/details/testing) over time.\n\n<html><audio controls><source src=\"resources/newVirusTests.wav\" type=\"audio/wav\"></audio></html>\n\n\n::: {.cell}\n\n:::\n\n![](resources/testing.png){fig.alt=\"Scatter chart of COVID-19 tests over time. The value climbs from zero at the end of April 2020 to nearly 800 by the end of January 2021.\"}\n\n## Coda\n\nSonification has been used for a variety of applications during the pandemic as an alternate means of conveying the data. \n\nFor example, Jan Willem Tulp has [created a page that 'dings' each time there's a new case](https://covidspreadingrates.org/) around the world. For something more complex, Mark D. Temple has [published in the BMC Bioinformatics journal](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-020-03760-7) a paper about sonifying the COVID-19 genome (!). Meanwhile, Pedro Pereira Sarmento has [sonified data to investigate the impacts of COVID-19 on air pollution](https://www.aim.qmul.ac.uk/sonification-of-air-pollution-data-in-times-of-covid-19/).\n\nI'm probably not the first to sonify coronavirus data in this way, and probably not even the first to do it with R, but it seemed a good time to take a look (listen?) back on things. I'm interested to hear more about what approaches others have taken.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-08-11 23:20:34 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^fair]: Fair usage applies. Ten requests per any 100–second period, with a max rate limit of 100 per hour. Five metrics max per request. Identical requests only refreshed every 150 seconds.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}