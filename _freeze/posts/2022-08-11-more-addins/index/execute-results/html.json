{
  "hash": "2f26795d49039fb5cd6ff93755a27699",
  "result": {
    "markdown": "---\ntitle: \"Two RStudio Addins: {quartostamp} and {snorkel}\"\ndate: 2022-08-11\nslug: quartostamp-snorkel\ncategories:\n  - r\n  - rstudio-addin\n  - quarto\n  - quartostamp\n  - roxygen2\n  - snorkel\n---\n\n\n## tl;dr \n\nI made a couple of packages that contain [RStudio Addins](https://rstudio.github.io/rstudioaddins/): [{quartostamp}](https://matt-dray.github.io/quartostamp/) inserts little divs and classes into your [Quarto](https://quarto.org/) documents, while [{snorkel}](https://github.com/matt-dray/snorkel) inserts [Rd tags](https://cran.r-project.org/doc/manuals/R-exts.html#Rd-format) into your [{roxygen2}](https://roxygen2.r-lib.org/) function documentation.\n\n## Al Addin\n\n[RStudio Addins](https://rstudio.github.io/rstudioaddins/) let you access R functions interactively at the click of a button (or [with a keyboard shortcut](https://support.rstudio.com/hc/en-us/articles/206382178-Customizing-Keyboard-Shortcuts-in-the-RStudio-IDE), or via [the RStudio command palette](https://www.rstudio.com/blog/rstudio-v1-4-preview-command-palette/)). I particularly like them for easy sharing of insertable pre-written code.\n\nSee [Dean Attali's {addinslist} package](https://github.com/daattali/addinslist) for examples or the [{shrtcts} package by Garrick Aden-Buie](https://pkg.garrickadenbuie.com/shrtcts/) for an alternative approach to 'make anything an RStudio shortcut'.\n\nOn my part:\n\n* I [wrote about](https://www.rostrum.blog/2022/02/19/backtick/) the little [{backtick} Addin package](https://github.com/matt-dray/backtick) that inserts backticks (\\`) and backtick constructions[^italy]\n* I [wrote about](https://www.rostrum.blog/2020/11/14/hello-r2eng/) the [{r2eng} package](https://matt-dray.github.io/r2eng/), which has an Addin that lets you highlight some R code and then speak that expression out loud in English\n* I [wrote about](https://www.rostrum.blog/2019/10/22/blogsnip/) the [{blogsnip} Addin package](https://matt-dray.github.io/blogsnip/) that can manipulate code used to write this blog\n* [the {a11ytables} package](https://co-analysis.github.io/a11ytables/articles/a11ytables.html) has an Addin to insert code skeletons for creating publishable best-practice spreadsheets\n\nRStudio Addins are [kinda straightforward to put into in an R package](https://www.rostrum.blog/2022/02/19/backtick/#add-your-own). Put your functions in `R/` as usual, then write an `inst/rstudio/addins.dcf` file to declare your functions ([e.g. see {backtick}'s .dcf](https://github.com/matt-dray/backtick/blob/main/inst/rstudio/addins.dcf)). Learn more from [Sharon Machlis](https://www.infoworld.com/article/3336059/do-more-with-r-write-your-own-rstudio-addins.html) and [Jozef Hajnala](https://jozef.io/r101-addin-reproducibility/).\n\nThe user can then select the functions from the 'Addins' dropdown in the RStudio IDE.\n\nOf late I've written two packages---[{quartostamp}](https://matt-dray.github.io/quartostamp/) and [{snorkel}](https://github.com/matt-dray/snorkel)---that contain RStudio Addins to help me write code structures that I struggle to remember when writing [Quarto documents](https://quarto.org/) and function documentation.\n\nOthers seem to have found these useful, so I thought I'd 'officially' signal that they exist.\n\n## Package {quartostamp}\n\n![](resources/quartostamp.gif){fig-alt=\"Screenshot of RStudio window with a Quarto presentation file open. Some functions are selected from an RStudio Addin under the name 'quartostamp'. They insert a div that allows for column layout, a div for speaker notes, and a class that makes the text smaller on a slide.\" width=\"100%\"}\n\n[Quarto](https://quarto.org/)---'new R Markdown'---is all the rage right now, having been officially launched at [the recent rstudio::conf(2022) conference](https://www.rstudio.com/blog/four-announcements-from-rstudio-conf-2022/#use-quarto-for-creating-content-with-python-r-julia-and-observable). Folks are going bonkers for tools and techniques to learn and implement it. A good place to begin is [the Awesome Quarto List](https://github.com/mcanouil/awesome-quarto) by Mickaël Canouil.\n\nFeatured there is [{quartostamp}](https://matt-dray.github.io/quartostamp/), a little R package I made that contains an RStudio Addin to insert into your Quarto doc a number of useful divs and classes. As the README puts it:\n\n>Why 'quartostamp'? You could physically stamp some pre-prepared type into [a literal quarto document](https://en.wikipedia.org/wiki/Quarto); you can digitally stamp some pre-written elements into your qmd file.\n\n![Hex logo for {quartostamp}.](resources/logo.png){fig-alt=\"Hex logo for the quartostamp package. Blue outline. Red 'flower stamp' emoji in the centre. It says 'quartostamp' in the top left and the URL matt-dray.github.io/quartostamp in the lower right, both in red text.\" width=\"30%\" fig-align=\"left\"}\n\nYou can install it from GitHub like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/quartostamp\")\n```\n:::\n\n\nAs an example, did you forget how to insert speaker notes into a presentation? Go to _Addins_ > _Insert Speaker Notes_ and this will be inserted to your doc:\n\n```\n::: {.notes}\nSpeaker notes go here.\n:::\n```\n\nThat's a straightforward one; a two-column layout is more complex. Go to _Addins_ > _Insert Column Layout_ and you get this:\n\n```\n:::: {.columns}\n\n::: {.column width='40%'}\nLeft column\n:::\n\n::: {.column width='60%'}\nRight column\n:::\n\n::::\n```\n\nThese elements are basically [lifted from the docs](https://quarto.org/docs/reference/), so big shoutout to the authors JJ Allaire, Charles Teague, Carlos Scheidegger, Yihui Xie and Christophe Dervieux.\n\nGo to the package website to [see the current list of functions](https://matt-dray.github.io/quartostamp/reference/index.html) available in the Addin. Click them to learn more, including a preview of the actual text that will be inserted into your document.\n\nI think the limits of the package are the content that you would insert in the body of your Quarto doc, or to places like Revealjs slide headings. In other words, not Quarto YAML nor chunk options. These are autocompleted in RStudio, or otherwise dealt with already elsewhere.\n\nDo submit your ideas for {quartodown} as issues or pull requests in [the GitHub repo](https://www.github.com/matt-dray/quartostamp).\n\n<div class=\"tip\"> `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nThe package was updated in June 2023 to version 0.1.0, which lets you highlight some text and run the addin so that the selected text becomes the body of the stamp. A simple dummy skeleton is inserted if you use the addin without highlighting any text, as described above.\n\nFor example, you can write some bullets, highlight them, select 'Insert Speaker Notes' and you'll get the appropriate markup for those bullets to be rendered as speaker notes in your Quarto presentation.\n\n![](resources/quartostamp-replace.gif){fig-alt=\"An RStudio window with a Quarto presentation in the scripts pane. Some bullet-pointed text is highlighted, the 'addin' button is clicked and 'insert speaker notes' from the quartostamp package is clicked. The original text now has markup around it to indicate that it should be rendered as speaker notes.\" width=\"100%\"}\n\n</div>\n\n## Package {snorkel}\n\n![](resources/snorkel.gif){fig-alt=\"Gif of RStudio Addin being used to add roxygen2 tags to selected text in the documentation for a function. Addins used are: format as bold, link to function in another package, and make hyperlink.\" width=\"100%\"}\n\nThe [{snorkel}](https://www.github.com/matt-dray/snorkel) package[^announce] is another solution to storing syntax outside of my own brain. In this case, it helps out with formatting text in [{roxygen2} function documentation](https://roxygen2.r-lib.org/).[^md]\n\nThe reason for the name should be obvious.[^aqualung] As the package README puts it:\n\n>You put a snorkel in your mouth to help you breathe oxygen; you put a {snorkel} in your addins to help you write with {roxygen2}.\n\nYes, this is package-name-driven development; I thought of the name before writing anything.\n\nInstall from GitHub like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/snorkel\")\n```\n:::\n\n\nSo, how would you embolden a word in your function documentation? Highlight the word and then go to _Addins_ > _Format Bold_ and you get:\n\n```\n#' I am a \\strong{bold} boy.\n```\n\nHere's something more complex: how can you link to a function in an external package? Write the package function in the form `package::function`, highlight it and then select _Addins_ > _Link To Function (Another Package)_ and you get:\n\n```\n#' When the crowd say 'Bo \\code{\\link[dplyr]{select}}a'.\n```\n\nThe functions in the Addin insert code [mentioned in the {roxygen2} docs](https://roxygen2.r-lib.org/articles/formatting.html), so big shoutout to the authors Hadley Wickham, Peter Danenberg, Gabor Csárdi, Manuel Eugster and RStudio.\n\nThe package website has a [list of the functions](https://matt-dray.github.io/snorkel/reference/index.html) available in the Addin,[^breathe] which you can click to see previews of what each one will insert.\n\nFor now I think the functions in the package should focus just on the Rd tags that format the documentation, rather than the {roxygen2} tags (like `@description`, `@params`, etc). The latter are already autocompleted in RStudio, so I feel like there's less need. Similarly, the package doesn't include [functions to insert Markdown](https://roxygen2.r-lib.org/articles/markdown.html) into function documentation, but perhaps it could be expanded in future.\n\nNew functionality is always welcome; please raise an issue or pull request in [the GitHub repo](https://www.github.com/matt-dray/snorkel).\n\n## Addin your suggestions\n\nI made these primarily for myself; I'm really bad at remembering syntax. I always need 'a brain outside my brain'. Maybe they'll be useful for you too.\n\nPerhaps you can help out by expanding the list of functions in these packages. Please add any suggestions or features in an issue or pull request in either GitHub repo.\n\nSo, don't be a cad, it would be maddenin' and saddenin' if you hadn't added in your Addin ideas, so be a rad chad and add your addins in the Addins. \n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-17 18:11:42 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       fontawesome_0.5.1 evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^aqualung]: Although I still like '{aqualung}' as a package name.\n[^announce]: I sort-of announced this before in [the {backtick} post](https://www.rostrum.blog/2022/02/19/backtick/), but then [John Mackintosh](https://www.johnmackintosh.net/) signal-boosted it on Twitter and folks seemed interested, so here we are.\n[^italy]: Yes, there are use cases for this! For example, Italian keyboards [don't have a backtick](https://commons.wikimedia.org/wiki/File:Italian_Keyboard_layout.svg)?!\n[^md]: But note that you can [write documentation with Markdown](https://roxygen2.r-lib.org/articles/markdown.html)! I may expand the package to cover this in future.\n[^breathe]: Yes, there is an Easter-egg function in the package for your wellbeing.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}