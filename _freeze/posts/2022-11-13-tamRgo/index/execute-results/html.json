{
  "hash": "de2f42ca627396308f418c50d02f168a",
  "result": {
    "markdown": "---\ntitle: Tamagotchi in R?\ndate: 2022-11-13\nslug: tamRgo\ncategories:\n  - gamedev\n  - r\n  - tamRgo\n  - videogames\n---\n\n::: {.cell}\n\n:::\n\n\n![Development of a {tamRgo} digital pet.](resources/tamRgo_hex.png){fig-alt=\"Six pixellated characters showing a progression from a small blob creature, through to a larger hat-wearing creature, through to a tombstone.\" width=\"33%\" fig-align=\"left\"}\n\n## tl;dr\n\nI've written [the concept R package {tamRgo}](https://github.com/matt-dray/tamRgo) to simulate a persistent digital pet in your R console, lol.\n\n## Had an oeuf?\n\nR is a game engine[^explain]. Don't @ me[^fosstodon]. \n\n[Turns out that R can keep a 'save state'](https://r-pkgs.org/data.html#sec-data-persistent): developers can write a persistent file to the platform-independent path on a user's machine resolved by [`tools::R_user_dir()`](https://rdrr.io/r/tools/userdir.html)[^rappdirs].\n\nOf course, I've used this to make a concept R package. [{tamRgo}](https://github.com/matt-dray/tamRgo) saves locally a 'blueprint' for a  [_Tamgotchi_](https://en.wikipedia.org/wiki/Tamagotchi)-like digital pet[^tama], which is read and updated when you interact with it in the R console.\n\n_Tamago_ (egg) + _uotchi_ ('watch') = _Tamagotchi_. _Tamago_ + R = {tamRgo}.\n\n## Nuovo uovo\n\n### Install\n\nUse {remotes} to install the package [from GitHub](https://github.com/matt-dray/tamRgo). There's also [an accompanying documentation website](https://matt-dray.github.io/tamRgo/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"tamRgo\")  # if not yet installed\nremotes::install_github(\"matt-dray/tamRgo\")\nlibrary(tamRgo)\n```\n:::\n\n```\nWelcome to {tamRgo}, a digital pet in the R console!\n - Docs: <https://matt-dray.github.io/tamRgo>\n - New pet: lay_egg()\n - Then: get_stats(), see_pet(), play(), feed(), clean()\n```\n\nIt has no package dependencies, but you'll need to be running a version of R greater than 4.0.\n\nOf course, it's just a toy to demonstrate a concept. I've built out a bit of a 'game loop', but it's just for fun and the code is not optimised. Bugs guaranteed, so [suggestions and code contributions are always welcome](https://github.com/matt-dray/tamRgo/issues).\n\n### New pet\n\nTo begin, you'll need to generate you new cyberpet[^cyber] by laying an egg. You'll be asked to confirm it's okay to save a blueprint file onto your computer, which is just a small list object stored as an RDS file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlay_egg(pet_name = \"KEVIN\")\n```\n:::\n\n```\nSave pet blueprint? y/n: y\nSaved pet blueprint.\nYou have a new egg... it hatched!\nYou can get_stats(), see_pet(), play(), feed(), clean().\n```\n\nThe blueprint will be saved at the location resolved by `tools::R_user_dir(\"tamRgo\", \"data\")`. You can always `release()` your pet into the wild, which will delete the blueprint file. \n\nSo, you have a new pet. Now what? The hint suggests to check the stats, so let's do that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_stats()\n```\n:::\n\n```\nCharacteristics\n Name:    KEVIN\n Species: Z\n Age:     0\n Level:   0 (newborn)\n Alive:   TRUE\nStatus\n Happy:   ■■■□□  \n Hungry:  ■■■□□  \n Dirty:   □□□□□  \n```\n\nYou can see some characteristics: the name you provided, the pet's species (X, Y or Z) and their age (days since 'birth'). You can see the pet's level (whatever that means) and whether they are currently alive. There's also status values, which are followed by five-point gauges, some of which are filled.\n\nLet's quickly check what our pet looks like with `see_pet()`. Its appearance depends on the species and the level; newborns are pretty much a blob, but your pet will grow and develop as it levels. \n\nThe rendering of the sprite, which is built with [unicode block elements](https://en.wikipedia.org/wiki/Block_Elements), will depend on the settings in your console. Your browser may also bork the the sprites as they appear in this post. See the package's hex logo at the top of the page to get truer examples of the intended designs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsee_pet()\n```\n:::\n\n```\n░░░░░░░\n░░███░░\n░█░█░█░\n░█████░\n░██░██░\n░░███░░\n░░░░░░░\n```\n\nCongratulations! KEVIN is a beautiful little chap.\n\n### Feed\n\nHaving just been born, KEVIN is a bit peckish. You can tell because the 'Hungry' gauge is partially filled. Let's lower the value by using `feed()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfeed()\n```\n:::\n\n```\n'Hungry' status value is now 2/5\n```\n\nSee how the 'Hungry' counter decreased by 1 to 2?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_stats()\n```\n:::\n\n```\nCharacteristics\n  Name:    KEVIN\n  Species: Z\n  Age:     0\n  Level:   0 (newborn)\n  Alive:   TRUE\nStatus\n  Happy:   ■■■□□  \n  Hungry:  ■■□□□  \n  Dirty:   □□□□□  \n```\n\n### Play\n\nYou can increase the 'Happy' value, which is currently 0, with `play()`. This begins a game of 'higher or lower' with user input. Yes, it's not much of a skill-based game, but there's a rumour that it's easier under some circumstances and that a higher score is better for your pet's wellbeing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplay()\n```\n:::\n\n```\nHigher or lower than 4? Type h or l: h\nWrong! It was 1. Score: 0/5.\nHigher or lower than 1? Type h or l: h\nCorrect! It was 8. Score: 1/5.\nHigher or lower than 4? Type h or l: h\nCorrect! It was 6. Score: 2/5.\nHigher or lower than 6? Type h or l: l\nCorrect! It was 5. Score: 3/5.\nHigher or lower than 7? Type h or l: l\nWrong! It was 10. Score: 3/5.\nResult: you scored 3/5!\n'Happy' status value is now 4/5\n```\n\n### Clean\n\nAfter some time, your pet will become 'dirty', represented by a small pile of filth underneath their sprite.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsee_pet()\n```\n:::\n\n```\n░░░░░░░\n░░███░░\n░█░█░█░\n░█████░\n░██░██░\n░░███░░\n░░░░░░░\n░░░░░░░\n░░░█░░░\n░░███░░  \n░█████░ \n░░░░░░░\n```\n\nWhich is almost as big as KEVIN himself, wow. You'll just need to `clean()` it away.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean()\n```\n:::\n\n```\n'Dirty' status value is now 0/5\n```\n\n### Persistence\n\nPerhaps the most important thing to know is that you can end your R session and come back later and your pet will still be available. In fact, it will continue to live and grow on your computer while you're away.\n\nMaybe you come back five days later. Here's what you might see if you check your pet's stats from any R session on your computer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_stats()\n```\n:::\n\n```\nCharacteristics\n  Name:    KEVIN\n  Species: Z\n  Age:     5\n  Level:   2 (youngling)\n  Alive:   TRUE\nStatus\n  Happy:   □□□□□ !\n  Hungry:  ■■■■■ !\n  Dirty:   ■■■■■ !\n```\n\nAha, so KEVIN's age and level have increased since you've been away, even though you haven't interacted with him for a while. But uh-oh, looks like his status values are at their worst.\n\nPay attention to these status values. Look after your pet! Apparently there's a chance it might become... 'unalive'. Rumour has it that good owners have longer-living pets...\n\nAnyway, let's quickly check KEVIN's appearance now he's level 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsee_pet()\n```\n:::\n\n```\n░░░░░░░░░░\n░░█░░░░█░░\n░░░█░░█░░░\n░░██████░░\n░░█░██░█░░\n░░██████░░\n░███░░███░\n░░██████░░\n░░█░░░░█░░\n░░░░░░░░░░\n░░░░░░░\n░░░█░░░\n░░███░░  \n░█████░ \n░░░░░░░\n░░░░░░░\n░░░█░░░\n░░███░░  \n░█████░ \n░░░░░░░\n░░░░░░░\n░░░█░░░\n░░███░░  \n░█████░ \n░░░░░░░\n░░░░░░░\n░░░█░░░\n░░███░░  \n░█████░ \n░░░░░░░\n░░░░░░░\n░░░█░░░\n░░███░░  \n░█████░ \n░░░░░░░\n```\n\nErm, well, cool antennae, bro. Totally distracts from the mess. Might need to `clean()` him.\n\n## Under the shell\n\nThe underlying logic is pretty simple. I don't want to give away too many spoilers, but it's worth explaining some of the main components a bit.\n\n### Blueprint\n\nThe whole system is dependent on a 'blueprint' file, which is what gets stored at the `tools::R_user_dir()` location. It's a list object with elements like the pet's name, species (randomly generated), 'date of birth', accumulated XP, status values (happy, hungry, dirty) and some other things.\n\nThe blueprint is read and updated whenever you use a function from {tamRgo}. The current datetime is compared to the datetime of last interaction (stored in the blueprint) and the difference is used to calculate things like the pet's age, XP accumulation and level and status values.\n\nThis gives the impression that the pet has been 'alive' on the player's machine while they've been away. A trick[^trick]!\n\n### Experience\n\nThe main goal is to accumulate XP and keep your pet alive. XP:\n\n* is accumulated passively every hour\n* is gained from the minigame in `play()`, where a higher score means more XP\n* will result in the pet levelling up when certain thresholds have been met, which alters their appearance\n\nAt a certain point, the pet will become 'unalive'[^dead]. The chance of this happening is based on the pet's accumulated XP. Basically:\n\n* XP is 'frozen' at a certain age and the value is stored in the blueprint\n* the chance of becoming unalive is tied to the frozen XP value, where more XP means a lower chance\n* the number of days since the XP was frozen is used as a multiplier, so the chance of becoming unalive increases with time\n\nThe current XP count is stored in the blueprint, but is hidden from the user. This moves focus away from tracking and improving a single number and hopefully towards a more general goal of keeping your pet happy, well-fed and clean.\n\n### Sprites\n\nThere are character 'sprites' that change with age and species (see the image at the top of this post). The sprite for a newborn, mature and unalive pet are the same regardless of species, but the other levels are dependent on whether the pet is species X, Y or Z. Of course, these are pixellated to mimic [the original _Tamagotchi_ style](https://static.wikia.nocookie.net/tamagotchi/images/5/52/Tama_diagram.png/revision/latest?cb=20191126143322).\n\nThe sprites are called by `see_pet()` as binary matrices of filled and unfilled 'pixels'. I wrote the package [{pixeltrix}](https://github.com/matt-dray/pixeltrix), which I wrote about in [my last blog post](https://www.rostrum.blog/2022/09/24/pixeltrix/) for a simple interactive way to design sprites by turning pixels 'on' and 'off' in a plotting window. Here's a preview of a totally original little cyberfriend being incepted.\n\n<div class=\"figure\">\n<img src=\"resources/pixeltrix.gif\" alt=\"Gif of RStudio window. The console is running the code pixeltrix::click_pixels(6, 7, 3) and a plot appears with a 6 by 7 square grid. Some squares are clicked, changing them to light grey. A second click turns them dark grey. Eventually a little square character with a face is created. A matrix encoded the image is shown in the console when the escape key is pressed.\" width=\"100%\"/>\n</div>\n\n## Practical yolk\n\nThe package is not feature complete, lol[^others]. To improve it, I _could_ maybe[^wont]:\n\n* animate the pixel graphics\n* allow blueprints to be transferred between machines, so your pet can live across multiple devices[^gist]\n* add a battle system like _Digimon_\n* make the `play()` minigame actually fun and so it grants more XP for greater skill\n* make more meaningful use of 'hungry' and 'dirty' statuses, perhaps include a hidden HP gauge that is reduced when these statuses are at their maximum for an extended period\n\nThe main point of this toy was for me to work out how to store data on a user's machine. Should you actually do that? It depends. Can you use it in a silly R package for purposes of fun? Well, yes, if you ask me.\n\nYou can probably think of other ways to use `tools::R_user_dir()` for games in R, particularly for save states. Let me know when you've made a new triple-A game for R and I'll add it to [the list](https://github.com/matt-dray/awesome-r-games).\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-06 19:27:05 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] tamRgo_0.1.0\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^explain]: Oh, wait, I have to explain myself? Look no further than [Mike Cheng's rstudio::conf22 talk](https://www.youtube.com/watch?v=LPotWAJnE_s) or the [awesome-r-games list](https://github.com/matt-dray/awesome-r-games). I've written toys like  [{ActionSquirrel}](https://github.com/matt-dray/ActionSquirrel), [{safar6}](https://github.com/matt-dray/safar6), [{potato}](https://github.com/matt-dray/potato) and [{r.oguelike}](https://github.com/matt-dray/r.oguelike).\n[^tama]: For the benefit of youths, [a _Tamagotchi_](https://en.wikipedia.org/wiki/Tamagotchi) was (is!) a little physical device that contains a 'digital pet', made popular in the late 90s. They have a little screen and physical buttons so you can see your pet and interact with it. Play with it, feed it, even reprimand it.\n[^rappdirs]: You may be familiar with [{rappdirs}](https://rappdirs.r-lib.org/), a package that helps you find directories. `tools::R_user_dir()` is nice because it's built into R, so no dependency is required.\n[^dead]: A euphemism to protect the sensitive.\n[^fosstodon]: If you do try and @ me, then you can now do it over at [@mattdray@fosstodon.org](https://fosstodon.org/@mattdray).\n[^trick]: _Illusions, Michael._\n[^gist]: In fact, my initial approach to {tamRgo} was to store blueprints remotely in [GitHub gists](https://gist.github.com/). The plus-side is that this could (in theory) let you battle other pets by reading their blueprints from a URL. The downside is the overhead of requiring a GitHub account and API access. If you want, you can [peruse the {tamRgo} GitHub repo](https://github.com/matt-dray/tamRgo/tree/65301b8f362ec047555217611d13af79e4f00020) just before I moved from Gist-based to local blueprints.\n[^others]: Meanwhile, VS Code users can check out [Anthony Shaw's _VS Code Pets_](https://tonybaloney.github.io/vscode-pets/) to have a little cat or dog (or Clippy!) in their IDE. There's also a lot of digital-pet implementations on various blogs and YouTube, but it was [SquidGodDev's _Pocket Pets_ for the Playdate](https://youtu.be/KUjVfoLtHwc) that really egged me on.\n[^wont]: Hahaha, as if I'd finish a side project.\n[^cyber]: There are few terms that evoke the same wave of late-90s nostalgia.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}