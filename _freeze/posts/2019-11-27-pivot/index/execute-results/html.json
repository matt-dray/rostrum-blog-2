{
  "hash": "4ca365a388ee24b9ac8412082b362aac",
  "result": {
    "markdown": "---\ntitle: A pivotal change to Software Carpentry\ndate: 2019-11-27\nslug: pivot\ncategories:\n  - r\n  - software-carpentry\n  - tidyr\n---\n\n\n![Via frinkiac.com](resources/pivot.gif){fig-alt=\"A Simpsons gif of a dancing instructor telling Lisa and others 'I said step, pause, turn, pause, pivot, step, step, not step, pause, turn, pause, pivot, step, pause!'\" width=\"75%\" fig-align=\"left\"}\n\n## tl;dr\n\nTeaching materials from [The Carpentries](https://carpentries.org/) depend on the community to amend and update them. This post is about my first proper contribution by helping to update [the Software Carpentry lesson that teaches the R package {tidyr}](https://swcarpentry.github.io/r-novice-gapminder/14-tidyr/index.html).\n\nSome helpful materials for learning about {tidyr}'s new `pivot_*()` functions:\n\n* [the {tidyr} vignette about pivoting](https://tidyr.tidyverse.org/dev/articles/pivot.html)\n* Hiroaki Yutani’s [slides](https://speakerdeck.com/yutannihilation/a-graphical-introduction-to-tidyrs-pivot-star) — ‘A graphical introduction to tide’s pivot_*()’\n* Bruno Rodrigues’s [blogpost](https://www.brodrigues.co/blog/2019-03-20-pivot/) — ‘Pivoting data frames just got easier thanks to `pivot_wide()` and `pivot_long()`’\n* Sharon Machlis’s [video](https://youtu.be/gnUgSkKEW5c) — ‘How to reshape data with tidyr’s new pivot functions’\n* Gavin Simpson’s [blog](https://www.fromthebottomoftheheap.net/2019/10/25/pivoting-tidily/) — ‘Pivoting tidily’ (a real-world problem)\n* I wrote a {tidyr} lesson for [Tidyswirl](https://github.com/matt-dray/tidyswirl), a [Swirl](https://swirlstats.com/) course for learning the tidyverse from within R itself ([read the blog post](https://www.rostrum.blog/2019/11/02/tidyswirl/))\n\n## Contribute!\n\n[Software Carpentry](https://software-carpentry.org/) ‘teach[es] foundational coding and data science skills to researchers worldwide’ as part of [The Carpentries](https://carpentries.org/) initiative. I wrote [an earlier post about live coding](https://www.rostrum.blog/2019/09/12/live-code/)[^xpost] as part of the training to [become an instructor](https://carpentries.github.io/instructor-training/).\n\nA great thing about the The Carpentries is that the lessons are openly available on GitHub. This means anyone can improve them to improve the experience for learners all over the globe.\n\nTo this end, [I raised in in an issue](https://github.com/swcarpentry/r-novice-gapminder/issues/570): to update the entire episode about [{tidyr}](https://tidyr.tidyverse.org/)--a [tidyverse](https://www.tidyverse.org/) package used for reshaping data frames--in [the R for Reproducible Scientific Analysis lesson](https://swcarpentry.github.io/r-novice-gapminder/14-tidyr/index.html).[^issue]\n\n## Pivot\n\nWhy? The `pivot_longer()` and `pivot_wider()` functions replaced `spread()` and `gather()` in {tidyr} [version 1.0.0](https://www.tidyverse.org/blog/2019/09/tidyr-1-0-0/).\n\nThese pairs of functions change the 'shape' of a data set from 'wide' to 'long' and vice versa.\n\nHere’s an example of wide data from the World Health Organisation:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  <chr>        <dbl>  <dbl>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n```\n:::\n:::\n\n\nThere’s a row per country and a column per year of data. Each yearly column filled with a value. Note that these data aren’t [‘tidy’](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html): the column headers are values, not variable names, and there isn’t a single observation per row. You have no way of knowing that the values in the columns are tuberculosis cases.\n\nThis data frame can be made more tidy by making it longer. Here's what that looks like:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  country      year  cases\n  <chr>       <dbl>  <dbl>\n1 Afghanistan  1999    745\n2 Afghanistan  2000   2666\n3 Brazil       1999  37737\n4 Brazil       2000  80488\n5 China        1999 212258\n6 China        2000 213766\n```\n:::\n:::\n\n\nSo the year values from the headers have been put into their own column and the corresponding counts of tuberculosis are in a column with a more sensible name.\n\n{tidyr} helps you shift between these formats: `pivot_wider()` spreads long data into wide form and `pivot_longer()` gathers the wide data into long form. Why these names? [Hadley did a poll](https://github.com/hadley/table-shapes) to see how people referred to these two table shapes and ‘wider’ and ‘longer’ were most popular.[^thicc]\n\n## Re-writing the episode\n\nI started re-writing the episode, but turns out it wasn't as simple as replacing `spread()` with `pivot_longer()` and `gather()` with `pivot_wider()`. For two reasons: different function arguments and slightly different outputs.\n\n### Arguments\n\nThe `key` and `value` arguments take the names of new columns to `gather()` into or `spread()`. People struggle with what these things mean. The `pivot_*()` functions make this a little easier: `pivot_longer()` has `names_to` and `values_to`, and `pivot_wider()` has `names_from` and `values_from`. The 'to' and 'from' suffixes make clearer what is happening.\n\nFor example, we can start with our wide-table example (built into the {tidyr} package as `table4a`) and turn it into the long-table example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n\nlong <- pivot_longer(\n  data = table4a,  # wide data example \n  cols = c(`1999`, `2000`),  # the columns to be pivoted\n  names_to = \"year\",  # new column for the current column headers\n  values_to = \"cases\"  # new column for the corresponding values\n)\n\nprint(long)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  country     year   cases\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n:::\n:::\n\n\nAnd back:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwide <- pivot_wider(\n  data = long,  # dataset created above\n  names_from = year,  # create cols from data in this column\n  values_from = cases  # fill the new columns with data from this column\n)\n\nprint(wide)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  <chr>        <dbl>  <dbl>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n```\n:::\n:::\n\n\nIt was pretty straightforward to update the training materials with these function arguments, remembering that `names_to` needs to be supplied with a quoted string to become the name of the new column, for example, whereas `names_from` refers to an existing column and is a bare variable name.\n\n### Output changes\n\n[I raised some things about outputs in my issue](https://github.com/swcarpentry/r-novice-gapminder/issues/570#event-2797050583): (1) outputs from the new functions have tibble class even with a data.frame input and (2) might be ordered differently to outputs from the old functions. This required some changes to the images in the lesson, but didn't change much else fundamentally. \n\n## Teamwork\n\nWhile busy with other things, another user--[Katrin Leinweber](https://github.com/katrinleinweber)--took the branch I'd started, improved it and it was [merged into the source](https://github.com/swcarpentry/r-novice-gapminder/pull/583#issuecomment-553771995) thanks to [Jeff Oliver](https://github.com/jcoliver). This is a huge benefit of working in the open; other people can see what you've done, suggest improvements and help write code.\n\n[The page is now live](https://swcarpentry.github.io/r-novice-gapminder/14-tidyr/index.html). Learners can now be up to speed with the latest developments in the {tidyr} package. This is an important improvement for new R and tidyverse users because I think these functions are more intuitive than their old counterparts, which are no longer under active development.\n\nConsider [contributing to The Carpentries](https://docs.carpentries.org/topic_folders/maintainers/contributing.html) or another open-source project.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-23 11:23:16 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] tidyr_1.3.0\n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.3       cli_3.6.1         knitr_1.43.1      rlang_1.1.1      \n [5] xfun_0.39         purrr_1.0.1       generics_0.1.3    jsonlite_1.8.7   \n [9] glue_1.6.2        htmltools_0.5.5   fansi_1.0.4       rmarkdown_2.23   \n[13] evaluate_0.21     tibble_3.2.1      fastmap_1.1.1     yaml_2.3.7       \n[17] lifecycle_1.0.3   compiler_4.3.1    dplyr_1.1.2       htmlwidgets_1.6.2\n[21] pkgconfig_2.0.3   rstudioapi_0.15.0 digest_0.6.33     R6_2.5.1         \n[25] tidyselect_1.2.0  utf8_1.2.3        pillar_1.9.0      magrittr_2.0.3   \n[29] tools_4.3.1       withr_2.5.0      \n```\n:::\n:::\n\n</details>\n\n[^xpost]: Cross-posted on [The Carpentries blog](https://carpentries.org/blog/2019/09/live-coding-experience/).\n[^issue]: And a [little pull request](https://github.com/swcarpentry/r-novice-gapminder/pull/569) to correct a small problem with bullet points, which helped me complete my requirements to become an instructor.\n[^thicc]: Yeah, but `pivot_thicc()` and `pivot_sticc()` would have been amusing.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}