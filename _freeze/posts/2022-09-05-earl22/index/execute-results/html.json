{
  "hash": "ec85eb8163e66f4ca4a8d8e3e9c8c554",
  "result": {
    "markdown": "---\ntitle: \"EARL 22: {a11ytables} for better spreadsheets\"\ndate: 2022-09-07\nslug: earl22\ncategories:\n  - a11ytables\n  - event\n  - ms-office\n  - public-sector\n  - quarto\n  - r\n  - talk\n---\n\n\n![Please don't sue me for my fan art, Microsoft.](resources/clippy.gif){fig-alt=\"A gif that starts with a background of a government webpage for releasing egg statistics. The MS Office mascot Clippy eases in from the lower right with a speech bubble saying 'it looks like you're trying to improve a spreadsheet'. The background switches to a spreadsheet and Clippy moves to the top of the screen and then finally moves offscreen.\" width=\"100%\"}\n\n## tl;dr \n\nI [presented some slides](https://matt-dray.github.io/earl22-presentation/) at [the EARL 2022 conference](https://www.ascent.io/earl) about [{a11ytables}](https://co-analysis.github.io/a11ytables/): an R package that helps automate the production of reproducible and accessible spreadsheets, with a focus on publication of government statistics.\n\n## Counting sheets\n\nThe UK government [publishes a lot of spreadsheets](https://www.gov.uk/search/research-and-statistics?content_store_document_type=statistics_published&order=updated-newest) that contain statistical tables. Compared to each other---and to themselves over time---these files are often:\n\n* inconsistent in structure (e.g. cover or contents sheets are missing)\n* inconsistent in style (e.g. different fonts, different shorthand codes for suppressed values)\n* inaccessible to users of assistive technology (e.g. they contain blank columns or unannounced footnotes)\n\nLuckily, the government's [Analysis Function](https://analysisfunction.civilservice.gov.uk/) released some excellent [guidance for releasing statistics in spreadsheets](https://analysisfunction.civilservice.gov.uk/policy-store/releasing-statistics-in-spreadsheets/), with particular attention to accessibility.\n\nThe government's grassroots [Reproducible Analytical Pipelines (RAP)](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/) movement is also growing at pace. RAP's purpose is to overcome a legacy of fragmented point-and-click processes into code-driven end-to-end pipelines that improve speed, accuracy and reproducibility; including workflows that generate statistical spreadsheets for publication.\n\nIt will take time for these approaches to become 100% embedded across government, due to factors like the inevitable inertia that comes with trying to leave legacy processes behind.[^strategy]\n\nHow can we grease the wheels?\n\n## Spreadsheet socialism\n\nI work in a government team that publishes data[^gov] and I wanted to make it easier for us to:\n\n* generate spreadsheets via R (the most commonly used language here)\n* be able to reproduce outputs in future (i.e. we produce files monthly, quarterly, annually)\n* apply accessible styles and structure (so we don't have to spend ages with checklists and point-and-click interfaces)\n\nFirst I looked for existing code-based solutions and found [the Python package gptables](https://gptables.readthedocs.io/en/latest/), written by the Analysis Function Core Team. At the time, the package created spreadsheets in accordance with an older version of the best-practice guidance. There was no R-native solution either, though gptables could be accessed in R via [{reticulate}](https://rstudio.github.io/reticulate/).\n\nAs a result, I created [{a11ytables}](https://co-analysis.github.io/a11ytables/): an R package to generate spreadsheets that meet the latest best-practice guidance for releasing statistics in spreadsheets.\n\n![](resources/a11ytables-hex.png){fig-alt=\"Hex logo for the a11ytables R package. Four rows of light green cells, mimicking a spreadsheet. The second row down has the letters of 'a11y' in adjacent cells. The third row has the letters of 'tables' in adjacent cells.\" width=\"25%\"}\n\nIt can be [downloaded from GitHub](https://github.com/co-analysis/a11ytables/) (currently v0.1), which also installs [{openxlsx}](https://ycphs.github.io/openxlsx/) (which does all the hard work of building a workbook) and [{pillar}](https://github.com/r-lib/pillar) (for prettier printing).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"co-analysis/a11ytables\")\nlibrary(a11ytables)\n```\n:::\n\n\nDo [submit issues or pull requests to the repo](https://github.com/co-analysis/a11ytables/) if you have ideas or solutions.\n\n## Easy does it\n\nA major aim of {a11ytables} is to make it easy for stats producers to more easily complete the last mile of their 'data-in to spreadsheet-out' pipeline. As such, the workflow is relatively simple and is composed of only three functions (arguments ignored for brevity):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_a11ytable() |> \n  generate_workbook() |>\n  openxlsx::saveWorkbook()\n```\n:::\n\n\nBasically:\n\n1. Pass information and data as arguments to `create_a11ytable()`, which creates a special a11ytables-class dataframe representation of your spreadsheet content\n1. Pass that object to `generate_workbook()` to convert it to a Workbook-class object that applies the required structure and styling\n1. Use `saveWorkbook()` from the {openxlsx} package to write the spreadsheet output to an xlsx file\n\nI recommend that you read the vignettes and function documentation [on the package website](https://co-analysis.github.io/a11ytables/) to better understand how to use {a11ytables} and to learn about its caveats[^accessibility]; I won't go into depth in this post.\n\n## Over-easy does it\n\nI wrote some slides about the package and presented it at the EARL 2022 conference[^earl] in London. Yes, to expose the package, but also to make a wider point about the general importance of reproducibility, accessibility and the power of reusable tools.\n\nYou can [access the slides for my talk on the web](https://matt-dray.github.io/earl22-presentation/), or [find the source on GitHub](https://github.com/matt-dray/earl22-presentation). \n\nThe slides show an example of some tables published by the UK government---[the latest UK egg statistics](https://www.gov.uk/government/statistics/egg-statistics)[^egg]---and walks through how they might be developed using {a11ytables}.\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"shareagain\" style=\"min-width:300px;margin:1em auto;\" data-exeternal=\"1\">\n<iframe src=\"https://matt-dray.github.io/earl22-presentation\" width=\"1600\" height=\"900\" style=\"border:none;\" loading=\"lazy\" allowfullscreen></iframe>\n<script>fitvids('.shareagain', {players: 'iframe'});</script>\n</div>\n```\n:::\n:::\n\n\nI wrote the slides in [Quarto](https://quarto.org/) and made heavy use of [{quartostamp}](https://matt-dray.github.io/quartostamp/)---my package of Quarto helpers exposed as an RStudio Addin---which I [wrote about recently](https://www.rostrum.blog/2022/08/11/quartostamp-snorkel/). Click 'settings' in the hamburger menu (lower left) to go fullscreen, see presenter notes, or get a slide overview.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-06-29 22:58:20 CEST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2   compiler_4.3.1      fastmap_1.1.1      \n [4] cli_3.6.1           tools_4.3.1         htmltools_0.5.5    \n [7] xaringanExtra_0.7.0 rstudioapi_0.14     yaml_2.3.7         \n[10] rmarkdown_2.22      knitr_1.43.1        jsonlite_1.8.5     \n[13] xfun_0.39           digest_0.6.31       rlang_1.1.1        \n[16] evaluate_0.21      \n```\n:::\n:::\n\n</details>\n\n[^egg]: Long-time readers may remember that [I've used this publication before to demonstrate the {drake} package](https://www.rostrum.blog/2019/07/23/can-drake-rap/) for workflow reproducibility.\n[^earl]: 'Enterprise Applications of the R Language'. Long-time readers may remember that [I spoke at EARL in 2018 about the {crosstalk} package](https://www.rostrum.blog/2018/09/12/crosstalk-memes/), largely through the medium of memes.\n[^accessibility]: Note that the package is not intended for creating perfectly accessible spreadsheets but will help with the bulk of the work needed. Users of the package should refer back to [the main spreadsheet guidance](https://analysisfunction.civilservice.gov.uk/policy-store/releasing-statistics-in-spreadsheets/) or the [spreadsheet accessibility checklist](https://analysisfunction.civilservice.gov.uk/policy-store/making-spreadsheets-accessible-a-brief-checklist-of-the-basics/) after using it to make sure nothing has been missed. Please email [analysis.function@ons.gov.uk](mailto:analysis.function@ons.gov.uk) if you use the package so they can monitor its use and the outputs produced.\n[^gov]: This blog and everything on it is personal and doesn't represent government policy in any possible shape or form. Unless [the Geospatial Commission](https://www.gov.uk/government/organisations/geospatial-commission) needs me for [drawing procedural dungeon maps](https://www.rostrum.blog/2022/05/01/dungeon/), or whatever.\n[^strategy]: Check out the excellent [RAP strategy](https://analysisfunction.civilservice.gov.uk/policy-store/reproducible-analytical-pipelines-strategy/) and [Goldacre Review](https://www.gov.uk/government/publications/better-broader-safer-using-health-data-for-research-and-analysis) for how this might be achieved.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/fitvids-2.1.1/fitvids.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}