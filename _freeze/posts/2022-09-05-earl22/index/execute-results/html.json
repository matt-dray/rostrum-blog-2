{
  "hash": "d9516a2bb6a7287371cd34cf527a06bc",
  "result": {
    "markdown": "---\ntitle: \"EARL 22: {a11ytables} for better spreadsheets\"\nauthor: 'Matt Dray'\ndate: '2022-09-07'\nslug: earl22\ncategories:\n  - code\n  - event\n  - package\n  - talk\ntags:\n  - a11ytables\n  - conference\n  - earl\n  - quarto\n  - r\n  - spreadsheets\ndraft: no\n---\n\n\n<div class=\"figure\">\n<img src=\"resources/clippy.gif\" alt=\"A gif that starts with a background of a government webpage for releasing egg statistics. The MS Office mascot Clippy eases in from the lower right with a speech bubble saying 'it looks like you're trying to improve a spreadsheet'. The background switches to a spreadsheet and Clippy moves to the top of the screen and then finally moves offscreen.\" width=\"100%\"/>\n<p class=\"caption\">Please don't sue me for my fan art, Microsoft.</p>\n</div>\n\n# tl;dr \n\nI [presented some slides](https://matt-dray.github.io/earl22-presentation/) at [the EARL 2022 conference](https://www.ascent.io/earl) about [{a11ytables}](https://co-analysis.github.io/a11ytables/): an R package that helps automate the production of reproducible and accessible spreadsheets, with a focus on publication of government statistics.\n\n# Counting sheets\n\nThe UK government [publishes a lot of spreadsheets](https://www.gov.uk/search/research-and-statistics?content_store_document_type=statistics_published&order=updated-newest) that contain statistical tables. Compared to each other---and to themselves over time---these files are often:\n\n* inconsistent in structure (e.g. cover or contents sheets are missing)\n* inconsistent in style (e.g. different fonts, different shorthand codes for suppressed values)\n* inaccessible to users of assistive technology (e.g. they contain blank columns or unannounced footnotes)\n\nLuckily, the government's [Analysis Function](https://analysisfunction.civilservice.gov.uk/) released some excellent [guidance for releasing statistics in spreadsheets](https://analysisfunction.civilservice.gov.uk/policy-store/releasing-statistics-in-spreadsheets/), with particular attention to accessibility.\n\nThe government's grassroots [Reproducible Analytical Pipelines (RAP)](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/) movement is also growing at pace. RAP's purpose is to overcome a legacy of fragmented point-and-click processes into code-driven end-to-end pipelines that improve speed, accuracy and reproducibility; including workflows that generate statistical spreadsheets for publication.\n\nIt will take time for these approaches to become 100% embedded across government, due to factors like the inevitable inertia that comes with trying to leave legacy processes behind.[^strategy]\n\nHow can we grease the wheels?\n\n# Spreadsheet socialism\n\nI work in a government team that publishes data[^gov] and I wanted to make it easier for us to:\n\n* generate spreadsheets via R (the most commonly used language here)\n* be able to reproduce outputs in future (i.e. we produce files monthly, quarterly, annually)\n* apply accessible styles and structure (so we don't have to spend ages with checklists and point-and-click interfaces)\n\nFirst I looked for existing code-based solutions and found [the Python package gptables](https://gptables.readthedocs.io/en/latest/), written by the Analysis Function Core Team. At the time, the package created spreadsheets in accordance with an older version of the best-practice guidance. There was no R-native solution either, though gptables could be accessed in R via [{reticulate}](https://rstudio.github.io/reticulate/).\n\nAs a result, I created [{a11ytables}](https://co-analysis.github.io/a11ytables/): an R package to generate spreadsheets that meet the latest best-practice guidance for releasing statistics in spreadsheets.\n\n<div class=\"figure\">\n<img src=\"resources/a11ytables-hex.png\" alt=\"Hex logo for the a11ytables R package. Four rows of light green cells, mimicking a spreadsheet. The second row down has the letters of 'a11y' in adjacent cells. The third row has the letters of 'tables' in adjacent cells.\" width=\"25%\"/>\n</div>\n\nIt can be [downloaded from GitHub](https://github.com/co-analysis/a11ytables/) (currently v0.1), which also installs [{openxlsx}](https://ycphs.github.io/openxlsx/) (which does all the hard work of building a workbook) and [{pillar}](https://github.com/r-lib/pillar) (for prettier printing).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\")  # if not yet installed\nremotes::install_github(\"co-analysis/a11ytables\")\nlibrary(a11ytables)\n```\n:::\n\n\nDo [submit issues or pull requests to the repo](https://github.com/co-analysis/a11ytables/) if you have ideas or solutions.\n\n# Easy does it\n\nA major aim of {a11ytables} is to make it easy for stats producers to more easily complete the last mile of their 'data-in to spreadsheet-out' pipeline. As such, the workflow is relatively simple and is composed of only three functions (arguments ignored for brevity):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_a11ytable() |> \n  generate_workbook() |>\n  openxlsx::saveWorkbook()\n```\n:::\n\n\nBasically:\n\n1. Pass information and data as arguments to `create_a11ytable()`, which creates a special a11ytables-class dataframe representation of your spreadsheet content\n1. Pass that object to `generate_workbook()` to convert it to a Workbook-class object that applies the required structure and styling\n1. Use `saveWorkbook()` from the {openxlsx} package to write the spreadsheet output to an xlsx file\n\nI recommend that you read the vignettes and function documentation [on the package website](https://co-analysis.github.io/a11ytables/) to better understand how to use {a11ytables} and to learn about its caveats[^accessibility]; I won't go into depth in this post.\n\n# Over-easy does it\n\nI wrote some slides about the package and presented it at the EARL 2022 conference[^earl] in London. Yes, to expose the package, but also to make a wider point about the general importance of reproducibility, accessibility and the power of reusable tools.\n\nYou can [access the slides for my talk on the web](https://matt-dray.github.io/earl22-presentation/), or [find the source on GitHub](https://github.com/matt-dray/earl22-presentation). \n\nThe slides show an example of some tables published by the UK government---[the latest UK egg statistics](https://www.gov.uk/government/statistics/egg-statistics)[^egg]---and walks through how they might be developed using {a11ytables}.\n\n<iframe width=\"780\" height=\"500\" src=\"https://matt-dray.github.io/earl22-presentation\" title=\"EARL 2022: {a11ytables}\"></iframe>\n\nI wrote the slides in [Quarto](https://quarto.org/) and made heavy use of [{quartostamp}](https://matt-dray.github.io/quartostamp/)---my package of Quarto helpers exposed as an RStudio Addin---which I [wrote about recently](https://www.rostrum.blog/2022/08/11/quartostamp-snorkel/). Click 'settings' in the hamburger menu (lower left) to go fullscreen, see presenter notes, or get a slide overview.\n\n\n\n\n---\n<details><summary>Session info</summary>\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Ventura 13.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Zurich\n date     2023-06-29\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.1   2023-03-23 [1] CRAN (R 4.3.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.3.0)\n evaluate      0.21    2023-05-05 [1] CRAN (R 4.3.0)\n fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.3.0)\n htmltools     0.5.5   2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2   2023-03-17 [1] CRAN (R 4.3.0)\n jsonlite      1.8.5   2023-06-05 [1] CRAN (R 4.3.0)\n knitr         1.43.1  2023-06-21 [1] https://yihui.r-universe.dev (R 4.3.1)\n rlang         1.1.1   2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.22    2023-06-01 [1] CRAN (R 4.3.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.3.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.3.0)\n xfun          0.39    2023-04-20 [1] CRAN (R 4.3.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n</details>\n\n[^egg]: Long-time readers may remember that [I've used this publication before to demonstrate the {drake} package](https://www.rostrum.blog/2019/07/23/can-drake-rap/) for workflow reproducibility.\n[^earl]: 'Enterprise Applications of the R Language'. Long-time readers may remember that [I spoke at EARL in 2018 about the {crosstalk} package](https://www.rostrum.blog/2018/09/12/crosstalk-memes/), largely through the medium of memes.\n[^accessibility]: Note that the package is not intended for creating perfectly accessible spreadsheets but will help with the bulk of the work needed. Users of the package should refer back to [the main spreadsheet guidance](https://analysisfunction.civilservice.gov.uk/policy-store/releasing-statistics-in-spreadsheets/) or the [spreadsheet accessibility checklist](https://analysisfunction.civilservice.gov.uk/policy-store/making-spreadsheets-accessible-a-brief-checklist-of-the-basics/) after using it to make sure nothing has been missed. Please email [analysis.function@ons.gov.uk](mailto:analysis.function@ons.gov.uk) if you use the package so they can monitor its use and the outputs produced.\n[^gov]: This blog and everything on it is personal and doesn't represent government policy in any possible shape or form. Unless [the Geospatial Commission](https://www.gov.uk/government/organisations/geospatial-commission) needs me for [drawing procedural dungeon maps](https://www.rostrum.blog/2022/05/01/dungeon/), or whatever.\n[^strategy]: Check out the excellent [RAP strategy](https://analysisfunction.civilservice.gov.uk/policy-store/reproducible-analytical-pipelines-strategy/) and [Goldacre Review](https://www.gov.uk/government/publications/better-broader-safer-using-health-data-for-research-and-analysis) for how this might be achieved.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}