{
  "hash": "30b48e6785b850e2354c1ba595ba47cb",
  "result": {
    "markdown": "---\ntitle: \"Yihui Xie: RAP god\"\ndate: 2024-01-12\nslug: yihui-rap\ncategories:\n  - public-sector\n  - r\n  - reproducibility\n  - rmarkdown\n---\n\n\n\n## tl;dr\n\nTaking a moment to thank [Yihui](https://yihui.org/), who has unwittingly made possible the rise of [Reproducible Analytical Pipelines](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/) (RAP).\n\n## Hooray for Yihui\n\n[Yihui Xie](https://yihui.org/) is an R legend. He was, however, recently [laid off](https://yihui.org/en/2024/01/bye-rstudio/) by his employers at Posit.\n\nI've personally benefited a great deal from Yihui's work, from writing reproducible presentations with [{xaringan}](https://slides.yihui.org/xaringan/#1) to producing the original version of this blog with [{blogdown}](https://pkgs.rstudio.com/blogdown/).\n\nAt a grander scale, Yihui's contributions to the R ecosystem have had a lasting and transformational impact on how we generate Official Statistics in the UK, where [R Markdown](https://rmarkdown.rstudio.com/) and [{knitr}](https://yihui.org/knitr/) are essential and ubiquitous tools in particular.\n\nSo much so that we have a custom Yihui Slack emoji.\n\n## That's a RAP\n\nPut (far too) simply, a [Reproducible Analytical Pipeline](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/) (RAP) is any code-driven, version-controlled workflow that reads data, processes it and creates consumable outputs, while ensuring that the process can be re-run in the future and by others.\n\nRAP was birthed from ['DataOps' principles](https://en.wikipedia.org/wiki/DevOps) with a focus on the production of statistical publications: reports and data files for public consumption, published officially on [the UK government's website](https://www.gov.uk/search/research-and-statistics?content_store_document_type=statistics_published&order=updated-newest). These files are important for transparency and decision making.\n\nThese days, RAP is so much more: it's a way of thinking, a community and a movement[^verb]. Its ethos has spread [across the UK public sector](https://nhsdigital.github.io/rap-community-of-practice/introduction_to_RAP/history_of_RAP/) and is gaining traction globally through efforts like [Bruno Rodrigues's excdellent book](https://raps-with-r.dev/).\n\n## R is for RAP\n\nRAP is language agnostic[^agnostic], but R is the _lingua franca_ for statistical production in the UK's government and public sector. Why? Possibly because R is a data- and stats-first language[^nostats] and therefore a natural choice for statistics professionals.\n\nOf course, R can easily cover the whole soup-to-nuts workflow. Not just ingestion and digestion of data, but crucially the ejection of information into written reports. R Markdown and {knitr} are the clear weapons of choice for this kind of document generation, for which we must thank Yihui for his tireless and humble efforts.\n\nBut what makes R Markdown so conducive to RAP, in particular? Well, stats publications are generally periodical (often weekly) and R Markdown is perfect for [literate programming](https://en.wikipedia.org/wiki/Literate_programming) at pace: you can create a skeleton document that can be updated dynamically with R code, saving so much time when a new version of the publication needs to be created with fresh data.\n\nCrucially, R Markdown is relatively simple to learn and use[^sweave]. You write some plain text and mark it up with simple adornments[^visual]. This suits perfectly the range of skills and abilities in statistical teams across the public sector, where staff are often 'numbers-people' first and 'coders' second. \n\nHence why R Markdown has been a central tenet of RAP since Dr Matt Upson[^originator]—RAP's Founding Father—noted it in his [germinal blog post](https://dataingovernment.blog.gov.uk/2017/03/27/reproducible-analytical-pipeline/).\n\n## Down, but not out\n\nOf course, I'm not alone: many others have talked about their appreciation for Yihui and his work, including Eric and Mike's discussion on [the R Weekly podcast](https://rweekly.fireside.fm/147) and [Emily's thread](https://x.com/EmilyRiederer/status/1743672724403241196).\n\nYou can also take a look at the incredible number of people who have signed up to [sponsor Yihui on GitHub](https://github.com/sponsors/yihui), which sits just shy of 300 at the time of writing[^sponsor].\n\nThank you, Yihui. We look forward to what comes next.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2024-01-13 09:57:11 GMT\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.2        \n [5] tools_4.3.1       htmltools_0.5.6.1 rstudioapi_0.15.0 yaml_2.3.8       \n [9] rmarkdown_2.25    knitr_1.45        jsonlite_1.8.7    xfun_0.41        \n[13] digest_0.6.33     rlang_1.1.3       evaluate_0.23    \n```\n:::\n:::\n\n</details>\n\n[^nostats]: R has grown beyond statistical analysis, of course. You can build apps and websites and so much more without ever 'doing stats'. Just ask [David Keyes](https://rwithoutstatistics.com/).\n[^visual]: This becomes even easier with, for example, [RStudio's 'visual' mode](https://rstudio.github.io/visual-markdown-editing/) for R Markdown files, which includes a GUI for marking-up to your text without needing to remember how to mark it up in \\*\\*bold\\*\\*, for example.\n[^sponsor]: Disclaimer: I'm one of these people.\n[^agnostic]: Not strictly true. We're talking here about open source languages like R and Python. Your proprietary tool of choice is not RAP compliant, sorry.\n[^verb]: To the extent that you can use 'RAP' as a noun ('we have many RAPs in our department') and verb ('I'm going to RAP this publication').\n[^originator]: RAP was pioneered in the UK government by Dr Matt Upson and the team at the Government Digital Service (GDS), not limited to Dr Matt Gregory (too many Matts, amirite?) and Duncan Garmonsway, as well as several early adopters like the Department for Culture, Media and Sport.\n[^sweave]: Compared to what? Most regular R users these days are unlikely to have encountered Sweave, for example, which is actually built into R. Sweave relies on knowledge of document preparation using LaTeX, which most of us barely know how to pronounce, let alone use. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}