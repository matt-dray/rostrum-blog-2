{
  "hash": "44ce88ce83a4016178999dc77946bd0a",
  "result": {
    "markdown": "---\ntitle: Package a {xaringan} template\ndate: 2019-05-24\nslug: xaringan-template\ncategories:\n  - css\n  - gdstheme\n  - r\n  - rmarkdown\n  - xaringan\n  - yaml\n---\n\n\n![](resources/gdstheme-template.gif){fig-alt=\"A gif that cycles through the slides that make up the gdstheme xaringan template, including heading slides, text slides and annotated image slides.\" width=\"60%\"}\n\n## tl;dr\n\nYou can make themes for reproducible [{xaringan}](https://slides.yihui.name/xaringan/) presentations. I made one for my organisation, the [Government Digital Service](https://www.gov.uk/government/organisations/government-digital-service/about).\n\n## A remarkable ninja\n\n[The {xaringan} package](https://slides.yihui.name/xaringan/) by [Yihui Xie](https://yihui.name/) implements [remark.js](https://github.com/gnab/remark)[^remark] in [R Markdown](https://bookdown.org/yihui/rmarkdown/) so you can create exciting presentations that contain reproducible R content.[^howto]\n\nYihui has [encouraged people to submit styles](https://yihui.name/en/2017/10/xaringan-themes/)---like the [RLadies theme](https://alison.rbind.io/post/r-ladies-slides/)---to enrich {xaringan}.\n\nThis post is about a specific theme I recreated for {xaringan} and shared in the [{gdstheme}](https://github.com/matt-dray/gdstheme) package along with an R Markdown template.\n\nClick on the slides embedded below and cycle through with your arrow keys, or [you can open them fullscreen in a dedicated browser tab](https://matt-dray.github.io/gdstheme/#1).\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"shareagain\" style=\"min-width:300px;margin:1em auto;\" data-exeternal=\"1\">\n<iframe src=\"https://matt-dray.github.io/gdstheme/\" width=\"400\" height=\"300\" style=\"border:FALSE;\" loading=\"lazy\" allowfullscreen></iframe>\n<script>fitvids('.shareagain', {players: 'iframe'});</script>\n</div>\n```\n:::\n:::\n\n\n## Create a theme\n\n[The organisation I work for](https://www.gov.uk/government/organisations/government-digital-service/about) uses a Google Slides template with pre-set styles and slide layouts. The template was [designed with a particular philosophy in mind](https://gds.blog.gov.uk/2016/04/07/giving-clear-presentations/).\n\nThe downside is that any R outputs have to be copy-pasted in, which isn't very reproducible.\n\nTo overcome this, I recreated their theme for {xaringan} in three steps (click to jump):\n\n1. [Create styles with CSS](#css)\n1. [Make an R Markdown template](#rmd)\n1. [Put these into an R package](#pkg)\n\n### Do it in style {#css}\n\nCSS lets you define the style of HTML documents, which is the default output for {xaringan}. \n\nFor {xaringan} you'll typically need two CSS files:\n\n* `theme.css` to define the style for each broad slide [class](https://www.w3schools.com/cssref/sel_class.asp) (e.g. a heading-slide class) and for general things like table design and hyperlink colours\n* `theme-fonts.css` to set the typefaces, which you can define separately for the body text, headers, etc\n\nYou reference these files in the YAML header of your {xaringan} R Markdown and the style is enacted when you render it to HTML.\n\nI tweaked the [default {xaringan} CSS files](https://github.com/yihui/xaringan/tree/master/inst/rmarkdown/templates/xaringan/resources) to create my own, which you can see in the [the GitHub repo](https://github.com/matt-dray/gdstheme/tree/master/inst/rmarkdown/templates/gdstheme/skeleton).\n\nYou can check out [the {xaringan} wiki](https://github.com/yihui/xaringan/wiki) for help and ideas.\n\n#### Get to class\n\nI overwrote the default `.remark-slide-content` class for regular text slides. In other words, failing to specify a class in your {xaringan} slide will result in a text slide by default. I also created `title-slide` and `heading-slide` classes.\n\nHere's the CSS for defining and styling the very simple `heading-slide` class:\n\n\n::: {.cell}\n\n```{.css .cell-code}\n.heading-slide {\n  background-color: #2372b6;  /* blue background */\n  color: #fff;                /* white text*/\n  text-shadow: 0 0 0;         /* no text shadow */\n  border-bottom: 0;           /* no border */\n  font-size: 90px;            /* large text size */\n  font-weight: bold;          /* headings are bold */\n}\n```\n\n\n<style type=\"text/css\">\n.heading-slide {\n  background-color: #2372b6;  /* blue background */\n  color: #fff;                /* white text*/\n  text-shadow: 0 0 0;         /* no text shadow */\n  border-bottom: 0;           /* no border */\n  font-size: 90px;            /* large text size */\n  font-weight: bold;          /* headings are bold */\n}\n</style>\n:::\n\n\nAnd here's how it looks:\n\n![](resources/heading-slide.png){fig-alt=\"The heading slide, which is blue with large white overlaid text reading 'this is a heading slide'.\" width=\"100%\"}\n\nYou use it by specifying `class: heading-slide` in the R Markdown for a {xaringan} slide. You also ass the `middle` class to make the text vertically centred. This will overwrite the default styles to give you the 'heading' slide instead.\n\n#### Tag team\n\nAs well as specifying classes, I've added some additional CSS [tags](https://www.w3schools.com/tags/tag_style.asp) that can be used for some minor text modifications:\n\n\n::: {.cell}\n\n```{.css .cell-code}\n.black { color: #000; }      /* black text for heading slides */\n.bold { font-weight: bold; } /* embolden name on title/end slides */\n```\n\n\n<style type=\"text/css\">\n.black { color: #000; }      /* black text for heading slides */\n.bold { font-weight: bold; } /* embolden name on title/end slides */\n</style>\n:::\n\n\nThese can be used to define different styling for a small part of a slide class. For example, the `.black` tag is intended for use on heading slides so the default white text can be made darker to contrast with light-coloured backgrounds.\n\n![](resources/heading-image-slide.png){fig-alt=\"The image heading slide, which has a background image of some documents with large black overlaid text reading 'this is an image heading slide'.\" width=\"100%\"}\n\n#### Face the font\n\nThe `fonts.css` is much simpler; it just imports and declares fonts. These can be the default system fonts or can be imported from [Google Fonts](https://fonts.google.com/)\n\n![](resources/monospace.png){fig-alt=\"Google Fonts web page showing a line of code rendered in some different monospace fonts so they can be compared.\" width=\"100%\"}\n\nMy organisation uses the proprietary Helvetica for its body type. Fortunately the default system sans-serif is Helvetica on a Mac and the close-enough Arial on Windows machines.\n\nFor the monospace font---used for displaying script---I've chosen Fira Mono, which I think is more readable than the default system monospace.\n\nThe `fonts.css` file starts by importing from [Google Fonts](https://fonts.google.com/) and then describes where they'll be used. The order of dictates which font will be shown first and then which will be next if there's a problem. \n\n\n::: {.cell}\n\n```{.css .cell-code}\n@import url('https://fonts.googleapis.com/css?family=Roboto');\n@import url('https://fonts.googleapis.com/css?family=Fira+Mono');\n\nbody { font-family: sans-serif, 'Roboto'; }\n.remark-code, .remark-inline-code { font-family: 'Fira Mono', monospace; }\n```\n\n\n<style type=\"text/css\">\n@import url('https://fonts.googleapis.com/css?family=Roboto');\n@import url('https://fonts.googleapis.com/css?family=Fira+Mono');\n\nbody { font-family: sans-serif, 'Roboto'; }\n.remark-code, .remark-inline-code { font-family: 'Fira Mono', monospace; }\n</style>\n:::\n\n\nI've written a bit before about [how to access Google Fonts for Blogdown's Lithium theme](https://www.rostrum.blog/2018/11/29/fontface-lithium/).\n\n### Lay down a template {#rmd}\n\nThe style is not the only important part of recreating my organisation's presentations. I also need to create an R Markdown template to demonstrate a restricted set of accepted slide designs. The design philosophy is important to the organisation.\n\nThe template itself is just a pre-filled R Markdown that shows the approved slide types and some example content. For example, the first slide of my organisation's template doesn't actually contain a 'title'. Instead it's an introduction slide that contains the speaker's name, job, affiliation and Twitter handle.\n\nFor example, the user may not know to set `class: title-slide` and add `seal: false` in the YAML to override the creation of a default title slide. This is instead pre-specified for the user in the template:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\noutput:\n  xaringan::moon_reader:\n    css: [\"default\", \"gds.css\", \"gds-fonts.css\"]\n    seal: false\n    lib_dir: libs\n    nature:\n      highlightStyle: github\n      highlightLines: true\n      countIncrementalSlides: false\n---\n\nclass: title-slide, middle\n\n.bold[Firstname Surname]\n\nJob title\n\nGovernment Digital Service\n\n@username\n\n---\n```\n:::\n\n\nThe top half of the code is the YAML that provides metadata for the R Markdown file. Note the reference to the CSS files and `seal: false` as mentioned. \n\nThe bottom half is the pre-filled opening slide with the speaker's details; the user needs only to modify the filler text. Note the use of the `title-slide` class and the `middle` class for vertical alignment. There's also the `.bold[]` tag mentioned earlier in this post.\n\n### Deliver your package {#pkg}\n\nSo how can the CSS and R Markdown template be delivered to people in one bundle? In a package of course.\n\nYou need a specific repo structure to provide your template. This is all explained in the [Document Templates](https://bookdown.org/yihui/rmarkdown/document-templates.html) chapter of the '[R Markdown: a Definitive Guide](https://bookdown.org/yihui/rmarkdown/)' book by [Yihui Xie](https://yihui.name/), [JJ Allaire](https://github.com/jjallaire) and [Garrett Grolemund](https://twitter.com/StatGarrett).\n\nAt the very least, your repo will need to contain the path `inst/rmarkdown/templates/your-theme/skeleton/`, which will typically contain three files:\n\n* `theme.css` for the slide styles\n* `theme-fonts.css` for the font face specifications\n* `skeleton.Rmd` for the template you created\n\nI've also included an `img/` folder to hold stock images I've used in the template, but this isn't strictly necessary.\n\nYou'll also need a `template.yaml` file one level up in `inst/rmarkdown/templates/your-theme/`. This contains information about the template so users know which one they're selecting. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname: \"Organisation X template\"\ndescription: Internal slide style for Organisation X\ncreate_dir: false\n```\n:::\n\n\nA user can now install the package and get access to your styles and template.\n\n### Show the thing\n\nYou've written your code and packaged it, so how do you actually use it?\n\nIf hosted on GitHub, [like my package](https://github.com/matt-dray/gdstheme), you can install it with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"remotes\")\nremotes::install_github(\"matt-dray/gdstheme\")\n```\n:::\n\n\nAfter installation the template will appear in the 'from template' section of the new R Markdown window. Selecting it will open the R Markdown template.\n\n![](resources/new-rmd.png){fig-alt=\"The 'New R Markdown' window with the 'From Template' option selected and 'Slide template for GDS' highlighted in the 'Template' section.\" width=\"60%\" fig-align=\"left\"}\n\nThe CSS files referenced in the YAML are used to render the style provided when you knit the document.\n\n## All hands on deck\n\nMy package is a success if the outputs are reproducible and can fool my colleagues. There's definitely improvements that can be made, but the number of users for this package is very small and it's probably not worth the effort for now. Feel free to [make a pull request](https://github.com/matt-dray/gdstheme) to make it better.\n\nConsider creating your own theme and [submitting it to {xaringan}](https://yihui.name/en/2017/10/xaringan-themes/) so that more possibilities are available out of the box. Also take a look at [Garrick Aden-Buie](https://www.garrickadenbuie.com/)'s helpful [{xaringanthemer}](https://www.garrickadenbuie.com/project/xaringanthemer/) package for a simple way to tweak styles.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-08-01 19:37:45 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2   compiler_4.3.1      fastmap_1.1.1      \n [4] cli_3.6.1           tools_4.3.1         htmltools_0.5.5    \n [7] xaringanExtra_0.7.0 rstudioapi_0.15.0   yaml_2.3.7         \n[10] rmarkdown_2.23      knitr_1.43.1        jsonlite_1.8.7     \n[13] xfun_0.39           digest_0.6.33       rlang_1.1.1        \n[16] evaluate_0.21      \n```\n:::\n:::\n\n</details>\n\n[^remark]: Yihui has [commented on why he loves remark.js](https://yihui.name/en/2017/08/why-xaringan-remark-js/).\n[^howto]: You can learn more about the basics of {xaringan} from [Alison Hill's excellent  slideshow](https://apreshill.github.io/data-vis-labs-2018/slides/06-slides_xaringan.html#1).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/fitvids-2.1.1/fitvids.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}