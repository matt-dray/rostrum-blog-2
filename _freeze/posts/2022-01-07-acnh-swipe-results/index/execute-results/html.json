{
  "hash": "b38bf1b54ce92f177a554587d6bebf7d",
  "result": {
    "markdown": "---\ntitle: The most popular Animal Crossing villagers\ndate: 2022-01-07\nslug: acnh-swipe-results\ncategories:\n  - googlesheets4\n  - r\n  - shiny\n  - shinysense\n  - videogames\n---\n\n\n![](resources/acnh-tinder-shiny.gif){fig-alt=\"Gif showing a blue card on a green background. The card has a picture of a villager from Nintendo's Animal Crossing game with their name, personality type, species and hobby. A mouse cursor swipes the card to the right, meaning 'like', and another card appears with a different character. The card is swiped to the left, meaning 'dislike'.\" width=\"100%\"}\n\n## tl;dr\n\nI once wrote [an R Shiny app](https://mattdray.shinyapps.io/acnh-swipe/) to run a popularity contest for Animal Crossing villagers. Surprise: cute ones are favourites.\n\n## Swiping {shinyswipe} code\n\nA while back I wrote a Shiny app ([site](https://mattdray.shinyapps.io/acnh-swipe/), [source](https://github.com/matt-dray/acnh-swipe), [blogpost](https://www.rostrum.blog/2020/06/06/acnh-swipe/)) for [TidyTuesday](https://github.com/rfordatascience/tidytuesday/tree/2e9bd5a67e09b14d01f616b00f7f7e0931515d24/data/2020/2020-05-05) to replicate a [Tinder](https://en.wikipedia.org/wiki/Tinder_(app))-like experience using villagers from [Nintendo's _Animal Crossing New Horizons_ game](https://en.wikipedia.org/wiki/Animal_Crossing:_New_Horizons). It uses the swipe mechanic from [Nick Strayer's {shinysense} package](http://nickstrayer.me/shinysense/) to gauge popularity: left for a 'dislike', right for a 'like'.\n\nAfter exceeding 3000 total swipes, it's time to take a look at the results.\n\n<div class=\"tip\"> ℹ️ <b>Update</b>\n\nI re-rendered this post in July 2023 when there were about 6000 swipes(!).\n\n<div>\n \n## Oh sheet\n\nData from each swipe in the app is automatically appended to [a public Google Sheets sheet](https://docs.google.com/spreadsheets/d/1kMbmav6XvYqnTO202deyZQh37JeWtTK4ThIXdxGmEbs/) that can be read with {googlesheets4}. Public sheets don't require authentication to download, so run `gs4_deauth()` before `read_sheet()` to prevent it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(googlesheets4)\ngs4_deauth()\n\nraw <- read_sheet(\n  ss = \"1kMbmav6XvYqnTO202deyZQh37JeWtTK4ThIXdxGmEbs\",\n  col_types = \"Tcc\"  # datetime, char, char\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Reading from \"acnh-swipe_results\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Range 'Sheet1'.\n```\n:::\n:::\n\n\nFirst thing is to isolate the left and right swipes only. The {shinysense} package also allows for up and down swipes by default and I wasn't sure how to remove this capability from my app (and was too lazy to work it out).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- raw[raw$swipe %in% c(\"left\", \"right\"), ]\ndat[sample(rownames(dat), 5), ]  # random sample\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  date                name   swipe\n  <dttm>              <chr>  <chr>\n1 2021-06-20 23:46:18 Midge  right\n2 2021-06-20 23:44:39 Tasha  left \n3 2022-12-03 00:10:25 Dizzy  left \n4 2021-05-14 23:01:04 Megan  right\n5 2022-01-20 20:35:13 Rasher left \n```\n:::\n:::\n\n\nThe data are one row per swipe, with columns for `date` (datetime of when the swipe happened), `name` (the villager's name) and `swipe` (the swipe direction). \n\nBut what we're really after is a grouped table with a row per villager, plus new columns for the `total` number of swipes, the `diff`erence between right and left swipes and the percentage of swipes that were to the right (`pc_right`). These will let us better rank the characters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- with(dat, table(name, swipe)) |>  # like dplyr::count()\n  as.data.frame(responseName = \"n\") |>\n  reshape(  # like tidyr::pivot_*()\n    v.names   = \"n\",      # values_from\n    idvar     = \"name\",   # id_cols\n    timevar   = \"swipe\",  # names_from\n    direction = \"wide\",   # i.e. pivot_wider()\n    sep       = \"_\"       # names_sep\n  ) |> \n  transform(  # like dplyr::mutate()\n    total    = n_left + n_right,\n    diff     = n_right - n_left,\n    pc_right = 100 * round(n_right / (n_right + n_left), 2)\n  )\n\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     name n_left n_right total diff pc_right\n1 Admiral     14       4    18  -10       22\n2 Agent S     10       4    14   -6       29\n3   Agnes     14       8    22   -6       36\n4      Al     13       3    16  -10       19\n5 Alfonso      6       7    13    1       54\n6   Alice      8       8    16    0       50\n```\n:::\n:::\n\n\n<details><summary>Click to expand code explanation</summary>\n\nI think most readers of this blog are probably {tidyverse} users, so I'll explain some of the base R approach I took here:\n\n* I've used the base pipe (`|>`) introduced in R v4.1 to chain the functions, which is analogous to {magrittr}'s pipe (`%>%`) in this example\n* `with()` allows the bare column names in `table()` to be evaluated as columns of `dat`, which means you only write the name of the data object once\n* a `table()` coerced with `as.data.frame()` is equivalent to `dplyr::count()`, basically\n* `reshape()` can be used like `tidyr::pivot_wider()` (I've added comments in the code block above to show how the arguments are used)\n* [turns out](https://twitter.com/kearneymw/status/1476538812406788101) that `transform()` can be used like `dplyr::mutate()` to create new columns, thought the help files say it should only be used for interactive and that 'you deserve whatever you get!'\n\n</details>\n\nWe can also bring in [some additional villager data collected for TidyTuesday](https://github.com/rfordatascience/tidytuesday/tree/2e9bd5a67e09b14d01f616b00f7f7e0931515d24/data/2020/2020-05-05) and join it to the swipe data. This will come in useful later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntt <- read.csv(\n  paste0(\n    \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/\",\n    \"2e9bd5a67e09b14d01f616b00f7f7e0931515d24/data/\",\n    \"2020/2020-05-05/villagers.csv\"\n  )\n)\n\ndf <- merge(df, tt, by = \"name\")\n```\n:::\n\n\n## New Horizons scanning\n\nThere are 391 villagers represented in these data, with a combined total of 5950 legitimate swipes.\n\nThe total swipes per villager ranged from 7 to 29, with a mean of 15.2±3.9, so some characters didn't really get enough swipes for proper assessment. You'd better go to the app and add some more swipes, eh?\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"lightgreen\")\nhist(\n  df$total,\n  main = \"Distribution of total swipes per villager\",\n  xlab = \"Total swipes\",\n  col = \"lightblue\",\n  las = 1\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-total-swipes-1.png){fig-alt='Histogram of total swipes per villager. It\\'s roughly normally distributed between 5 and 10 swipes, but slightly left-skewed with a tail going beyond 15 swipes.' width=672}\n:::\n:::\n\n\nWhat if we look now at right swipes (i.e. 'likes'), adjusted for the total swipes per character?\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"lightgreen\")\nhist(\n  df$pc_right,\n  main = \"Distribution of right swipes per villager\",\n  xlab = \"Right swipes (%)\",\n  col = \"lightblue\",\n  las = 1\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-right-swipes-1.png){fig-alt='Histogram of the percentage of right swipes (likes) per villager. Nearly normal, with a slight skew to the left.' width=672}\n:::\n:::\n\n\nYou can see that the distribution isn't quite normal. The frequency of swipes below 50% is 297 and above 50% is 83. This implies that the majority of characters were disliked in a binary sense.\n\nThe bins at 0 and 100% tell you that there were some characters that were met with universal disapproval and approval, while the bin at 50% tells us that same characters split people's opinions. Which were they?\n\n## Drumroll, please\n\nSo, onto the villager rankings.\n\nI've written a little function to output an HTML table where each character's name links to their profile on [the Animal Crossing Wiki](https://animalcrossing.fandom.com/wiki/Animal_Crossing_Wiki) and exposes their photo from [VillagerDB](https://villagerdb.com/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nentable <- function(df) {\n  df$url <- paste0(\n    \"<img src='\", df$url, \"' \",\n    \"width=50 \",\n    \"alt='Animal Crossing villager \", df$name,\"'>\"\n  )\n  df$name <- paste0(\n    \"<a href='https://animalcrossing.fandom.com/wiki/\",\n    df$name, \"'>\", df$name, \"</a>\"\n  )\n  df <- df[, c(\"name\", \"url\", \"pc_right\", \"total\")]\n  names(df) <- c(\"Name\", \"Picture\", \"Right swipes (%)\", \"Total swipes\")\n  rownames(df) <- NULL\n  knitr::kable(df)\n}\n```\n:::\n\n\n### Least popular\n\nTo build tension, we'll start with the least-liked villagers. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbot <- df[order(df$pc_right, -df$n_left), ] |> head()\nentable(bot)\n```\n\n::: {.cell-output-display}\n|Name                                                                   |Picture                                                                                                                         | Right swipes (%)| Total swipes|\n|:----------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------|----------------:|------------:|\n|<a href='https://animalcrossing.fandom.com/wiki/Pinky'>Pinky</a>       |<img src='https://villagerdb.com/images/villagers/thumb/pinky.9d28acc.png' width=50 alt='Animal Crossing villager Pinky'>       |                0|           23|\n|<a href='https://animalcrossing.fandom.com/wiki/Cashmere'>Cashmere</a> |<img src='https://villagerdb.com/images/villagers/thumb/cashmere.3f42544.png' width=50 alt='Animal Crossing villager Cashmere'> |                0|           17|\n|<a href='https://animalcrossing.fandom.com/wiki/Leonardo'>Leonardo</a> |<img src='https://villagerdb.com/images/villagers/thumb/leonardo.c951fa9.png' width=50 alt='Animal Crossing villager Leonardo'> |                0|           16|\n|<a href='https://animalcrossing.fandom.com/wiki/Walt'>Walt</a>         |<img src='https://villagerdb.com/images/villagers/thumb/walt.eed525f.png' width=50 alt='Animal Crossing villager Walt'>         |                0|           16|\n|<a href='https://animalcrossing.fandom.com/wiki/Harry'>Harry</a>       |<img src='https://villagerdb.com/images/villagers/thumb/harry.886f4e0.png' width=50 alt='Animal Crossing villager Harry'>       |                0|           14|\n|<a href='https://animalcrossing.fandom.com/wiki/Benedict'>Benedict</a> |<img src='https://villagerdb.com/images/villagers/thumb/benedict.c5bf6e4.png' width=50 alt='Animal Crossing villager Benedict'> |                0|           13|\n:::\n:::\n\n\nSorry Pinky. You are simply... too pink? Seems harsh.\n\n### Most polarising\n\nTo build even more tension, let's look at the characters who had a 50:50 ratio of likes to dislikes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeh <- subset(df[order(-df$total), ], diff == 0) |> head()\nentable(meh)\n```\n\n::: {.cell-output-display}\n|Name                                                                 |Picture                                                                                                                       | Right swipes (%)| Total swipes|\n|:--------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------|----------------:|------------:|\n|<a href='https://animalcrossing.fandom.com/wiki/Alice'>Alice</a>     |<img src='https://villagerdb.com/images/villagers/thumb/alice.729310b.png' width=50 alt='Animal Crossing villager Alice'>     |               50|           16|\n|<a href='https://animalcrossing.fandom.com/wiki/Hopkins'>Hopkins</a> |<img src='https://villagerdb.com/images/villagers/thumb/hopkins.5cefcea.png' width=50 alt='Animal Crossing villager Hopkins'> |               50|           16|\n|<a href='https://animalcrossing.fandom.com/wiki/Hornsby'>Hornsby</a> |<img src='https://villagerdb.com/images/villagers/thumb/hornsby.fa9963e.png' width=50 alt='Animal Crossing villager Hornsby'> |               50|           16|\n|<a href='https://animalcrossing.fandom.com/wiki/Melba'>Melba</a>     |<img src='https://villagerdb.com/images/villagers/thumb/melba.613e950.png' width=50 alt='Animal Crossing villager Melba'>     |               50|           16|\n|<a href='https://animalcrossing.fandom.com/wiki/Cherry'>Cherry</a>   |<img src='https://villagerdb.com/images/villagers/thumb/cherry.d4d77df.png' width=50 alt='Animal Crossing villager Cherry'>   |               50|           14|\n|<a href='https://animalcrossing.fandom.com/wiki/Goose'>Goose</a>     |<img src='https://villagerdb.com/images/villagers/thumb/goose.2871e8a.png' width=50 alt='Animal Crossing villager Goose'>     |               50|           14|\n:::\n:::\n\n\nI'm not sure why these villagers are so controversial Perhaps they're too 'plain' for some people? \n\n### Most popular\n\nAnd finally, what you've all been waiting for.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop <- df[order(-df$pc_right, -df$n_right), ] |> head()\nentable(top)\n```\n\n::: {.cell-output-display}\n|Name                                                                 |Picture                                                                                                                       | Right swipes (%)| Total swipes|\n|:--------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------|----------------:|------------:|\n|<a href='https://animalcrossing.fandom.com/wiki/Kiki'>Kiki</a>       |<img src='https://villagerdb.com/images/villagers/thumb/kiki.d16a153.png' width=50 alt='Animal Crossing villager Kiki'>       |               89|            9|\n|<a href='https://animalcrossing.fandom.com/wiki/Frobert'>Frobert</a> |<img src='https://villagerdb.com/images/villagers/thumb/frobert.8f7ac2b.png' width=50 alt='Animal Crossing villager Frobert'> |               85|           20|\n|<a href='https://animalcrossing.fandom.com/wiki/Bea'>Bea</a>         |<img src='https://villagerdb.com/images/villagers/thumb/bea.8f6a99c.png' width=50 alt='Animal Crossing villager Bea'>         |               85|           13|\n|<a href='https://animalcrossing.fandom.com/wiki/Zell'>Zell</a>       |<img src='https://villagerdb.com/images/villagers/thumb/zell.c7c193c.png' width=50 alt='Animal Crossing villager Zell'>       |               83|           23|\n|<a href='https://animalcrossing.fandom.com/wiki/Julia'>Julia</a>     |<img src='https://villagerdb.com/images/villagers/thumb/julia.8d164d6.png' width=50 alt='Animal Crossing villager Julia'>     |               82|           17|\n|<a href='https://animalcrossing.fandom.com/wiki/Fauna'>Fauna</a>     |<img src='https://villagerdb.com/images/villagers/thumb/fauna.c2822f0.png' width=50 alt='Animal Crossing villager Fauna'>     |               80|           15|\n:::\n:::\n\n\nSo: Kiki, the grandad-jumper-wearing black-void cat, has the best ratio of right to left-swipes! The rest of the list are pretty conventionally cute (though Zell looks pretty aloof).\n\n## Speciesism!\n\nI know what you're thinking: the results are on a villager-by-villager basis, but which species are the most popular? We can aggregate swipes and take a look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_l <- aggregate(n_left ~ species, sum, data = df)\nsp_r <- aggregate(n_right ~ species, sum, data = df)\nsp_n <- with(df, table(species)) |> \n  as.data.frame(responseName = \"n_villagers\")\n\nsp <- sp_n |> \n  merge(sp_l, by = \"species\") |> \n  merge(sp_r, by = \"species\") |> \n  transform(\n    total = n_right + n_left,\n    pc_right = 100 * round(n_right / (n_right + n_left), 2)\n  )\n```\n:::\n\n\n<details><summary>Click to expand code explanation</summary>\n\nA couple more base functions here for those not used to them: \n\n* `aggregate()` is like `dplyr::group_by()` followed by `dplyr::summarise()` and it allows for compact 'formula syntax', so we can say 'aggregate y by x' with `y ~ x`\n* `merge()` is just like the `dplyr::*_join()` family\n\n</details>\n\nSo, firstly, the species ranked by lowest proportion of right swipes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_bot <- sp[order(sp$pc_right, -sp$n_left), ]\nrownames(sp_bot) <- NULL\nhead(sp_bot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   species n_villagers n_left n_right total pc_right\n1    mouse          15    172      24   196       12\n2    hippo           7     86      19   105       18\n3   monkey           8    110      26   136       19\n4 kangaroo           8    114      29   143       20\n5      pig          15    178      46   224       21\n6     bear          15    172      47   219       21\n```\n:::\n:::\n\n\nI can see how monkeys and hippos might not be that 'cute', per se, but what about [the mice](https://animalcrossing.fandom.com/wiki/Mouse)? Although 'cute' is probably not the best term for [the cranky mouse Limberg](https://animalcrossing.fandom.com/wiki/Limberg) (sorry Limberg).\n\nWhat about the most liked species?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_top <- sp[order(-sp$pc_right, sp$n_right), ]\nrownames(sp_top) <- NULL\nhead(sp_top)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  species n_villagers n_left n_right total pc_right\n1    deer          10     85      96   181       53\n2     dog          16    104     115   219       53\n3 octopus           3     22      24    46       52\n4     cat          23    190     191   381       50\n5 ostrich          10     79      72   151       48\n6     cub          16    133     104   237       44\n```\n:::\n:::\n\n\n[Deer](https://animalcrossing.fandom.com/wiki/Deer) (all-around solid designs) and [dogs](https://animalcrossing.fandom.com/wiki/Dog) (generally friend-shaped) top the table.\n\n[Octopuses are up there too](https://animalcrossing.fandom.com/wiki/Octopus_(villager)), although there's relatively few octopus villagers. Personally, I like [Zucker](https://animalcrossing.fandom.com/wiki/Zucker), an octopus who looks like takoyaki and therefore delicious. \n\nThis wasn't meant to be about villager tastiness, was it? We may need a new app to rank by apparent edibility...\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-02 23:24:17 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] googlesheets4_1.1.1\n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.3       httr_1.4.6        cli_3.6.1         knitr_1.43.1     \n [5] rlang_1.1.1       xfun_0.39         purrr_1.0.1       generics_0.1.3   \n [9] jsonlite_1.8.7    glue_1.6.2        gargle_1.5.1      htmltools_0.5.5  \n[13] fansi_1.0.4       rmarkdown_2.22    cellranger_1.1.0  evaluate_0.21    \n[17] tibble_3.2.1      fastmap_1.1.1     yaml_2.3.7        lifecycle_1.0.3  \n[21] compiler_4.3.1    dplyr_1.1.2       fs_1.6.2          htmlwidgets_1.6.2\n[25] pkgconfig_2.0.3   rstudioapi_0.14   digest_0.6.31     R6_2.5.1         \n[29] tidyselect_1.2.0  utf8_1.2.3        curl_5.0.1        pillar_1.9.0     \n[33] magrittr_2.0.3    tools_4.3.1       googledrive_2.1.1\n```\n:::\n:::\n\n</details>",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}