{
  "hash": "32dfe641ed73add682ece6314374cae1",
  "result": {
    "markdown": "---\ntitle: \"Animate sprites in R with {pixeltrix}\"\ndate: 2022-12-11\nslug: pixeltrix-animate\ncategories:\n  - art\n  - gifski\n  - locator\n  - pixeltrix\n  - r\n  - videogames\n---\n\n::: {.cell}\n\n:::\n\n\n\n![](resources/mario.gif){fig-alt=\"The walk cycle of the Mario sprite from the original Super Mario Bros game\" width=\"32%\"}\n![](resources/mario.gif){width=\"32%\"}\n![](resources/mario.gif){width=\"32%\"}\n\n## tl;dr\n\nI've updated [the {pixeltrix} package](https://github.com/matt-dray/pixeltrix) so you can create animated sprite gifs with a simple, interactive pixel editor from within R's plot window.\n\n## Pix all the right boxes\n\nThe {pixeltrix} package---which I've [written about before](https://www.rostrum.blog/2022/09/24/pixeltrix/)---lets you open an interactive R plot that you can click to turn 'pixels' on and off. \n\nI created it for one purpose: to quickly create simple, blocky sprites for [my {tamRgo} package](https://github.com/matt-dray/tamRgo), which lets you keep a persistent cyberpet on your computer ([yes, really](https://www.rostrum.blog/2022/11/13/tamrgo/)).\n\nBut wouldn't it be nice if {pixeltrix} were more... general? Read on for a couple of improvements to the package that might help.\n\n<div class=\"tip\"> ℹ️ <b>Update</b>\n\nThe package has been updated again since this post. From version 0.2 you:\n\n* can provide colours as input to `click_pixels()` and `frame_pixels()`\n* receive a `colours` attribute with the output matrices, which encodes the state and colour values\n\n</div>\n\n## Pixellate to accumulate\n\nFirst, you can [install the updated package from GitHub](https://github.com/matt-dray/pixeltrix):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"matt-dray/pixeltrix\")  # v0.1.2 in this post\nlibrary(pixeltrix)\n```\n:::\n\n\nNow the improvements: plotting with colour, and creating gif animations.\n\n### 1. Plot\n\nThe `click_pixel()` function opens an interactive plot. If `n_state = 3`, for example, then each pixel will cycle through three states as you keep clicking it. You're returned a matrix of these values when you hit <kbd>Esc</kbd>.\n\nThat was enough for {tamRgo}: I turned a binary matrix into a 1-bit sprite. But wouldn't it be good---fundamental!---to be able to plot the matrix as an image with user-specified colours? So I made `draw_pixels()`.\n\nI've added a three-state matrix, `blue`, into the package as an example dataset. Let's plot it with simple colours:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraw_pixels(\n  m = pixeltrix::blue, \n  colours = c(\"white\", \"#879afb\", \"gray20\")\n)\n```\n:::\n\n\n![](resources/blue_draw.png){fig-alt=\"A 14 by 16 pixel grid with a sprite of the main character from the first generation of Pokemon games for the Game Boy. The background is white, the outlines are dark grey and the highlights are light blue.\" width=\"33%\"}\n\nOf course, it's the subtly-coloured player character from _Pokémon Blue_ (1996) as seen on the Nintendo Game Boy Color.\n\n### 2. Animate\n\nNaturally, you could use `click_pixels()` and `draw_pixels()` to generate several images and combine them as 'frames' of an animation. Why not have a function that does this automatically?\n\nSo that's what I did: \n\n* `frame_pixels()` calls `click_pixels()` and adds the output as the first element of a list, then it passes that matrix into `edit_pixels()` as the template for the next frame (and so on until you choose to stop making frames)\n* `gif_pixels()` takes the list of matrices created by `frame_pixels()` and draws, combines and writes them to a gif\n\nI've prepared `pixeltrix::mario` as an example of an output from `frame_pixels()`. It contains each of three frames that comprise Mario's walk cycle from _Super Mario Bros_ on the NES.\n\nHere's what the console output looked like when I made `mario`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmario <- frame_pixels(\n  n_rows   = 16,\n  n_cols   = 16,\n  n_states = 4  # background + 3 colours\n)\n```\n:::\n\n```\nClick squares in the plot window. Press <Esc> to end.\nAdd a frame? y/n: y\nClick squares in the plot window. Press <Esc> to end.\nCurrent frame count: 2\nAdd a frame? y/n: y\nClick squares in the plot window. Press <Esc> to end.\nCurrent frame count: 3\nAdd a frame? y/n: n\nFinal frame count: 3\n```\n\nYou can see there's interactivity; the user is prompted to add another frame with `Add a frame? y/n:`, where `y` will let you create a new frame and `n` will stop the process and return the list of matrices.\n\nAnd so you can see it's a list of three matrices:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mario)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ : int [1:16, 1:16] 0 0 0 0 0 0 0 0 1 1 ...\n $ : int [1:16, 1:16] 0 0 0 0 0 0 0 0 0 0 ...\n $ : int [1:16, 1:16] 0 0 0 0 0 0 0 0 0 0 ...\n```\n:::\n:::\n\n\nYou can then convert the list to a gif with `gif_pixels()`, which engifs the frames using [{gifski}](https://cloud.r-project.org/web/packages/gifski/index.html).[^engine]\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngif_pixels(\n  frames = mario,\n  colours = c(\n    \"white\",    # background\n    \"#FDA428\",  # skin (yellowish)\n    \"#FC0D1B\",  # overalls/hat (red)\n    \"#A32B2E\"   # hair, eyes, shirt, boots (brown)\n  ),\n  file = \"mario.gif\",\n  delay = 0.15  # passed via dots to gifski::save_gif()\n)\n```\n:::\n\n```\nInserting image 3 at 0.30s (100%)...\nEncoding to gif... done!\n[1] \"mario.gif\"\n```\n\nAnd if we open that file:\n\n![](resources/mario.gif){fig-alt=\"An animated 16 by 16 pixel grid with a coloured sprite of Mario from the original Super Mario Bros for the NES. There are three frames that each show a step in Mario's walk cycle.\" width=\"33%\"}\n\nYahoooooo, created entirely with R. Noice.\n\n### Pix n mix\n\nSo {pixeltrix} finally got a couple of nice-to-have (well, must-have) functions. This is enough for me to continue just messing around with it as a novelty[^aseprite].\n\nI mean, come on: animated pixelart created in an interactive R plot window? Why? I mean, er... wow!\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-06 19:27:01 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] pixeltrix_0.2.1.9000\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^engine]: The {pixeltrix} package has no dependencies and I didn't want to force a user to install {gifski} if they weren't going to use `gif_pixels()`. It's therefore up to the user to install it. [I also wonder](https://github.com/matt-dray/pixeltrix/issues/15) if I should provide an argument for the user to name a 'gif engine' of choice, e.g. {gifski} or {magick}, depending on what they've got installed on their machine.\n[^aseprite]: It's never, ever going to have the features and quality of a premium pixel-art program like [Aseprite](https://www.aseprite.org/), obviously.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}