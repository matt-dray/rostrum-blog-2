{
  "hash": "58c3d23b639b8a80de698770df15ea5e",
  "result": {
    "markdown": "---\ntitle: 'Impress with {keypress} minigames'\ndate: 2022-01-19\nslug: keypress\ncategories:\n  - gamedev\n  - hokey\n  - keypress\n  - r\n  - videogames\n---\n\n::: {.cell}\n\n:::\n\n\n![](resources/foe.png){fig-alt=\"A hand-drawn face of sorts made with curly braces for the face, letter O for the eyes, and an underscore for the mouth. To the right is some Comic Sans Neue text saying 10 HP. This simulates the 'battle' function from the 'hokey' package.\" width=\"100%\"}\n\n## tl;dr\n\n[The {keypress} R package by Gábor Csárdi](https://github.com/gaborcsardi/keypress) records input from a simple keyboard-button press. You can use this to control games, like the ones in [the tiny {hokey} package](https://github.com/matt-dray/hokey).\n\n## Whaddup gameRs?\n\nI've made some silly games in R using [the {R6} package](https://r6.r-lib.org/index.html) for [encapsulated OOP](https://adv-r.hadley.nz/r6.html). For example:\n\n* {ActionSquirrel} a 2D action-adventure game ([blog](the accompanying blog post), [source](https://github.com/matt-dray/ActionSquirrel))\n* {safar6} a text-based recreation of _Pokémon_'s Safari Zone ([blog](https://www.rostrum.blog/2021/01/04/safar6/), [source](https://github.com/matt-dray/safar6))\n* an 'Automatic Bell Dispenser' to mimics the cash machine used in _Animal Crossing: New Horizons_ ([blog](https://www.rostrum.blog/2020/04/04/repaying-tom-nook-with-r6/))\n\nIn {ActionSquirrel} you move a character around a 2D grid. Problem (kinda): to go up you type `x$move(\"up\")`, which means 'apply the `move` method to the previously-initialised R6 object called `x`, and supply to the `where` argument the direction `\"up\"`'. A bit long-winded, eh?\n\nIt would be more natural to provide a single keyboard input to a game scenario, so a left-arrow press moves the player to the left, right? Right.[^right]\n\n## Record inputs\n\nSure, R's `readline()` can take user input, but you would literally have to type <kbd>l</kbd>, <kbd>e</kbd>, <kbd>f</kbd>, <kbd>t</kbd> and <kbd>Enter</kbd>, because the function doesn't recognise key presses directly.\n\nThis is where [Gábor Csárdi's {keypress} package](https://github.com/gaborcsardi/keypress) comes in. It accepts a single button press from the keyboard, including the arrow keys. It's available on CRAN:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"keypress\")\nkey <- keypress::keypress()  # up arrow pressed\nkey\n```\n:::\n\n\n```\n\"up\"\n```\n\n{keypress} works in the terminal but doesn't work everywhere, such as RStudio. Use `keypress::has_keypress_support()` to see if it's supported by the console you're using. See the [package README](https://github.com/gaborcsardi/keypress/blob/x/README.md) for details of the platforms supported and the keys that are accepted as input.\n\n## Minigames\n\nI thought I'd try out with {keypress} with three tiny interactive games, which I've bundled into [a pico package](https://www.rostrum.blog/2021/04/18/pico-pkg/)[^pico] called [{hokey}](https://github.com/matt-dray/hokey). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"matt-dray/hokey\")\n```\n:::\n\n\nEach one takes a keypress input from `keypress::keypress()` to affect the game, which is just a bunch of `if` or `while` statements, basically. You can [see the functions in the {hokey} package itself](https://github.com/matt-dray/hokey/blob/main/R/functions.R), if you're a nerd.[^nerd]\n\nThe games in order of complexity:\n\n1. `type()`, a test of typing skills\n2. `adventure()`, a 2D side-scrollling adventure\n3. `battle()`, a clicker-style monster smasher\n\nThese aren't properly documented ot tested or anything. They're just for demo's sake. \n\nThe rest of this post describes the games with a dash of dry humour.\n\n### 1. Typing test\n\nHow fast you can you type randomly-selected letters?\n\nIn the `type()` game a countdown will begin and then you'll be prompted to type one letter at a time, the total number of which can be controlled with the `n` argument.\n\nHere's what a completed game might look like, where each letter is revealed sequentially after typing the previous one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhokey::type(n = 5)\n```\n:::\n\n\n```\n3... 2... 1... Go!\nPress 'r'! Hit!\nPress 'o'! Hit!\nPress 'f'! Hit!\nPress 'l'! 'h'? Miss!\nPress 'z'! Hit!\nEnd! 4/5 in 5.403 seconds.\n```\nYes, three decimal places in the elapsed time so that people can be more easily ranked on [speedruns.com](https://www.speedrun.com/).\n\n### 2. An adventure\n\nYou've played 2D games (e.g. Mario). You've played 2.5D games (e.g. Mario). You've played 3D games (e.g. Mario).\n\nYou're thinking the future is four-dimensional Mario. But you're wrong.\n\nInstead, `hokey::adventure()` explores the full power of moving along a one-dimensional line.\n\nTake control of the hero. Which is a dot. Move around the overworld. Which is a line. Simulate the lustrous points of Lineland from [Edwin A Abbott's Flatland](https://en.wikipedia.org/wiki/Flatland)!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhokey::adventure(len = 10)\n```\n:::\n\n```\nPress left/right arrow keys\n--.------- \n```\n\nBelow is a demo of what happens if you start the game and travel to the dangerous lands of the west (two left-key presses, resulting in you being bumped back on course), before heading for the utopian kingdom in the east (multiple right-key presses).\n\nThe symbol to the right of the line explains what's happened (`<` is left, `>` is right, `x` is an illegal move, `!` is a win).\n\n```\nPress left/right arrow keys\n--.------- \n-.-------- < \n.--------- x \n-.-------- > \n--.------- > \n---.------ > \n----.----- > \n-----.---- > \n------.--- > \n-------.-- > \n--------.- > \n---------. ! \n```\n\nSuch graphics! Such dimensions!\n\n### 3. A clicker\n\nEver heard of [Cookie Clicker](https://en.wikipedia.org/wiki/Cookie_Clicker)? It's a game where you click. A cookie. A whole bunch of times. Like, seriously, a whole bunch of times. Why? To _win_, of course.\n\nHere instead is a 'presser', where where you tap keys to vanquish randomised foes. Are there upgrades? No. Are there cool sprites? Not really. But do you click a lot? Also no, but you get to _press buttons_ a lot.\n\nSo, initiate a battle with `hokey::battle()` and you're faced with monstrous foes, who have terrifying randomised faces made of letters and symbols.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhokey::battle(n = 3)\n```\n:::\n\n```\nNEW FOE! { O _ O } 10 HP \n```\n\nSmash a key (I recommend <kbd>Enter</kbd> because of its large surface area) to deplete the foe's hit points (HP) until they're defeated. Each hit is printed as a period. \n\n```\nNEW FOE! { O _ O } 10 HP \n..........\nVICTORY! { x _ x }  0 HP\n```\n\nIncrementally more powerful foes will appear!\n\n```\nNEW FOE! | - o - | 20 HP \n....................\nVICTORY! | x o x |  0 HP\n\nNEW FOE! [ ' v ' ] 30 HP \n..............................\nVICTORY! [ x v x ]  0 HP\n```\n\nYou know they're beaten because their eyes become crosses.\n\n## Game over\n\nChallenging. A test of wits. Worth your time.\n\nAll are phrases that do not sum up the games of {hokey}.\n\nBut, for me at least, I've got a better understanding of how {keypress} could be used for  games written in R, a burgeoning field in the world of R programming.[^games]\n\nLet me know how much you enjoyed these games and how much it's going to suck to go back to your cutting-edge Neo Geo or Master System or whatever the kids are playing these days. \n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-02 22:43:15 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] keypress_1.3.0\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^right]: Yeah, left.\n[^nerd]: I'm not going to shame you, but you are 100% a nerd. Why else are you here?\n[^games]: Is it though?\n[^pico]: This means it's built with the absolute bare skeleton for an R package, because it's not intended for 'real' consumption. It's just for experimentation.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}