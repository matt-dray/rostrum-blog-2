{
  "hash": "1480e71c7aa56790eca3e6fe37c65774",
  "result": {
    "markdown": "---\ntitle: Save high scores for your R game\ndate: 2023-07-15\nslug: hiscore\ncategories:\n  - hiscore\n  - r\n  - videogames\n---\n\n::: {.cell}\n\n:::\n\n\n![](resources/hiscore.gif){fig-alt=\"R code run in an RStudio window. The hiscore package is attached and the play_coinflip function is run. The user guesses heads, it's wrong, they score zero, which is the new high score. The user tries again, is reminded that the high score is currently zero and then scores 1. The session is restarted, but the get_save_data function proves that the top score has been saved.\" width=\"100%}\n\n## tl;dr\n\nYou can save your high score in games made with R. See [the package {hiscore}](https://github.com/matt-dray/hiscore) for a demo.\n\n## Boot up\n\nI wrote recently about how [R is a game engine](https://www.rostrum.blog/2023/04/02/splendid-r-games/) and started [a list of games written in R](https://github.com/matt-dray/splendid-r-games).\n\nAll good game engines should let you save a high score, right?\n\nSo I've done exactly this for a tiny concept package called [{hiscore}](https://github.com/matt-dray/hiscore)[^hiscore] that contains a simple game of luck \n\nThe package runs code that saves your high score, which is retained between play sessions.\n\n## Install\n\nYou can install the package [from GitHub](https://github.com/matt-dray/hiscore). It has no dependencies, but you'll need to be running R version 4, at least.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.package(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/hiscore\")\nlibrary(hiscore)\n```\n:::\n\n\nOf course, it's just a concept and I've intentionally kept this as trivial as possible, but you can [leave an issue](https://github.com/matt-dray/hiscore/issues) with bugs or ideas.\n\n## Play\n\nFor demonstration purposes, the inbuilt game is super simple: get the longest streak of correctly guessed coinflips.\n\nTo play, run `play_coinflip()` and type <kbd>H</kbd> or <kbd>T</kbd> and <kbd>Enter</kbd> when prompted. Basically, a coinflip is simulated with `sample(c(\"H\", \"T\"), 1)` and then compared to the user's input, supplied from the console following a `readline()` call.\n\nKeep going until you get it wrong. If you get a new high score, it'll be saved.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplay_coinflip()\n```\n:::\n\n```\n[H]eads or [T]ails? Answer: H\nCorrect! Current score: 1\n[H]eads or [T]ails? Answer: H\nIncorrect! Final score: 1\nNew high score!\nNew high score saved.\n```\n\nYou can retrieve the current high score with `get_save_data()`, which returns a little table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_save_data()\n```\n:::\n\n```\n      game high_score\n1 coinflip          1\n```\n\nOf course, you could also set up the function so that it records different player names too. And you could add additional games that would get their own row in this table.\n\n## Memory\n\nNote that the high score data is retained on your computer even if you restart your session or reboot your machine. How so?\n\nThis is thanks to [the `tools::R_user_dir()` function](https://rdrr.io/r/tools/userdir.html), which was added to R in version 4.0. It builds system-specific paths to 'directories for storing R-related user-specific data, configuration and cache files' where you can save package-related information.\n\n{hiscore} records top scores in this fashion. On my machine, the save location resolves to the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntools::R_user_dir(\"hiscore\", \"data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/mattdray/Library/Application Support/org.R-project.R/R/hiscore\"\n```\n:::\n:::\n\n\nRegular readers may remember that I used `R_user_dir()` in the {tamRgo} package ([blog](https://www.rostrum.blog/2022/11/13/tamrgo/), [source](https://github.com/matt-dray/tamRgo)), which lets you look after a Tamagotchi-style cyber-pet in your console. I used the function to save a pet's 'blueprint' (details such as name, age and hunger level) persistently.\n\n## Retry\n\nNow imagine you want to retry to beat that incredible top score of 1. Since you last played, you probably restarted your session or computer.\n\n```\nRestarting R session...\n```\n\nBut never fear: the high score was retained. You can see that when you run `play_coinflip()` again and are reminded of the current best.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(hiscore)\nplay_coinflip()\n```\n:::\n\n```\nWelcome. Your current high score is 1\n[H]eads or [T]ails? Answer: h\nCorrect! Current score: 1\n[H]eads or [T]ails? Answer: t\nCorrect! Current score: 2\n[H]eads or [T]ails? Answer: h\nIncorrect! Final score: 2\nNew high score!\nNew high score saved.\n```\n\nGreat job, you doubled the previous record!\n\nWhen you get a game over, the `play_coinflip()` function checks the current high score and compares it to the final score for the current play session. The saved data is overwritten if the score is higher.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_save_data()\n```\n:::\n\n```\n      game high_score\n1 coinflip          2\n```\n\nI think it's a good idea to make it easy for people to destroy the stored data if they want, which you can do easily with `delete_save_data()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndelete_save_data()\n```\n:::\n\n```\nReally delete? [Y]es/[N]o: Y\nHigh score data deleted.\n```\n\n## Game over\n\nHow else could this approach be used in an R gaming perspective? You could use this to save a game state, similar to what's done for [{tamRgo}](https://www.rostrum.blog/2022/11/13/tamrgo/). The user could input `S`ave instead of performing a guess, which would record the current status of the game so the user can return later. But that would feel like cheating for a game like coinflip.\n\nSpeaking of, here's a cheatcode as a bonus for reading this far:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheat <- function(game, score) {\n  user_dir <- tools::R_user_dir(\"hiscore\", \"data\")\n  score_path <- file.path(user_dir, \"score_table.rds\")\n  score_table <- readRDS(score_path)\n  score_game <- score_table[score_table[[\"game\"]] == game, ]\n  score_game[[\"high_score\"]] <- score\n  saveRDS(score_table, score_path)\n  message(\"Congrats! You scored \", score, \" at \", game, \"!\")\n}\n\ncheat(\"coinflip\", 1e100)\n```\n:::\n\n```\nCongrats! You scored 1e+100 at coinflip!\n```\n\nHeh heh heh.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-16 11:02:06 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] hiscore_0.0.0.9000\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^hiscore]: As in 'high score' not as in 'his core'.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}