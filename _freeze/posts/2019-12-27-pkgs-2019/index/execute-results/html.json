{
  "hash": "e3c9275fd2c8f477550def15b529d8be",
  "result": {
    "markdown": "---\ntitle: Packages that Sparked Joy in 2019\ndate: 2019-12-27\nslug: pkgs-2019\ncategories:\n  - arsenal\n  - blogdown\n  - drake\n  - govdown\n  - polite\n  - purrr\n  - r\n  - usethis\n  - xaringan\n---\n\n\n![Marie Kondo (Netflix via Giphy).](https://media.giphy.com/media/4ZkiXE2yGFCEA3Sm6V/giphy.gif){fig-alt=\"Marie Kondo putting her hands together and bowing.\" width=\"50%\" fig-align=\"left\"}\n\n## Thank you package-makers\n\nI've used a lot of packages in 2019 and many have brought great joy to my R experience. Thank you to everyone who has created, maintained or contributed to a package this year.\n\nSome particular packages of note for me have been:\n\n* ü§ñ [{usethis}](#usethis) by Hadley Wickham and Jenny Bryan\n* ü¶Ü [{drake}](#drake) by Will Landau\n* üêà [{purrr}](#purrr) by Lionel Henry and Hadley Wickham\n\nAnd some honourable mentions are:\n\n* üìù [{blogdown}](#blogdown) by Yihui Xie\n* ‚öîÔ∏è [{xaringan}](#xaringan) by Yihui Xie\n* üôá [{polite}](#polite) by Dmytro Perepolkin\n* ‚ÜîÔ∏è [{arsenal}](#arsenal) by Ethan Heinzen, Jason Sinnwell, Elizabeth Atkinson, Tina Gunderson and Gregory Dougherty\n\nClick the package name to jump to that section.\n\n## Packages of note\n\n### {usethis}{#usethis}\n\nThe format and content of R packages is objectively odd. What files are necessary? What structure should it have? [The {usethis} package](https://usethis.r-lib.org/) from [RStudio](https://rstudio.com/)'s [Hadley Wickham](http://hadley.nz/) and [Jenny Bryan](https://jennybryan.org/) makes it far easier for newcomers and experienced useRs alike.\n\nIn fact, you can make a minimal package in two lines:\n\n1. `create_package()` to create the necessary package structure\n1. `use_r()` to create in the right place an R script for your functions\n\nBut there's way more functions to help you set up your package. To name a few more that I use regularly:\n\n* `use_vignette()` and `use_readme_md()` for more documentation\n* `use_testthat()` and `use_test()` for setting up tests\n* `use_package()` to add packages to the `Imports` section of the `DESCRIPTION` file\n* `use_data()` and `use_data_raw()` to add data sets to the package and the code used to create them\n* `use_*_license()` to add a license\n\nThere are also other flavours of function like `git_*()` and `pr_*()` to work with version control and `proj_*()` for working with RStudio Projects.\n\nI focused this year on making different types of package. {usethis} made it much easier to develop:\n\n* [{altcheckr}](https://www.rostrum.blog/2019/12/08/altcheckr/) to read and assess [image alt text from web pages](https://www.w3.org/WAI/tutorials/images/)\n* [{oystr}](https://www.rostrum.blog/2019/12/23/oystr/) to handle London travel-history data from an [Oyster card](https://oyster.tfl.gov.uk/oyster/entry.do)\n* [{gdstheme}](https://www.rostrum.blog/2019/05/24/xaringan-template/) to use a [{xaringan}](https://slides.yihui.org/xaringan/) presentation theme and template\n* [{blogsnip}](https://www.rostrum.blog/2019/10/22/blogsnip/) to insert blog-related code snippets via an [RStudio addin](https://rstudio.github.io/rstudioaddins/) (there's even a `use_addin()` function to create the all-important `inst/rstudio/addins.dcf` file)\n\nFor more package-development info, I recommend [Emil Hvitfeldt's {usethis} workflow](https://www.hvitfeldt.me/blog/usethis-workflow-for-package-development/), as well as [Karl Broman's R Package Primer](https://kbroman.org/pkg_primer/) and [Hadley Wickham's R Packages book](http://r-pkgs.had.co.nz/). To help me remember this stuff, [I also wrote some slides about developing a package from scratch](https://www.rostrum.blog/2019/11/01/usethis/) with {usethis} functions.\n\n### {drake}{#drake}\n\nYour analysis has got 12 input data files. They pass through 15 functions There are some computationally-intensive, long-running processes. Plots and tables are produced and R Markdown files are rendered. How do you keep on top of this? Is it enough to have a set of numbered script files (`01_read.R`, etc) or a single script file that sources the rest? What if something changes? Do you have to re-run everything from scratch?\n\nYou need a workflow manager. Save yourself some hassle and use [Will Landau](https://wlandau.github.io/)'s [{drake} package](https://docs.ropensci.org/drake/), backed by [rOpenSci](https://ropensci.org/blog/2018/02/06/drake/)'s peer review process. {drake} 'remembers' all the dependencies between files and only re-runs what needs to be re-run if any errors are found or changes are made. It also provides visualisations of your workflow and allows for high-performance computing.\n\nIn short, you:\n\n1. Supply the steps of your analysis as functions to `drake_plan()`, which generates a data frame of commands (functions) to operate over a set of targets (objects)\n1. Run `make()` on your plan to run the steps and generate the outputs\n1. If required, make changes anywhere in your workflow and re-`make()` the plan -- {drake} will only re-run things that are dependent on what you changed\n\nBelow is an extreme example from [a happy customer](https://twitter.com/FrederikAust/status/1205103780938833921?s=20). Each point on the graph is an object or function; black ones are out of date and will be updated when `make()` is next run.\n\n!['I'm *so* glad {drake} is tracking those dependencies between #rstats computations for me'](resources/aust-drake.jpg){fig-alt=\"A graph of a complicated-looking drake pipeline. There are hundreds of interconnected nodes.\" width=\"100%\"}\n\nIt's hard to do {drake} justice in just a few paragraphs, but luckily it's one of the best-documented packages out there. Take a look at:\n\n* the [{drake} rOpenSci website](https://github.com/ropensci/drake)\n* the [thorough user manual](https://books.ropensci.org/drake/)\n* the [learndrake GitHub repo](https://github.com/wlandau/learndrake), which can be launched in the cloud\n* the [drakeplanner Shiny app](https://wlandau.shinyapps.io/drakeplanner/) \n* Will's [{drake} examples page](https://wlandau.github.io/drake-examples/)\n* this [rOpenSci community call](https://ropensci.org/commcalls/2019-09-24/)\n* a [Journal of Open Source Software (JOSS) paper](https://joss.theoj.org/papers/10.21105/joss.00550)\n* more things listed in [the documentation section of the user manual](https://books.ropensci.org/drake/index.html#documentation)\n\nI [wrote about {drake} earlier in the year](https://ropensci.org/commcalls/2019-09-24/) and [made a demo](https://github.com/matt-dray/drake-egg-rap) and [some slides](https://github.com/matt-dray/drake-egg-rap/blob/master/docs/drake-presentation.pdf). I think it could be useful for reproducibility of statistical publications in particular.\n\n### {purrr}{#purrr}\n\nYou want to apply a function over the elements of some list or vector.\n\nThe `map()` family of functions from [the {purrr} package](https://purrr.tidyverse.org/)--by [Lionel Henry](https://twitter.com/_lionelhenry?lang=en) and [Hadley Wickham](http://hadley.nz/) of [RStudio](https://rstudio.com/)--has a concise and consistent syntax for doing this.\n\nYou can choose what gets returned from your iterations by selecting the appropriate `map_*()` variant: `map()` for a list, `map_df()` for a data frame, `map_chr()` for a character vector and so on. Here's a trivial example that counts the number of [Street Fighter](https://en.wikipedia.org/wiki/Street_Fighter_II:_The_World_Warrior) characters from selected continents. Here's a list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the example list\nstreet_fighter <- list(\n china = \"Chun Li\", japan = c(\"Ryu\", \"E Honda\"),\n usa = c(\"Ken\", \"Guile\", \"Balrog\"), `???` = \"M Bison\"\n)\n\nstreet_fighter  # take a look at the list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$china\n[1] \"Chun Li\"\n\n$japan\n[1] \"Ryu\"     \"E Honda\"\n\n$usa\n[1] \"Ken\"    \"Guile\"  \"Balrog\"\n\n$`???`\n[1] \"M Bison\"\n```\n:::\n:::\n\n\nNow to map the `length()` function to each element of the list and return a named integer vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)  # load the package\n\n# Get the length of each list element\npurrr::map_int(\n  street_fighter,  # list\n  length           # function\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nchina japan   usa   ??? \n    1     2     3     1 \n```\n:::\n:::\n\n\nBut what if you want to iterate over two or more elements? You can use `map2()` or `pmap()`. And what if you want to get the side effects? `walk()` and `pwalk()`.\n\n{purrr} is also great for working with data frames with columns that contain lists (listcols), like the `starwars` data from the {dplyr} package. Let's use the `length()` function again, but in the context of a listcol, to get the characters in the most films.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nsuppressPackageStartupMessages(library(dplyr))\nlibrary(purrr)\n\n# map() a listcol within a mutate() call\nstarwars %>% \n  mutate(films_count = map_int(films, length)) %>% \n  select(name, films, films_count) %>% \n  arrange(desc(films_count)) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 3\n  name           films     films_count\n  <chr>          <list>          <int>\n1 R2-D2          <chr [7]>           7\n2 C-3PO          <chr [6]>           6\n3 Obi-Wan Kenobi <chr [6]>           6\n4 Luke Skywalker <chr [5]>           5\n5 Leia Organa    <chr [5]>           5\n6 Chewbacca      <chr [5]>           5\n```\n:::\n:::\n\n\nWhy not just write a loop or use the `*apply` functions? [Jenny Bryan has a good {purrr} tutorial](https://jennybc.github.io/purrr-tutorial/bk01_base-functions.html) that explains why you might consider either choice. Basically, do what you feel; I like the syntax consistency and the ability to predict what function I need based on its name.\n\nCheck out the excellent [{purrr} cheatsheet](https://github.com/rstudio/cheatsheets/blob/master/purrr.pdf) for some prompts and excellent visual guidance.\n\n## Honourable mentions\n\n### {blogdown}{#blogdown}\n\nThis blog, and I'm sure [many others](https://awesome-blogdown.com/), wouldn't exist without [{blogdown}](https://github.com/rstudio/blogdown/blob/master/README.md) by [Yihui Xie](https://yihui.org/). {blogdown} lets you write and render R Markdown files into blog posts via static site generators like [Hugo](https://gohugo.io/). This is brilliant if you're trying to get R output into a blog post with minimal fuss. [The {blogdown} book](https://bookdown.org/yihui/blogdown/) by Yihui, [Amber Thomas](https://amber.rbind.io/), [Alison Presmanes Hill](https://alison.rbind.io/) is particularly helpful.\n\n### {xaringan}{#xaringan}\n\n[{xaringan}](https://slides.yihui.org/xaringan/#1) is another great package from [Yihui Xie](https://yihui.org/) that lets you turn R Markdown into a slideshow using [remark.js](http://remarkjs.com/). It's very customisable via CSS, to the extent that I was able [to mimic the house style of my organisation](https://www.rostrum.blog/2019/05/24/xaringan-template/) this year. One of my favourite functions[^yolo] is `inf_mr()` (Infinite Moon Reader), which lets you [live-preview your outputs as they're written](https://yihui.org/en/2019/02/ultimate-inf-mr/).\n\n### {polite}{#polite}\n\nWeb scraping is ethically dubious if you fail to respect the terms of the sites you're visiting. [Dmytro Perepolkin](https://www.ddrive.no/) has made it easy to be a good citizen of the internet with [the {polite} package](https://dmi3kno.github.io/polite/), which has just hit version 1.0.0 and is on CRAN (congratulations!). First you introduce yourself to the site with a `bow()` and collect any information about limits and no-go pages from [the robots.txt file](http://www.robotstxt.org/robotstxt.html), then you can modify search paths with a `nod()` and collect information from them with a `scrape()`. Very responsible.\n\n### {arsenal}{#arsenal}\n\nI've been using the handy[^arsenal] {arsenal} package to compare data frames as part of a quality assurance process. First, you supply two data frames to `comparedf()` to create a 'compare' object. Run `diffs()` on that object to create a new data frame where each row is a mismatch, given a tolerance, with columns for the location and values that are causing problems. We managed to quality assure nearly a million values with this method in next to no time. [Check out their vignette](https://cran.r-project.org/web/packages/arsenal/vignettes/comparedf.html) on how to do this.\n\n## Bonus!\n\n### {govdown}\n\nAha, well done for reading this far. As a bonus, I'm calling out [Duncan Garmonsway](https://twitter.com/nacnudus)'s [{govdown} package](https://ukgovdatascience.github.io/govdown/). Duncan grappled with the complexities of things like Pandoc and Lua filters to build a package that applies the accessibility-friendly [GOV.UK design system](https://design-system.service.gov.uk/) to R Markdown. This means you can create things like the [the Reproducible Analaytical Pipelines (RAP) website](https://ukgovdatascience.github.io/rap-website/) in the style of [GOV.UK](https://www.gov.uk/). [Endorsed by Yihui Xie himself](https://twitter.com/nacnudus/status/1186600342072516608)! Check out Duncan's [{tidyxl} and {unpivotr} packages for handling nightmare Excel files](https://nacnudus.github.io/spreadsheet-munging-strategies/) while you're at it.\n\n### Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-23 10:49:06 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2 purrr_1.0.1\n\nloaded via a namespace (and not attached):\n [1] digest_0.6.33     utf8_1.2.3        R6_2.5.1          fastmap_1.1.1    \n [5] tidyselect_1.2.0  xfun_0.39         magrittr_2.0.3    glue_1.6.2       \n [9] tibble_3.2.1      knitr_1.43.1      pkgconfig_2.0.3   htmltools_0.5.5  \n[13] generics_0.1.3    rmarkdown_2.23    lifecycle_1.0.3   cli_3.6.1        \n[17] fansi_1.0.4       vctrs_0.6.3       withr_2.5.0       compiler_4.3.1   \n[21] rstudioapi_0.15.0 tools_4.3.1       pillar_1.9.0      evaluate_0.21    \n[25] yaml_2.3.7        rlang_1.1.1       jsonlite_1.8.7    htmlwidgets_1.6.2\n```\n:::\n:::\n\n</details>\n\n[^yolo]: Along with [`yolo: true`](https://yihui.org/en/2019/03/yolo-karl/), of course.\n[^arsenal]: [Unlike Arsenal FC in 2019](https://www.bbc.co.uk/sport/cricket/50803748), rofl.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}