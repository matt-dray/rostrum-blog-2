{
  "hash": "2e333b9a3fa362bc06ad541fbc258229",
  "result": {
    "markdown": "---\ntitle: \"Adding a Shiny app to {dehex}\"\ndate: 2021-08-27\nslug: dehex-app\ncategories:\n  - dataviz\n  - dehex\n  - r\n  - shiny\n---\n\n\n![Use the {dehex} app to generate a random hex code and learn how to interpret it by eye.](resources/app-screenshot-v0.1.2.png){fig-alt=\"Screenshot of the dehex Shiny app. A randomised colour hex code has been generated in the left panel after clicking a big button labelled 'generate' and the right-hand side shows a numbered tabset open at the final, sixth, tab called 'solve', which shows the name of the colour and a sample of it.\" width=\"100%\"}\n\n## tl;dr\n\n[The {dehex} package](https://github.com/matt-dray/dehex) now contains a Shiny app that you can use to walk through the process of reading a colour hex code, as per [David DeSandro's method](https://metafizzy.co/blog/read-color-hex-codes/).\n\n## {dehex}cellent\n\nIn [the last post](https://www.rostrum.blog/2021/08/10/dehex/) I introduced [the R package {dehex}](https://github.com/matt-dray/dehex). Its purpose is to help me (you?) look at a colour hex code and be able to 'read' roughly what colour it is without resorting to a lookup.\n\n![I promise this is [a hex sticker](resources/dehex_hex.png), but it's background is white, whoops.](resources/dehex-logo.png){fig-alt=\"A hexagon-shaped logo with the text 'dehex' in the lower right and a bar chart with a single red, green and blue bar that originates in the top left.\" width=\"20%\"}\n\nSo, the computer-friendly code '#C68738' can be interpreted by your brain as the human-friendly phrase 'middle washed orange'.\n\nThe package only exists because of [a mind-melting talk by David DeSandro](https://metafizzy.co/blog/read-color-hex-codes/) and his recommendation of the approach due to his colourblindness. I'm also colourblind and would prefer to 'solve' a colour than try and guess what it is from a sample.\n\n## An apportunity\n\nThe {dehex} package uses a number of functions to help you through the steps of DeSandro's method. It prints things to the R console to help you.[^browser]\n\nThere's `dh_shorten()` to simplify the code to three digits; `dh_graph()` to make an RGB chart of your shortened hex code; `dh_guide()` to preview hue, saturation and lightness profiles to match against your shortened hex code; and `dh_solve()` to provide you with 'the answer', along with RGB charts for the nearest hue, saturation and lightness (HSL) profiles.\n\n![An RGB bar chart printed by {dehex} to the console, with guides for hue, saturation and lightness.](resources/graph-crayon-dark.png){fig-alt=\"Output from the dehex package's dh_graph function, which shows a horizontal bar chart in the RStudio console with a dark theme. The columns are labelled R, G, B, S and L and the ends of the RGB columns are labelled H1, H2 and H3. The RGB bars are coloured red, blue and green; S and L are white. Above the plot is the three-digit colour hex code that graph is summarising.\" width=\"50%\"}\n\nThe trouble is that you have to know what order to run these functions. The documentation, README and blog post provide this information, as well as DeSandro's resources, but it would be ideal to have an option to showcase {dehex} and learn stuff without needing to type any functions yourself.\n\nSo, I've created a simple Shiny app and made it available as the `dh_app()` function in {dehex}.[^hadley] I consider it 'in development' (this absolves me of liability if I say this, yes?).\n\nThe app depends on two packages: {shiny} and {bslib}. You'll have to install these separately to {dehex} by using `install.packages(c(\"shiny\", \"bslib\"))` (if you haven't already installed them on your machine). \n\nThese aren't dependencies[^suggests] because you shouldn't be forced to install them if you have no plans on using the app.[^bslib]\n\nAside: what's fun is I get to make further use of [the Shiny app README badge I invented (?)](https://www.rostrum.blog/2021/03/23/shiny-badge/) with [my {badgr} package](https://github.com/matt-dray/badgr), like so:\n\n![](https://img.shields.io/badge/Shiny-in_package-blue?style=flat&labelColor=white&logo=RStudio&logoColor=blue){fig-alt=\"A badge that says 'shiny' on the left half and 'in package' on the right half.\" fig-align=\"left\"}\n\n## lolwat?\n\nThe app is pretty simple. \n\nThere's a big blue button labelled 'Generate'. Click it and a random six-digit colour hex code is generated.\n\n!['That is the question.'](resources/2bee2b.png){fig-alt=\"A screenshot from the dehex Shiny app. The 'generate' button has been clicked to reveal the colour hex code 2BEE2B.\" width=\"50%\"}\n\nYour then proceed through the numbered tabs to learn about each step, get some quick bullets of explanation, and then have the option to reveal help via some outputs from functions in the {dehex} package. There's also a link to the relevant slide of David DeSandro's talk.\n\nAs a beginner, you'll want to reveal the tips to get maximum help. As you get better, you may not need to reveal them anymore.\n\nThe final tab provides the solution. You should have the answer by the time you get to this tab, but it reveals to you the hue, saturation and lightness RGB profiles that best match the generated hex code, along with the answer as a string, and a sample of the colour itself.\n\nThe app is purposefully low on interactivity. It's just a little sidequest that bundles the steps and relevant {dehex} functions, in case you don't want to run the functions from R itself.[^hundred]\n\nOriginally I was going to just create an app to go on the web for anyone to use, but why would they want to see outputs from {dehex}? I also think that it's worth reading DeSandro's blog and watching or reading his talk in the first instance.\n\nAs ever, send suggestions, issues and pull requests in [the GitHub repo for the package](https://github.com/matt-dray/dehex).\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-08 19:08:45 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^bslib]: Using {bslib} is a bit lazy on my part because it makes it really easy to customise the style of a Shiny app, while forcing the user to have to install yet another package. This is not the tinyverse way, so I may refactor one day.\n[^suggests]: In other words, they're listed as `Imports` rather than `Suggests` in the DESCRIPTION file.\n[^hadley]: You can read about how to do this in [Hadley Wickham's 'Mastering Shiny' book](https://mastering-shiny.org/scaling-packaging.html). \n[^browser]: Yes, but the quality of printing Unicode blocks in the app depends on what browser you're using to view it. On macOS, Firefox seems fine. Other browsers don't line up the little Unicode blocks nicely when outputting from `dh_graph()`. Ah well.\n[^hundred]: The 'thought-of-a-thing-and-then-did-it-sort-of' approach is very befitting of this blog and very apt given this is post number 100. ðŸŽˆ\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}