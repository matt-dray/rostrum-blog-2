{
  "hash": "2c907c595fa72cec4edea1ca65114729",
  "result": {
    "markdown": "---\ntitle: Simple procedural dungeons in R\ndate: 2022-05-01\nslug: dungeon\ncategories:\n  - gamedev\n  - r\n  - r.oguelike\n  - videogames\nfilters:\n  - \"webr\"\n---\n\n\n\n\n![Three iterations to expand four randomly-placed floor tiles into a cavern.](resources/r.oguelike-generate.gif){fig-alt=\"Gif showing the steps to generate an ASCII-character tiled dungeon in R. First, a map is created with four randomly-placed floor tiles, then they're connected with corridors, then the tiles around the floor tiles are converted from wall to floor tiles, randomly, for three iterations.\" width=\"100%\"}\n\n## tl;dr\n\nI wrote a (very!) basic procedure to generate randomised ASCII-character tile-based dungeons for [{r.oguelike}](https://matt-dray.github.io/r.oguelike/), an in-development roguelike-game-in-a-package for R.\n\n<div class=\"tip\"> \n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nIn 2024 it's possible to [put editable R code into this blog post](https://www.rostrum.blog/posts/2024-01-20-webr-remote/) thanks to [WebR](https://docs.r-wasm.org/webr/latest/). So here's the function that creates procedural dungeons. Hit the 'run code' button several times to generate a fresh cavern. Adjust the parameters and see what effect it has. Unfortunately this won't print in colour.\n\n```{webr-r}\n#| context: setup\nwebr::install(\"r.oguelike\", repos = \"https://matt-dray.r-universe.dev\")\nwebr::install(\"crayon\")\n```\n```{webr-r}\n#| label: generate-dungeon\nr.oguelike::generate_dungeon(\n  iterations = 4,\n  n_row = 25,\n  n_col = 40,\n  n_rooms = 5,\n  is_snake = FALSE,\n  is_organic = TRUE\n)\n```\n\n</div>\n\n## Generate to accumulate\n\n[I wrote recently](https://www.rostrum.blog/2022/04/25/r.oguelike-dev/) about [the {r.oguelike} R package](https://matt-dray.github.io/r.oguelike/), which contains the beginnings of [a roguelike game](https://en.wikipedia.org/wiki/Roguelike) written entirely in R.\n\n![](resources/r.oguelike-hex.png){fig-alt=\"Hex sticker design for the 'r.oguelike' R package. Black background with bright green font, reminiscent of old computer terminal output. In the centre, a three-by-ten arrangement of hashmarks and periods, along with a single at symbol and dollar sign, which looks like a classic ACII tile-based roguelike game. The text 'r.oguelike' is underneath.\" width=\"25%\"}\n\nA key element of roguelike games is that [the dungeons should be procedurally generated](http://www.roguebasin.com/index.php/Berlin_Interpretation)[^procedural] so that the player gets a different one each time they play.\n\nThere are many algorithmic systems for dungeon creation, like wave function collapse, perlin noise, binary space partitioning, cellular automata, etc.[^bands] See [the talk by Herbert Wolverson at Roguelike Celebration](https://www.youtube.com/watch?v=TlLIOgWYVpI), for example.\n\nI plan to take a look at these approaches in future, but I wanted to start with something a bit more... _na√Øve_. I just want a simple interconnected space that spawns with randomised rooms, corridors and galleries.\n\n## Excavations\n\n<div class=\"tip\"> `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nThe {r.oguelike} package is a work in progress and is developing at pace. Many things explained below may have been superseded or changed by the time you read this.\n\n</div>\n\n### Install/launch\n\nYou can [install the (currently work-in-progress) {r.oguelike} package from GitHub](https://github.com/matt-dray/r.oguelike), via {remotes}.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\")  # if not already installed\nremotes::install_github(\"matt-dray/r.oguelike\")\n```\n:::\n\n\nYou can also launch RStudio in the browser with {r.oguelike} preinstalled, [thanks to Binder](https://mybinder.org/)[^launch] (may take a couple of minutes to load):\n\n[![](https://mybinder.org/badge_logo.svg){fig-alt=\"A button to launch a Binder instance that says 'launch binder' on it.\" fig-align=\"left\"}](https://mybinder.org/v2/gh/matt-dray/play-r.oguelike/main?urlpath=rstudio)\n\n### Prepare\n\nBefore we begin, note that we can talk about generative 'dungeons' in the context of connected rooms, like in [_The Binding of Isaac_](https://en.wikipedia.org/wiki/The_Binding_of_Isaac_(video_game)), or more freeform structures, like world maps in [_Dwarf Fortress_](https://en.wikipedia.org/wiki/Dwarf_Fortress). We're going for the latter, which amounts to interconnected caverns.\n\nThe function we'll be using is called `generate_dungeon()`, which prints to the console a cavern that differs each time you run it.[^export] You can alter the output using the arguments:\n\n* `iterations` is the number of times to 'grow' the caverns\n* `n_row` and `n_col` give the map dimensions\n* `n_rooms` is the number of rooms to spawn\n* `is_snake` for a cavern that is continuous from left to right and wiggly\n* `is_organic` for a more freeform vs 'square' look to the caverns\n* `colour` to print the output in colour\n\nYou can always run `set.seed()` before `generate_dungeon()` to create the same dungeon every time you run the function with the same parameters.\n\n### Demo\n\nSo here's a smallish dungeon with 3 growth iterations for 4 starting rooms, on a map with tile dimensions of 20 rows by 30 columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndungeon <- r.oguelike::generate_dungeon(3, 20, 30, 4)\n```\n:::\n\n\nHere's a screenshot of the output so you can see it in colour.\n\n![](resources/dungeon.png){fig-alt=\"A tile-based map made of ASCII. Red hashmarks for cave walls. Black periods for cavern-floor tiles. Yellow hyphens and pipes for the boundary of the map. The cavern has a number of interconnected tunnels and some short dead-ends.\" width=\"100%\"}\n\n<details><summary>Click for the actual console output.</summary>\n```\n| - - - - - - - - - - - - - - - - - - - - - - - - - - - - | \n| # # # # # # . # # # # # # # # # # # # # # # # # # # # # | \n| # # . # . . . . # # # # # . # # # # # # # # # # # # # # | \n| # . . . . # . . # # # . . . . # # # # # # # # # # # # # | \n| # . . . . . . . . . . . . . . . # # # # # # # # # # # # | \n| . . . # . . # . . # # . . . . . # # # # # # # # # # # # | \n| . . . . # # # . # # # # # . . # # # # # # # # # # # # # | \n| . . # # # # # # # # # # # . # # # # # # # # # # # # # # | \n| . . . . # # # # # # # # . . . # # # # # # # # # # # # # | \n| . . . . # # # # # # # # # . . # # # # # # # # # # # # # | \n| . . . # # # # # # # . # . . . # # # # # # # # # # # # # | \n| . . . # # # # # # . . . . . . . # # # # # # # # # # # # | \n| . . . # # . . # . . # . . . . . . . . . # . . . # # # # | \n| . . . . . . . . . . . . . . . . . . . . . . . . # # # # | \n| . . # # . . . # . # . . . # . . . # # . . # . . # # # # | \n| # # # # . . . # . # # # # # . # . # # # # . . . # # # # | \n| # # # # # # # # # # # # # # # # # # # # . . . . # # # # | \n| # # # # # # # # # # # # # # # # # # # # . . . # # # # # | \n| # # # # # # # # # # # # # # # # # # # # # # . # # # # # | \n| - - - - - - - - - - - - - - - - - - - - - - - - - - - - | \n```\n</details>\n\nSo, in this example you can see we have a little cavern with some interconnected areas and a dead-end in the lower right. The tiles represent:\n\n* cavern-floor tiles (black periods), which is where the character can traverse\n* cave wall tiles (red hashmarks, which can't be passed through)\n* a boundary around the edge (yellow hyphens and pipe symbols)\n\nNote that the actual output from the function---a matrix that represents the dungeon tiles---is returned invisibly.\n\n<details><summary>Click for a preview of the returned matrix.</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\n# Preview first 10 rows and columns\ndungeon[1:10, 1:10]\n```\n:::\n\n```\n[,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n[1,] \"|\"  \"-\"  \"-\"  \"-\"  \"-\"  \"-\"  \"-\"  \"-\"  \"-\"  \"-\"  \n[2,] \"|\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \".\"  \"#\"  \"#\"  \n[3,] \"|\"  \"#\"  \"#\"  \".\"  \"#\"  \".\"  \".\"  \".\"  \".\"  \"#\"  \n[4,] \"|\"  \"#\"  \".\"  \".\"  \".\"  \".\"  \"#\"  \".\"  \".\"  \"#\"  \n[5,] \"|\"  \"#\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \".\"  \n[6,] \"|\"  \".\"  \".\"  \".\"  \"#\"  \".\"  \".\"  \"#\"  \".\"  \".\"  \n[7,] \"|\"  \".\"  \".\"  \".\"  \".\"  \"#\"  \"#\"  \"#\"  \".\"  \"#\"  \n[8,] \"|\"  \".\"  \".\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \n[9,] \"|\"  \".\"  \".\"  \".\"  \".\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \n[10,] \"|\"  \".\"  \".\"  \".\"  \".\"  \"#\"  \"#\"  \"#\"  \"#\"  \"#\"  \n```\n</detail>\n\n### More examples\n\nI think this process works best with a larger map grid (i.e. higher `n_row` and `n_col` values), more randomly-selected room start-points (higher `n_rooms`) and more growth steps (higher `iterations`).\n\nHere's a larger maze-like dungeon:\n\n![](resources/dungeon-maze.png){fig-alt=\"A dungeonlike map made from ASCII characters. Cave tiles are marked with a period and are black. Rock wall tiles are marked with red hashmarks. The outer boundary wall is made of yellow hyphens and pipe symbols. The corridors snake around, but are fully connected. There are some dead ends.\" width=\"100%\"}\n\nThis one came out more like a doughnut, with a central 'pillar' of rock-wall tiles:\n\n![](resources/dungeon-donut.png){fig-alt=\"A dungeonlike map made from ASCII characters. Cave tiles are marked with a period and are black. Rock wall tiles are marked with red hashmarks. The outer boundary wall is made of yellow hyphens and pipe symbols. The cave is a big circle, connected around a single, central mass of rock.\" width=\"100%\"}\n\nAnd this one is the result of using `is_snake = TRUE`, which creates a single, long snaking cavern:\n\n![](resources/dungeon-snake.png){fig-alt=\"A dungeonlike map made from ASCII characters. Cave tiles are marked with a period and are black. Rock wall tiles are marked with red hashmarks. The outer boundary wall is made of yellow hyphens and pipe symbols. The corridor is a single snaking corridor from left to write, wiggling from top to bottom.\" width=\"100%\"}\n\nHere's what happens if we set `is_organic = FALSE` and `is_snake = TRUE`. You get much obvious 'rooms' connected by small corridors:\n\n![](resources/dungeon-rooms.png){fig-alt=\"A dungeonlike map made from ASCII characters. Cave tiles are marked with a period and are black. Rock wall tiles are marked with red hashmarks. Four small, discrete rooms made of floor tiles are connected from left-to-right with corridors that are a single tile wide.\" width=\"100%\"}\n\nAnd if we set `is_organic = FALSE` and `is_snake = FALSE` we get something interconnected, but looks more 'artificial' or manmade with its mostly square walls:\n\n![](resources/dungeon-artificial.png){fig-alt=\"A dungeonlike map made from ASCII characters. Cave tiles are marked with a period and are black. Rock wall tiles are marked with red hashmarks. There are many straight-line corridors of different widths, which looks less organic and cavelike and more man-made.\" width=\"100%\"}\n\nYou can see how the shape of these dungeons can be used as part of the storytelling. Is the player in a big cavern, hollowed out long ago by natural processes? Or perhaps in an underground city, chiselled-out by dwarves?\n\n## Proceed the procedure\n\nWhat's the actual process for generating these maps? The procedure is very simple: lay a map made entirely of wall tiles; select random sites for rooms[^rooms] and replace with floor tiles; connect them with floor-tile corridors; expand the floor tiles generatively.\n\nThe corridors are particularly important. Laying corridors is a cheap way of making all areas of the dungeon accessible, which maximises the opportunity for exploration. Vanilla implementations of some other approaches, like using perlin noise, would need post-processing to make sure isolated caves are connected up.\n\n<div class=\"tip\"> `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nAfter publishing this post, I had a quick play around with [perlin noise](https://en.wikipedia.org/wiki/Perlin_noise) for seeding dungeons. I put code and an example output [in a small GitHub Gist](https://gist.github.com/matt-dray/fd5bf4b6560638e154353e4ec5c8b98a). It [uses `noise_perlin()` from the {ambient} package](https://ambient.data-imaginist.com/reference/noise_perlin.html).\n\n</div>\n\n### Functions\n\nThese steps are handled in [the `generate_dungeon()` function](https://github.com/matt-dray/r.oguelike/blob/main/R/dungeon.R) by a few [sub-functions](https://github.com/matt-dray/r.oguelike/blob/main/R/dungeon-utils.R), which looks a bit like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- .create_dungeon(n_row, n_col, n_rooms)\n\nm <- .connect_dungeon(m, is_snake)\n\ni <- 0\n\nwhile (i < iterations) {\n  m <- .grow_dungeon(m)\n  i <- i + 1\n}\n\n.draw_dungeon(m, colour)\n```\n:::\n\n\nNot much right? But what's actually happening?\n\n1. First, `.create_dungeon()`:\n    - prepares a matrix with dimensions `n_row` and `n_col`\n    - fills the matrix with tiles that represent non-traversable rocky cave walls (`#`)\n    - selects randomly an `n_rooms` number of non-edge tiles in that map and replaces them with traversable cavern-floor tiles (`.`)\n2. Then `.connect_dungeon()` (this function is run now if `is_organic = TRUE`, otherwise after `.grow_dungeon()` in the next step):\n    - connects rooms with straight, right-angled corridors made of floor tiles (connected from lowest to highest if `is_snake = TRUE`, otherwise randomly)\n3. Now the iterative bit, `.grow_dungeon()`, which happens in a while-loop whose `iterations` are determined, which:\n    - spawns randomly with `sample()` a new cavern-floor tile to the north, south, east or west or current floor tiles\n    - performs one round of spawning for the number of `iterations` provided\n4. Finally, `.draw_dungeon()`:\n    - prints to the console, using `cat()`, each line of the matrix in turn\n    - colours the output with [the {crayon} package](https://github.com/r-lib/crayon), if requested\n\nAnd we can look at the output at each step to see what's going on:\n\n![](resources/r.oguelike-generate.gif){fig-alt=\"Gif showing the steps to generate an ASCII-character tiled dungeon in R. First, a map is created with four randomly-placed floor tiles, then they're connected with corridors, then the tiles around the floor tiles are converted from wall to floor tiles, randomly, for three iterations.\" width=\"100%\"}\n\nSo, the map started with four randomly-selected floor tiles; these were joined with straight, right-angled corridors; then three iterations expanded out the floor space from the existing floor tiles.\n\n### Sampling\n\nWhat does it mean to 'expand out the floor space'? Let's focus on the little bit of the `.grow_dungeon()` function that actually does this.\n\nHere's a tiny example matrix of wall tiles with a floor tile in the middle:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(\"#\", 3, 3)  # wall tiles\nm[2, 2] <- \".\"  # floor tiles\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,] \"#\"  \"#\"  \"#\" \n[2,] \"#\"  \".\"  \"#\" \n[3,] \"#\"  \"#\"  \"#\" \n```\n:::\n:::\n\n\nNow we find the adjacent tiles and sample a random number of them to also become floor tiles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_tile <- which(m == \".\")\n\nadjacent_tiles <- c(\n  start_tile - 1,        # north\n  start_tile + 1,        # south\n  start_tile - ncol(m),  # east \n  start_tile + ncol(m)   # west \n)\n\nchange_to_floor <- sample(\n  adjacent_tiles,\n  sample(1:length(adjacent_tiles), 1)\n)\n\nm[change_to_floor] <- \".\"\n\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,] \"#\"  \"#\"  \"#\" \n[2,] \".\"  \".\"  \"#\" \n[3,] \"#\"  \".\"  \"#\" \n```\n:::\n:::\n\n\nSo one, two, three, or all of the adjacent tiles could be turned to a floor tile. \n\nThis is then repeated for the number of `iterations` provided by the user.\n\n## Going deeper\n\nSo! I encourage you to play with this. Mess around with the arguments and see what you can come up with.\n\nWhat now for developing the package? Well, the {r.oguelike} package already has [the rudiments of gameplay in the `start_game()` function](https://www.rostrum.blog/2022/04/25/r.oguelike-dev/), so the next step is to place the player, enemies and items into these dungeon spaces and let the player explore them.\n\nIdeally we can also create a system to place certain objects in certain spaces, like treasure in the far reaches of a dead-end, or a monster that's in a narrow corridor and must be defeated to advance. Stuff like locked doors would be great too.\n\nThat's much more roguelike-like, like, amirite?\n\n<div class=\"tip\"> `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nJust after writing this post, I added code from `generate_dungeon()` into `start_game()`, so new games will now start with a procedural dungeon.\n\n</div>\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2024-07-14 20:34:20 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.4.0 (2024-04-24)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] r.oguelike_0.1.0\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.3.9000   \n [5] tools_4.4.0       htmltools_0.5.8.1 rstudioapi_0.16.0 yaml_2.3.8       \n [9] rmarkdown_2.26    knitr_1.46        jsonlite_1.8.8    xfun_0.43        \n[13] digest_0.6.35     rlang_1.1.4.9000  fontawesome_0.5.2 evaluate_0.23    \n```\n:::\n:::\n\n</details>\n\n[^bands]: Definitely one of these should be the name for your new band.\n[^procedural]: I'm not a computer scientist, but Wikipedia says 'procedural' involves 'creating data algorithmically as opposed to manually, typically through a combination of human-generated assets and algorithms coupled with computer-generated randomness and processing power'. The page [specifically points out roguelikes](https://en.wikipedia.org/wiki/Procedural_generation#Video_games) as having these properties, so I assume what I've done can be described as 'procedural'?\n[^export]: In future, this function will be integrated into the `start_game()` function, but I may still export it so people (i.e. me) can use it for fun.\n[^rooms]: Akshually, it's not just a case of choosing a random set of four points within the length of the matrix. The 1D matrix is split `n_rooms` times and we sample from within each of those chunks. This, hopefully, should keep the dungeons relatively-well spread out.\n[^launch]: There's no such thing as a free _launch_, unless it's with Binder (why have I not thought of this incredible wordplay before and how much should I charge the Binder team for its use?).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}