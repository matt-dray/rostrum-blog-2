{
  "hash": "a1ca0cf9d91407f028cbcea8cdf0f320",
  "result": {
    "markdown": "---\ntitle: Make a {brickr} soccer player\ndate: 2019-05-31\nslug: brickr-soccer\ncategories:\n  - brickr\n  - dataviz\n  - r\n  - sports\n---\n\n\n\n\n## tl;dr \n\nYou can create 3D Lego models with [{brickr}](https://github.com/ryantimpe/brickr). I made some models of soccer players.\n\n## Virtual Lego\n\n[{brickr}](https://github.com/ryantimpe/brickr) is a fun package by [Ryan Timpe](http://www.ryantimpe.com/) that lets you build 2D mosaics and 3D models with Lego-like virtual bricks,[^timpe] with a little help from [Tyler Morgan Wall](https://www.tylermw.com/)'s [{rayshader}](https://github.com/tylermorganwall/rayshader) package.\n\nYou can get started with the [brickr toybox](https://github.com/ryantimpe/brickr_toybox), which lets you arrange bricks in a spreadsheet that {brickr} can turn into a 3D model.\n\n![From Ryan's [original tweet](https://twitter.com/ryantimpe/status/1116042824657641474?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1116042824657641474%7Ctwgr%5E368635df2dac383ab9cd082ca6295947c25a096a%7Ctwcon%5Es1_&ref_url=https%3A%2F%2Fwww.rostrum.blog%2F2019%2F05%2F31%2Fbrickr-soccer%2F).](resources/toybox.jpg){fig-alt=\"A mocked-up box cover for a Lego set called 'brickr starter kit'. Text reads 'Excel template for designing models in R with brickr' and 'lay out the models in the spreadsheet and import into R using brickr.' The side panel says '4 sets, 2 templates, 1 how-to, infinite bricks'.\" width=\"100%\"}\n\n## Kick-off\n\nFirst, we install {brickr} from GitHub.[^cran]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"ryantimpe/brickr\")\n```\n:::\n\n\nAnd attach it along with some tidyverse packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\n  library(brickr)\n  library(dplyr)\n  library(tibble)\n})\n```\n:::\n\n\nI've written a function called `create_brickr_player()` that lets you build a soccer player and select the brick colours for the shirt, socks, and much more. It lets you create the same model but change the brick colours with minimum fuss.\n\nThe function is simple. It helps you create a data frame that specifies the location and colour of individual bricks on successive 2D planes to build up a 3D model.\n\nThis data frame is a plan that can be interpreted by {brickr} and transformed into a special list that can be rendered in 3D space.\n\n<details><summary>Click for the function definition.</summary>\n\nNote that the arguments must all be numeric codes as per `brickr::lego_colors()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_brickr_player <- function(\n  hair_col = 34,\n  skin_col = 5,\n  boot_col = 6,\n  shirt_body_col = 3,\n  shirt_sleeve_col = 1,\n  shorts_col = 1,\n  sock_col = 3,\n  sock_trim_col = 1\n){\n\n  tibble::tribble(\n\n    ~\"Level\", ~`1`, ~`2`, ~`3`, ~`4`, ~`5`,\n\n    \"A\", 0, 0, 0, 0, 0,\n    \"A\", 0, boot_col, 0, boot_col, 0,\n    \"A\", 0, boot_col, 0, boot_col,0,\n\n    \"B\", 0, 0, 0, 0, 0,\n    \"B\", 0, sock_col, 0, sock_col, 0,\n    \"B\", 0, 0, 0, 0, 0,\n\n    \"C\", 0, 0, 0, 0, 0,\n    \"C\", 0, sock_trim_col, 0, sock_trim_col, 0,\n    \"C\", 0, 0, 0, 0, 0,\n\n    \"D\", 0, 0, 0, 0, 0,\n    \"D\", 0, skin_col, 0, skin_col, 0,\n    \"D\", 0, 0, 0, 0, 0,\n\n    \"E\", 0, shorts_col, 0, shorts_col, 0,\n    \"E\", 0, shorts_col, 0, shorts_col, 0,\n    \"E\", 0, shorts_col, 0, shorts_col, 0,\n\n    \"F\", 0, shorts_col, shorts_col, shorts_col, 0,\n    \"F\", 0, shorts_col, shorts_col, shorts_col, 0,\n    \"F\", 0, shorts_col, shorts_col, shorts_col, 0,\n\n    \"G\", 0, shirt_body_col, shirt_body_col, shirt_body_col, 0,\n    \"G\", skin_col, shirt_body_col, shirt_body_col, shirt_body_col, skin_col,\n    \"G\", 0, shirt_body_col, shirt_body_col, shirt_body_col, 0,\n\n    \"H\", 0, shirt_body_col, shirt_body_col, shirt_body_col, 0,\n    \"H\", skin_col, shirt_body_col, shirt_body_col, shirt_body_col, skin_col,\n    \"H\", 0, shirt_body_col, shirt_body_col, shirt_body_col, 0,\n\n    \"I\", 0, shirt_body_col, shirt_body_col, shirt_body_col, 0,\n    \"I\", skin_col, shirt_body_col, shirt_body_col, shirt_body_col, skin_col,\n    \"I\", 0, shirt_body_col, shirt_body_col, shirt_body_col, 0,\n\n    \"J\", 0, shirt_body_col, shirt_body_col, shirt_body_col, 0,\n    \"J\", shirt_sleeve_col, shirt_body_col, shirt_body_col, shirt_body_col, shirt_sleeve_col,\n    \"J\", 0, shirt_body_col, shirt_body_col, shirt_body_col, 0,\n\n    \"K\", 0, shirt_body_col, shirt_body_col, shirt_body_col, 0,\n    \"K\", shirt_sleeve_col, shirt_sleeve_col, shirt_body_col, shirt_sleeve_col, shirt_sleeve_col,\n    \"K\", 0, shirt_body_col, shirt_body_col, shirt_body_col, 0,\n\n    \"L\", 0, 0, 0, 0, 0,\n    \"L\", 0, 0, skin_col, 0, 0,\n    \"L\", 0, 0, 0, 0, 0,\n\n    \"M\", 0, skin_col, skin_col, skin_col, 0,\n    \"M\", 0, skin_col, skin_col, skin_col, 0,\n    \"M\", 0, skin_col, skin_col, skin_col, 0,\n\n    \"N\", 0, hair_col, hair_col, hair_col, 0,\n    \"N\", 0, hair_col, skin_col, hair_col, 0,\n    \"N\", 0, skin_col, skin_col, skin_col, 0,\n\n    \"O\", 0, hair_col, hair_col, hair_col, 0,\n    \"O\", 0, hair_col, hair_col, hair_col, 0,\n    \"O\", 0, hair_col, hair_col, hair_col, 0\n  )\n\n}\n```\n:::\n\n</details>\n\nHere's what happens when you use the function with default arguments. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplayer_plan <- create_brickr_player()\nplayer_plan  # preview the object\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 45 × 6\n   Level   `1`   `2`   `3`   `4`   `5`\n   <chr> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 A         0     0     0     0     0\n 2 A         0     6     0     6     0\n 3 A         0     6     0     6     0\n 4 B         0     0     0     0     0\n 5 B         0     3     0     3     0\n 6 B         0     0     0     0     0\n 7 C         0     0     0     0     0\n 8 C         0     1     0     1     0\n 9 C         0     0     0     0     0\n10 D         0     0     0     0     0\n# ℹ 35 more rows\n```\n:::\n:::\n\n\nEach layer of bricks gets a separate value in the `Level` column. The x-dimension is represented by the rows of the data frame and the y-dimension by the numbered columns.\n\nEvery non-zero number represents a brick and each value represents a different colour. For example, layer A has dimensions of 3 x 5 where 4 spots will be filled with a brick. Each of these has the value '2', which encodes the colour black. Layer B, meanwhile, has a couple of bricks with value '7', which is bright red.\n\nHow do you know which numbers encode which colours? You can access the codes from the `lego_colors` data frame in the {brickr} package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(lego_colors, brickrID, Color, hex)  # colour codes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 54 × 3\n   brickrID Color             hex    \n      <int> <chr>             <chr>  \n 1        1 White             #F4F4F4\n 2        2 Brick yellow      #CCB98D\n 3        3 Bright red        #B40000\n 4        4 Bright blue       #1E5AA8\n 5        5 Bright yellow     #FAC80A\n 6        6 Black             #1B2A34\n 7        7 Dark green        #00852B\n 8        8 Reddish brown     #5F3109\n 9        9 Medium stone grey #969696\n10       10 Dark stone grey   #646464\n# ℹ 44 more rows\n```\n:::\n:::\n\n\n<details><summary>Click for full brick colour codes.</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\nlego_colors %>% \n  mutate(\n    hex = cell_spec(\n      hex, \n      \"html\", \n      background = factor(brickrID, lego_colors$brickrID, lego_colors$hex)\n    )\n  ) %>% \n  select(`Colour ID` = brickrID, Colour = Color, `Hex code` = hex) %>% \n  kable(format = \"html\", escape = FALSE) %>%\n  kable_styling(\"striped\", full_width = TRUE)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> Colour ID </th>\n   <th style=\"text-align:left;\"> Colour </th>\n   <th style=\"text-align:left;\"> Hex code </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> White </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #F4F4F4 !important;\">#F4F4F4</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:left;\"> Brick yellow </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #CCB98D !important;\">#CCB98D</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:left;\"> Bright red </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #B40000 !important;\">#B40000</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:left;\"> Bright blue </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #1E5AA8 !important;\">#1E5AA8</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:left;\"> Bright yellow </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #FAC80A !important;\">#FAC80A</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:left;\"> Black </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #1B2A34 !important;\">#1B2A34</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 7 </td>\n   <td style=\"text-align:left;\"> Dark green </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #00852B !important;\">#00852B</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:left;\"> Reddish brown </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #5F3109 !important;\">#5F3109</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:left;\"> Medium stone grey </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #969696 !important;\">#969696</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:left;\"> Dark stone grey </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #646464 !important;\">#646464</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 11 </td>\n   <td style=\"text-align:left;\"> Nougat </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #BB805A !important;\">#BB805A</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:left;\"> Bright green </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #58AB41 !important;\">#58AB41</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 13 </td>\n   <td style=\"text-align:left;\"> Medium blue </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #7396C8 !important;\">#7396C8</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 14 </td>\n   <td style=\"text-align:left;\"> Bright orange </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #D67923 !important;\">#D67923</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:left;\"> Br. yellowish green </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #A5CA18 !important;\">#A5CA18</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 16 </td>\n   <td style=\"text-align:left;\"> Earth blue </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #19325A !important;\">#19325A</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 17 </td>\n   <td style=\"text-align:left;\"> Earth green </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #00451A !important;\">#00451A</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 18 </td>\n   <td style=\"text-align:left;\"> Dark red </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #720012 !important;\">#720012</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 19 </td>\n   <td style=\"text-align:left;\"> Bright purple </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #C8509B !important;\">#C8509B</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20 </td>\n   <td style=\"text-align:left;\"> Light purple </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #FF9ECD !important;\">#FF9ECD</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 21 </td>\n   <td style=\"text-align:left;\"> Medium azur </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #68C3E2 !important;\">#68C3E2</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 22 </td>\n   <td style=\"text-align:left;\"> Medium lavender </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #9A76AE !important;\">#9A76AE</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 23 </td>\n   <td style=\"text-align:left;\"> Dark orange </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #91501C !important;\">#91501C</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:left;\"> Bright bluish green </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #009894 !important;\">#009894</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 25 </td>\n   <td style=\"text-align:left;\"> Bright reddish violet </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #901F76 !important;\">#901F76</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:left;\"> Sand blue </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #70819A !important;\">#70819A</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 27 </td>\n   <td style=\"text-align:left;\"> Sand yellow </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #897D62 !important;\">#897D62</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 28 </td>\n   <td style=\"text-align:left;\"> Sand green </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #708E7C !important;\">#708E7C</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 29 </td>\n   <td style=\"text-align:left;\"> Flame yellowish orange </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #FCAC00 !important;\">#FCAC00</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 30 </td>\n   <td style=\"text-align:left;\"> Light royal blue </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #9DC3F7 !important;\">#9DC3F7</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 31 </td>\n   <td style=\"text-align:left;\"> Cool yellow </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #FFEC6C !important;\">#FFEC6C</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 32 </td>\n   <td style=\"text-align:left;\"> Medium lilac </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #441A91 !important;\">#441A91</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 33 </td>\n   <td style=\"text-align:left;\"> Light nougat </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #E1BEA1 !important;\">#E1BEA1</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 34 </td>\n   <td style=\"text-align:left;\"> Dark brown </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #352100 !important;\">#352100</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 35 </td>\n   <td style=\"text-align:left;\"> Medium nougat </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #AA7D55 !important;\">#AA7D55</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 36 </td>\n   <td style=\"text-align:left;\"> Dark azur </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #469BC3 !important;\">#469BC3</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 37 </td>\n   <td style=\"text-align:left;\"> Aqua </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #D3F2EA !important;\">#D3F2EA</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 38 </td>\n   <td style=\"text-align:left;\"> Lavender </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #CDA4DE !important;\">#CDA4DE</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 39 </td>\n   <td style=\"text-align:left;\"> Spring yellowish green </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #E2F99A !important;\">#E2F99A</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 40 </td>\n   <td style=\"text-align:left;\"> Olive green </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #8B844F !important;\">#8B844F</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 41 </td>\n   <td style=\"text-align:left;\"> Vibrant coral </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #F06D78 !important;\">#F06D78</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 42 </td>\n   <td style=\"text-align:left;\"> Transparent </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #EEEEEE !important;\">#EEEEEE</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 43 </td>\n   <td style=\"text-align:left;\"> Tr. red </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #B80000 !important;\">#B80000</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 44 </td>\n   <td style=\"text-align:left;\"> Tr. light blue </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #ADDDED !important;\">#ADDDED</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 45 </td>\n   <td style=\"text-align:left;\"> Tr. blue </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #0085B8 !important;\">#0085B8</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:left;\"> Tr. yellow </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #FFE622 !important;\">#FFE622</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 47 </td>\n   <td style=\"text-align:left;\"> Tr. green </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #73B464 !important;\">#73B464</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 48 </td>\n   <td style=\"text-align:left;\"> Tr. fl green </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #FAF15B !important;\">#FAF15B</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 49 </td>\n   <td style=\"text-align:left;\"> Tr. brown </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #BBB29E !important;\">#BBB29E</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 50 </td>\n   <td style=\"text-align:left;\"> Tr. bright orange </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #E18D0A !important;\">#E18D0A</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 51 </td>\n   <td style=\"text-align:left;\"> Tr. fl red orange </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #CB4E29 !important;\">#CB4E29</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 52 </td>\n   <td style=\"text-align:left;\"> Tr. medium violet </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #FD8ECF !important;\">#FD8ECF</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 53 </td>\n   <td style=\"text-align:left;\"> Tr. bright violet </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #6F7AB8 !important;\">#6F7AB8</span> </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 54 </td>\n   <td style=\"text-align:left;\"> Tr. bright green </td>\n   <td style=\"text-align:left;\"> <span style=\"     border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: #AFD246 !important;\">#AFD246</span> </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n</details>\n\nSo '1' is white, '2' is black and so on. I think Timpe selected this set of colours to match the colours available from Lego sets. \n\n### Boring, boring Arsenal\n\nTo actually build the model, pass the data frame to a couple of {brickr} functions.\n\nThe first is `bricks_from_table()` that converts the data frame to a list containing several elements that define the required bricks and colours. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert plan to list with brick types and colours\nplayer_bricks <- player_plan %>%\n  bricks_from_table()\n\nnames(player_bricks)  # see the element names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Img_lego\"      \"brickr_object\" \"Img_bricks\"    \"ID_bricks\"    \n[5] \"pieces\"        \"use_bricks\"   \n```\n:::\n:::\n\n\nAs a side note, you can use `display_pieces()` to find out the set of pieces you'll need to recreate the model in real life!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuild_pieces(player_bricks)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/display-pieces-1.png){width=672}\n:::\n:::\n\n\nPass the list object to the `display_bricks()` function to get the plan rendered into 3D. This opens a new device window and the model will be built up layer by layer. When complete, you can use your mouse to click and drag the object to look at at from all directions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuild_bricks(player_bricks)  # opens separate window\n```\n:::\n\n\n<img src=\"resources/arsenal.gif\" alt=\"A gif of a 3D Lego model of an Arsenal soccer player built with the create_bricker_player function.\">\n\nSo the default set builds up to make a player that has red socks with white trim, white shorts, and a red shirt with white sleeves. An Arsenal player, of course.[^arsenal]\n\n### Show your support\n\nTo change the colour of the player's shirt you just need to change all the bricks associated with the shirt. This could be tedious by hand, so `create_brickr_player()` has an argument to do exactly this. Set `shirt_body_col` to '6' to make it bright blue, for example.\n\nYou can change more than the shirt colour. Here's the current set of arguments:\n\n* `shirt_body_col` and `shirt_sleeve_col`\n* `shorts_col`\n* `sock_col` and `sock_trim_col`\n* `boot_col`\n* `hair_col` and `skin_col`\n\nSo you could create a Manchester City player with the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build player plan with certain colours\nman_city <- create_brickr_player(\n  hair_col = 6,           # Black\n  skin_col = 34,          # Dark brown\n  boot_col = 3,           # Bright red\n  shirt_body_col = 30,    # Light royal blue\n  shirt_sleeve_col = 30,  # Light royal blue\n  shorts_col = 1,         # White\n  sock_col = 16,          # Earth blue\n  sock_trim_col = 16      # Earth blue\n)\n\n# Convert plan to list and render it\nman_city %>%\n  bricks_from_table() %>%\n  display_bricks()\n```\n:::\n\n\n<img src=\"resources/raheem.gif\" alt=\"A gif of a 3D Lego model of a Manchester City soccer player built with the create_bricker_player function.\">\n\nIn fact, this is a faithful rendering of the 2019 Premier League winner, FA Cup winner, League Cup winner, PFA Team of the Year inductee, PFA Young Player of the Year and FWA Footballer of the Year [Raheem Sterling](https://en.wikipedia.org/wiki/Raheem_Sterling). Obviously.\n\nI've added a couple more to [a GitHub Gist](https://gist.github.com/matt-dray/b075e1f2cb5da93a656b6e6e70990c44). Feel free to add more.\n\n## Extra-time\n\nHopefully this is useful for anyone who wants to create the same {brickr} model in multiple colours. I realise that might be a niche audience.\n\nThe obvious next step would be to allow for features of the plan to change. For example, you could set an argument for `player_height` and add or remove layers from the plan to make the final model taller or shorter. Or maybe different shirt types could be specified, like `horizontal_stripe = TRUE`.\n\nPull requests always welcome!\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-08-01 18:53:57 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] tibble_3.2.1     dplyr_1.1.2      brickr_0.3.5     kableExtra_1.3.4\n[5] knitr_1.43.1    \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.3      jsonlite_1.8.7    compiler_4.3.1    webshot_0.5.5    \n [5] tidyselect_1.2.0  xml2_1.3.5        stringr_1.5.0     tidyr_1.3.0      \n [9] systemfonts_1.0.4 scales_1.2.1      yaml_2.3.7        fastmap_1.1.1    \n[13] ggplot2_3.4.2     R6_2.5.1          labeling_0.4.2    generics_0.1.3   \n[17] htmlwidgets_1.6.2 munsell_0.5.0     svglite_2.1.1     pillar_1.9.0     \n[21] rlang_1.1.1       utf8_1.2.3        stringi_1.7.12    xfun_0.39        \n[25] viridisLite_0.4.2 cli_3.6.1         withr_2.5.0       magrittr_2.0.3   \n[29] grid_4.3.1        digest_0.6.33     rvest_1.0.3       rstudioapi_0.15.0\n[33] lifecycle_1.0.3   vctrs_0.6.3       evaluate_0.21     glue_1.6.2       \n[37] farver_2.1.1      fansi_1.0.4       colorspace_2.1-0  rmarkdown_2.23   \n[41] purrr_1.0.1       httr_1.4.6        tools_4.3.1       pkgconfig_2.0.3  \n[45] htmltools_0.5.5  \n```\n:::\n:::\n\n</details>\n\n[^timpe]: Not an official product (yet).\n[^arsenal]: Why Arsenal? Mostly to demonstrate that sleeves can be a different colour to the shirt body, but also because [they just got binned 4-1 by Chelsea in the Europa League final](https://en.wikipedia.org/wiki/2019_UEFA_Europa_League_Final) and I feel sorry for them. \n[^cran]: The package was on CRAN when this post was originally written, but it was later removed.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}