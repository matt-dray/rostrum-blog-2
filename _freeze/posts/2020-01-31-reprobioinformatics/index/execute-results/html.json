{
  "hash": "7679bf4dfcff76fb414a1b3e4ea5d68f",
  "result": {
    "markdown": "---\ntitle: '{orderly} and {drake} at Bioinformatics London'\ndate: 2020-01-31\nslug: reprobioinformatics\ncategories:\n  - bioinformatics\n  - drake\n  - orderly\n  - r\n  - remake\n  - reproducibility\n  - xaringan\n---\n\n\n![REPRODUCIBILITY 4 LYFE (via Bioinformatics London's Meetup page).](resources/bioinformatics.jpg){fig-alt=\"Advertisement graphic for Bioinformatics London advertising the event about reproducibility.\" width=\"100%\"}\n\n## tl;dr\n\nI spoke at the latest Bioinformatics London Meetup ([event link](https://www.eventbrite.com/e/efficient-rstats-workflows-with-the-drake-and-orderly-packages-tickets-88917343167#), [Twitter](https://twitter.com/bioinfoLDN)) about workflow reproducibility tools in R. I explained the benefits of [Will Landau](https://wlandau.github.io/)'s [{drake}](https://docs.ropensci.org/drake/) package for doing this.\n\n## Order, order\n\n[Rich FitzJohn](https://richfitz.github.io/) opened proceedings with an excellent introduction to his [{orderly} package](https://vimc.github.io/orderly/) ([source](https://github.com/vimc/orderly)) that is intended for 'lightweight reproducible reporting'.\n\nIn short, the user declares inputs (anything, including things like SQL queries and CSV files) and artefacts (results) of their analysis. {orderly} loads what is declared, evaluates and runs what is necessary, and verifies that the declared artefacts are made. A bunch of metadata is stored alongside the analysis that can be used later to determine the source of any dependency changes.\n\nI followed up with the basics of {drake}. My slides are in the following section.\n\nWe were also lucky to have a celebrity guest on the line: the creator of {drake}, [Will Landau](https://wlandau.github.io/), who said some words about the package's development and took questions. Will was also able to extend gratitude to Rich for having developed [{remake}](https://github.com/richfitz/remake), a workflow manager for R that was a precursor to the development of {drake}.\n\n## Slides\n\nYou can [open the slides in a dedicated tab](https://matt-dray.github.io/drake-bioinformatics/#1) (press P for presenter notes)  or [see the source](https://github.com/matt-dray/drake-bioinformatics). The slides introduce the idea of a workflow manager to improve reproducibility and how {drake} can fill that gap.\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"shareagain\" style=\"min-width:300px;margin:1em auto;\" data-exeternal=\"1\">\n<iframe src=\"https://matt-dray.github.io/drake-bioinformatics\" width=\"400\" height=\"300\" style=\"border:2px solid currentColor;\" loading=\"lazy\" allowfullscreen></iframe>\n<script>fitvids('.shareagain', {players: 'iframe'});</script>\n</div>\n```\n:::\n:::\n\n\nThe second half of the presentation contains a small and simple demonstration of {drake} in action using R's excellent built-in [beaver-temperature datasets](https://stat.ethz.ch/R-manual/R-patched/library/datasets/html/beavers.html).\n\nBonus reproducibility: the {drake} analysis takes place in the slides themselves and is recreated from scratch when they're regenerated. This is made possible by [{xaringan}](https://slides.yihui.org/xaringan/#1), [Yihui Xie](https://yihui.org/)'s package for reproducible presentations.\n\nI also created a single file containing [the code that was run in the slides](https://github.com/matt-dray/drake-bioinformatics/blob/master/drake-beavers-workflow.R). \n\n<details><summary>Click for the {drake} code.</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reproducible workflows with {drake}\n# Bioinformatics London Meetup, 2020-01-30\n# This is a script file containing the code from the talk slides\n# Source: github.com/matt-dray/drakebioinformatics\n# Slides available here: matt-dray.github.io/drake-bioinformatics/\n\n# Packages ----------------------------------------------------------------\n\n# All available from CRAN with install.packages()\nlibrary(drake)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(rphylopic)  # get CC0 organism graphics\n\n# Functions ---------------------------------------------------------------\n\n# Simple beaver plot\nb_plot <- function(data, image) {\n  ggplot(data, aes(id, temp)) +\n    geom_boxplot() +\n    labs(title = \"Beaver temperature\") +\n    add_phylopic(image)\n}\n\n# Simple beaver summary table\nb_table <- function(data) {\n  beavers_trim <- data %>% \n    group_by(id) %>% \n    summarise(\n      mean = mean(temp), sd = sd(temp),\n      min = min(temp, max = max(temp))\n      ) %>% ungroup()\n  return(beavers_trim)\n}\n\n# Plan --------------------------------------------------------------------\n\n# Wrap analysis steps in drake_plan()\n\nplan <- drake_plan(\n  \n  # 1. Wrangle data\n  \n  b1 = mutate(beaver1, id = \"A\"),  # built-in dataset\n  b2 = mutate(beaver2, id = \"B\"),  # built-in dataset\n  beavers = bind_rows(b1, b2),\n  \n  # 1. Get phylopic image\n  \n  uid = \"be8670c2-a5bd-4b44-88e8-92f8b0c7f4c6\",\n  png = image_data(uid, size = \"512\")[[1]],\n  \n  # 3. Generate outputs\n  # The .Rmd is avaiable from github.com/matt-dray/drake-bioinformatics\n  \n  plot = b_plot(beavers, png),\n  table = b_table(beavers),\n  report = rmarkdown::render(\n    knitr_in(\"beavers-report.Rmd\"),  # note knitr_in()\n    output_file = file_out(\"beaver-report.html\"),  # note file_out()\n    quiet = TRUE\n  )\n  \n)\n\n# Make --------------------------------------------------------------------\n\ndrake::make(plan)  # executes the analysis steps in the plan\n\n# Inspection --------------------------------------------------------------\n\n# Get cached objects\ncached()  # check what's in the cache\nreadd()  # return an object from the cache\n\n# Create network graph\nconfig <- drake_config(plan)  # make a configuration file for the plan\nvis_drake_graph(config)  # build an interactive network graph using the config\n\n# Make changes ------------------------------------------------------------\n\n# Let's say something in your workflow changed. What is now out of date?\n\noutdated()  # prints the targets that are out of date\n\nvis_drake_graph(config)  # rebuild grpah to see impacted targets coloured black\n\ndrake::make(plan)  # re-make the plan!\n```\n:::\n\n\n</details>\n\n## Related\n\nI don't shut up about reproducibility in R. That's why I've coined the word 'reproducevangelism'. Here's a couple of related posts:\n\n* [Reproducibility in R: three things](https://www.rostrum.blog/2020/01/22/repro-three-things/)\n* [Can {drake} RAP?](https://www.rostrum.blog/2019/07/23/can-drake-rap/)\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-22 16:20:16 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2   compiler_4.3.1      fastmap_1.1.1      \n [4] cli_3.6.1           tools_4.3.1         htmltools_0.5.5    \n [7] xaringanExtra_0.7.0 rstudioapi_0.15.0   yaml_2.3.7         \n[10] rmarkdown_2.23      knitr_1.43.1        jsonlite_1.8.7     \n[13] xfun_0.39           digest_0.6.33       rlang_1.1.1        \n[16] evaluate_0.21      \n```\n:::\n:::\n\n</details>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/fitvids-2.1.1/fitvids.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}