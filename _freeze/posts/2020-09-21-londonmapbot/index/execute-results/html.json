{
  "hash": "41958de96b72d6e4e3bad9c2f4b411e5",
  "result": {
    "markdown": "---\ntitle: A Twitter bot with {rtweet} and GitHub Actions\ndate: 2020-09-21\nslug: londonmapbot\ncategories:\n  - api\n  - github-actions\n  - londonmapbot\n  - mapbox\n  - r\n  - rtweet\n  - twitter\n---\n\n\n\n<div class=\"figure\">\n<img src=\"resources/londonmapbot-profile.png\" alt=\"The Twitter profile page for londonmapbot, showing satellite images of the city.\" width=\"100%\"/>\n</div>\n\n## tl;dr\n\nI made [\\@londonmapbot](https://www.twitter.com/londonmapbot): a simple Twitter bot that uses the R package {rtweet}, GitHub Actions and the Mapbox API. Find [the source on Github](https://github.com/matt-dray/londonmapbot).\n\n<div class=\"tip\">\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nTwitter changed its API terms in 2023. As a result, you probably can't re-run the code in this blog. [Read about](https://www.rostrum.blog/2023/02/09/londonmapbotstodon/) how I moved londonmapbot to Mastodon at [botsin.space/@londonmapbot](https://botsin.space/@londonmapbot) because of these changes.\n</div>\n\n## London from (socially-distant) space\n\nI've wanted to make a Twitter bot for a while, but it seemed like Hard Work. Spoiler: it's not.\n\nSo, I've made [\\@londonmapbot](https://www.twitter.com/londonmapbot): a completely unsophisticated proof-of-concept Twitter bot. \n\nWhat does it do? It posts a satellite image from random coordinates in Greater London (well, from a bounding box roughly within the M25 motorway) on schedule. Below is an example image from [an existing \\@londonmapbot tweet](https://twitter.com/londonmapbot/status/1309199157530431489?s=20). Can you guess where it is?[^clue]\n\n![](resources/mystery-location.jpg){fig-alt=\"A satellite image of part of London, showing what looks like a large number of tennis courts, including some in stadia.\" width=\"NA\"}\n\nThe code for this runs remotely. You can set it up, let it run and never think about it again.\n\nSo how does it work? A scheduled GitHub Action runs R code to generate random latitude and longitude values, which are sent to the [Mapbox API](https://docs.mapbox.com/api/maps/#static-images) to retrieve a satellite picture. The image is then posted via [the Twitter API](https://developer.twitter.com/en/docs) that is accessed using the [{rtweet}](https://docs.ropensci.org/rtweet/) package. A link to the coordinates on OpenStreetMap is also included so you can find out exactly where the image is from.\n\nThe main purpose was to learn more about GitHub Actions, building on [my previous posts about using actions for continuous integration](https://www.rostrum.blog/2020/08/09/ghactions-pkgs/), but I think incidentally that the tweets are quite pleasing to look at and to guess where they are.\n\n## The components\n\nThe [source code](https://github.com/matt-dray/londonmapbot) is quite simple. There's two files, basically:\n\n* [a single YAML file](https://github.com/matt-dray/londonmapbot) containing the action[^action]\n* [a single R script](https://github.com/matt-dray/londonmapbot/blob/master/londonmapbot-tweet.R) that generates the tweet and posts it\n\nLet's look at the GitHub Actions code in the YAML file and the use of {rtweet} and Mapbox in the R file.\n\n### GitHub Actions\n\n[GitHub Actions](https://docs.github.com/en/actions) is a platform for automating workflows remotely. In short, you write a small YAML file in the `.github/workflows/` subfolder of your repo, which contains instructions for the code you want to run and when to run it.[^market] I've written before about [using GitHub Actions for continuous integration of R packages](https://www.rostrum.blog/2020/08/09/ghactions-pkgs/), for example.\n\nAn action can be triggered by an event, like a `git push` to your repo. You can also schedule it with a [cron job](https://simple.wikipedia.org/wiki/Cron), to run every hour, once a day, or whatever.\n\nHere's what [the YAML file](https://github.com/matt-dray/londonmapbot/blob/master/.github/workflows/londonmapbot.yml) looks like for the londonmapbot action:\n\n```\nname: londonmapbot\n\non:\n  schedule:\n    - cron: '0,30 * * * *'\n\njobs:\n  londonmapbot-post:\n    runs-on: macOS-latest\n    env:\n      TWITTER_CONSUMER_API_KEY: ${{ secrets.TWITTER_CONSUMER_API_KEY }}\n      TWITTER_CONSUMER_API_SECRET: ${{ secrets.TWITTER_CONSUMER_API_SECRET }}\n      TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}\n      TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}\n      MAPBOX_PUBLIC_ACCESS_TOKEN: ${{ secrets.MAPBOX_PUBLIC_ACCESS_TOKEN }}\n    steps:\n      - uses: actions/checkout@v2\n      - uses: r-lib/actions/setup-r@master\n      - name: Install rtweet package\n        run: Rscript -e 'install.packages(\"rtweet\", dependencies = TRUE)'\n      - name: Create and post tweet\n        run: Rscript londonmapbot-tweet.R\n```\n\nIt's interpreted like so:\n\n* this action is called 'londonmapbot'\n* run this code at :00 and :30 past each hour[^cron]\n* the first (and only) job in this action is called londonmapbot-post\n* start up a remote machine with the latest macOS operating system installed (this is where your code will be run)\n* set some environmental variables, in this case keys that will be used to access the Twitter and Mapbox APIs (see the ['Secrets'](#secrets) section later in this post)\n* the steps of the job are to:\n    * use [some pre-written code by GitHub](https://github.com/actions/checkout) to check out the repo\n    * use [some prewritten code from r-lib](https://github.com/r-lib/actions) that sets up R\n    * install the {rtweet} package and its dependencies\n    * run [the named R script](https://github.com/matt-dray/londonmapbot/blob/master/londonmapbot-tweet.R) from the repo\n\nI would recommend changing your GitHub notification alerts once the bot is up and running, otherwise you'll get a message every time the action executes. You can change this under Settings > Notifications > GitHub Actions, where you can uncheck the boxes under 'Notifications for workflow runs on repositories set up with GitHub Actions'.\n\n## {rtweet}\n\nThe action runs an R script that generates content for a tweet and then posts it. This script makes use of the package [{rtweet}](https://docs.ropensci.org/rtweet/) by [Mike Kearney](https://mikewk.com/), which lets you interact with [the Twitter API](https://developer.twitter.com/en/docs/twitter-api) with R functions.\n\nYou need a Twitter account, of course, and also to [sign up as a Twitter developer](https://developer.twitter.com/en/apply-for-access) to access the API. \n\n<div class=\"tip\"> \n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nTwitter has [moved to version 2.0 of their API](https://blog.twitter.com/developer/en_us/topics/tools/2021/build-whats-next-with-the-new-twitter-developer-platform) since this post was written. As things stand in February 2022 (hello from the future), you will need to [ask for 'elevated' access](https://developer.twitter.com/en/docs/twitter-api/getting-started/about-twitter-api) in Twitter's Developer Portal to ensure you can reach version 1.1 of the API, which is what {rtweet} is set up to communicate with.\n\nHuge thanks to [Oscar Baruffa](https://oscarbaruffa.com/), who [learnt about this hard way](https://oscarbaruffa.com/twitterbot/) when setting up [a Twitter bot for the excellent Big Book of R](https://twitter.com/BigBookofR) (an index of 250+ free books for R programming).\n</div><p>\n\nAs a developer, you can [create 'apps'](developer.twitter.com/en/apps) to obtain keys: private alphanumeric passcodes that grant you access to the API.\n\nTypically, when working locally, you would either provide these keys as bare strings, or put them in [your .Renviron file](https://rstats.wtf/r-startup.html#renviron). With the latter, you can then use `Sys.getenv()` to call them from your .Renviron, which stops you exposing the raw keys in your code.\n\nBelow is an example of how you can use {rtweet} to post a tweet from R if you've added the keys to your .Renviron.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install the package from CRAN\ninstall.packages(\"rtweet\")\n\n# Create a token containing your Twitter keys\nrtweet::rtweet_bot(\n  api_key       = Sys.getenv(\"TWITTER_CONSUMER_API_KEY\"),\n  api_secret    = Sys.getenv(\"TWITTER_CONSUMER_API_SECRET\"),\n  access_token  = Sys.getenv(\"TWITTER_ACCESS_TOKEN\"),\n  access_secret = Sys.getenv(\"TWITTER_ACCESS_TOKEN_SECRET\")\n)\n\n# Example: post a tweet via the API\n# The keys will are in your environment thanks to create_token()\nrtweet::post_tweet(status = \"This is a test tweet.\")\n```\n:::\n\n\n<div class=\"tip\"> \n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\n{rtweet} version 1.0 was [released with breaking changes in July 2022](https://ropensci.org/blog/2022/07/21/rtweet-1-0-0/) and so I've changed the code above to use the function `rtweet_bot()` instead of `create_token()`. You [can read a separate blogpost](https://www.rostrum.blog/2022/07/22/mapbot-rtweet-v1/) about these changes.\n</div><p>\n\nThis is basically what happens in [the londonmapbot R script](https://github.com/matt-dray/londonmapbot/blob/master/londonmapbot-tweet.R) too. When writing an action, the keys aren't fetched from your .Renviron file, however. Instead, you can encrypt them on GitHub and provide them in the `env` call of your action's YAML file. See the ['Secrets'](#secrets) section below for more detail on this.\n\n### Mapbox\n\n[Mapbox](https://www.mapbox.com/) is a company with services for mapping, geocoding and navigation, which developers can use for integrating into their apps for things like asset tracking, route optimisation or anything that requires a map interface for users.\n\nAgain, you'll need to set up a Mapbox account to get a key for using the API. While the target audience is largely commercial, there appears to be a generous free allowance of [1250 requests per minute](https://docs.mapbox.com/api/maps/static-images/#static-images-api-restrictions-and-limits) for the static image API.\n\nYou can then pass parameters to the Mapbox API via a URL. This is well explained in [the Mapbox Documentation](https://docs.mapbox.com/api/maps/#static-images), which has [an excellent 'playground' interface](https://docs.mapbox.com/playground/static/) for you to test out your call. \n\nYou basically modify a particular URL string to ask the API for what you want. For example, you can ask for a `300x200` pixel `satellite` image of the coordinates of `-0.1709` and `51.5065` with zoom level `12`, which is [Hyde Park](https://en.wikipedia.org/wiki/Hyde_Park,_London):\n\n`https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/-0.1709,51.5065,12,0/300x200?access_token=YOUR_MAPBOX_ACCESS_TOKEN`\n\nVisiting the URL in your browser returns the requested image as a JPEG:\n\n![The Serpentine is so aptly named.](resources/hyde.jpg){fig-alt=\"A satellite view of Hyde Park in London, with watermarks of copyrights for Mapbox, OpenStreetMap and Maxar.\" width=\"300px\" fig-align=\"left\"}\n\nOf course, you'll need to replace the access-token placeholder (`YOUR_MAPBOX_ACCESS_TOKEN`) in that URL with your own Mapbox key. Rather than provide this as a bare string, [the londonmapbot R script](https://github.com/matt-dray/londonmapbot/blob/master/londonmapbot-tweet.R) calls it from the environment (like we saw in the {rtweet} code in the last section).\n\nHere's the code used by londonmapbot to fetch the satellite image from Mapbox:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate random coordinates\nlon <- round(runif(1, -0.5, 0.27), 4)\nlat <- round(runif(1, 51.3, 51.7), 4)\n\n# Build URL and fetch from Mapbox API\nimg_url <- paste0(\n\t\"https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/\",\n\tpaste0(lon, \",\", lat),\n\t\",15,0/600x400@2x?access_token=\",\n\tSys.getenv(\"MAPBOX_PUBLIC_ACCESS_TOKEN\")\n)\n\n# Download the image to a temporary location\ntemp_file <- tempfile(fileext = \".jpeg\")\ndownload.file(img_url, temp_file)\n```\n:::\n\n\nThe code shows a `paste0()` statement that builds the URL with random latitude and longitude and the Mapbox key. The image from that URL is then downloaded into a temporary file, where it can be supplied to the `media` argument of `rtweet::create_tweet()` for posting to Twitter.\n\n## Secrets {#secrets}\n\nI've mentioned in this post about keeping your keys secure. You don't want others to copy and use your keys nefariously, so it's a good idea not to simply paste them into your code as bare strings for the world to see.\n\n[Github lets you store secrets securely](https://docs.github.com/en/actions/reference/encrypted-secrets) in the 'Secrets' section of the 'Settings' tab in your repo. No-one can see these, but they can be called into your code when it runs.\n\n![Keep it secret... keep it safe.](resources/secrets-github.png){fig-alt=\"The GitHub website opened in the Secrets section of the Settings menu, with an example Mapbox token name being shown.\" width=\"100%\"}\n\nLet's use the londonmapbot Twitter consumer API key as an example. First, I saved the string as a GitHub secret with the name `TWITTER_CONSUMER_API_KEY`. I then called this in the `env` section of [my YAML file](https://github.com/matt-dray/londonmapbot/blob/master/.github/workflows/londonmapbot.yml) in the form `${{ secrets.TWITTER_CONSUMER_API_KEY }}`. Running the action results in the string being pulled from the secrets stash and decrypted, where it's available in the environment. Then [the R code](https://github.com/matt-dray/londonmapbot/blob/master/londonmapbot-tweet.R) can call it with `Sys.getenv()` when access to the API is needed.\n\n## It does the job\n\nSo, you can:\n\n* take a look at the [\\@londonmapbot](https://twitter.com/londonmapbot) profile\n* find [the source on GitHub](https://github.com/matt-dray/londonmapbot)\n* inspect the [YAML file](https://github.com/matt-dray/londonmapbot/blob/master/.github/workflows/londonmapbot.yml) that runs the action\n* see [the R script](https://github.com/matt-dray/londonmapbot/blob/master/.github/workflows/londonmapbot.yml) that generates and posts the image\n\nThe [GitHub README](https://github.com/matt-dray/londonmapbot/blob/master/README.md) also lists a few other map bots---which I've christened the 'mapbotverse'---that have taken inspiration from londonmapbot; take a look at those too.\n\nOf course, you should fork the repo, or use it as a template, to create your own bot. Let me know what you get up to.\n\nDo give me suggestions and pull requests, or tell me how good you are at identifying the granular location in each image.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-18 21:27:04 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.33     rlang_1.1.1       fontawesome_0.5.1 evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^market]: I should note that there are already [actions on the GitHub Marketplace built specifically for tweeting](https://github.com/marketplace?query=tweet), but they didn't quite do what I wanted. I also wanted to write the juicy bit with R code, which I'm most familiar with.\n[^action]: In the first iteration of the action I passed the R code as a single line in the YAML file, which is suboptimal. I later tidied the code into a separate R script and declared the secrets in the YAML file. I looked at actions by [Matt Kerlogue](https://lapsedgeographer.london/2020-04/automating-pdf-scraping/#using-github-actions-to-schedule-the-process) and [David Keyes](https://github.com/rfortherestofus/rrutweets) to do this. David's repo is interesting from a Twitter perspective because it automates tweets provided via a Google Sheet.\n[^clue]: Those look suspiciously like a large number of tennis courts, including some in stadia. Where could that be? The coordinates are [51.4317, -0.2151](https://goo.gl/maps/LAkdSRTkrEKHu3hi9).\n[^cron]: There's a number of sites that can help you build [a cron string](https://crontab.guru/). I built [a toy package, {dialga}](https://www.rostrum.blog/2021/04/10/dialga/), to help convert from R to cron to English. I may change the specific posting frequency for londonmapbot in future.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}