{
  "hash": "88659e9b6db2deb3327de7274a0979a0",
  "result": {
    "markdown": "---\ntitle: \"The {grid} underlying {hexbase}\"\ndate: 2025-02-09\nslug: \"hexbase-grid\"\nimage: resources/\ncategories:\n  - grid\n  - hexbase\n  - r\n---\n\n\n![](resources/){fig-align=\"left\" fig-alt=\"\" width='50%'}\n\n## tl;dr\n\n\n\n## \n\nI [wrote about](https://www.rostrum.blog/posts/2025-01-31-hexbase/) an R package I'd put together for making hex stickers, [{hexbase}](https://github.com/matt-dray/hexbase), which is built without dependencies. Instead it relies on [the {grid} package](https://www.stat.auckland.ac.nz/~paul/grid/grid.html), which is built into the base installation of R.\n\n{grid} lets you build up plots and layouts from basic principles, offering ultimate flexibility. Both {ggplot2} and the legendary {lattice} package, also part of base R, are made using {grid} under the hood.\n\nI chose to use {grid} for {hexbase} for a few reasons:\n\n* when building a hex, you're not really 'plotting' as much as you are 'arranging' elements\n* you don't necessarily _need_ any dependencies for this task\n* I've never used {grid}, lol\n\nI don't want to write a guide for using {grid} because I know little and I feel like {hexbase} only scratches the surface anyway. Most of the code can be improved, but I thought I'd explain the approach used in {hexbase}.\n\n## A walkthrough\n\nI'll give a simple demo of {hexbase} in action and then step through the functions to give a conceptual overview.\n\n### The front-end\n\nFrom the user perspective, the steps are to:\n\n1. Open a PNG graphics device with `open_hex()`.\n2. Add a hexagon with `add_hex()`.\n3. Add and arrange as many text and image elements as you like with `add_text()` and `add_image()`.\n4. Close the device and write the file with `close_device()`.\n\nWe don't need anything complex for this example. I just took a free image from a website and added it to a basic hex with some text:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_path <- tempfile(fileext = \".png\")\n\nhexbase::open_device(file_path = temp_path)\nhexbase::add_hex(\n  border_col = \"navy\",\n  bg_col = \"lightblue\"\n)\nhexbase::add_image(\n  image_object = png::readPNG(\"resources/turtle.png\"),\n  image_y = 0.55,\n  image_width = 0.8\n)\nhexbase::add_text(\n  text_string = \"hexbase\",\n  text_x = 0.65,\n  text_y = 0.35,\n  text_size = 12,\n  text_family = \"Playwrite GB S\"\n)\nhexbase::add_text(\n  text_string = \"github.com/matt-dray/hexbase\",\n  text_x = 0.73, \n  text_y = 0.17,\n  text_angle = 30, \n  text_size = 4,\n  text_family = \"Playwrite GB S\",\n  text_col = \"navy\"\n)\nhexbase::close_device()\n\nsystem(paste(\"open\", temp_path))\n```\n:::\n\n\n### The back-end\n\nSo let me explain what's going on in the code.\n\n## Going off{grid}\n\nSomething I'm quite keen on is to allow for base plot to be added to the hex. This seems fitting; the packahge is made with base R, so wouldn't it be nice to add a nice base R plot to the hex?\n\nThis isn't as easy as it seems. The `plot()` funciton, for example, isn't built with {grid}. You have to convert this type of object to a grob so it can be placed on the hex.\n\nThere seems to be an inescapable truth to this process: you need to depend on a package to do it easily. Prof Murrell has also created [{gridBase}](https://cran.r-project.org/package=gridBase)[^rotate] to put a plot in a viewport and [{gridGraphics}](https://cran.r-project.org/package=gridGraphics) to convert a plot to grobs. Using {gridgraphics}, `ggplotify::base2grob()` does what it says on the tin:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Start with hexbase\ntemp_path <- tempfile(fileext = \".png\")\nhexbase::open_device(file_path = temp_path)\nhexbase::add_hex(0)\n\n# Add a base plot without {hexbase}\ngrid::pushViewport(grid::viewport())\nbase_plot <- ggplotify::base2grob(\n  \\() {\n    par(mar = rep(0, 4))  # no plot margin\n    plot(\n      runif(n), runif(n),  # 'random' points\n      xaxs = \"i\", yaxs = \"i\",  # 'edge-to-edge' plot\n      axes = FALSE, ann = FALSE,  # no chart stuff\n      pch = 16, col = palette.colors(n, , , TRUE)  # style points\n    )\n  }\n)\ngrid::grid.draw(base_plot)  # it's a grob now, we can draw it\ngrid::popViewport()\n\n# Finish up with {hexbase}\nhexbase::add_text(\"hexbase\")\nhexbase::close_device()\n\n# Open file to view it\nsystem(paste(\"open\", temp_path))\n```\n:::\n\n\n\nThe question is whether I can engineer a function myself to convert base plots to grobs, or whether I'll need to lean on e.g. {gridGraphics}. In the latter case, {hexbase} would no longer be 'dependency free'. Instead it would be 'dependency light'. I think this could be acceptable, given that {gridGraphics} is smallin size and is part of the 'gridverse' (I think we can make this a thing).\n\nHowever, the name '{hexbase}' would then be stretching the truth slightly. Pretty sure that {hexNearlyButNotQuiteBaseOnly} is available on CRAN... might need to workshop that one. Ah well, at least I'll be able to make a hex sticker for it, lol.\n\n### Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2025-02-09 22:47:25 GMT\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.4.2 (2024-10-31)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.2    fastmap_1.2.0     cli_3.6.3.9000   \n [5] tools_4.4.2       htmltools_0.5.8.1 rstudioapi_0.16.0 yaml_2.3.10      \n [9] rmarkdown_2.28    knitr_1.48        jsonlite_1.8.9    xfun_0.48        \n[13] digest_0.6.37     rlang_1.1.4       evaluate_1.0.1   \n```\n:::\n:::\n\n</details>\n\n[^rotate]: Although with {gridBase} 'it is not possible to embed base graphics output within a grid viewport that is rotated'. This might be inconsistent for {hexbase}, which allows you to rotate text and image grobs.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}