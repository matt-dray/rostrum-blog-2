{
  "hash": "b59133a7b93e75ab9d585c3aaec8e331",
  "result": {
    "markdown": "---\ntitle: Deep fried memes in R\ndate: 2021-11-07\nslug: deepfry\ncategories:\n  - flamewar\n  - magick\n  - memes\n  - r\n---\n\n\n\n\n![](resources/spongebob-frypants.gif){fig-alt=\"An animation showing a transition from a meme image to a deep-fried version, which has been compressed, has an orange tint, bulges from the centre and includes a cry-laugh emoji. The meme is of sarcastic Spongebob, with the same text on the top and bottom, but the lower text has alternating case. It says 'equals-sign saves keystrokes versus assignment-arrow'.\" width=\"100%\"}\n\n## tl;dr\n\nNow you can use a function to deep fry memes in R.\n\n## Extra crispy\n\nYou can make memes in R with [packages like Guangchang Yu's {meme}](https://github.com/GuangchuangYu/meme/). You could even post them to Twitter with #RStatsMemes for [\\@rstatsmemes](https://twitter.com/rstatsmemes) to find.\n\nHowever, it's no longer enough to present memes as-is. They must be deep-fried to become [modern and ironic](https://en.wikipedia.org/wiki/Internet_meme#Irony_and_absurdism). It will help people think that your meme is so edgy that it's been re-saved thousands of times.\n\n## Get to temperature\n\nYou'll need image-manipulation wizardry from [the {magick} package](https://docs.ropensci.org/magick/index.html), along with [{extrafont}](https://github.com/wch/extrafont) to let you use fonts from your system.\n\nAt time of writing there is an issue with importing fonts, which [requires an earlier version of {Rttf2pt1} to be installed](https://stackoverflow.com/a/68642855).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"magick\", \"extrafont\", \"remotes\"))\nremotes::install_version(\"Rttf2pt1\", version = \"1.3.8\")\n```\n:::\n\n\nYou can then import fonts from your system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextrafont::font_import()\n```\n:::\n\n```\nImporting fonts may take a few minutes, depending on the number of fonts and the speed of the system.\nContinue? [y/n] \n```\n\nNow we can use important joke fonts---like Impact, Papyrus or Calibri---in our memes, assuming they're installed on your system.\n\n## Small fry\n\nI've cooked up a single, low-quality function, `fry()`, that:\n\n1. Reads a meme template image (or any image) from a path\n1. Adds top/bottom text in Impact font\n1. Reads from a URL a specific (cursed) cry/laugh emoji that's popular in deep-frying and places it in a random location (corners or left/right sides)\n1. Adjusts the image contrast, saturation, etc,[^adjust], tints it orange and bulges it from the centre\n1. Writes the image to a temporary jpeg file---compressing it horribly---and then reads it back in\n1. Outputs a `magick-image` object that you can save with `magick::image_write()` and send to all your friend (sic)\n\nIt does what I want it to do; adjust it as you please.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(magick))\n\nfry <- function(\n  img_path, emoji_path,\n  text_top, text_bottom,\n  depth = c(\"shallow\", \"deep\")) {\n  \n  depth <- match.arg(depth)\n  \n  cat(\"Heating oil... \")\n  \n  emoji <- magick::image_read(emoji_path)\n  \n  emoji_where <-  sample(c(  \n    paste0(\"north\", c(\"east\", \"west\")),\n    paste0(\"south\", c(\"east\", \"west\")),\n    \"east\", \"west\"  # e.g. 'east' is right\n  ), 1)\n  \n  img <- image_read(img_path) |> \n    image_annotate(\n      text_top, \"north\", size = 80, font = \"Impact\",\n      color = \"white\", strokecolor = \"black\"\n    ) |>\n    image_annotate(\n      text_bottom, \"south\", size = 80, font = \"Impact\",\n      color = \"white\", strokecolor = \"black\"\n    ) |>\n    image_scale(\"1000\") |> \n    image_composite(emoji, gravity = emoji_where) |> \n    image_colorize(30, \"orange\") |>  # tint\n    image_modulate(brightness = 80, saturation = 120, hue = 90) |>\n    image_contrast(sharpen = 100) |> \n    image_noise()\n  \n  cat(\"dunking meme... \")\n  \n  if (depth == \"shallow\") {\n    img <- img %>% image_implode(-0.5)  # bulge\n    compress <- 8\n  } else if (depth == \"deep\") {\n    img <- img %>% image_implode(-1)  # more bulge\n    compress <- 1  # maximum compression\n  } \n  \n  path_out <- tempfile(\"meme\", fileext = \".jpeg\")\n  image_write(img, path_out, \"jpeg\", compress)\n  \n  cat(\"crisp.\")\n  image_read(path_out)\n  \n}\n```\n:::\n\n\n## Get cooking\n\nWhat spicy meme shall I make? Well, the `=` versus `<-` assignment-operator flamewar has been cold for a few days, so time to heat it up again.[^flamewar] And why not incorporate the world's most famous fry cook (in sarcastic form)?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsponge_path <- paste0(  # URL to meme image\n  \"https://raw.githubusercontent.com/matt-dray/rostrum-blog/\",\n  \"master/static/post/2021-11-07-deepfry_files/spongebob.jpg\"\n)\n\nemoji_path <- paste0(  # URL to cry/laugh emoji\n  \"https://raw.githubusercontent.com/matt-dray/rostrum-blog/\",\n  \"master/static/post/2021-11-07-deepfry_files/deepfry-emoji.jpg\"\n)\n\nbot_txt <- \"= sAvEs KeYsTrOkEs Vs <-\"  # sarcastic text\ntop_txt <- tolower(bot_txt)\n```\n:::\n\n\nFirst, a nice shallow fry.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfry(sponge_path, emoji_path, top_txt, bot_txt, \"shallow\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHeating oil... dunking meme... crisp.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/shallow-fry-1.png){fig-alt='A deep-fried meme image, which has been compressed, has an orange tint and includes a cry-laugh emoji. It is less compressed than the next image. The meme is of sarcastic Spongebob, with the same text on the top and bottom, but the lower text has alternating case. It says \\'equals-sign saves keystrokes versus assignment-arrow\\'.' width=500}\n:::\n:::\n\n\nAnd now we _deep_ fry.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfry(sponge_path, emoji_path, top_txt, bot_txt, \"deep\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHeating oil... dunking meme... crisp.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/deep-fry-1.png){fig-alt='A deep-fried meme image, which has been compressed, has an orange tint and includes a cry-laugh emoji. It is more compressed than the image above. The meme is of sarcastic Spongebob, with the same text on the top and bottom, but the lower text has alternating case. It says \\'equals-sign saves keystrokes versus assignment-arrow\\'.' width=500}\n:::\n:::\n\n\n\\*Fry-cook's kiss\\*\n\n### Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-17 18:25:54 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] magick_2.7.4\n\nloaded via a namespace (and not attached):\n [1] digest_0.6.31     fastmap_1.1.1     xfun_0.39         magrittr_2.0.3   \n [5] knitr_1.43.1      htmltools_0.5.5   png_0.1-8         rmarkdown_2.23   \n [9] cli_3.6.1         compiler_4.3.1    rstudioapi_0.15.0 tools_4.3.1      \n[13] curl_5.0.1        evaluate_0.21     Rcpp_1.0.11       yaml_2.3.7       \n[17] rlang_1.1.1       jsonlite_1.8.7    htmlwidgets_1.6.2\n```\n:::\n:::\n\n</details>\n\n[^adjust]: Did I arrive at these settings scientifically? Yes, they were the ones that made me laugh when I saw the resulting output.\n[^flamewar]: I have written before about this very serious topic. [I developed a method to detect `=` for assignment without you having to open a script that contains it](https://www.rostrum.blog/2021/03/13/assign/).\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}