{
  "hash": "142f337ad0494b44b6441feba03fd580",
  "result": {
    "markdown": "---\ntitle: Iterative R Markdown reports for Dawson's Creek\ndate: 2018-06-26\nslug: mail-merge\ncategories:\n  - knitr\n  - r\n  - reproducibility\n  - rmarkdown\n---\n\n\n\n\n![Dawson's Creek's Dawson leaks (via [Hulu](https://giphy.com/gifs/hulu-dawsons-creek-james-van-der-beek-3oz8xUK8V7suY7W9SE)).](resources/dawson.gif){fig-alt=\"Close-up of Dawson from Dawson's Creek and he's crying.\" width=\"40%\" fig-align=\"left\"}\n\n## tl;dr\n\nYou have customer details. You want to send each person a personalised letter from a template. You want to mail merge, basically.[^andrie]\n\nThis post shows how you can use R to iteratively produce separate Microsoft Word reports from a common template, each one with slightly different data. Here I use R Markdown and the {knitr} package to render a separate report about each episode of Dawson's Creek (a classic use case!).\n\n## Merge those mails\n\nI remember learning to mail merge in computer class at the turn of the century; autocompleting a Word template letter with details for imaginary customers from some made-up Access database. \n\nI no longer need to invoice 'Mr Sonic The-Hedgehog' for ordering '25 chili dogs', but the general approach of generating the same template multiple times with different information is still pertinent. The difference now is that I don't want to use proprietary software to do it and I want the process to be more reproducible.\n\nI've helped a few colleagues with this recently so they could avoid hours of copy-pasting. R is a natural choice for automating this kind of task and for maximising reproducibility.\n\n## Who will she choose?\n\nTo keep to the turn-of-the-millennium theme, this post explains how to autogenerate reports that contain data for each episode of the first season of the hit late-90s-early-2000s-weirdly-articulate-teen-angst-love-triangle masterpiece that is [Dawson's Creek](https://www.imdb.com/title/tt0118300/). Data via [Wikipedia](https://en.wikipedia.org/wiki/List_of_Dawson%27s_Creek_episodes#Season_1:_1998).\n\nI've created [an accompanying GitHub repository](https://github.com/matt-dray/mail-merge-2018) where you can download or clone a whole R Project that replicates the approach used in this post.\n\n## Approach\n\nA basic overview of the process is that you:\n\n* write a template document using R Markdown, with snippets of R code that will pull in the data for each element you're iterating over (e.g. Dawson's Creek episodes)\n* make reference to a Word document that contains the style information for your output (i.e. fonts, colours, etc)\n* loop over each element (e.g. each episode), supplying data to the template and rendering ('knitting') a separate output file for each one\n\n[Update: this approach is quite basic. You may want to read [a more recent post on this blog](https://www.rostrum.blog/2020/03/12/knit-with-params/) that uses [parameterised R Markdown](https://rmarkdown.rstudio.com/developer_parameterized_reports.html%23parameter_types%2F) reports and iteration with the {purrr} package, which may suit you better.]\n\n### Set up\n\nI recommend creating an RStudio Project with three files important to this task:\n\n1. Your document template prepared in R Markdown (file type `.Rmd`)\n2. Your style-reference document (`.docx`) that we'll put in a `style/` subfolder\n3. A script (`.R`) file for reading your data and looping through each element \n\nAside from your .Rproj file, your folder should also contain:\n\n* a subfolder to hold the output files (e.g. `output/`)\n* any additional subfolders you need for input files (e.g. `data/` and `images/`)\n* an optional `README.md` file to explain the purpose of your work\n\n![A simple folder setup for your working directory](resources/directory_structure.PNG){fig-alt=\"A folder structure with folders for data, output and style; an Rmd file; an R script; a readme; and an R Project file.\" width=\"40%\" fig-align=\"left\"}\n\nBelow is a more detailed explanation using the Dawson's Creek example. Click to jump to each section:\n\n* [the R Markdown template](#template)\n* [the Word document used as a style reference](#style)\n* [the R script for iterating over the template](#loop)\n\n### 1. The template {#template}\n\n#### R Markdown\n\nYour report template should be an R Markdown file. In short, R Markdown files allow you to write plain text formatted with special symbols and insert R code inline or in 'chunks'. You can [find out more about R Markdown from the RStudio website](https://rmarkdown.rstudio.com/). I've also written [a short guide to writing R Markdown documents](https://matt-dray.github.io/knitting-club/) and created [a small set of slides](https://matt-dray.github.io/quick-rmd/#1), both with beginners in mind.\n\nYou can see the full R Markdown file for this demo [in the source code on GitHub](https://github.com/matt-dray/mail-merge-2018/blob/master/01_template.Rmd).\n\n#### Specify Word output\n\nThe template itself should start with a YAML header section that states (i) the output type, which is `word_document` in this example[^word], and (ii) a path to the Word document that contains the style information (i.e. `style/dawson_style.docx` in this example). The style document is explained in [the next section](#style).\n\nHere's what the basic YAML header looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\noutput:\n  word_document:\n    reference_docx: style/dawson_style.docx\n---\n```\n:::\n\n\n#### Reference the data\n\nWe'll be feeding data into the template via an object called `episode`. This object is a data frame that contains the variables that we want to put into our template, with one row per episode (more on this in [the section below about iterating](#loop) below).\n\nWhen it comes to iterating over the data to produce each output file, we'll be subsetting a row at a time so we only pass one episode's information to the template.\n\nThis means the R code in our R Markdown file should refer to the `episode` object. For example, here's some inline code that will be rendered into the production code and title ([see this in the source repo on GitHub](https://github.com/matt-dray/mail-merge-2018/blob/dd0e15b9653d1aadb310f679316d1dadb1c5398f/01_template.Rmd#L15)):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n`r paste0(episode$production_code, \": '\", episode$title, \"'\")`\n```\n:::\n\n\nAnd here's an example R Markdown chunk that will get a table containing information about the episodes ([see this in the source code](https://github.com/matt-dray/mail-merge-2018/blob/dd0e15b9653d1aadb310f679316d1dadb1c5398f/01_template.Rmd#L19-L28)):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nepisode %>% \n  dplyr::select(  # choose these columns for display\n    Season = season,\n    `Number in season` = number_in_season,\n    `Number in series` = number_in_series,\n    `Original air date` = original_air_date\n  ) %>% \n  knitr::kable()  # print to output table\n```\n:::\n\n\n### 2. The style {#style}\n\nThe default output when rendering R Markdown to Word is a bit boring. Instead, you can create a separate dummy Word document that contains modified styles to suit your theme. \n\nYou can read more about creating a style document in [Richard Layton's 'happy collaboration with Rmd to docx'](https://rmarkdown.rstudio.com/articles_docx.html) on the R Markdown site. Basically you create a dummy document in which you've set the formatting for each style element (title, third-level header, paragraph text, etc), store it in your working repository and refer to it from the YAML of your R Markdown report (as mentioned in [the section above](#template)).\n\n![The style document](resources/dawson_style.PNG){fig-alt=\"Screenshot of Microsoft Word showing the style document.\" width=\"75%\" fig-align=\"left\"}\n\nYou can download the example style file used in this demo [from the GitHub repo](https://github.com/matt-dray/mail-merge-2018/tree/master/).\n\n### 3. Iterate {#loop}\n\nSo we have the template (`.Rmd`) and style (`.docx`) files in place. Now we need an R script (`.R`) to orchestrate the iteration of our outputs.\n\nThis script (i) reads the data and (ii) executes a loop that applies episode data to the template, saving to a specified subfolder with a unique file name. You'll get one document for each unique element; in this demo we'll get 13 because there are 13 rows (episodes) in our data set.\n\nYou can see the script file for this demo in [the source code on GitHub](https://github.com/matt-dray/mail-merge-2018/blob/master/02_loop.R).\n\nAfter reading in the data with something like `data <- readr::read_csv(file = \"data/dawsons-creek-season-1.csv\")` you can write a loop that looks something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in data$production_code){  # for each unique episode...\n  \n  # Isolate that episode from the dataset\n  \n  episode <- data[data$production_code == i, ]  \n  \n  # The one-row dataframe object 'episode' we just created will be used as the\n  # source for filling the details in on the template file\n  \n  # Now render ('knit') the R Markdown file to Word format, name it and save it\n  \n  rmarkdown::render(\n    input = \"01_template.Rmd\",  # path to the template\n    output_file = paste0(\"episode_\", i, \".docx\"),  # name the output\n    output_dir = \"output\"  # folder in which to put the output file\n  )\n\n}\n```\n:::\n\n\nSo this code:\n\n* loops through episodes given unique values in the `production_code` column\n* subsets the `data` object (a data frame of all episodes) to isolate the production code for each episode in turn\n* renders the template document after filling it with the `episode` data\n* gives the file a name that incorporates the production code\n* saves this file to the `output/` subfolder in our project directory\n\n## Execute\n\nRun the R script and the files will be rendered in turn according to the formatting in the style document, and added one by one to the `output/` folder. It's fun to open this folder and watch them pop into existence.\n\n![Report for episode 101 of Dawson's Creek](resources/dawson101.PNG){fig-alt=\"Screenshot of Microsoft Word with details in it from episode 101 of Dawson's Creek.\" width=\"75%\" fig-align=\"left\"}\n\n![Report for episode 102 of Dawson's Creek](resources/dawson102.PNG){fig-alt=\"Screenshot of Microsoft Word with details in it from episode 102 of Dawson's Creek.\" width=\"75%\" fig-align=\"left\"}\n\nCongratulations! You now have a separate file that contains the information for each of the episodes in season 1 of Dawson's Creek! Make sure to share with your friends (assuming you're not in an awkward love triangle).\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\nI don't wanna wait for this post to be oooover...\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-08-09 00:06:56 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^andrie]: See [Andrie de Vries's package {mailmerge}](https://github.com/andrie/mailmerge) if you actually want to iteratively formulate email content from a template and email to people via {gmailr}.\n[^word]: You don't have to render to Word. You could [render to HTML or PDF instead](https://bookdown.org/yihui/rmarkdown/output-formats.html), using CSS to style your document instead of a `.docx` style template.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}