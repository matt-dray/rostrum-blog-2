{
  "hash": "af84a0379107344e574940cc2eecca14",
  "result": {
    "markdown": "---\ntitle: 'Ding! Sound effects in {r.oguelike}'\ndate: 2023-01-04\nslug: rogue-sfx\ncategories:\n  - gamedev\n  - r\n  - r.oguelike\n  - sonify\n  - videogames\n---\n\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HD1cPWcQUc4\" title=\"Demo of {r.oguelike} for R\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n<p class=\"caption\">new wr â€” r.oguelike any% tenkeyless noglitch</p>\n\n## tl;dr\n\n[The {r.oguelike} package](https://github.com/matt-dray/r.oguelike)---a toy roguelike microadventure for the R console---now has little sound effects [thanks to {sonify}](https://cran.r-project.org/package=sonify). Pew pew!\n\n## The adventure continues?\n\nApparently this is part 5 of the {r.oguelike} [devlog](https://en.wiktionary.org/wiki/devlog). You can read earlier posts about:\n\n* [its inception](https://www.rostrum.blog/2022/04/25/r.oguelike-dev/)\n* [creating simple procedural dungeons](https://www.rostrum.blog/2022/05/01/dungeon/)\n* [making an enemy chase the player](https://www.rostrum.blog/2022/06/10/basic-search/)\n* [3D dungeons and continuous keypress inputs](https://www.rostrum.blog/2022/06/28/isometric-dungeon/)\n\nAlas, this is also probably the last installment. \n\nYes, the dungeons have been dank (cool, edgy), but also _dank_ (cool, damp, claustrophobic). Time to unspelunk myself.\n\nThere may be time for a {r.oguelike2} in future. I'd like to try a class-based approach to help limit code spaghetti and make it more extensible. Perhaps it will even have a proper game loop! Call me when you're ready, Kojima.\n\nUntil then, one more little feature to tie things up. Beeeeeeep. BOOOOOOOP.\n\n## Hi-Sonifi\n\nSo, yes: {r.oguelike} now has sound effects with quality as high as its graphics and gameplay. See all these in concert in the video embedded at the top of this page.\n\nI used [the {sonify} package](https://cran.r-project.org/package=sonify) to create a few little beeps and toots that I think fit the game's retro aesthetic.[^mikefc] These are fired when the player moves and interacts with things in the dungeon.\n\nI've written about {sonify} before when I sonified data about [COVID-19 infections](https://www.rostrum.blog/2021/02/02/sonify-covid/) and [GitHub activity](https://www.rostrum.blog/2021/02/21/skyphone/) (incredible juxtaposition), which can offer a more interesting and accessible way of presenting data.\n\nYou can also demean {sonify} by making funny little honks and parps, which is what I've done for {r.oguelike}.\n\nHow did I arrive at the soundscape for {r.oguelike}? I did the bare minimum of fiddling around with the arguments in `sonify::sonify()` until the noises amused me.\n\n## Demo cassette\n\nSounds are played in the code of the package via functions after each triggering event. The user can prevent these sounds from playing with the logical `has_sfx` argument in the `start_game()` function.\n\nFor example, here's the function for the simplest sound effect:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n.sfx_move <- function(has_sfx) {\n  if (has_sfx) sonify::sonify(1, 1, duration = 0.001)\n}\n```\n:::\n\n\nThe `sonify()` outputs are [{tuneR}](https://CRAN.R-project.org/package=tuneR) objects. I've saved these as wav files with `tuneR::writeWav()` so they can be embedded in this post.\n\n<details><summary>Click for illustrative code to create the wav files.</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sonify)\nlibrary(tuneR)\nlibrary(purrr)\n\nsfx <- list(\n  \n  move = sonify(1, 1, duration = 0.001),\n  \n  bump = sonify(1, 1, duration = 0.01, flim = c(100, 110)),\n  \n  gold = bind(\n    sonify(1, 1, duration = 0.05, flim = c(800, 800)),\n    sonify(1, 1, duration = 0.05, flim = c(1000, 1000))\n  ),\n  \n  apple = sonify(0:1, c(0, 1), duration = 0.05),\n  \n  eat = sonify(0:1, c(1, 0), duration = 0.05),\n  \n  win = bind(\n    sonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600)),\n    sonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600)),\n    sonify(0:1, rep(1, 2), duration = 0.1, flim = c(800, 800))\n  ),\n  \n  lose = bind(\n    sonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600)),\n    sonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600)),\n    sonify(0:1, rep(1, 2), duration = 0.1, flim = c(400, 400))\n  )\n  \n)\n\nwalk2(\n  .x = sfx,\n  .y = names(sfx), \n  ~writeWave(.x, paste0(.y, \".wav\"))\n)\n```\n:::\n\n\n</details>\n\nIn reality, the sounds play a little slower in the game itself, but it was a bit fiddly to reproduce it for these clips. You'll get the idea.\n\n### Move\n\nStep onto unoccupied floor tile (`.`) and you'll hear the very quick tap of your boot.\n\nClick to play the sound:\n\n<html><audio controls><source src=\"resources/move.wav\" type=\"audio/wav\"></audio></html>\n\nAnd here's the corresponding code to reproduce it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsonify(1, 1, duration = 0.001)\n```\n:::\n\n\nBut bump into the dungeon wall (`#`) and you'll get a dull thud, you absolute clod.\n\n<html><audio controls><source src=\"resources/bump.wav\" type=\"audio/wav\"></audio></html>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsonify(1, 1, duration = 0.01, flim = c(100, 110))\n```\n:::\n\n\nYes, `flim`, as in: 'this post is absolute flimflam'.\n\n### Food\n\nWould you pick up an apple (`a`) you found on the floor of a cave? Here's what it might sound like as it pops into your inventory.\n\n<html><audio controls><source src=\"resources/apple.wav\" type=\"audio/wav\"></audio></html>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsonify(0:1, c(0, 1), duration = 0.05),\n```\n:::\n\n\nMore importantly, would you eat an apple (`a`) you found on the floor of a cave? Here's how it would sound as it rolls down your gullet.\n\n<html><audio controls><source src=\"resources/eat.wav\" type=\"audio/wav\"></audio></html>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsonify(0:1, c(1, 0), duration = 0.05)\n```\n:::\n\n\n### Gold\n\nCollecting gold (`$`) grants you a celebratory chirp of excitement. Although there's not actually anything in the dungeon to spend it on, sorry.\n\n<html><audio controls><source src=\"resources/gold.wav\" type=\"audio/wav\"></audio></html>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsonify(1, 1, duration = 0.05, flim = c(800, 800))\nsonify(1, 1, duration = 0.05, flim = c(1000, 1000))\n```\n:::\n\n\n### Defeat enemy\n\nA powerful victory ditty after you crush your enemies (`E`).\n\n<html><audio controls><source src=\"resources/win.wav\" type=\"audio/wav\"></audio></html>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600))\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600))\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(800, 800))\n```\n:::\n\n\n### Lose\n\nConversely, a sad lament for being crushed by your enemies (`E`) or running out of turns (`T`).\n\n<html><audio controls><source src=\"resources/lose.wav\" type=\"audio/wav\"></audio></html>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600))\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(600, 600))\nsonify(0:1, rep(1, 2), duration = 0.1, flim = c(400, 400))\n```\n:::\n\n\n## Echo echo echo\n\nIf you want to try out {r.oguelike}, you can install it from GitHub:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.github(\"remotes\")  # if not yet installed\nremotes::install_github(\"matt-dray/r.oguelike\")  # v0.1 currently\nr.oguelike::start_game()\n```\n:::\n\n\nYou can also [run {r.oguelike} in an RStudio instance in your browser](https://mybinder.org/v2/gh/matt-dray/play-r.oguelike/main?urlpath=rstudio) (!), thanks to [the Binder project](https://mybinder.org/).\n\nFree feel to highlight any bugs via [the issues](https://github.com/matt-dray/rostrum-blog/issues), or create a pull request that adds all the things that stop me from calling {r.oguelike} a proper 'game'.[^game]\n\n![](resources/r.oguelike-hex.png){fig-alt=\"Hex sticker design for the 'r.oguelike' R package. Black background with bright green font, reminiscent of old computer terminal output. In the centre, a three-by-ten arrangement of hashmarks and periods, along with a single at symbol and dollar sign, which looks like a classic ASCII tile-based roguelike game. The text 'r.oguelike' is underneath.\" width=\"25%\"}\n\nMost importantly, don't forget to wishlist me on Steam and remember that pre-order bonuses will include an apple that's been left on a dungeon floor for a few months.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-06 19:27:33 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^mikefc]: Meanwhile, I'm looking forward to what [Mike (coolbutuseless) is up to with audio for games in R](https://twitter.com/coolbutuseless/status/1561664096860524545).\n[^game]: Find some actual real R games in [this list I've put together](https://github.com/matt-dray/awesome-r-games).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}