{
  "hash": "70306ccfe47982f92263774641aa7366",
  "result": {
    "markdown": "---\ntitle: Conscious uncoupling with {blogdown}\ndate: 2023-08-26\nslug: cheerio-blogdown\ncategories:\n  - blogdown\n  - quarto\n  - r\n---\n\n\n![](resources/test.gif){fig-alt=\"A small, low quality image of a ginger manx cat being inverted. As in the image is being inverted, not the cat.\" width=\"30%\" fig-align=\"left\"}\n\n## tl;dr\n\nHere you go, the customary 'i PoRtEd My R bLoG' meta-post.\n\n## Quartoh-no\n\nYes, wow, porting {blogdown} to Quarto, such bravery.\n\nThe [old source code](https://github.com/matt-dray/rostrum-blog) is now archived on GitHub. The new source code is in a [separate repo](https://github.com/matt-dray/rostrum-blog-2). There's still [some issues](https://github.com/matt-dray/rostrum-blog-2/issues) to sort out, but the site is now live on the worldwide web at [doubleyoo double-doubleyoo rostrum full-stop blog](https://www.rostrum.blog)[^call].\n\nThis post is not a tutorial and is not exhaustive; it's just some notes for when I (absolutely inevitably) forget how I did certain things. I may add some other things later if there's teething issues I haven't uncovered yet.\n\n## The struggle is real\n\nThings went pretty well, basically. It was just boring and slow[^actionbutton] to go through over 150 posts and perform (mostly) little corrections here and there. Herefollows some minor struggles. \n\n### Load-bearing posts\n\nYou could copy-paste your old {blogdown} source code to the structure and style required by Quarto. But why spend 10 minutes doing that when I could spend many more minutes creating a package to do it[^editor]? I [wrote before](https://www.rostrum.blog/posts/2023-05-07-bd2q/) about [{bd2q}](https://github.com/matt-dray/bd2q), which was useful given the number of posts. This is a little manoeuvre I call 'procrastination-driven development'.\n\n### Tw*tter's ex-API\n\nI have some posts that used the Twitter API, like one about [Wordle](https://www.rostrum.blog/posts/2022-01-14-wordle/) and a bunch about [londonmapbot](https://www.rostrum.blog/index.html#category=londonmapbot). I ended up hardcoding the outputs in these posts because Twitter is utterly borked. One [bunglesome post](https://www.rostrum.blog/posts/2020-12-20-londonmapbot-leaflet/) used API data for an interactive leaflet map, but I had failed to save the intermediate data set. To retrieve the data, I had to extract it from the rendered leaflet HTML (!) with some garish string manipulation. Never again.\n\n### GitHub (In)Actions\n\nI have [a dynamic, stats-laden README](https://github.com/matt-dray/rostrum-blog-2/blob/main/README.md) for the blog that re-renders [when I push to the repo](https://www.rostrum.blog/posts/2021-04-14-gha-readme/). Famously, GitHub Actions never works first time. This time it was because you have to go into Settings > Actions > General on GitHub and [set 'Workflow permissions' to 'Read and write permissions'](https://stackoverflow.com/a/75308228). For some reason.\n\n### Trough of a WAV\n\nI have some little HTML audio whatsits on some pages, like the one about [sonifying covid data](https://www.rostrum.blog/posts/2021-02-02-sonify-covid/). Despite putting .wav files in the appropriate directory, the sounds simply wouldn't play. It's because you need to specify `resources:` in your [YAML header](https://github.com/matt-dray/rostrum-blog-2/blob/main/posts/2021-02-02-sonify-covid/index.qmd#L10-L14) and then list the path to each one (for me this would be like `- resources/roblox-oof.wav`).\n\n### Misdirection\n\nThe old blog had URLs in the form `rostrum.blog/YYYY/MM/DD/postname`. Quarto does it like `rostrum.blog/YYYY-MM-DD-postname`. I thought each Quarto post might need to be placed in a folder structure like `YYYY/MM/DD/postname.qmd` to achieve the old URL style. This is much more awkward than just putting posts in `posts/`.\n\nAha, actually you can write [a little `_redirects` text file](https://github.com/matt-dray/rostrum-blog-2/blob/main/_redirects) with a line for each old-to-new path. Given the number of posts, I wrote a little script to generate this file[^base]:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nredirect_to <- paste0(\"/\", list.dirs(\"posts\", recursive = FALSE))\n\ndate_rx <- \"\\\\d{4}-\\\\d{2}-\\\\d{2}\"  # YYYY-MM-DD format\n\n# Extract date from path to Quarto post\ndate_portion <- regexpr(date_rx, redirect_to) |> \n  regmatches(redirect_to, m = _) |> \n  gsub(\"/\", \"-\", x = _)\n\nname_portion <- gsub(paste0(\"posts/\", date_rx, \"-\"), \"\", redirect_to)\n\nredirect_from <- paste0(\"/\", date_portion, name_portion)\n\n# 'From' and 'to' paths on same line, separated by a space\nmapping <- paste0(\n  paste(redirect_from, redirect_to, sep = \" \"),\n  collapse = \"\\n\"\n)\n\ncat(mapping, file = \"_redirects\")  # dyk cat() can save files?\n```\n:::\n\n\nOriginally I failed to include the leading slash in the `redirect_from` string, which would result in trying to redirect from the nonsense `rostrum.blogYYYY/MM/DD/postname` instead of `rostrum.blog/YYYY/MM/DD/postname`. Subtle.\n\nIn [the site's `index.qmd`](https://github.com/matt-dray/rostrum-blog-2/blob/main/index.qmd) I added a snippet to copy over the `_redirects` file into the `site/` folder, ready for deployment.\n\n### Cat egg or rice?\n\nAs I went through each old post, I removed all the 'tags' from the YAML and consolidated some of them into 'categories'. I am still not happy with these categories. How can I extract all the categories to review them? I'm sure there's an easier way than regexing[^rx] them out, but this works:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nposts <- \n  list.files(\"posts\", pattern = \".qmd\", recursive = TRUE, full.names = TRUE)\n\nget_categories <- function(post_path, ignore_rx = \"resources\") {\n  \n  post_lines <- readLines(post_path, warn = FALSE)\n  \n  # Categories are listed between the YAML header and closing fence\n  cats_start <- which(post_lines == \"categories:\") + 1\n  cats_end <- which(post_lines == \"---\")[2] - 1\n  \n  cats <- NULL\n  \n  # Ignore other YAML headers and content after the categories\n  if (length(cats_start) == 1 & length(cats_end) == 1) {\n    cats <- gsub(\"  - \", \"\", post_lines[cats_start:cats_end])\n    cats <- cats[!grepl(ignore_rx, cats)]\n  }\n  \n  return(cats)\n  \n}\n\ncats_list <- lapply(posts, \\(post) get_categories(post)) |> \n  setNames(dirname(post_names))\n\nall_cats <- unlist(cats_list)\n\ntable(all_cats) |> sort(decreasing = TRUE)\n```\n:::\n\n\nMostly just an excuse to use 'cats' as a variable name I think, but maybe this would be easier with some Quarto command or with the {yaml} package or something?\n\n## Selling out\n\nAbove all, thank you Yihui and contributors for {blogdown}. It felt cool to be a hipster {blogdown} user[^feelings]. I held out for over five years. Now I feel.. mainstream, like part of the corporate machine. _Man_.\n\nHow can I complain? A mid-life crisis precipitated by a blog transition is exactly where I saw this going, to be honest. \n\nOf course, I've always pre-ported my posts from my brain to the blog. Perhaps you agree that the next platform change should be to cut out the last step and simply keep the posts inside my head? You're preemptively welcome.\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-08-26 22:20:39 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.23    knitr_1.43.1      jsonlite_1.8.7    xfun_0.39        \n[13] digest_0.6.33     rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n\n</details>\n\n[^actionbutton]: I began [in April 2023](https://github.com/matt-dray/rostrum-blog-2/commits/main). I took my sweet time because I knew it would be dull, but also because I recently fell down an [Action Button](https://www.youtube.com/@ActionButton) YouTube rabbit hole. I also got into the geocaching scene, both IRL (9 caches found, legend) and digitally, in the form of Zelda TOTK ('YA-HA!').\n[^base]: I like the 'modern base' aesthetic of the `date_portion` object here. Holdup, brb, just going to add 'Modern Base Core' to the [Aesthetics Wiki](https://aesthetics.fandom.com/wiki/Aesthetics_Wiki).\n[^editor]: Also check out Antoine's [{editor} package](https://github.com/moodymudskipper/editor) that can reach into a file and make alterations. I wish I'd had this before I bodged together some similar functionality in {bd2q}.\n[^call]: [CALL NOW](https://youtu.be/1NjTWvl8x-U?feature=shared&t=119).\n[^rx]: I desperately wanted to spell this 'regexxing', but 'x' appearing twice makes it look illicit.\n[^feelings]: At least that's how I felt. Please don't shatter my precious illusions.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}