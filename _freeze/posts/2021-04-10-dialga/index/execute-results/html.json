{
  "hash": "2fee0beec6399438e70734e2cb8b02b6",
  "result": {
    "markdown": "---\ntitle: 'Convert R to cron to English with {dialga}'\ndate: 2021-04-10\nslug: dialga\ncategories:\n  - cron\n  - dialga\n  - r\n  - videogames\n---\n\n\n\n\n![](resources/dialga_hex.png){fig-alt=\"Hexagonal logo for the dialga package showing the package name underneath the five asterisks of a cron string that represents an 'every minute' schedule.\" width=\"30%\"}\n\n## tl;dr\n\nI made the small proof-of-concept [R package {dialga}](https://www.github.com/matt-dray/dialga/) to help build and interpret standard [cron expressions](https://en.wikipedia.org/wiki/Cron) using familiar R syntax. `r2cron()` converts R to cron; `cron2eng()` converts cron to English.\n\n## Cronwhat?\n\nYou can schedule scripts to run at specific times using [software on your computer called 'cron'](https://en.wikipedia.org/wiki/Cron). You can set up 'cron jobs' to specify what needs to be run. A key part of the recipe is a short [cron string](https://en.wikipedia.org/wiki/Cron#CRON_expression) that provides instructions about when to run it.\n\nThe problem: cron strings are a bit cryptic if you're not a sysadmin and don't set up cron jobs very often. Here's a contrived example: `\"0/15 * 1,3,20 6 2,3\"`. What the heck does that mean?\n\nCase study: me. I've been scheduling [GitHub Actions](https://github.com/features/actions) using cron strings to specify when the actions should be triggered. For example, I set up a Twitter bot called [londonmapbot](https://twitter.com/londonmapbot) that currently tweets a random aerial image [every half-hour](https://github.com/matt-dray/londonmapbot/blob/76204c9ad78e268897535449ec1587347630ca66/.github/workflows/londonmapbot.yml#L5).\n\nThere's a bunch of webservices like [crontab.guru](https://crontab.guru/) that help you construct cron expressions. I wondered if I could build one in R. It's basically just a bunch of string handling and `if` statements, right? And while you're at it, why not offer translation the other way? You have a cron string and you want to 'translate' it to English. Could be helpful.\n\n## New development paradigm\n\nAn aside. Two things: the package is about time and I've been looking recently at [Repokémon](https://cheeaun.github.io/repokemon/), a site that tracks which Pokémon have GitHub repos named after them. \n\nTherefore the package is called Dialga,[^pokemon] named for [the 'temporal Pokémon'](https://bulbapedia.bulbagarden.net/wiki/Dialga_(Pok%C3%A9mon)), which is the legendary mascot of [the Pokémon Diamond game](https://en.wikipedia.org/wiki/Pok%C3%A9mon_Diamond_and_Pearl). The [hex logo](https://raw.githubusercontent.com/matt-dray/stickers/master/output/dialga_hex.png) uses colours from the game's sprite.\n\n![Dialga sprite from Pokémon Diamond (bulbapedia.bulbagarden.net)](resources/dialga.png){fig-alt=\"A sprite of dialga from the Diamond variant of the game.\" width=\"15%\" fig-align=\"left\"}\n\nWe've been here before. Consider [{safar6}](https://www.rostrum.blog/2021/01/04/safar6/), my [R package](https://github.com/matt-dray/safar6) that contains an R6-class object that lets you play a text version of the Safari Zone from Pokémon Red and Blue. Or a [Pokémon carousel widget with {slickr}](https://www.rostrum.blog/2020/02/05/slickr/). Or [Pokéballs in Super Smash Bros](https://www.rostrum.blog/2018/05/19/pokeballs-in-super-smash-bros/).\n\nI call this approach Pokémon-Driven Development (PDD). I think PDD has real promise in the development of pointless side-projects like this one. Use it wisely.\n\n## {dialga} demo\n\nThe package is [available on GitHub](https://www.github.com/matt-dray/dialga/); there are no plans for it to go on CRAN. You can use the {remotes} package to help you download {dialga} easily from the web.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"remotes\")  # if not already installed\nremotes::install_github(\"matt-dray/dialga\")\nlibrary(dialga)\n```\n:::\n\n\nIn the same vein as [the {r2eng} package](https://www.rostrum.blog/2020/11/14/hello-r2eng/), the two functions are named `r2cron()` and `cron2eng()`. This is pretty self-explanatory: `r2cron()` takes R inputs as integer vectors and spits out a cron string, and `cron2eng()` takes a valid cron string and prints out a readable English version.\n\nAs ever, it was banged-out in a  couple of days and I can't promise it's bug-free. [Let me know](https://github.com/matt-dray/dialga/issues) if you find anything broken horribly.\n\n<div class=\"tip\"> `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nThe package moved to v0.1 since this post was published. The update removed all dependencies, improved the documentation and set clipboard-copying behaviour to `FALSE` by default. Feel free to offer more improvements.\n\n</div>\n\n### A primer\n\nBut first, a quick demo on standard cron expressions. Their format is a string of five time-period 'slots' separated by spaces. The slots from left to right specify the minutes, hours, days of the month, months, and days of the week that you want to schedule your script to run.\n\nThe format required for the values in these slots can be expressed relatively easily as R code, which is what `r2cron()` uses as input. For example, this table shows cron-string formats for the minutes slot and the corresponding R integer vector for them:\n\n| Description | Cron | R |\n| :------ | :--- | :--- |\n| Every minute (minutes 0 to 59) | `*` | `0:59` |\n| A single minute (5) | `5` | `5` |\n| A consecutive sequence of minutes (1, 2 and 3) | `1-3` | `1:3` |\n| Several irregularly-spaced minutes (1, 15 and 17) | `1,15,17` | `c(1, 15, 17)` |\n| A sequence of minutes at regular intervals for the whole hour, starting with some value (every 15 minutes starting at minute 0) | `0/15` | `seq(0, 59, 15)` |\n\nThe same principles extend to the other time-period slots, but the ranges will obviously differ. For example, the hour slot can take values 1 to 23 (i.e. a 24-hour clock), while the days of the week are zero-indexed from 0 (Sunday) to 6 (Saturday). An asterisk is a special character meaning every unit of that time period, like every minute and every hour.\n\nSo 'every 30th minute past the hour' would be `\"30 * * * *\"`. The contrived example string from the opening of this post---`\"0/15 * 1,3,20 6 2,3\"`---translates as 'every 15 minutes starting from minute 0 of every hour, on the 1st, 3rd and 20th of June; and Mondays and Tuesdays'.\n\nTo help simplify things, the `r2cron()` function lets you specify each slot in turn as arguments. Each input is an R expression like in the table above. You don't have to worry about cron-specific symbols, you just provide the appropriate integer vector.\n\n### Simple example\n\nHow would you specify the 28th minute past 11PM every day with `r2cron()`? You pass the value 28 to the minutes argument and 23 to the hours argument. The resulting cron string has a `28` in the minutes slot and a `23` in the hours slot, as expected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- dialga::r2cron(\n  minutes = 28, \n  hours = 23  # 24-hour clock\n)\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"28 23 * * *\"\n```\n:::\n:::\n\n\nGreat, there's our cron string!\n\nYou may have noticed from the documentation that there's also a `clip` argument. This is for your convenience; when set to `TRUE`, the output will be copied to the clipboard for you to paste elsewhere, like into the YAML of a GitHub Action in my case. You will need separately to install {clipr} yourself from CRAN if you want this functionality in {dialga}.\n\nCool, but how do we know this worked? We could pass the cron string into `cron2eng()` to confirm it. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndialga::cron2eng(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCron string '28 23 * * *' means:\n  - minute(s) 28\n  - hour(s) 11PM\n  - every day(s) of the month\n  - every month(s)\n  - any day(s) of the week\n```\n:::\n:::\n\n\nThis text output isn't sophisticated, but it communicates the point. I've chosen to keep it simple by breaking it into bullet points, rather than wrestling the output into a potentially confusing single sentence.\n\nOf course, this means you could pipe these functions together to go from R to cron to English in one go.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magrittr)  # for %>%\n\ndialga::r2cron(minutes = 28, hours = 23) %>% \n  dialga::cron2eng()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCron string '28 23 * * *' means:\n  - minute(s) 28\n  - hour(s) 11PM\n  - every day(s) of the month\n  - every month(s)\n  - any day(s) of the week\n```\n:::\n:::\n\n\nIt might be nice to produce eventually an `eng2cron()` function that goes directly from a text description to the appropriate cron string, but I think that would be a fair amount of effort.\n\n### More complex example\n\nWe can see the flexibility of `r2cron()` with an unlikely scheduling request like 'every 20 minutes from the top of the hour (minute 0) of 3PM, 4PM and 5PM, on the 1st days of April, October and November, plus every weekend'. Again, we can specify these as R integer vectors. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- dialga::r2cron(\n minutes = seq(0, 59, 20),\n hours = 15:17,  # 24-hr clock\n days_month = 1,\n months = c(4, 10, 11),\n days_week = c(1, 7)  # Sunday is '1'\n)\n\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0/20 15-17 1 4,10,11 0,6\"\n```\n:::\n:::\n\n\nNote that the input to the `days_week` argument isn't zero-indexed even though the cron format is zero-indexed; Sunday is `1` in `r2cron()`, not `0`. This is to conform better to the fact that R doesn't typically zero-index things. `r2cron()` converts `days_week = 1` into `0` for this slot automatically.\n\nAnd of course, we can express the output of this complicated cron string in English:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndialga::cron2eng(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCron string '0/20 15-17 1 4,10,11 0,6' means:\n  - every 20 minute(s) starting from minute(s) 0\n  - hour(s) 3PM to 5PM\n  - day(s) of the month 1\n  - month(s) April, October and November\n  - and day(s) of the week Sunday and Saturday\n```\n:::\n:::\n\n\n### Warnings\n\nAs a courtesy, you'll be warned when unlikely dates arise. Some are impossible, like 31 September and others are rare, like 29 February. It's important that these are warnings and not errors though, since you might legitimately want the job to run on 31sts when available, or the 29 February only (i.e. every four years).\n\nThis example hits all the warnings:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndialga::r2cron(days_month = 28:31, months = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in dialga::r2cron(days_month = 28:31, months = 2): \n  Sure? There's no 31st in Feb, Apr, Jun, Sept nor Nov.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in dialga::r2cron(days_month = 28:31, months = 2): \n  Sure? There's no 30th in Feb.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in dialga::r2cron(days_month = 28:31, months = 2): \n  Sure? 29 Feb is only in leap years.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"* * 28-31 2 *\"\n```\n:::\n:::\n\n\n## R's scheduling tools\n\nOf course, {dialga} just handles strings and doesn't help you set up schedules. If on Unix/Linux, you can use [the {cronR} package](https://github.com/bnosac/cronR) to schedule tasks from R. The Windows alternative is [the {taskscheduleR} package](https://github.com/bnosac/taskscheduleR). These have their own tools, including a Shiny app, to help you with scheduling.\n\nAs for {dialga}, I'll probably use it every now and again to help set up a scheduled GitHub Action. Whatever its use, {dialga} is really just another exercise in package writing and another classic example of PDD (I hope you haven't forgotten that acronym already).\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2023-07-17 18:46:59 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] magrittr_2.0.3 dialga_0.1.1  \n\nloaded via a namespace (and not attached):\n [1] digest_0.6.31     fastmap_1.1.1     xfun_0.39         fontawesome_0.5.1\n [5] knitr_1.43.1      htmltools_0.5.5   rmarkdown_2.23    cli_3.6.1        \n [9] compiler_4.3.1    rstudioapi_0.15.0 tools_4.3.1       evaluate_0.21    \n[13] yaml_2.3.7        rlang_1.1.1       jsonlite_1.8.7    htmlwidgets_1.6.2\n```\n:::\n:::\n\n</details>\n\n[^pokemon]: © 1995-2021 Nintendo/Creatures Inc./GAME FREAK inc. Pokémon character names are trademarks of Nintendo.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}