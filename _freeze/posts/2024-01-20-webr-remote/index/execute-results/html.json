{
  "hash": "ca55607c645ce1615c6ff560df5e840d",
  "result": {
    "markdown": "---\ntitle: \"Pseudo-apps in the browser with WebR and Quarto?\"\ndate: 2024-01-20\nslug: webr-remote\nimage: resources/browser.png\ncategories:\n  - dialga\n  - r\n  - webR\nfilters:\n  - \"webr\"\n---\n\n\n![](resources/browser.png){fig-alt=\"Meme from Super Mario Movie. Top panel is the king penguin from the start of the film labelled 'R Stats' and saying 'do you yield?' Lower panel is Bowser labelled 'the browser', laughing and saying 'I do not', except the 'not' has been censored with a black bar.\" width=\"75%\"}\n\n## tl;dr\n\nA demo post to test out embedded [WebR chunks](https://docs.r-wasm.org/webr/latest/) that [source a non-CRAN R package](https://jamesgoldie.dev/writing/your-new-r-package-webr). Readers can edit and re-run code later in this blog post, entirely within the browser.\n\n## World Wide WebR\n\n[WebR](https://docs.r-wasm.org/webr/latest/) lets you run R code in a browser with no need for a server, thanks in large part to [George Stagg](https://gws.phd/)'s efforts. And these days you can embed editable R chunks into Quarto documents, thanks to [James Balamuta's quarto-webr extension](https://quarto-webr.thecoatlessprofessor.com/).\n\nI've [written before](https://www.rostrum.blog/posts/2023-03-16-webr-quarto/) about how powerful this could be for demonstrating how to use code. Readers can adjust the code themselves to better understand the approach without having to install anything.\n\nThis blog has been [ported to Quarto](https://www.rostrum.blog/posts/2023-08-26-cheerio-blogdown/) since I wrote that post, so it's now possible for me to include WebR chunks in my posts directly. \n\nEven better, it's now possible to install remote, non-CRAN packages for use in WebR sessions. Thanks to [James Goldie](https://jamesgoldie.dev/writing/your-new-r-package-webr) for his excellent blog post on how you can get this set up and running[^style]. That post should be your first port of call; I'm not going to repeat all of his advice here because you should read his post in the first instance.\n\nSo much of this blog could have benefited from the inclusion of WebR chunks and I hope to use it a lot more in future. The rest of this post is a chance for me to try out the process of using WebR and installing a GitHub-hosted package.\n\n## A 'pseudo-app'?\n\nIn some cases, WebR helps could help your blog post become a pseudo web app[^shinylive]. Load a package and provide some code that performs basic functionality, which readers can then fiddle with. If the package is simple enough, people may not need to install the package at all; they could just visit your blog post.\n\nI call it a 'pseudo' app because of the lack of control: in a Shiny app I can force you to select certain elements from a dropdown, or only show you certain outputs. With WebR and Quarto I can only demo functions and let you adjust the arguments; if you delete all the code, that's on you.\n\n### Example\n\nSo here's an example of what I mean. My [{dialga} package](https://www.rostrum.blog/posts/2021-04-10-dialga/) is very focused: its goal is to make it easier to compose [cron strings](https://en.wikipedia.org/wiki/Cron) programmatically. Provide numeric values to its arguments, convert them to cron strings and then convert those to an English interpretation. \n\nThe package is not on CRAN, but I've added it to [my R-universe](https://matt-dray.r-universe.dev/builds), thanks to the amazing [R-universe project](https://r-universe.dev/search/) by rOpenSci and particularly the mighty Jeroen Ooms[^runiverse]. This is crucial for sourcing the package with WebR.\n\n#### Setup\n\nFollowing [James G's post](https://jamesgoldie.dev/writing/your-new-r-package-webr), I first installed James B's WebR extension to [this blog's source](https://github.com/matt-dray/rostrum-blog-2) by running `quarto add coatless/quarto-webr` in the terminal. Within this post I added `filters: [\"webr\"]` to the YAML header and specified the `webr-r` engine for chunks that I wanted to let users interact with. \n\nI also added the hidden code chunk below, which installs in the background a WebR-ready version of the {dialga} package from R-universe when the page loads (as dictated by the `context: setup` instruction).\n\n````\n```{webr-r}\n#| context: setup\nwebr::install(\"dialga\", repos = \"https://matt-dray.r-universe.dev\")\n```\n````\n\nHow do you know this has worked? You may have noticed when you arrived that 'WEBR STATUS: ðŸŸ¡ Loading...' was shown at the top of the post before changing to 'ðŸŸ¢ Ready!' to indicate that the WebR chunks are ready to use.\n\n#### Run\n\nNow let's use the {dialga} package.\n\nUse `r2cron()` to convert values into a cron string. The integer values for each argument below show the full range of possibilities, which you can adjust. The output will be `* * * * *`, which means 'every minute'. Start by running the code with the 'Run Code' button.\n\n```{webr-r}\n#| context: setup\nwebr::install(\"dialga\", repos = \"https://matt-dray.r-universe.dev\")\n```\n```{webr-r}\n(cron_string <- dialga::r2cron(\n  minutes    = 0L:59L,\n  hours      = 0L:23L,\n  days_month = 1L:31L,\n  months     = 1L:12L,\n  days_week  = 1L:7L\n))\n```\n\nLet's say you wanted 'every minute past hour 12' instead. Change the `hours` argument to `12` and press the 'Run Code' button again. And so on as you please.\n\nFor completeness, you can convert the output above into English with `cron2eng()`.\n\n```{webr-r}\ndialga::cron2eng(cron = cron_string)\n```\n\nIn other words... if you don't want to install {dialga} you can just visit this page and adjust the WebR chunks! \n\nThat, or you can use one of the already-existing, excellent sites like [crontab.guru](https://crontab.guru/), lol. Your call. \n\nRegardless, I think this is a good indication of how a WebR post can help readers understandâ€”or simply just useâ€”your package in a demonstrative blog post.\n\n<div class=\"tip\"> \n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>`{=html} <b>Note</b>\n\nAs a further example, I've now added a WebR chunk to [the 'Simple procedural dungeons in R' post](https://www.rostrum.blog/posts/2022-05-01-dungeon/) and may well add more to earlier posts that would have benefited from this technology had it existed at the time.\n\n</div>\n\n## Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2024-04-09 22:46:07 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.2        \n [5] tools_4.3.1       htmltools_0.5.8   rstudioapi_0.16.0 yaml_2.3.8       \n [9] rmarkdown_2.26    knitr_1.45        jsonlite_1.8.8    xfun_0.43        \n[13] digest_0.6.35     rlang_1.1.3       fontawesome_0.5.2 evaluate_0.23    \n```\n:::\n:::\n\n</details>\n\n[^style]: I note also that James G has clearly written some CSS on his blog to make the WebR code blocks match the theme of his blog. I haven't done this yet at time of writing, so the chunks do a look a bit conspicuous.\n[^shinylive]: Although these days you can also use [{shinylive}](https://posit-dev.github.io/r-shinylive/) to write a Shiny app that can run entirely in the browser! I wrote about this in [a previous post](https://www.rostrum.blog/posts/2023-10-08-govspeakify-tables/).\n[^runiverse]: There really isn't enough space in this post to talk about the R-universe, but you can [learn more on the rOpenSci site](https://ropensci.org/r-universe/).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}