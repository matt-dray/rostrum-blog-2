{
  "hash": "0b88a04854d2603f5bb8acd8299e8ea6",
  "result": {
    "markdown": "---\ntitle: \"Card games with {shiny} and {sortable}\"\ndate: 2024-10-25\nslug: \"not-balatro\"\nimage: resources/cards.gif\ncategories:\n  - games\n  - r\n  - shiny\n  - shinylive\n  - sortable\n---\n\n\n![I sunk your battleship!](resources/cards.gif){fig-align=\"left\" fig-alt=\"Two rows of playing cards labelled 'pool' and 'hand'. Buttons are pressed to order the cards by suit and then by rank. Cards are dragged from the pool to the hand. An ace is dragged and the text updates from 'no hand' to 'high card'. Another ace and it changes to 'a pair'. A 'draw' button is pressed and two new cards are added to the pool. The pool is ordered again by rank. Then two queens are added to the hand and the text changes to 'two pair'.\" width='100%'}\n\n## tl;dr\n\nUse [{sortable}](https://rstudio.github.io/sortable/) in a [{shiny}](https://shiny.posit.co/) app to build card games, maybe? I mocked up a starting point and [made it available on the web](https://matt-dray.github.io/not-balatro/) with [{shinylive}](https://posit-dev.github.io/r-shinylive/).\n\n## Balatro\n\nLocalThunk[^r]—the anonymous creator of the hit poker-inspired roguelike[^roguelike] videogame _Balatro_—revealed recently that 11,000 _years_ of gameplay have been sunk into the game. \n\nThe average productivity of the universe has continued to drop now that the game is available on mobile. I am one of the suckers that made the purchase.\n\nAs a result, I wondered how viable a card game in R might be. Not just a simple blackjack simulator in the console, but a drag-and-droppable interface in the browser.\n\nIt must be possible, since [R is a game engine (fight me)](https://www.rostrum.blog/posts/2023-04-02-splendid-r-games/).\n\n## Badlatro\n\nAnd so I began experimenting.\n\nI wanted to use {shiny} and existing R packages and to avoid writing much JavaScript and CSS. After all, it's hard to fit in this frivolity after I've finished grinding all day at work and then grinding all night on _Balatro_.\n\nLuckily, the [{sortable}](https://rstudio.github.io/sortable/) package does most of the hard work. The package from Andrie, Barrett and Kent wraps the [SortableJS](https://sortablejs.github.io/Sortable/) library and lets you drag list elements around, including into other lists.\n\nTypically, you would use {sortable} to drag little boxes of text. The order can then be read to record preference or perhaps as part of a quiz. But now I've hijacked it to show little images of cards that you can drag between a 'pool' (randomly drawn cards) and a 'hand' (cards selected by the user).\n\n## App\n\nYou can check out [the source on GitHub](https://github.com/matt-dray/not-balatro) and [find the app deployed online](https://matt-dray.github.io/not-balatro/), thanks to {shinylive} and GitHub Pages. I've embedded it below as well[^joker] (will take a moment to load). I recommend using this on desktop for now, rather than mobile.\n\n<iframe width='800' height='660' src='https://matt-dray.github.io/not-balatro/' title='not-balatro'></iframe>\n\n## Features\n\nSo far it doesn't do much, but it does enough to prove the concept. Here's some notes on a few of the technicals.\n\n### Counting cards\n\nI iterated over all suits and ranks with [{magick}](https://docs.ropensci.org/magick/) to apply text and symbols to a blank PNG image. I then read the 52 cards into a `shiny::tagList()` and passed that to the `label` argument of `sortable::list()`. From there, the images could be matched to sampled card names and displayed in the app. This is slightly off-label compared to 'normal' use of the package, which generally involves providing text rather than images.\n\n### Drag 'til you drop\n\n{sortable} has a nice feature where you can drag list elements _between_ lists within 'buckets'. I opted instead to use two `rank_list()`s that shared a `group` name in their `options` argument. This meant I could restrict the list size (8 cards in the pool, 5 in hand), thanks to some JavaScript from Barrett in a response to [a Posit community post](https://forum.posit.co/t/shiny-sortable-how-to-limit-number-of-items-that-can-be-dropped/69233/2).\n\n### A bit flushed\n\nDetecting poker hands is tricky because you want to recognise that two jacks and three kings is a full house, not a pair of jacks or a three-of-a-kind, for example. I also made things harder by wanting to evaluate poker hands on the fly rather than when the user submits the hand. \n\nI read about lots of very clever algorithms to do this. But I basically just brute-forced it, lol. it's basically `if` statements that evaluate and return strongest hands first. So the function will assess a royal flush (i.e. ace, king, queen jack and 10 of the same suit) and confirm it before it tries to assess the hand for a more basic straight (consecutive ranks of any suit) or a flush (any suit of non-consecutive rank).\n\n### Hit the deck\n\nThe deck is stored in 'dynamic memory' as a `reactieValues()` element. When cards are drawn, they're removed from the deck and can't be redrawn. This means we can instigate a 'draw' button that can add previously unseen cards into the pool's empty slots. Of course, we can take the length of the deck and present this back to the user as well.\n\n## Improvements\n\nThere's many features that would improve the demo app. Below are some examples: one seems like it's not possible, one won't add that much to what I've learnt so far, one is obvious and one is just... bad programming.\n\n### Stop 'n' swop\n\nIt's satisfying to pick up a card and drag and drop it somewhere else within the pool or hand. This action feels how it would when sorting real cards in your real hand. I would like, however, to be able to _swap_ cards _between_ the pool and hand. Especially if you change your mind about the hand you're building as new cards are drawn. As far as I can tell, SortableJS allows `swap = TRUE` within each rank list and if they are part of the same `group` then you can swap between them. I haven't yet found a way to allow swapping to only happen when moving cards between lists, however.\n\n### Diss card\n\nThe most awkward thing about having a draw 'pool' and a 'hand' is that there's no natural way to discard. I haven't found a solution for earmarking cards in the pool or hand to discard them. As it stands, you have to drag the card somewhere for an action to be performed on it. The answer might be to drag these cards to a third area, where they're binned. Compare this to a game like _Balatro_, where you first select cards in your hand and then click a button to either play or discard them.\n\n### U and I\n\nOf course, as a proof of concept, it means that I haven't paid much attention to the user interface and experience. You can imagine making prettier cards, a nice green baise to mimic a poker table and even some animations to show cards being dealt. For now, I think the plainness is a good indicator that it's a demo.\n\n### Card trick\n\nOh yeah, haha, sometimes the cards disappear. It can happen when you drag from the pool to the hand, then back again and hit the 'rank' or 'suit' sorting buttons. We know that the card returns correctly to the pool by checking the `inputs$pool_list` object, but there is some issue with displaying the image, maybe? This is the only true bug that needs fixing, but I'd rather just write this blog post and deal with it later[^mo].\n\n## A gamble\n\nObviously this isn't yet a 'game'. There's a few ways this could go:\n\n* remake _Balatro_ in R (absolutely no chance)\n* make a small simulator of something like [video poker](https://en.wikipedia.org/wiki/Video_poker) (too basic?)\n* create a new, simple game to chase high scores with combos of poker hands, discards and chip 'bets', perhaps incorporating some _Balatro_-inspired joker-activated bonuses or wild cards [like in _Dungeons and Degenerate Gamblers_](https://en.wikipedia.org/wiki/Dungeons_%26_Degenerate_Gamblers) (might actually be fun)\n* do nothing (appealing option)\n\nFeel free to chip (HA HA HA) in with your ideas.\n\n### Environment {.appendix}\n\n<details><summary>Session info</summary>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nLast rendered: 2024-10-25 20:59:16 BST\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.4.0 (2024-04-24)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.0    fastmap_1.2.0     cli_3.6.3.9000   \n [5] tools_4.4.0       htmltools_0.5.8.1 rstudioapi_0.16.0 yaml_2.3.10      \n [9] rmarkdown_2.28    knitr_1.48        jsonlite_1.8.9    xfun_0.48        \n[13] digest_0.6.37     rlang_1.1.4       evaluate_1.0.1   \n```\n:::\n:::\n\n</details>\n\n[^r]: Apparently LocalThunk's name [was inspired partly by R](https://youtu.be/iaIu0PT8n_o?t=47).\n[^roguelike]: If you've been here before, you know I've toyed around with roguelikes in R with the concept packages [{r.oguelike}](https://github.com/matt-dray/r.oguelike/) and [{tilebased}](https://github.com/matt-dray/tilebased).\n[^mo]: This is basically the entire modus operandi of this blog, lol.\n[^joker]: Psst, click the joker card at the bottom of the app to activate 'dev mode'.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}